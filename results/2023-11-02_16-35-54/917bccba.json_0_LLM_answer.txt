LLM prompt:
train input:
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0
0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0
0, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0
0, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0
3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3
0, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0
0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0
3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3
0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0
0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0
0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0
0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0
0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0
0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0
0, 0, 1, 0, 0, 8, 0, 0, 1, 0, 0, 0
0, 0, 1, 0, 0, 8, 0, 0, 1, 0, 0, 0
8, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8
0, 0, 1, 0, 0, 8, 0, 0, 1, 0, 0, 0
0, 0, 1, 0, 0, 8, 0, 0, 1, 0, 0, 0
0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0
8, 8, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8
0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0
0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0
0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0
0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0
0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0
0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0
0, 0, 0, 0, 3, 0, 4, 0, 3, 0, 0, 0
4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4
0, 0, 0, 0, 3, 0, 4, 0, 3, 0, 0, 0
0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0
0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4
0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0
0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0
0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0
0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
End of example.
test input:
0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0
0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0
0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0
6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6
0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0
0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0
0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0
6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 6, 6
0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0
0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0
\end{code}

Comment: I'm not sure what you mean by "the code is too long". You can post it as an answer to your own question if you want.

Answer: \section{[MATL](https://github.com/lmendo/MATL), 5 bytes}

\begin{code}
YX&Z+
\end{code}

Input and output are in the same format as [@Jonathan Allan's Jelly answer](https://codegolf.stackexchange.com/a/92222). Try it at [\strong{Matlab Online}](http://matl.tryitonline.net/#dqwkCQ) (you need to copy-paste the test cases from above into the online interpreter).

\section{Explanation}

Considering a single row `r` of the input matrix, this operation does the following:
\begin{itemize}
\item Compute the cumulative sum of `r`, storing the result in a temporary variable `t`. This gives a vector with the number of consecutive ones starting at each position. For instance, for `r = [0 1 1 1]`, we get `[0 1 2 3]`.
\item Find the maximum value in `t`, which will be the length of the longest run of ones. Store that value in another temporary variable `u`. In our example, `u=3`.
\item Add one to all values in `t`, so that they become the positions where the runs end. In our example, we now have `[1 2 3 4]`.
\item Use `u` to index those positions, obtaining the last element of each run. In our example, we now have `[0 1 1 1]`.
\item Finally, add one to all elements in the resulting array, giving the desired output. In our example, we finally have `[1 2 2 2]`
\end{itemize}
################################################################

Solution:
0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0
6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6
0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0

