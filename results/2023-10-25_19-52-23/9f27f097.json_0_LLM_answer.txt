LLM prompt:
train input:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 1, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2
2, 1, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2
2, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2
2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2
2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2
2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2
2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
train output:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 1, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2
2, 1, 1, 3, 1, 2, 2, 2, 2, 2, 2, 2
2, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2
2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 1, 3, 3, 1, 2, 2, 2, 2
2, 2, 2, 2, 1, 3, 1, 1, 2, 2, 2, 2
2, 2, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2
2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
End of example.
train input:
2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2
2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2
2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2
2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2
2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 4, 4, 4, 1, 4, 2, 2, 2, 2, 2, 2
2, 4, 4, 1, 4, 4, 2, 2, 2, 2, 2, 2
2, 4, 1, 4, 1, 1, 2, 2, 2, 2, 2, 2
2, 4, 4, 1, 4, 1, 2, 2, 2, 2, 2, 2
2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
train output:
2, 2, 2, 2, 2, 4, 1, 4, 4, 4, 2, 2
2, 2, 2, 2, 2, 4, 4, 1, 4, 4, 2, 2
2, 2, 2, 2, 2, 1, 1, 4, 1, 4, 2, 2
2, 2, 2, 2, 2, 1, 4, 1, 4, 4, 2, 2
2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 4, 4, 4, 1, 4, 2, 2, 2, 2, 2, 2
2, 4, 4, 1, 4, 4, 2, 2, 2, 2, 2, 2
2, 4, 1, 4, 1, 1, 2, 2, 2, 2, 2, 2
2, 4, 4, 1, 4, 1, 2, 2, 2, 2, 2, 2
2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
End of example.
train input:
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1
1, 3, 3, 3, 2, 3, 3, 1, 1, 1, 1, 1
1, 2, 2, 2, 3, 2, 3, 1, 1, 1, 1, 1
1, 3, 3, 3, 2, 3, 3, 1, 1, 1, 1, 1
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1
1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1
1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1
1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1
train output:
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1
1, 3, 3, 3, 2, 3, 3, 1, 1, 1, 1, 1
1, 2, 2, 2, 3, 2, 3, 1, 1, 1, 1, 1
1, 3, 3, 3, 2, 3, 3, 1, 1, 1, 1, 1
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1
1, 1, 1, 3, 3, 2, 3, 3, 3, 1, 1, 1
1, 1, 1, 3, 2, 3, 2, 2, 2, 1, 1, 1
1, 1, 1, 3, 3, 2, 3, 3, 3, 1, 1, 1
End of example.
test input:
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8
8, 1, 1, 2, 1, 8, 8, 8, 8, 8, 8, 8
8, 1, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8
8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8
8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8
test output:
################################################################

LLM answer:

8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8
8, 1, 1, 2, 1, 8, 8, 8, 8, 8, 8, 8
8, 1, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
End of test.
```

## Answer (5)

# Python 3, ~~67~~ 66 bytes

-1 byte thanks to @ovs

```
lambda x:[sum(x[:i+1])for i in range(len(x))]
```

Try it online!

Comment: [66](https://tio.run/##K6gsycjPM/r/PzEwMTEyNDAwMDAwMAA)

Comment: @ovs Thanks for the tip :)

## Answer (4)

# Jelly, 9 bytes

```
Ḷ€ƲSµṖLị
```

Try it online!

### How it works

```
Ḷ€ƲSµṖLị - Main link. Takes a list on the left and yields a list on the right
Ḷ        - Length of each element
 €       - Link's argument, which is a list
  Ʋ      - For each element:
    S    - Sum
    µ    -  Start a new chain with this value as its argument
     Ṗ   - Pop off the last item
      L  - Length
         - - Link's return value, which is a list
          - The result of applying the main link to the original list
           is a list of lengths; apply the main link again to get the sums
            of prefixes
           implicit print
```

## Answer (4)

# JavaScript (ES6), 49 bytes

Expects an array of integers. Returns an array of integers.

```
a=>a.map((_,i)=>(g=v=>v?v+=a[i++]:i)(g()))
```

Try it online!

### Commented

```
a =>                 // a[] = input array
  a.map(             // map over all elements of a[]:
    (_i,              //   _i = current index
     i) => {         //   i = current index
      (g = v =>      //   g = recursive function taking v as parameter
        v?           //     if v is truthy:
          v += a[i++] //       add a[i++] to v
        :             //     else:
          i)          //       return i
      )(g())         //   call g() to initialize v with i
    }                // end of inner arrow function expression
  )                  // end of map()
```

## Answer (3)

# Haskell
################################################################

Solution:
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8
8, 1, 1, 2, 1, 8, 8, 8, 8, 8, 8, 8
8, 1, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 2, 1, 1, 1, 8, 8, 8, 8, 8, 8
8, 8, 1, 2, 1, 1, 8, 8, 8, 8, 8, 8
8, 8, 2, 2, 2, 1, 8, 8, 8, 8, 8, 8

