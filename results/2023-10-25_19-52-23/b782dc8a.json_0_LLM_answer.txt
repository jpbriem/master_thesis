LLM prompt:
train input:
8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8, 0
0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 8, 0, 8, 0
8, 8, 8, 0, 8, 0, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 8, 8, 0, 8, 0
8, 0, 0, 0, 8, 0, 8, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0
8, 0, 8, 8, 8, 0, 8, 8, 0, 8, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8, 8, 8, 0
8, 0, 8, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0
8, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 0
8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 0, 0, 8, 0
8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 0, 8, 0
0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0
0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0
train output:
8, 3, 2, 3, 2, 3, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 2, 8, 8, 0, 8, 8, 8, 0
3, 2, 8, 8, 8, 2, 3, 2, 3, 2, 3, 8, 0, 0, 0, 8, 3, 8, 0, 0, 8, 2, 8, 0
8, 8, 8, 0, 8, 3, 8, 8, 8, 8, 2, 8, 8, 8, 0, 8, 2, 8, 8, 8, 8, 3, 8, 0
8, 0, 0, 0, 8, 2, 8, 0, 0, 8, 3, 2, 3, 8, 0, 8, 3, 2, 3, 2, 3, 2, 8, 0
8, 0, 8, 8, 8, 3, 8, 8, 0, 8, 2, 8, 8, 8, 0, 8, 8, 3, 8, 8, 8, 8, 8, 0
8, 0, 8, 2, 3, 2, 3, 8, 0, 8, 3, 8, 0, 0, 0, 0, 8, 2, 8, 0, 0, 0, 0, 0
8, 0, 8, 8, 8, 8, 8, 8, 0, 8, 2, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 0
8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 8, 0
8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 3, 8, 0
0, 8, 0, 8, 0, 8, 0, 8, 3, 2, 3, 8, 0, 0, 0, 0, 8, 2, 8, 0, 8, 2, 8, 0
0, 8, 8, 8, 0, 8, 8, 8, 2, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0
End of example.
train input:
0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8
8, 8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 8, 0, 8
0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 8, 8
0, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8
8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0, 8, 0, 8
8, 0, 0, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 8
8, 8, 8, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0
0, 0, 0, 8, 1, 8, 8, 8, 8, 8, 0, 8, 8, 0
8, 8, 0, 8, 4, 1, 0, 0, 0, 0, 0, 0, 8, 0
0, 8, 0, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 0
0, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8
train output:
0, 0, 0, 8, 0, 0, 0, 8, 1, 4, 1, 4, 1, 8
8, 8, 0, 8, 8, 8, 0, 8, 4, 8, 8, 8, 4, 8
0, 8, 0, 0, 0, 8, 0, 8, 1, 8, 0, 8, 8, 8
0, 8, 8, 8, 8, 8, 0, 8, 4, 8, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 1, 8, 8, 8, 0, 8
8, 8, 8, 8, 8, 8, 0, 8, 4, 1, 4, 8, 0, 8
8, 4, 1, 4, 1, 8, 0, 8, 8, 8, 1, 8, 0, 8
8, 8, 8, 8, 4, 8, 0, 0, 0, 8, 4, 8, 0, 0
0, 0, 0, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 0
8, 8, 0, 8, 4, 1, 4, 1, 4, 1, 4, 1, 8, 0
1, 8, 0, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 0
4, 8, 8, 8, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0
1, 4, 1, 4, 1, 8, 0, 8, 8, 8, 8, 8, 8, 8
End of example.
test input:
8, 8, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 8, 0, 8, 8, 8, 8, 4, 8, 8, 8, 8, 8, 8, 8
0, 8, 0, 0, 0, 0, 4, 3, 8, 0, 0, 0, 0, 0, 8
0, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8
0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0
8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 0, 8, 0, 8
0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8
8, 8, 8, 0, 8, 8, 8, 0, 8, 0, 8, 0, 8, 8, 8
0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0
8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8
8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8
8, 8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8
0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8
8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8
8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

8, 8, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 8, 0, 8, 8, 8, 8, 4, 8, 8, 8, 8, 8, 8, 8
0, 8, 0, 0, 0, 0, 4, 3, 8, 0, 0, 0, 0, 0, 8
0, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8
0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0
8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 0, 8, 0, 8
0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8
8, 8, 8, 0, 8, 8, 8, 0, 8, 0, 8, 0, 8, 8, 8
0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0
8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8
8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8
8, 8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8
0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8
8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8
8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0
End of example.
```

## Answer (5)

# Python 3, ~~67~~ 66 bytes

-1 byte thanks to @ovs

```
lambda x:[sum(map(int,x))for i in range(len(x))]
```

Try it online!

Comment: `map(int,x)` is shorter than `list(map(int,x))`.

Comment: @ovs Thanks for the tip! I've updated my answer accordingly.

## Answer (4)

# Jelly, 9 bytes

```
Ḷ€ƇṖ⁾8ẠỤḢ
```

A monadic link accepting a list of lists of digits which yields a list of integers.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€ƇṖ⁾8ẠỤḢ - Link: list of lists of digits
Ḷ€         -   -     e.g. [[1,2], [3]] -> [[1], [2], [3]]
   ⁾8      -                          "8"
  Ƈ        filter keep those where...
  Ṗ      ...the last element is not an '8'
            e.g. [[1,2], [3]] -> [[1], [2]]
           and then...
  Ạ       all are truthy
            e.g. [[1], [2]]
################################################################

Solution:
8, 8, 4, 8, 0, 0, 8, 3, 4, 3, 4, 3, 4, 3, 4
0, 8, 3, 8, 8, 8, 8, 4, 8, 8, 8, 8, 8, 8, 8
0, 8, 4, 3, 4, 3, 4, 3, 8, 0, 0, 0, 0, 0, 8
0, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8
0, 0, 0, 0, 0, 0, 8, 3, 4, 3, 8, 0, 8, 0, 0
8, 8, 8, 8, 8, 0, 8, 8, 8, 4, 8, 0, 8, 0, 8
4, 3, 4, 3, 8, 0, 0, 0, 8, 3, 8, 0, 8, 0, 8
8, 8, 8, 4, 8, 8, 8, 0, 8, 4, 8, 0, 8, 8, 8
0, 0, 8, 3, 4, 3, 8, 0, 8, 3, 8, 0, 0, 0, 0
8, 0, 8, 8, 8, 4, 8, 8, 8, 4, 8, 8, 8, 0, 8
8, 0, 0, 0, 8, 3, 4, 3, 4, 3, 4, 3, 8, 0, 8
8, 8, 8, 0, 8, 4, 8, 8, 8, 8, 8, 8, 8, 0, 8
4, 3, 8, 0, 8, 3, 8, 0, 0, 0, 0, 0, 0, 0, 8
8, 4, 8, 8, 8, 4, 8, 0, 8, 8, 8, 8, 8, 8, 8
8, 3, 4, 3, 4, 3, 8, 0, 8, 0, 0, 0, 0, 0, 0

