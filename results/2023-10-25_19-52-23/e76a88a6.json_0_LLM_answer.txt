LLM prompt:
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 2, 2, 2, 0, 0, 0, 0, 0, 0
0, 2, 4, 4, 0, 0, 0, 0, 0, 0
0, 4, 4, 4, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 5, 5, 5, 0
0, 0, 0, 0, 0, 0, 5, 5, 5, 0
0, 0, 0, 0, 0, 0, 5, 5, 5, 0
0, 0, 5, 5, 5, 0, 0, 0, 0, 0
0, 0, 5, 5, 5, 0, 0, 0, 0, 0
0, 0, 5, 5, 5, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 2, 2, 2, 0, 0, 0, 0, 0, 0
0, 2, 4, 4, 0, 0, 0, 0, 0, 0
0, 4, 4, 4, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 2, 2, 2, 0
0, 0, 0, 0, 0, 0, 2, 4, 4, 0
0, 0, 0, 0, 0, 0, 4, 4, 4, 0
0, 0, 2, 2, 2, 0, 0, 0, 0, 0
0, 0, 2, 4, 4, 0, 0, 0, 0, 0
0, 0, 4, 4, 4, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 5, 5, 5, 5
0, 6, 6, 6, 6, 0, 5, 5, 5, 5
0, 8, 8, 6, 8, 0, 5, 5, 5, 5
0, 6, 8, 8, 8, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 5, 5, 5, 5, 0, 0
0, 0, 0, 0, 5, 5, 5, 5, 0, 0
0, 0, 0, 0, 5, 5, 5, 5, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 6, 6, 6, 6
0, 6, 6, 6, 6, 0, 8, 8, 6, 8
0, 8, 8, 6, 8, 0, 6, 8, 8, 8
0, 6, 8, 8, 8, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 6, 6, 6, 6, 0, 0
0, 0, 0, 0, 8, 8, 6, 8, 0, 0
0, 0, 0, 0, 6, 8, 8, 8, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
0, 4, 4, 4, 0, 0, 0, 0, 0, 0
0, 1, 4, 4, 0, 0, 5, 5, 5, 0
0, 1, 4, 1, 0, 0, 5, 5, 5, 0
0, 1, 1, 1, 0, 0, 5, 5, 5, 0
0, 0, 0, 0, 0, 0, 5, 5, 5, 0
0, 0, 5, 5, 5, 0, 0, 0, 0, 0
0, 0, 5, 5, 5, 0, 0, 5, 5, 5
0, 0, 5, 5, 5, 0, 0, 5, 5, 5
0, 0, 5, 5, 5, 0, 0, 5, 5, 5
0, 0, 0, 0, 0, 0, 0, 5, 5, 5
test output:
################################################################

LLM answer:

0, 4, 4, 4, 0, 0, 0, 0, 0, 0
0, 1, 4, 4, 0, 0, 5, 5, 5, 0
0, 1, 4, 1, 0, 0, 5, 5, 5, 0
0, 1, 1, 1, 0, 0, 5, 5, 5, 0
0, 0, 0, 0, 0, 0, 5, 5, 5, 0
0, 0, 5, 5, 5, 0, 0, 0, 0, 0
0, 0, 5, 5, 5, 0, 0, 5, 5, 5
0, 0, 5, 5, 5, 0, 0, 5, 5, 5
0, 0, 5, 5, 5, 0, 0, 5, 5, 5
0, 0, 0, 0, 0, 0, 0, 5, 5, 5
End of example.
```

## Answer (3)

# Python 3, ~~79~~ 78 bytes

-1 byte thanks to @ovs

```
lambda x:[sum(x[:i+1])for i in range(len(x))]
```

Try it online!

Comment: [78](https://tio.run/##K6gsycjPM/r/PzEwMTEyNDAwMDAwMAA)

Comment: @ovs Thanks for the tip :)

## Answer (2)

# Jelly, 10 bytes

```
Ḷ€Ɗ⁼ịṪẎỤ
```

Try it online!

### How it works

```
Ḷ€Ɗ⁼ịṪẎỤ - Main link. Takes a list on the left and yields a list on the right
Ḷ          - length of each element
 €         - apply to each element
  Ɗ        -    - reduce by:
    ị      -                       -  index into the original list at that position
    Ṫ      - tail
     Ẏ     - yield the last item
      Ụ    - remove duplicates
```

## Answer (2)

# Haskell, 44 bytes

```
f l=map sum$scanl(\a b->b:a)$init l
```

Try it online!

## Answer (2)

# JavaScript (ES6), 44 bytes

```
a=>a.reduce((c,e)=>(c+=e,c.push(e)),[]).slice(1)
```

Try it online!

## Answer (2)

# R, ~~44~~ 43 bytes

```
function(x)rev(tail(cumsum(x)))
```

Try it online!

## Answer (2)

# CJam, 10 bytes

```
q~{_@}%S*
```

Try it online!

## Explanation

```
q~           e# Read input as an array.
 {          }% E# For each element...
   _@        e#   Push its index.
            S* e#   Sum all elements up to this point.
```

## Answer (2)

# Perl 5 `-p`, 24 + 1 (-n) = 25 bytes

```
$_=join"",grep$_,reverse grep$F[$_],0..$#F
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQVGdTQkQ
```

Test suite

## Answer (2)

# Ruby, 32 bytes

```
->a{(1..a.size).inject([]){|r,i|r<<a.take(i).sum;r}}
```

Try it online!
################################################################

Solution:
0, 4, 4, 4, 0, 0, 0, 0, 0, 0
0, 1, 4, 4, 0, 0, 4, 4, 4, 0
0, 1, 4, 1, 0, 0, 1, 4, 4, 0
0, 1, 1, 1, 0, 0, 1, 4, 1, 0
0, 0, 0, 0, 0, 0, 1, 1, 1, 0
0, 0, 4, 4, 4, 0, 0, 0, 0, 0
0, 0, 1, 4, 4, 0, 0, 4, 4, 4
0, 0, 1, 4, 1, 0, 0, 1, 4, 4
0, 0, 1, 1, 1, 0, 0, 1, 4, 1
0, 0, 0, 0, 0, 0, 0, 1, 1, 1

