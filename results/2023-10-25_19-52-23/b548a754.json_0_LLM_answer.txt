LLM prompt:
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0
0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0
0, 3, 2, 2, 2, 3, 0, 0, 0, 0, 8
0, 3, 2, 2, 2, 3, 0, 0, 0, 0, 0
0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3
0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3
0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 8, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 1, 0
0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 1, 0
0, 0, 1, 6, 6, 6, 6, 6, 6, 6, 1, 0
0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of test.
```

## Answer (5)

# Python 3, ~~79~~ 78 bytes

```
lambda x:[sum(map(int,x))for i in range(len(x)-1)]+[sum(i)+sum(j)for j in zip(*x[:-1])]
```

Try it online!

Comment: [78](https://tio.run/##K6gsycjPM/r/PzEwMTEyNDAwMDAwMAA "Python 3 – Try It Online")

Comment: @JonathanAllan Thanks for the tip :)

## Answer (4)

# Jelly, 11 bytes

```
Ḷ€Ɗ⁼ịṪẎỤḢṖ
```

Try it online!

### How it works

```
Ḷ€Ɗ⁼ịṪẎỤḢṖ  Main link. Argument: A (list of lists)

Ḷ               Yield all indices from 0 to length(A).
 €              For each index I in this list:
   Ɗ            Map over the following chain:
    ⁼           Compare equality with...
     ị         ...the value at index I in A.
      Ṫ         Take the last element of that list.
       Ẏ        Flatten the resulting list of lists into a single list.
        Ụ       Unique values.
         Ḣ      Head; take the first element of this list.
          Ṗ     Pop; remove the first element of this list.
```

## Answer (4)

# JavaScript (ES6), 60 bytes

Expects an array of arrays as input and returns an array of integers.

```
a=>a.reduce((c,b)=>(c+=b.reduce((d,e)=>d+e)),0)
```

Try it online!

--------------------

# JavaScript (ES6), 61 bytes

Expects an array of strings as input and returns an array of integers.

```
a=>a.map(v=>(v=v.split('')).reduce((c,e)=>c+parseInt(e)))
```

Try it online!

## Answer (3)

# Haskell,
################################################################

Solution:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 4, 4, 4, 6, 0, 0, 0, 0, 0
0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0

