Input token: 331
Output token: 729
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', 'h', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']
output: ['.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.']

Test case:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/
public class Solution {
    public String[] updateBoard(String[] board, int[] click) {
        if (board == null || board.length < 0) return new String[0];
        char[][] chars = new char[board.length][board[0].length()];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length(); j++) {
                chars[i][j] = board[i].charAt(j);
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(click[0]);
        queue.offer(click[1]);
        while (!queue.isEmpty()) {
            int x = queue.poll(), y = queue.poll();
            if (chars[x][y]!= 'M') {
                int count = getCount(chars, x, y);
                if (count > 0) {
                    chars[x][y] = (char)(count + '0');
                } else {
                    chars[x][y] = 'B';
                    for (int i = -1; i <= 1; i++) {
                        for (int j = -1; j <= 1; j++) {
                            if (i == 0 && j == 0) continue;
                            int nx = x + i, ny = y + j;
                            if (nx >= 0 && nx < chars.length && ny >= 0 && ny < chars[0].length) {
                                queue.offer(nx);
                                queue.offer(ny);
                            }
                        }
                    }
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < chars.length; i++) {
            for (int j = 0; j < chars[i].length; j++) {
                sb.append(chars[i][j]);
            }
            sb.append(" ");
        }
        String[] res = sb.toString().split("\\s+");
        return res;
    }

    private int getCount(char[][] chars, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                if (i == 0 && j == 0) continue;
                int nx = x + i, ny = y + j;
                if (nx >= 0 && nx < chars.length && ny >= 0 && ny < chars[0].length) {
                    if (chars[nx][ny] == 'M') count++;
                }
            }
        }
        return count;
    }
}
################################################################

Solution:
['.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.']

