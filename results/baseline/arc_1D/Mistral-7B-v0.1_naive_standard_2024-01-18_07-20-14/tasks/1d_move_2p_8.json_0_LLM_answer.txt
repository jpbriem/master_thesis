Input token: 221
Output token: 189
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', '.', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', '.', '.']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.']

Test case:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']
*/
public class ReplaceSpace {
    public static void main(String[] args) {
        String str = "We are happy.";
        System.out.println("Input string is : "+str);
        replaceSpaces(str);
    }

    private static void replaceSpaces(String str){
        StringBuilder sb = new StringBuilder();
        for (int i=0;i<str.length();i++){
            if (str.charAt(i) =='')
                sb.append("%20");
            else
                sb.append(str.charAt(i));
        }
        System.out.println("Output string is : "+sb.toString());
    }
}
################################################################

Solution:
['.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.']

