Input token: 390
Output token: 359
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'e', '.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', '.', '.', '.', 'e', 'e', 'e']
output: ['.', '.', '.', 'i', '.', '.', 'b', 'b', 'b', '.', '.', 'a', 'a', '.', '.', '.', 'b', 'b', 'b']

Example_2:
input: ['.', '.', 'e', 'e', 'e', '.', 'e', 'e', '.', '.', '.', 'e', '.', '.', 'e', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', '.', 'a', 'a', '.', '.', '.', 'i', '.', '.', 'i', '.', '.', '.', '.']

Example_3:
input: ['.', 'e', 'e', '.', '.', 'e', '.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', '.', '.', '.']
output: ['.', 'a', 'a', '.', '.', 'i', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'a', 'a', '.', '.', '.']

Test case:
input: ['.', '.', 'e', '.', '.', 'e', 'e', 'e', '.', 'e', 'e', '.', '.', 'e', '.', '.', '.', 'e', '.']
################################################################

LLM answer:

output: ['.', '.', 'b', '.', '.', 'a', 'b', 'b', '.', 'a', 'a', '.', '.', 'a', '.', '.', '.', 'b', '.']

Constraints:
0 <= len(s) <= 5 * 10^4
s consists of only lowercase English letters.
 */
public class Solution {
    public String[] findReplaceString(String s, int[] indexes, String[] sources, String[] targets) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < indexes.length; ++i) {
            map.put(indexes[i], i);
        }
        List<String> list = new ArrayList<>(sources.length);
        for (int i = 0; i < sources.length; ++i) {
            if (!map.containsKey(i)) continue;
            int idx = map.get(i);
            StringBuilder sb = new StringBuilder();
            while (idx >= 0 && idx < s.length()) {
                char c = s.charAt(idx);
                if (c == sources[i].charAt(0)) {
                    sb.append(targets[i]);
                    break;
                } else {
                    sb.append(c);
                }
                idx += 1;
            }
            list.add(sb.toString());
        }
        return list.toArray(new String[list.size()]);
    }
}
################################################################

Solution:
['.', '.', 'i', '.', '.', 'b', 'b', 'b', '.', 'a', 'a', '.', '.', 'i', '.', '.', '.', 'i', '.']

