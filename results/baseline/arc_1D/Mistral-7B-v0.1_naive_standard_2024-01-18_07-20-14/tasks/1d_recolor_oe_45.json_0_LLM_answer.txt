Input token: 379
Output token: 420
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', 'g', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'c', 'c', 'c', 'c', 'c', '.', '.']

Example_2:
input: ['.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

Example_3:
input: ['.', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'c', 'c', 'c', '.', '.', 'c', 'c', 'c', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'c', 'c', 'c', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

Constraints:
0 <= s.length <= 5 * 10^4
s[i] is either '.' or lowercase English letter.
 */
public class Solution {
    public String[] findReplaceString(String[] words, String[] patterns) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < patterns.length; ++i) {
            char c = patterns[i].charAt(0);
            if (!map.containsKey(c)) {
                map.put(c, patterns[i].charAt(patterns[i].length() - 1));
            } else {
                return null;
            }
        }
        int n = words.length;
        String[] res = new String[n];
        for (int i = 0; i < n; ++i) {
            StringBuilder sb = new StringBuilder();
            boolean flag = false;
            for (int j = 0; j < words[i].length(); ++j) {
                char ch = words[i].charAt(j);
                if (ch == '.') {
                    continue;
                }
                if (flag &&!map.containsKey(ch)) {
                    return null;
                }
                if (flag) {
                    sb.append(map.get(ch));
                } else {
                    sb.append(ch);
                    flag = true;
                }
            }
            res[i] = sb.toString();
        }
        return res;
    }
}
################################################################

Solution:
['.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

