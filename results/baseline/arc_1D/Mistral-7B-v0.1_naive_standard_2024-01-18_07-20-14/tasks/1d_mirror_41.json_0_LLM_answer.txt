Input token: 292
Output token: 282
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'a', 'a', 'a', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', '.', '.']

Example_3:
input: ['.', 'd', 'd', 'd', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'd', 'd', 'd', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'c', 'c', 'c', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'i', '.', 'c', 'c', 'c', '.', '.', '.', '.']
*/
public class ReorderLogFiles {
    public String[] reorderLogFiles(String[] logs) {
        List<String> letter = new ArrayList<>();
        List<String> digit = new ArrayList<>();
        for (int i=0; i < logs.length; i++) {
            if (logs[i].split(" ")[1].charAt(0) >= 'A' && logs[i].split(" ")[1].charAt(0) <= 'Z') {
                letter.add(logs[i]);
            } else {
                digit.add(logs[i]);
            }
        }
        Collections.sort(letter, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return o1.split(" ")[1].compareTo(o2.split(" ")[1]);
            }
        });
        Collections.sort(digit);
        return Stream.concat(letter.stream(), digit.stream()).toArray(String[]::new);
    }
}
################################################################

Solution:
['.', '.', '.', '.', '.', '.', 'i', '.', 'c', 'c', 'c', '.', '.', '.']

