Input token: 336
Output token: 389
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', 'b', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'b', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'a', 'f', 'f', 'f', 'f', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'a', '.', '.', '.']

Example_3:
input: ['.', 'a', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'a', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'a', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']

Explanation:
The only difference between the two arrays is that in the second array, the first character is changed from '.' to 'a' (index 0).
*/
class Solution {
    public char[] rearrangeCharacters(char[] s, String target) {
        int[] count = new int[26];
        for (int i = 0; i < s.length; ++i) {
            count[s[i] - 'a']++;
        }
        int maxCount = 0;
        for (int c : count) {
            if (maxCount < c) {
                maxCount = c;
            }
        }
        int[] indexes = new int[target.length()];
        for (int i = 0; i < target.length(); ++i) {
            indexes[i] = count[target.charAt(i) - 'a'];
        }
        Arrays.sort(indexes);
        int j = 0;
        for (int i = 0; i < s.length; ++i) {
            while (j < indexes.length && indexes[j] == 0) {
                ++j;
            }
            if (j >= indexes.length || indexes[j] == 0) {
                break;
            }
            --indexes[j];
            s[i] = target.charAt(j);
        }
        return s;
    }
}
################################################################

Solution:
['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'a', '.', '.', '.', '.', '.', '.', '.']

