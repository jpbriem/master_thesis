Input token: 287
Output token: 296
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'h', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'h', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', 'h']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'h']

Example_3:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'h', '.', '.']
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'h', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'h', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'h', '.']

Constraints:
0 <= s.length <= 5 * 10^4
s consists of only lowercase English letters and '.' characters.
There is exactly one '.' in s.
 */
public class ReplaceAll {
    public static void main(String[] args) {
        String s = ".aabbbcddddeeeed";
        System.out.println(replaceAsterisk(s));
    }

    private static String replaceAsterisk(String s) {
        int i = 0;
        while (i < s.length() && s.charAt(i)!= '.') {
            i++;
        }
        if (i == s.length()) return s;
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < i; j++) {
            sb.append(s.charAt(j));
        }
        sb.append('.');
        for (int j = i + 1; j < s.length(); j++) {
            sb.append(s.charAt(j));
        }
        return sb.toString();
    }
}
################################################################

Solution:
['.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'h', '.']

