Input token: 634
Output token: 309
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', 'e', '.', 'e', 'e', '.', 'e', 'e', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'g', 'g', 'g', 'g', '.', 'g', 'g', '.', 'g', 'g', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', '.', 'e', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'h', 'h', 'h', 'h', 'h', '.', 'h', '.', 'h', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.']
output: ['.', 'g', 'g', 'g', 'g', '.', 'h', 'h', 'h', 'h', 'h', '.', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']

Test case:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', '.', '.', 'e', 'e', '.', 'e', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', '.', '.', 'h', 'h', '.', 'h', '.', '.', '.', '.', '.', '.']
*/
public class Solution {
    public String[] solution(String[] input) {
        int n = input[0].length();
        char[][] arr = new char[n][];
        for (int i = 0; i < n; ++i) {
            arr[i] = input[0].toCharArray();
        }
        for (int i = 1; i < input.length; ++i) {
            for (int j = 0; j < n; ++j) {
                if (arr[j][i - 1] == '.') {
                    arr[j][i] = input[i].charAt(j);
                } else {
                    arr[j][i] = arr[j][i - 1];
                }
            }
        }
        return Arrays.stream(arr).map(s -> new String(s)).toArray(String[]::new);
    }
}
################################################################

Solution:
['.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', '.', 'h', '.', '.', '.', '.', '.', '.']

