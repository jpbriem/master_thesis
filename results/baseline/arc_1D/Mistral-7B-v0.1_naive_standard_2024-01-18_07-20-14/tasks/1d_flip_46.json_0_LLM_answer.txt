Input token: 285
Output token: 202
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', 'h', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'b', 'b', 'b', 'b', 'h', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'g', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'g', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'h', 'i', 'i', 'i', 'i', 'i', '.', '.', '.']
output: ['.', '.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'h', '.', '.', '.']

Test case:
input: ['g', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.']
'''

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s or len(s) == 0: return ''
        words = []
        for i in range(len(s)):
            if s[i]!= '.':
                word = ''
                while i < len(s) and s[i]!= '.':
                    word += s[i]
                    i += 1
                words.append(word)
        words.reverse()
        res = ''
        for w in words:
            res += w + '.'
        return res[:-1]
################################################################

Solution:
['f', 'f', 'f', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

