Input token: 512
Output token: 791
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', '.', 'b', 'b', '.', 'b', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', 'b', '.', 'b', 'b', 'b', '.', 'b', '.']
output: ['.', 'b', '.', 'b', 'b', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', '.', 'b', 'b', 'b', '.', 'b', '.']

Example_2:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', 'b', '.', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', 'b', 'b']
output: ['.', 'b', 'b', 'b', 'b', '.', '.', 'b', '.', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.']

Test case:
input: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.']
*/
public class Solution {
    public String[] updateBoard(String[] board, int[] click) {
        if (board == null || board.length == 0) return new String[0];
        int m = board.length;
        int n = board[0].length();
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{click[0], click[1]});
        visited[click[0]][click[1]] = true;
        int count = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                int[] cur = queue.poll();
                int x = cur[0];
                int y = cur[1];
                if (x - 1 >= 0 &&!visited[x - 1][y]) {
                    if (board[x - 1].charAt(y) == 'M') {
                        board[x - 1] = "X";
                        ++count;
                    } else {
                        queue.offer(new int[]{x - 1, y});
                        visited[x - 1][y] = true;
                    }
                }
                if (x + 1 < m &&!visited[x + 1][y]) {
                    if (board[x + 1].charAt(y) == 'M') {
                        board[x + 1] = "X";
                        ++count;
                    } else {
                        queue.offer(new int[]{x + 1, y});
                        visited[x + 1][y] = true;
                    }
                }
                if (y - 1 >= 0 &&!visited[x][y - 1]) {
                    if (board[x].charAt(y - 1) == 'M') {
                        board[x] = "X";
                        ++count;
                    } else {
                        queue.offer(new int[]{x, y - 1});
                        visited[x][y - 1] = true;
                    }
                }
                if (y + 1 < n &&!visited[x][y + 1]) {
                    if (board[x].charAt(y + 1) == 'M') {
                        board[x] = "X";
                        ++count;
                    } else {
                        queue.offer(new int[]{x, y + 1});
                        visited[x][y + 1] = true;
                    }
                }
            }
        }
        if (count > 0) {
            board[click[0]][click[1]] = Integer.toString(count);
        } else {
            board[click[0]][click[1]] = "*";
        }
        return board;
    }
}
################################################################

Solution:
['.', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.']

