Input token: 334
Output token: 368
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', 'c', '.']

Example_3:
input: ['.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: []
*/
public class Solution {
    public List<String> removeInvalidParentheses(String s) {
        if (s == null || s.length() < 2) return new ArrayList<>();
        int left = 0, right = 0;
        for (char c : s.toCharArray()) {
            if (c == '(') ++left;
            else if (c == ')') ++right;
        }
        if (left!= right) return new ArrayList<>();
        Set<String> res = new HashSet<>();
        dfs(res, "", s);
        return new ArrayList<>(res);
    }

    private void dfs(Set<String> res, String cur, String s) {
        if (cur.length() >= s.length()) {
            if (!isValid(cur)) return;
            res.add(cur);
            return;
        }
        for (int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            if (c == '(' || c == ')') continue;
            dfs(res, cur + c, s.substring(0, i) + s.substring(i+1));
        }
    }

    private boolean isValid(String str) {
        int left = 0, right = 0;
        for (char c : str.toCharArray()) {
            if (c == '(') ++left;
            else if (c == ')') ++right;
        }
        return left == right;
    }
}
################################################################

Solution:
['g', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']

