Input token: 446
Output token: 365
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', 'g', 'g', '.', 'g', '.', '.']
output: ['.', '.', 'f', 'f', '.', '.', '.', 'a', 'a', 'a', '.', '.', 'h', '.', '.', '.', 'f', 'f', '.', 'h', '.', '.']

Example_2:
input: ['.', 'g', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.']
output: ['.', 'h', '.', '.', 'f', 'f', '.', '.', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.']

Example_3:
input: ['.', '.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', '.', '.', '.', 'g']
output: ['.', '.', '.', 'a', 'a', 'a', '.', '.', 'h', '.', '.', 'f', 'f', '.', '.', '.', 'f', 'f', '.', '.', '.', 'h']

Test case:
input: ['.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', '.', 'g', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'f', 'f', 'f', '.', '.', 'a', 'a', 'a', '.', '.', 'h', 'h', 'h', '.', '.', 'h', '.', '.', '.', '.']
*/
public class Solution {
    public String[] findReplaceString(String[] words, String[] patterns) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < patterns.length; i++) {
            char c = patterns[i].charAt(0);
            if (!map.containsKey(c)) {
                map.put(c, patterns[i].charAt(patterns[i].length() - 1));
            } else {
                return null;
            }
        }
        int n = words.length;
        String[] res = new String[n];
        for (int i = 0; i < n; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < words[i].length(); j++) {
                char ch = words[i].charAt(j);
                if (ch == '.') {
                    continue;
                }
                if (map.getOrDefault(ch, '#')!= '#') {
                    sb.append(map.get(ch));
                } else {
                    sb.append(ch);
                }
            }
            res[i] = sb.toString();
        }
        return res;
    }
}
################################################################

Solution:
['.', '.', 'a', 'a', 'a', '.', '.', 'f', 'f', '.', 'h', '.', 'a', 'a', 'a', '.', '.', 'h', '.', '.', '.', '.']

