Input token: 222
Output token: 313
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', '.']

Test case:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g']
*/
public class ReverseVowelsOfAString {
    public String reverseVowels(String s) {
        if (s == null || s.length() < 2) return s;
        char[] chars = s.toCharArray();
        int left = 0, right = chars.length - 1;
        while (left < right) {
            while (left < right &&!isVowel(chars[left])) left++;
            while (right > left &&!isVowel(chars[right])) right--;
            swap(chars, left++, right--);
        }
        return new String(chars);
    }

    private boolean isVowel(char c) {
        switch (Character.toLowerCase(c)) {
            case 'a':
            case 'e':
            case 'i':
            case 'o':
            case 'u':
                return true;
            default:
                return false;
        }
    }

    private void swap(char[] chars, int i, int j) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }
}
################################################################

Solution:
['.', '.', '.', 'g', 'g', 'g', 'g', '.', '.']

