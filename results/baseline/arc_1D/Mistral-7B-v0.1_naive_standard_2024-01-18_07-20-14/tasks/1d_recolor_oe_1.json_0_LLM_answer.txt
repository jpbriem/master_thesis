Input token: 480
Output token: 315
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'b', 'b', 'b', 'b', '.', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'b', '.', '.', 'b', '.', '.', '.']
output: ['.', '.', '.', 'i', 'i', 'i', 'i', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', 'b', '.', 'b', 'b', 'b', '.']
output: ['.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', 'g', '.', 'g', 'g', 'g', '.']

Example_3:
input: ['.', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', '.']
output: ['.', 'i', 'i', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.']

Test case:
input: ['.', '.', '.', 'b', 'b', 'b', 'b', '.', '.', '.', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'i', 'i', 'i', 'i', '.', '.', '.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', '.']

Constraints:
0 <= s.length <= 5 * 10^4
s consists of only lowercase English letters.
 */
public class Solution {
    public String reverseOnlyLetters(String S) {
        if (S == null || S.isEmpty()) return "";
        char[] chars = S.toCharArray();
        int left = 0, right = chars.length - 1;
        while (left < right) {
            // 如果是字母，交换位置
            if (!Character.isLetter(chars[left])) {
                ++left;
            } else if (!Character.isLetter(chars[right])) {
                --right;
            } else {
                swap(chars, left++, right--);
            }
        }
        return new String(chars);
    }

    private void swap(char[] chars, int i, int j) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }
}
################################################################

Solution:
['.', '.', '.', 'i', 'i', 'i', 'i', '.', '.', '.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'i', 'i', '.']

