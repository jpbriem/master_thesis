Input token: 457
Output token: 301
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.']

Example_3:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

Test case:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/
public class Solution {
    public String[] rearrangeString(String s, int k) {
        if (s == null || s.length() < 2) return new String[]{};
        char[] chars = s.toCharArray();
        Map<Character, Integer> map = new HashMap<>();
        for (char c : chars) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        while (!list.isEmpty()) {
            int max = list.remove(list.size() - 1);
            for (int i = 0; i < max &&!list.isEmpty(); i++) {
                sb.append(map.get(chars[k * i]));
                list.remove(list.size() - 1);
            }
        }
        return sb.toString().split("");
    }
}
################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.']

