Input token: 412
Output token: 234
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'f', '.', '.', '.', 'f', 'f', '.', '.', 'f', 'f', 'f', '.', '.', '.', 'f', 'f', 'f', '.', '.']
output: ['.', 'i', '.', '.', '.', 'c', 'c', '.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.']

Example_2:
input: ['.', 'f', '.', '.', '.', 'f', 'f', 'f', '.', '.', 'f', 'f', '.', 'f', '.', '.', 'f', '.', '.', '.']
output: ['.', 'i', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'c', 'c', '.', 'i', '.', '.', 'i', '.', '.', '.']

Example_3:
input: ['.', '.', 'f', '.', '.', 'f', 'f', '.', '.', '.', 'f', 'f', 'f', '.', '.', 'f', '.', 'f', 'f', 'f']
output: ['.', '.', 'i', '.', '.', 'c', 'c', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'i', '.', 'd', 'd', 'd']

Test case:
input: ['.', '.', 'f', 'f', 'f', '.', 'f', 'f', '.', 'f', '.', '.', '.', 'f', 'f', '.', '.', 'f', 'f', '.']
################################################################

LLM answer:

output: ['.', '.', 'i', 'i', 'i', '.', 'c', 'c', '.', 'c', '.', '.', '.', 'i', 'i', '.', '.', 'c', 'c', '.']

Constraints:
0 <= len(s) <= 5 * 10^4
s[i] is either '.' or a lowercase English letter.
 */
public class Solution {
    public String[] findReplaceString(String s, int[] indices, String[] sources, String[] targets) {
        List<String> res = new ArrayList<>();
        for (int i = 0; i < indices.length; ++i) {
            if (!sources[i].equals(".")) {
                res.add(targets[i]);
            } else {
                res.add(s.substring(indices[i], indices[i + 1]));
            }
        }
        return res.toArray(new String[res.size()]);
    }
}
################################################################

Solution:
['.', '.', 'd', 'd', 'd', '.', 'c', 'c', '.', 'i', '.', '.', '.', 'c', 'c', '.', '.', 'c', 'c', '.']

