Input token: 273
Output token: 356
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.']

Example_2:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.']

Example_3:
input: ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.']

Test case:
input: ['.', '.', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']
Explanation: The first two transformations in Example 1 are equivalent, for example, they both replace every occurrence of '.' with 'a'.
The second group is also equivalent, for instance, they both replace every 'e' (from the left) with '.'.
The final output is obtained from the third group by replacing every 'f' (from the right) with '.'.
Note that many other sequences of transformations would also produce this last sequence, just taking any one group of transformations to completion would work.
*/
class Solution {
public:
    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
        unordered_map<char, char> map;
        vector<string> res;
        for(auto word : words){
            if(find(res.begin(), res.end(), word)) continue;
            bool flag = true;
            for(int i=0;i<word.size();++i){
                if(!map[pattern[i]]){
                    map[pattern[i]] = word[i];
                }else{
                    if(map[pattern[i]]!= word[i]){
                        flag = false;
                        break;
                    }
                }
            }
            if(flag){
                res.push_back(word);
            }
        }
        return res;
    }
};
################################################################

Solution:
['.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', '.', '.', '.']

