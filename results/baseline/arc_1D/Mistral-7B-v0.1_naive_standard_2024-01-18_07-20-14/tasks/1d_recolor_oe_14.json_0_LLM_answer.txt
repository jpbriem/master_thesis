Input token: 599
Output token: 310
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'i', 'i', '.', '.', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', 'i']
output: ['.', 'a', 'a', '.', '.', 'h', 'h', 'h', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', 'a', 'a', 'a', 'a']

Example_2:
input: ['.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', 'i', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', 'h', 'h', 'h', '.', '.', '.', 'a', 'a', 'a', 'a', '.']

Example_3:
input: ['.', 'i', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', '.', '.', 'i', 'i', 'i', 'i', '.', 'i', 'i', 'i', '.']
output: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', '.', 'h', 'h', 'h', '.']

Test case:
input: ['.', 'i', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', '.', '.', '.', 'i', '.', 'i', 'i', 'i', '.', 'i', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'a', 'a', 'a', 'a', '.', '.', 'h', 'h', 'h', '.', '.', '.', 'a', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']

Constraints:
0 <= len(s) <= 5 * 10^4
s consists of only lowercase English letters.
 */
public class Solution {
    public String reverseOnlyLetters(String s) {
        char[] chars = s.toCharArray();
        int left = 0;
        int right = chars.length - 1;
        while (left < right) {
            if (!Character.isAlphabetic(chars[left])) {
                left++;
            } else if (!Character.isAlphabetic(chars[right])) {
                right--;
            } else {
                swap(chars, left++, right--);
            }
        }
        return new String(chars);
    }

    private void swap(char[] chars, int i, int j) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }
}
################################################################

Solution:
['.', 'a', 'a', 'a', 'a', '.', '.', 'h', 'h', 'h', '.', '.', '.', 'h', '.', 'h', 'h', 'h', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']

