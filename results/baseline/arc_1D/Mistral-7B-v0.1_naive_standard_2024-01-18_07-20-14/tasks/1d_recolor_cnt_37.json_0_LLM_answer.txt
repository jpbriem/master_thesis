Input token: 311
Output token: 287
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'd', 'd', 'd', '.', 'd', '.', '.', 'd', 'd', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', '.', 'g', '.', '.', 'i', 'i', '.', '.']

Example_2:
input: ['.', 'd', '.', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', 'd', 'd', 'd']
output: ['.', 'g', '.', 'i', 'i', '.', '.', 'b', 'b', 'b', '.', 'b', 'b', 'b']

Example_3:
input: ['.', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', '.', '.']
output: ['.', 'g', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'i', 'i', '.', '.']

Test case:
input: ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'g', 'g', '.', '.', '.']

Constraints:
0 <= len(s) <= 5 * 10^4
s consists of only lowercase English letters.
 */
public class Solution {
    public String[] findReplacements(String s, int[] links) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < links.length; i++) {
            char c = s.charAt(links[i]);
            if (!map.containsKey(c)) {
                map.put(c, (char)(c + 1));
            } else {
                while (true) {
                    c++;
                    if (!map.containsKey(c)) {
                        break;
                    }
                }
                map.put(c, (char)(c + 1));
            }
        }
        return map.keySet().stream()
               .map(k -> k == 'z'? "a" : String.valueOf((char)k))
               .toArray(String[]::new);
    }
}
################################################################

Solution:
['.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'i', 'i', '.', '.', '.']

