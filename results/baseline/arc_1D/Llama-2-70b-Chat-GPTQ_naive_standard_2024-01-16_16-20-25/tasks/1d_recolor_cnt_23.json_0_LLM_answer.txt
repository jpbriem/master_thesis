Input token: 445
Output token: 232
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g']
output: ['.', '.', 'e', 'e', '.', 'b', 'b', 'b', '.', '.', '.', 'a', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'e', 'e']

Example_2:
input: ['.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', '.', 'g', '.', '.']
output: ['.', 'a', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'e', 'e', '.', '.', '.', 'e', 'e', '.', 'a', '.', '.']

Example_3:
input: ['.', '.', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', 'g', '.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', '.', 'e', 'e', '.', '.', 'a', '.', 'a', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', '.', 'g', '.', '.', '.', 'g', 'g', '.', 'g', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'a', 'a', 'a', '.', 'b', 'b', '.', '.', '.', 'e', '.', '.', '.', 'b', 'b', '.', 'a', '.', '.', '.', '.']

Notice that in all three examples, the output is a rotation of the input by 90 degrees clockwise. Also, notice that there are no "." characters in the output for any example.

The task is to write a function that takes an array of characters as input and returns the rotated version of it.

Constraints:

1. The input array will only contain "." and uppercase letters (A-Z).
2. The length of the input array will be at least 1 and at most 100.
3. The output should not have any "." characters.
4. The output should be a rotation of the input by 90 degrees clockwise.
5. The function should return the output in a new array. Modifying the input array is not allowed.
################################################################

Solution:
['.', 'b', 'b', 'b', '.', 'e', 'e', '.', '.', '.', 'a', '.', '.', '.', 'e', 'e', '.', 'a', '.', '.', '.', '.']

