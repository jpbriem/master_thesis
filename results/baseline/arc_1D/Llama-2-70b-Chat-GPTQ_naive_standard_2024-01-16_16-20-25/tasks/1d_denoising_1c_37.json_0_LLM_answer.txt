Input token: 635
Output token: 167
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.']
output: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'h', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'h', '.', '.', 'h', '.', '.', '.', 'h', '.', '.', '.', '.', 'h', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', 'e', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.']
output: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', 'c', '.', '.', 'c', '.', '.', '.', '.', 'c', '.', '.', '.', '.', 'c', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', 'c', '.', '.', 'c', '.', '.', '.', '.', 'c', '.', '.', '.', '.', 'c', '.', '.', '.', '.']

The given function should return a list of strings as output, without any extra leading or trailing elements.
Note that all inputs will have at least one occurrence of the target character (in this case, 'e' or 'c').
The function should be able to handle large inputs and run in O(n) time complexity, where n is the length of the input string.
################################################################

Solution:
['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

