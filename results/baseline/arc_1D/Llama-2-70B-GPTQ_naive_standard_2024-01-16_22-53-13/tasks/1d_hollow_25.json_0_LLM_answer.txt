Input token: 200
Output token: 374
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', 'g', 'g', '.', '.', '.']
output: ['.', '.', 'g', '.', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'f', 'f', 'f', '.']
output: ['.', '.', '.', '.', 'f', '.', 'f', '.']

Example_3:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', '.']
output: ['.', '.', '.', 'g', '.', '.', 'g', '.']

Test case:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'a', '.', 'a', '.', '.', '.', '.']
"""

# @lc code=start
class Solution(object):
    def transformToHighestMountain(self, grid):
        """
        :type grid: List[str]
        :rtype: str
        """
        
        # 0. check corner cases & get length of each row/col
        if not grid or len(grid) == 0: return []
        m = len(grid)
        n = len(grid[0])
        
        # 1. build a map to record all mountains' heights
        mountainMap = {}
        for i in range(m):
            for j in range(n):
                if grid[i][j]!= '.':
                    mountainMap[(i, j)] = int(grid[i][j])
        
        # 2. find the highest mountain
        maxHeight = -1
        for k, v in mountainMap.items():
            if v > maxHeight:
                maxHeight = v
            
        # 3. update the height of each mountain
        for k, v in mountainMap.items():
            if v < maxHeight:
                mountainMap[k] = maxHeight
        
        # 4. update the output array
        for i in range(m):
            for j in range(n):
                if grid[i][j]!= '.':
                    grid[i][j] = str(mountainMap[(i, j)])
        
        return grid
    
# @lc code=end

################################################################

Solution:
['.', 'a', '.', '.', 'a', '.', '.', '.']

