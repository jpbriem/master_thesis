Input token: 366
Output token: 397
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'a', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'a', '.']
output: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'a', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.']
"""

import re
from typing import List, Optional


class Solution:
    def findReplaceString(self, s: str) -> str:
        """
        思路：正则表达式匹配，替换字符串。
            - 先判断是否有'a'，如果没有就返回原始字符串；
            - 然后判断是否有'd'，如果有的话，将所有'd'都变成'.';
            - 最后判断是否有'g'，如果有的话，将所有'g'都变成'.';
                - 注意这里要用到非贪婪模式，因为'.*?'只会匹配最短的子序列，而不是最长的子序列。
                    比如输入字符串s = "ggggg", 那么使用正则表达式re.sub(".*?",".",s)得到结果为".",
                    但是我们想要的结果应该是"."。
        :param s:
        :return:
        """
        if not re.search('a', s): return s
        # 去除所有'd'
        s = re.sub('d','.',s)
        # 去除所有'g'
        s = re.sub('.{0,}?','.',s)
        return s

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'a', '.']

