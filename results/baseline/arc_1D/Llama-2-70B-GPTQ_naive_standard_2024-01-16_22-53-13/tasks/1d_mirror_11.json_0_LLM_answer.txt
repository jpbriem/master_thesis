Input token: 516
Output token: 625
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']
"""

import re
from typing import List, Optional


class Solution:
    def replaceBlanks(self, text: str) -> str:
        """
        思路：正则表达式匹配，替换字符串。
            - 先将所有的空格转化为'.'；
            - 再用正则表达式匹配出所有的单词（包括连续重复的），并且在原位置上插入相应的单词；
                - 注意：由于每个单词都是以大写字母开头，因此可以使用\w+来代替[A-Z]+；
                    而且由于每个单词都是以小写字母结尾，因此可以使用\W*来代替[^a-z]*；
                    最后一个单词不能以空格结尾，因此需要加上(?!\s)限制条件；
            - 最后再将所有的'.'替换成空格。
            时间复杂度：O(n)，其中n为text长度。
            空间复杂度：O(m)，其中m为text中单词数量。
        """
        # 将所有的空格转化为'.'
        text = re.sub(' ', '.', text)
        # 获取所有的单词
        words = re.findall('\w+\W*\S?(?!\s)', text)
        for word in words:
            # 找到word对应的起始索引和结束索引
            start = text.index(word) + len(word)
            end = text[:start].rfind('.') + 1
            # 从end处向前移动，直到遇到'.'或者'\s'
            while not (text[end] == '.' or text[end] == '\s'):
                end -= 1
            # 把word插入到end处
            text = text[:end] + word + text[end:]
        return re.sub('.','', text).strip()

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']

