Input token: 572
Output token: 399
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'b', 'b', 'b', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'd', 'd', 'd', '.', '.', '.', 'd', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'd', 'd', 'd', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""

import collections


class Solution(object):
    def floodFill(self, m, n, starti, startj, color):
        """
        :type m: int
        :type n: int
        :type starti: int
        :type startj: int
        :type color: str
        :rtype: void Do not return anything, modify grid in-place instead.
        """
        if (starti < 0 or starti >= m) or \
                (startj < 0 or startj >= n) or \
                grid[starti][startj]!= color:
            return

        queue = collections.deque()
        queue.append((starti, startj))
        while len(queue) > 0:
            i, j = queue.popleft()
            for di, dj in [(0, -1), (-1, 0), (0, 1), (1, 0)]:
                newi, newj = i + di, j + dj
                if (newi < 0 or newi >= m) or \
                        (newj < 0 or newj >= n) or \
                        grid[newi][newj] == '#':
                    continue
                grid[newi][newj] = '#'
                queue.append((newi, newj))

################################################################

Solution:
['.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

