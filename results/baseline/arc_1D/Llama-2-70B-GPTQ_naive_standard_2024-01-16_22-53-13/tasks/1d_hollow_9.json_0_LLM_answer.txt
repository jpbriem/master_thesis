Input token: 359
Output token: 735
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.']
output: ['.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', 'f', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.']
"""

import re
from typing import List, Optional


class Solution:
    def floodFill(self, image: List[List[str]], sr: int, sc: int) -> None:
        """
        找到最近的邻居，并将其转换为目标值。
        :param image: 图像数组
        :param sr: 起始行索引
        :param sc: 起始列索引
        :return: 无返回值
        """
        if not image or len(image) == 0 or sr < 0 or sc < 0:
            return

        # 记录已经访问过的点
        visited = set()
        queue = []
        queue.append((sr, sc))
        while queue:
            row, col = queue.pop(0)
            if (row, col) in visited:
                continue
            visited.add((row, col))
            if image[row][col]!= '.':
                continue
            image[row][col] = '#'
            for rc in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:
                if 0 <= rc[0] < len(image):
                    if 0 <= rc[1] < len(image[rc[0]]):
                        if image[rc[0]][rc[1]] == '.':
                            queue.append(rc)

    def floodFill2(self, image: List[List[str]], sr: int, sc: int) -> None:
        """
        使用深度优先算法进行填充。
        :param image: 图像数组
        :param sr: 起始行索引
        :param sc: 起始列索引
        :return: 无返回值
        """
        if not image or len(image) == 0 or sr < 0 or sc < 0:
            return

        self._floodFillCore(image, sr, sc, '.')

    def _floodFillCore(self, image: List[List[str]], row: int, col: int, oldVal: str) -> None:
        if image[row][col]!= oldVal:
            return
        image[row][col] = '#'
        for rc in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:
            if 0 <= rc[0] < len(image):
                if 0 <= rc[1] < len(image[rc[0]]):
                    if image[rc[0]][rc[1]] == oldVal:
                        self._floodFillCore(image, rc[0], rc[1], oldVal)

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', 'a', '.']

