Input token: 253
Output token: 219
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'c', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', '.']

Example_2:
input: ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'c']
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'c']

Example_3:
input: ['h', 'h', 'h', 'h', '.', '.', '.', '.', 'c', '.']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'c', '.']

Test case:
input: ['f', 'f', 'f', 'f', '.', '.', '.', '.', 'c', '.']
################################################################

LLM answer:

expected output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'c', '.']
"""
#!/bin/python3

import sys

def main():
    # Inputs
    n = int(input().strip())  # number of test cases
    for _ in range(n):
        m, *line = list(map(str, input().split()))[0]  # number of characters on each line
        lines = []
        for i in range(m):
            lines.append('.' + '.'*int(input()[:-1])+'.')
        
        # Processing & Output
        for j in range(len(lines)):
            print(" ".join([x if x == "." else "*" for x in lines[j]]))
    
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
################################################################

Solution:
['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'c', '.']

