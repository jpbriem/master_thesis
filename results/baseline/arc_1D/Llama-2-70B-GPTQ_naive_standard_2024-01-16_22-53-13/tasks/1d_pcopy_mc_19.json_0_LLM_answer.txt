Input token: 577
Output token: 434
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'f', 'f', 'f', '.', '.', 'b', '.', '.', '.', 'c', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', '.', 'b', 'b', 'b', '.', 'c', 'c', 'c', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'c', 'c', 'c', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'c', 'c', 'c', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'f', 'f', 'f', '.', '.', 'a', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', '.', 'a', 'a', 'a', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'a', 'a', 'a', '.', '.', '.', 'a', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""
from typing import List, Optional


class Solution:
    def islandPerimeter(self, grid: List[List[str]]) -> int:
        """
        1 <= grid.length = grid[0].length <= 50
        0 <= grid[i][j] < 4
            - 0 represents water
            - 1 to 3 represent different islands (inclusive)
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0

        m, n = len(grid), len(grid[0])
        directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        perimeters = [[0 for _ in range(n + 2)] for _ in range(m + 2)]
        for i in range(1, m):
            for j in range(1, n):
                if grid[i][j] == 0:
                    continue
                perimeters[i+1][j+1] += 8
                for dx, dy in directions:
                    x, y = i + dx, j + dy
                    if 0 <= x < m and 0 <= y < n and grid[x][y]!= 0:
                        perimeters[i+1][j+1] -= 2
                        break
        return sum([sum(row) for row in perimeters[:m+1]])

################################################################

Solution:
['.', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

