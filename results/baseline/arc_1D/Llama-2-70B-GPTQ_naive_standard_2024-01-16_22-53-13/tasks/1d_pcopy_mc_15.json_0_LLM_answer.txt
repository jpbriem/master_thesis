Input token: 582
Output token: 478
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'a', 'a', 'a', '.', '.', '.', 'g', '.', '.', '.', '.', 'f', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', '.', '.', 'g', 'g', 'g', '.', '.', 'f', 'f', 'f', '.', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'g', 'g', 'g', '.', '.', '.', '.', 'a', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', 'g', 'g', '.', '.', '.', 'a', 'a', 'a', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'i', 'i', 'i', '.', '.', 'g', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'i', 'i', 'i', '.', 'g', 'g', 'g', '.', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'f', 'f', 'f', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'f', 'f', 'f', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', 'e', 'e', 'e', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""
from typing import List, Optional


class Solution:
    def islandPerimeter(self, grid: List[List[str]]) -> int:
        """
        1 <= grid.length = grid[0].length <= 50
        0 <= grid[i][j] < 4
            - 0 represents water
            - 1 to 3 represent islands with area of size 1 to 3 respectively
        :type grid: [[str]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0

        m, n = len(grid), len(grid[0])
        directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        perimeters = []
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "." or grid[i][j] > 3:
                    continue
                perimeters.append([i, j, grid[i][j], 0])

        while perimeters:
            x, y, r, p = perimeters.pop()
            for dx, dy in directions:
                newx, newy = x + dx, y + dy
                if 0 <= newx < m and 0 <= newy < n \
                        and grid[newx][newy]!= ".":
                    perimeters.append((newx, newy, grid[newx][newy], p))
                    grid[newx][newy] = "."
                    p += 1
        return sum(p for _, _, _, p in perimeters)

################################################################

Solution:
['.', 'f', 'f', 'f', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

