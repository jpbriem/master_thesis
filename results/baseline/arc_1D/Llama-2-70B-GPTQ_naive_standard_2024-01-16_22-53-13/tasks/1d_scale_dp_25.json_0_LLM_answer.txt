Input token: 499
Output token: 367
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'c', '.']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'c', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'c', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'c', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'c', '.']
"""

import re
from typing import List, Optional


class Solution:
    def findReplaceString(self, s: str) -> str:
        """
        思路：正则表达式匹配，替换字符串。
            - 先判断是否有'c'，如果没有就返回原始字符串；
            - 然后用正则表达式匹配出所有的'f'和'h'，并且将其转化为'f'或者'h'；
            - 最后再次使用正则表达式去除多余的点号。
            时间复杂度：O(n)，空间复杂度：O(1)
        :param s:
        :return:
        """
        if not re.search('c', s): return s
        # 匹配所有的'f'和'h'，并且将其转化为'f'或者'h'
        s = re.sub("[fh]", "f", s)
        # 去除多余的点号
        s = re.sub("\.\.", ".")
        return s

################################################################

Solution:
['.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'c', '.']

