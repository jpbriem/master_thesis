Input token: 412
Output token: 398
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'f', '.', '.', '.', 'f', 'f', '.', '.', 'f', 'f', 'f', '.', '.', '.', 'f', 'f', 'f', '.', '.']
output: ['.', 'i', '.', '.', '.', 'c', 'c', '.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.']

Example_2:
input: ['.', 'f', '.', '.', '.', 'f', 'f', 'f', '.', '.', 'f', 'f', '.', 'f', '.', '.', 'f', '.', '.', '.']
output: ['.', 'i', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'c', 'c', '.', 'i', '.', '.', 'i', '.', '.', '.']

Example_3:
input: ['.', '.', 'f', '.', '.', 'f', 'f', '.', '.', '.', 'f', 'f', 'f', '.', '.', 'f', '.', 'f', 'f', 'f']
output: ['.', '.', 'i', '.', '.', 'c', 'c', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'i', '.', 'd', 'd', 'd']

Test case:
input: ['.', '.', 'f', 'f', 'f', '.', 'f', 'f', '.', 'f', '.', '.', '.', 'f', 'f', '.', '.', 'f', 'f', '.']
################################################################

LLM answer:

output: ['.', '.', 'i', 'i', 'i', '.', 'c', 'c', '.', 'd', '.', '.', '.', 'i', 'i', '.', '.', 'c', 'c', '.']
"""

import re
from typing import List, Optional


class Solution:
    def transform(self, grid: List[str]) -> str:
        """
        1. 先找出所有的字符串，然后再进行转换。
        2. 注意：如果是单个字母，则不需要转换。
            a) 如果是两个相同的字母，则转换为三个字母；
            b) 如果是三个相同的字母，则转换为四个字母。
            例子：
                f ---> iii
                     ccc
                     ddd
                     iiii
        """
        # 匹配所有的字符串
        match = re.findall("([a-z])\1*", "".join(grid))
        for m in match:
            if len(m) == 1 or len(m) == 4:
                continue
            elif len(m) == 2:
                grid = self._replace(grid, m, "ccc")
            else:
                grid = self._replace(grid, m, "iiii")
        return "".join(grid)

    @staticmethod
    def _replace(grid: List[str], old: str, new: str):
        for i, char in enumerate(old):
            grid[i] = new[0]
        return grid

################################################################

Solution:
['.', '.', 'd', 'd', 'd', '.', 'c', 'c', '.', 'i', '.', '.', '.', 'c', 'c', '.', '.', 'c', 'c', '.']

