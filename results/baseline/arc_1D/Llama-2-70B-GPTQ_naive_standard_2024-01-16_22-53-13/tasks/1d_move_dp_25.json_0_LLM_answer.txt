Input token: 485
Output token: 417
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'g', '.']
output: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'g', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.']
"""

import re
from typing import List, Optional


class Solution:
    def findPath(self, grid: List[List[str]], start: List[int], end: List[int]) -> bool:
        if not self._isValidGrid(grid):
            return False

        queue = [(start[0] * len(grid) + start[1]), (end[0] * len(grid) + end[1])]
        visited = set()
        while queue:
            xy = queue.pop()
            if xy in visited:
                continue
            visited.add(xy)
            if xy == end[0] * len(grid) + end[1]:
                return True
            for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                newXy = xy + dx * len(grid) + dy
                if newXy < 0 or newXy >= len(grid) ** 2:
                    continue
                queue.append(newXy)
        return False

    @staticmethod
    def _isValidGrid(grid: List[List[str]]) -> bool:
        if not isinstance(grid, list) or not all(map(lambda row: isinstance(row, list), grid)):
            return False
        for i, row in enumerate(grid):
            if not all(map(lambda cell: cell in "bfgh", row)) or any(cell == "." for cell in row):
                return False
        return True

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'g', '.']

