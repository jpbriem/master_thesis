Input token: 236
Output token: 334
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'c', 'c', 'c', 'c', '.', '.', 'b', '.']
output: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'b', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', '.', '.', '.', 'b']
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'b']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', 'b']
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b']

Test case:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', 'b']
################################################################

LLM answer:

expected output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b']
"""
#!/bin/python3

import os
import sys

# Complete the filler function below.
def filler(grid):
    # Fill the grid with water starting from bottom left corner
    for i in range(len(grid)):
        if (i == 0 or grid[i][0]!= "."):
            continue
        
        j = len(grid) - 1
        while grid[j][0] == ".":
            grid[j].pop(0)
            j -= 1
            
        grid[j].insert(0, ".")
    
    return grid

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        nm = input().split()

        n = int(nm[0])

        m = int(nm[1])

        grid = []

        for _ in range(n):
            grid.append(list(input()))

        result = filler(grid)

        fptr.write('\n'.join(''.join(row) for row in result))
        fptr.write('\n')

    fptr.close()
################################################################

Solution:
['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b']

