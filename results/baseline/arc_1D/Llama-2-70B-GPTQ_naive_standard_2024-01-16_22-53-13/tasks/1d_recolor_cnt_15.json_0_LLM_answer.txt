Input token: 542
Output token: 972
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'g', '.', '.', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', '.', '.', 'e', 'e', '.', '.', 'i', 'i', 'i', '.', '.', 'h', '.', '.', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'i', 'i', 'i', '.', '.', 'h', '.', '.', 'e', 'e', '.', '.', '.', 'i', 'i', 'i', '.', 'e', 'e', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', '.', 'g', 'g', '.', 'g', 'g', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'i', 'i', 'i', '.', '.', '.', 'h', '.', 'e', 'e', '.', 'e', 'e', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', '.', '.', 'g', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', '.', '.', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'i', 'i', '.', '.', 'h', '.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', '.', '.', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""

import re
from typing import List, Optional


class Solution:
    def transform(self, grid: List[str]) -> str:
        """
        思路：
            1、找到所有的字母，并且将其转换为小写。
            2、对于每个字母，如果它是一个单词的开头，则将该字母转换为大写。
            3、对于每个字母，如果它在单词中间，则将该字母转换为小写。
            4、对于每个字母，如果它是一个单词的结尾，则将该字母转换为大写。
            5、返回最终的输出。
        :param grid: 二维列表
        :return: 字符串
        """
        # 获取所有的字母
        letters = self._get_letters(grid)
        for letter in letters:
            # 将所有的字母转换为小写
            self._transform_to_lowercase(letter, grid)
            # 判断当前字母是否位于单词的开头或者结尾
            if not self._is_in_word_middle(letter, grid):
                # 如果不在单词的中间，那么就将这个字母转换为大写
                self._transform_to_uppercase(letter, grid)
        return "".join(grid).strip()

    @staticmethod
    def _get_letters(grid: List[List[str]]) -> List[int]:
        """
        获取所有的字母
        :param grid: 二维列表
        :return: 字符串
        """
        letters = []
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]!= ".":
                    letters.append((i, j))
        return letters

    def _is_in_word_middle(self, letter: int, grid: List[List[str]]) -> bool:
        """
        判断当前字母是否位于单词的中间
        :param letter: 指示器
        :param grid: 二维列表
        :return: 布尔值
        """
        i, j = letter
        word_started = False
        for k in range(-1, -len(grid), -1):
            if grid[k + i][j] == ".":
                continue
            else:
                word_started = True
                break
        if not word_started:
            return False
        else:
            for k in range(len(grid), len(grid) + 1):
                if grid[k + i][j] == ".":
                    return True
        return False

    def _transform_to_lowercase(self, letter: int, grid: List[List[str]]):
        """
        将所有的字母转换为小写
        :param letter: 指示器
        :param grid: 二维列表
        """
        i, j = letter
        grid[i][j] = grid[i][j].lower()

    def _transform_to_uppercase(self, letter: int, grid: List[List[str]]):
        """
        将所有的字母转换为大写
        :param letter: 指示器
        :param grid: 二维列表
        """
        i, j = letter
        grid[i][j] = grid[i][j].upper()

################################################################

Solution:
['.', '.', 'e', 'e', '.', '.', 'h', '.', '.', 'i', 'i', 'i', '.', '.', 'e', 'e', '.', '.', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']

