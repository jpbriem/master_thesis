Input token: 263
Output token: 418
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'h', '.', '.']

Example_2:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'h', '.', '.', '.']

Example_3:
input: ['.', 'd', 'd', 'd', 'd', 'd', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'h', '.', '.']

Test case:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.']
################################################################

LLM answer:

output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'h', '.', '.']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, isEnd=False):
        self.val = val
        self.isEnd = isEnd
        self.next = []


class Solution(object):
    def orangesSinking(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: void Do not return anything, modify grid in-place instead.
        """
        if len(grid) == 0 or len(grid[0]) == 0:
            return
        
        directions = [(0,-1), (0,1), (-1,0), (1,0)]
        queue = collections.deque()
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == "s":
                    queue.append((i, j))
                    
        while queue:
            size = len(queue)
            for _ in range(size):
                curPos = queue.popleft()
                x, y = curPos
                for dx, dy in directions:
                    newX = x + dx
                    newY = y + dy
                    if 0 <= newX < len(grid) and 0 <= newY < len(grid[newX]) \
                       and grid[newX][newY]!= ".":
                        queue.append((newX, newY))
                        grid[x][y], grid[newX][newY] = grid[newX][newY], grid[x][y]
        return grid
################################################################

Solution:
['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'h', '.']

