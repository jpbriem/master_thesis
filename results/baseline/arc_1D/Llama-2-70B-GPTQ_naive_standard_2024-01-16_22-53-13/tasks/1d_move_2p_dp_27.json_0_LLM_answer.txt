Input token: 225
Output token: 312
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', '.', '.', 'f', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'f', '.']

Example_2:
input: ['g', 'g', 'g', 'g', '.', '.', 'f', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'f', '.', '.']

Example_3:
input: ['b', 'b', 'b', '.', '.', 'f', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', 'f', '.', '.', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', '.', 'f', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'g', 'g', 'g', 'f', '.', '.', '.']
"""

# @lc code=start
class Solution(object):
    def findWords(self, words):
        """
        :type words: List[str]
        :rtype: List[str]
        """
        
        # 0. check inputs
        assert isinstance(words, list) and len(words) > 0
        for word in words:
            assert isinstance(word, str) and len(word) == 5
            
        # 1. process
        return self._findWords(words)
    
    def _findWords(self, words):
        if not words or len(words) <= 4:
            return []
        
        result = []
        for i in range(len(words)):
            if words[i][0]!= '.':
                result += [words[i]]
                
        for j in range(len(result)-1,-1,-1):
            if result[j][0] == '.':
                result[j], result[-1] = result[-1], result[j]
                break
        
        return result + ['.' for _ in range(len(words)-len(result))]
# @lc code=end

################################################################

Solution:
['.', '.', '.', 'g', 'g', 'g', 'f', '.', '.']

