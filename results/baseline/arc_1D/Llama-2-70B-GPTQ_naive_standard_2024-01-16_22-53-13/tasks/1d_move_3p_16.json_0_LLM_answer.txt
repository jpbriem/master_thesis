Input token: 450
Output token: 445
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.']

Example_3:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.']
"""

import re
from typing import List, Optional


class Solution:
    def findReplaceString(self, S: str, source: str) -> str:
        """
        思路：找到所有的字符串，然后进行转换。
            - 先抽取出所有的单词，再去重复，得到一个列表。
                - 注意：这里不能用set()，因为set只保留了最后一次出现的位置。
                      而我们需要每次都从头开始查找，直到没有匹配的时候才结束。
            - 遇到单词，就将其转化成'*'。
        :param S:
        :return:
        """
        # 获取所有的单词
        words = re.findall('[a-zA-Z]+', S)
        # 去除重复的单词
        words = list({word for word in set(words)})
        # 对于每个单词，都进行转换
        for word in words:
            # 如果是第一个单词，则从0开始查找
            start = 0 if not source[:len(word)] == word else len(word)
            while True:
                end = source.index(word, start) + len(word)
                source = source[:end] + '*' + source[end:]
                start = end
        return source

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']

