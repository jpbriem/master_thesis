Input token: 559
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', 'g', 'g', '.', '.', 'f', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', 'f', 'f', 'f', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'f', 'f', 'f', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'f', 'f', 'f', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'a', 'a', 'a', '.', '.', '.', '.', 'h', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', '.', '.', '.', 'h', 'h', 'h', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', '.', 'd', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'h', 'h', 'h', '.', 'd', 'd', 'd', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, S: str) -> None:
        """
        :type S: str
        """
        # Your Answer
        if not S or len(S) == 0: return
        
        # split string into list of characters
        chars = list(S)
        # remove duplicates from list
        uniqueChars = set()
        for char in chars:
            uniqueChars.add(char)
        chars = list(uniqueChars)
        
        # create a regex to match all possible combinations of letters
        regex = r'[A-Z]|[a-z]'
        # find all matches with regex
        matches = re.findall(regex, "".join(chars))
        
        # sort matches by length
        sortedMatches = sorted(matches, key=len)
        
        # iterate over each character in original string
        for i in range(len(chars)):
            # get current character
            curChar = chars[i]
            
            # check if it is already uppercase
            if curChar.isupper(): continue
            
            # add all permutations of lowercase characters that can be made using sortedMatches
            for permutedChar in sortedMatches:
                # append new character to end of string
                chars[i] = permutedChar + curChar
                
                # break out of loop when we have found all permutations
                if i == (len(chars)-1): break
                
                # reset chars back to original state
                chars[i] = curChar

# TEST CASES
if __name__ == '__main__':
    s = Solution()
    tcs = [
        ['.','f','f','f','.','.','c','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','f','f','f','.','.','c','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','a','a','a','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','h','h','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','h','h','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','h','h','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','h','h','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'],
        ['.','.','h','h','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.'
################################################################

Solution:
['.', '.', 'h', 'h', 'h', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

