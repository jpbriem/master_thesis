Input token: 292
Output token: 142
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']
output: ['e', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.']

Example_3:
input: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'g', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']
'''

def solution(s):
    # Write your code here
    if not s: return ''
    n = len(s)
    m = 0
    for i in range(n):
        if s[i] == '.': continue
        else: m += 1
    
    if m > 0:
        return s[:m] + '.' * (n - m) + s[-m:]
    else:
        return s

################################################################

Solution:
['.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.']

