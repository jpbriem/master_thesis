Input token: 281
Output token: 348
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

Test case:
input: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
"""

import re
from typing import List, Tuple

class Solution:
    def solve(self, s: str) -> None:
        """
        :type s: str
        """
        if not s or len(s) == 0: return
        
        # find all substrings that match the pattern
        p = r'([\.]+)'
        m = re.findall(p, s)
        for i in range(len(m)):
            if m[i]!= "":
                self.replace(s, m[i], ".")
                
    def replace(self, s: str, old: str, new: str):
        """
        :type s: str
        :type old: str
        :type new: str
        """
        n = len(old)
        if n > len(s): return
        j = 0
        while True:
            if s[j:j + n] == old:
                s = s[:j] + new + s[j + n:]
                break
            else:
                j += 1
            
        return s
    
if __name__ == '__main__':
    solution = Solution()
    print("Input:", "hahaha")
    print("Output:", solution.solve("hahaha"))
################################################################

Solution:
['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']

