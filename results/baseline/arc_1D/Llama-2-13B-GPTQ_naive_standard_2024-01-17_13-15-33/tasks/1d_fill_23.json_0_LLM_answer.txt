Input token: 258
Output token: 364
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'h', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.']
output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']

Example_2:
input: ['.', 'b', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'd', '.', 'd', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', 'b', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.']
"""

import re
from typing import List, Tuple

class Solution:
    def solve(self, s: str) -> None:
        """
        :type s: str
        """
        if not s or len(s) == 0: return
        
        # find all dots in string
        dot_indexes = []
        for i in range(len(s)):
            if s[i] == '.':
                dot_indexes.append(i)
                
        # remove all dots from string
        new_string = ""
        for i in range(len(s)):
            if i not in dot_indexes:
                new_string += s[i]
            
        # replace all b's with h's
        new_string = self._replace_all(new_string, "b", "h")
        
        # add back all dots to string
        for index in dot_indexes:
            new_string += "."
        
        print("Solution: ", new_string)
    
    def _replace_all(self, s: str, old: str, new: str):
        """
        :type s: str
        :type old: str
        :type new: str
        """
        result = ""
        for char in s:
            if char!= old:
                result += char
            else:
                result += new
        return result
################################################################

Solution:
['.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.']

