Input token: 183
Output token: 165
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['g', 'g', 'g', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', '.']

Example_2:
input: ['c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', '.']

Example_3:
input: ['h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', '.', '.']

Test case:
input: ['e', 'e', 'e', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'e', 'e', 'e', '.', '.']
'''

def solution(s):
    # Write your code here
    if not s: return []
    n = len(s)
    ans = []
    for i in range(n):
        if s[i] == '.': continue
        j = bisect.bisect_left(ans, s[i])
        while j > 0 and ans[j - 1]!= s[i]:
            ans[j], ans[j - 1] = ans[j - 1], ans[j]
            j -= 1
        ans[j] = s[i]
    return ans

################################################################

Solution:
['.', '.', 'e', 'e', 'e', '.', '.']

