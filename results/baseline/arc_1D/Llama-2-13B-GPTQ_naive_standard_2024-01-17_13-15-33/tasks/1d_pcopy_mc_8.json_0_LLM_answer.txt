Input token: 569
Output token: 469
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'c', 'c', 'c', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', '.', '.', 'i', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', '.', 'i', 'i', 'i', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'i', 'i', 'i', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'i', 'i', 'i', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', '.', '.', '.', 'd', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'g', 'g', 'g', '.', '.', 'd', 'd', 'd', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, s: str) -> None:
        """
        :type s: str
        """
        if not s or len(s) == 0: return
        
        # find all letters in string
        letters = set()
        for c in s:
            letters.add(c)
            
        # create a list of tuples (letter, count)
        counts = [(l, 1) for l in letters]
        
        # sort by count
        counts.sort(key=lambda x: -x[1])
        
        # iterate over sorted list to get permutations
        for i in range(len(counts)):
            if counts[i][1] > 1:
                self._permute(s, counts[:i], counts[i+1:])
                
    @staticmethod
    def _permute(s: str, start: List[Tuple[str, int]], end: List[Tuple[str, int]]):
        """
        :param s: source string
        :param start: starting index of sublist
        :param end: ending index of sublist
        :return: none
        """
        for i in range(start[0][1], end[0][1]):
            s = s[:start[0][0]] + s[end[-1][0]:]
            s += "".join([c * i for c in start[1:]])
            s += "".join([c * (end[0][1] - i) for c in end[1:]])
            print(s)
################################################################

Solution:
['.', '.', 'g', 'g', 'g', '.', '.', 'd', 'd', 'd', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

