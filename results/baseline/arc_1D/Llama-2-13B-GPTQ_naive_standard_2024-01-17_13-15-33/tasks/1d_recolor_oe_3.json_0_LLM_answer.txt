Input token: 307
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', 'c', 'c', 'c', 'c']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'f', 'f', 'f', 'f']

Example_2:
input: ['.', '.', '.', 'c', 'c', '.', '.', '.', 'c', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', '.', '.', '.', 'h', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'c', 'c', 'c', 'c', '.', 'c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', '.', 'h', 'h', 'h', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'c', 'c', '.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'f', 'f', 'f', 'f', '.', 'h', 'h', 'h', '.', '.', '.', '.']
"""

import re
from typing import List, Tuple

class Solution:
    def convert(self, s: str) -> str:
        if not s or len(s) == 0: return ''
        # find all c's in string
        cs = []
        for i in range(len(s)):
            if s[i] == 'c':
                cs.append(i)
        
        # split into groups of length 4
        gs = []
        while True:
            gs.append([])
            j = 0
            while j < len(cs):
                gs[-1].append(s[j:j+4])
                j += 4
            
            if len(gs[-1]) > 0: break
        
        # replace each group with a new character
        out = ''
        for i in range(len(gs)):
            out += self._replace(gs[i], i)
        return out
    
    def _replace(self, gs: List[str], idx: int) -> str:
        if len(gs)!= 4: raise ValueError('invalid group size')
        if len(gs[0])!= 4: raise ValueError('invalid group size')
        if len(gs[0])!= 4: raise ValueError('invalid group size')
        
        # get first char
        f = gs[0][0]
        # get last char
        l = gs[0][3]
        
        # get middle chars
        m = gs[0][1] + gs[0][2]
        
        # build output
        out = ''
        for i in range(idx, idx+4):
            out += f
        for i in range(idx+4, idx+8):
            out += m
        for i in range(idx+8, idx+12):
            out += l
        return out

if __name__ == "__main__":
    solver = Solution()
    assert solver.convert("") == ""
    assert solver.convert(".") == ".", "failed example 1"
    assert solver.convert("..") == "..", "failed example 2"
    assert solver.convert("...") == "...", "failed example 3"
    assert solver.convert("....") == ".....", "failed example 4"
    assert solver.convert("........") == "........", "failed example 5"
    assert solver.convert("..........") == "..........", "failed example 6"
    assert solver.convert("............") == "............", "failed example 7"
    assert solver.convert("..............") == "..............", "failed example 8"
    assert solver.convert("...............") == "...............", "failed example 9"
    assert solver.convert(".................") == ".................", "failed example 10"
    assert solver.convert(".................") == ".................", "failed example 11"
    assert solver.convert(".................") == ".................", "failed example 12"
    assert solver.convert(".................") == ".................", "failed example 13"
    assert solver.convert(".................") == ".................", "failed example 14"
    assert solver.convert(".................") == ".................", "failed example 15"
    assert solver.convert(".................") == ".................", "failed example 16"
    assert solver.convert(".................") == ".................", "failed example 17"
    assert solver.convert(".................") == ".................", "failed example 18"
    assert solver.convert(".................") == ".................", "failed example 19"
    assert solver.convert(".................") == ".................", "failed example 20"
    assert solver.convert(".................") == ".................", "failed example 21"
    assert solver.convert(".................") == ".................
################################################################

Solution:
['.', '.', 'f', 'f', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.', '.']

