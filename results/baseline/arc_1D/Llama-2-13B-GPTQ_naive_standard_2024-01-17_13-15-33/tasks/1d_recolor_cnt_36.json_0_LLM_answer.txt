Input token: 542
Output token: 341
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'c', '.', '.', '.', 'f', 'f', 'f', '.', 'b', 'b', '.', '.', '.', 'c', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'g', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', '.', '.', 'f', 'f', 'f', '.', '.', '.', 'b', 'b', '.', '.', '.', 'f', 'f', 'f', '.', '.', 'b', 'b', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'g', 'g', '.', 'g', 'g', 'g', '.', 'g', '.', '.', '.', 'g', 'g', '.', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', '.', 'f', 'f', 'f', '.', 'c', '.', '.', '.', 'b', 'b', '.', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'g', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'b', 'b', '.', 'f', 'f', 'f', '.', 'c', '.', '.', '.', 'b', 'b', '.', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""

from typing import List, Tuple
import re

class Solution:
    def letterCasePermutation(self, S: str) -> List[str]:
        if not S or len(S) == 0: return []
        
        # find all possible permutations of letters in string
        result = []
        for i in range(len(S)):
            temp = list(reversed(S[:i])) + list(reversed(S[i+1:]))
            result += self._permute(temp)
            
        return result
    
    def _permute(self, S):
        if not S or len(S) == 0: return []
        
        result = []
        for i in range(len(S)):
            temp = list(reversed(S[:i])) + list(reversed(S[i+1:]))
            result += self._permute(temp)
            
        return result

if __name__ == "__main__":
    s = Solution()
    print(s.letterCasePermutation("abcdefghijklmnopqrstuvwxyz"))
################################################################

Solution:
['.', 'c', '.', '.', 'f', 'f', 'f', '.', '.', '.', 'b', 'b', '.', '.', 'b', 'b', '.', '.', '.', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']

