Input token: 463
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']

Example_3:
input: ['.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']
"""

import re
from typing import List, Tuple

class Solution:
    def replaceString(self, s: str) -> None:
        """
        Do not read input, do not produce output, just pure function.
        :param s: Input string
        :return: void
        """
        if len(s) == 0: return
        m = re.match('^([\.\?])+(\w+)', s)
        if m is None: raise ValueError("Invalid input")
        cnt = int(m[1])
        for i in range(cnt):
            self.replaceChar(s, m[0], m[2])
        
    def replaceChar(self, s: str, old: str, new: str) -> None:
        """
        Replace all occurences of `old` with `new`.
        :param s: String to be modified
        :param old: Old character
        :param new: New character
        :return: void
        """
        n = len(s)
        if n == 0: return
        pos = -1
        while True:
            pos = s.find(old, pos + 1)
            if pos < 0: break
            s = s[:pos] + new + s[pos + len(old):]
            
def test():
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz") == "abcdfghijklmnopqrstuvwxyz"
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz.") == "abcdfghijklmnopqrstuvwxyz."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz..") == "abcdfghijklmnopqrstuvwxyz..."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz...") == "abcdfghijklmnopqrstuvwxyz..."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz....") == "abcdfghijklmnopqrstuvwxyz...."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz.....") == "abcdfghijklmnopqrstuvwxyz......"
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz......") == "abcdfghijklmnopqrstuvwxyz......"
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz........") == "abcdfghijklmnopqrstuvwxyz......"
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz.......") == "abcdfghijklmnopqrstuvwxyz......."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz..........") == "abcdfghijklmnopqrstuvwxyz......."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz............") == "abcdfghijklmnopqrstuvwxyz......."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz..............") == "abcdfghijklmnopqrstuvwxyz......."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz...............") == "abcdfghijklmnopqrstuvwxyz......."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz.................") == "abcdfghijklmnopqrstuvwxyz......."
    assert Solution().replaceString("abcd.efghijklmnopqrstuvwxyz.................") == "abcdfghijklmnopqrstuvwxyz......."
    assert Solution().
################################################################

Solution:
['.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.']

