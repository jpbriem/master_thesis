Input token: 277
Output token: 157
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'a', 'a', 'a', '.', 'i', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.']

Example_2:
input: ['.', '.', '.', 'd', 'd', 'd', '.', 'i', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'd', 'd', 'd', '.']

Example_3:
input: ['.', 'a', 'a', 'a', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', '.', '.']

Test case:
input: ['g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', '.']
'''

def solution(s):
    # Write your code here
    if not s: return ''
    n = len(s)
    i, j = 0, -1
    while True:
        if i == n or j == -1: break
        if s[j]!= '.': continue
        if s[i] == s[j]:
            i += 1
            j += 1
        else:
            j -= 1
    return s[:i+1] + s[-j:]

################################################################

Solution:
['.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', '.', '.', '.', '.']

