Input token: 234
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['d', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
output: ['g', 'g', 'g', 'g', 'd', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'd', 'a', 'a', '.', '.', '.']
output: ['.', '.', '.', '.', 'a', 'a', 'd', '.', '.', '.']

Example_3:
input: ['g', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']
output: ['f', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'f', 'd', 'd', 'd', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'd', 'd', 'd', 'f', '.', '.', '.', '.', '.']
"""

import re
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s or len(s) == 0: return ''
        # find all dots in string
        dot_indexes = []
        for i in range(len(s)):
            if s[i] == '.':
                dot_indexes.append(i)
        
        # sort indexes by index value
        sorted_dot_indexes = sorted(dot_indexes, key=lambda x: x)
        # remove duplicates from list
        unique_dot_indexes = set()
        for i in sorted_dot_indexes:
            unique_dot_indexes.add(i)
        
        # get first index of last dot
        last_dot_index = -1
        for i in reversed(unique_dot_indexes):
            if s[i] == '.':
                last_dot_index = i
                break
            
        # split string into parts
        part_strings = []
        for i in range(last_dot_index + 1, len(s)):
            part_strings.append(s[i])
        
        # reverse each part except last one
        result = ''
        for i in range(len(part_strings) - 1):
            result += part_strings[i][::-1]
        result += part_strings[-1]
        return result
    
if __name__ == "__main__":
    solution = Solution()
    assert solution.transform('') == '', print("{}".format(solution.transform('')))
    assert solution.transform('.') == '.', print("{}".format(solution.transform('.')))
    assert solution.transform('..') == '..', print("{}".format(solution.transform('..')))
    assert solution.transform('...') == '...', print("{}".format(solution.transform('...')))
    assert solution.transform('....') == '....', print("{}".format(solution.transform('....')))
    assert solution.transform('.....') == '.....', print("{}".format(solution.transform('.....')))
    assert solution.transform('......') == '......', print("{}".format(solution.transform('......')))
    assert solution.transform('........') == '........', print("{}".format(solution.transform('........')))
    assert solution.transform('..........') == '..........', print("{}".format(solution.transform('..........')))
    assert solution.transform('...........') == '...........', print("{}".format(solution.transform('...........')))
    assert solution.transform('............') == '............', print("{}".format(solution.transform('............')))
    assert solution.transform('.............') == '.............', print("{}".format(solution.transform('.............')))
    assert solution.transform('..............') == '..............', print("{}".format(solution.transform('..............')))
    assert solution.transform('...............') == '...............', print("{}".format(solution.transform('...............')))
    assert solution.transform('.................') == '.................', print("{}".format(solution.transform('.................')))
    assert solution.transform('.................') == '.................', print("{}".format(solution.transform('.................')))
    assert solution.transform('.................') == '.................', print("{}".format(solution.transform('.................')))
    assert solution.transform('.................') == '.................', print("{}".format(solution.transform('.................')))
    assert solution.transform('.................') == '.................', print("{}".format(solution.transform('.................')))
    assert solution.transform('.................') == '.................', print("{}".format(solution.transform('.................')))
    assert solution.transform('.................') == '.................', print("{}".format(solution.transform('.................')))
    assert solution.transform
################################################################

Solution:
['.', 'd', 'd', 'd', 'f', '.', '.', '.', '.', '.']

