Input token: 313
Output token: 335
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'f', 'f', 'f', 'f', '.', 'i', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'f', 'f', 'f', 'f', '.']

Example_2:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', 'g', '.']

Example_3:
input: ['.', '.', '.', 'd', 'd', 'd', 'd', '.', 'i', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'd', 'd', 'd', 'd', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', 'g', '.']
"""
from __future__ import print_function, division
import sys
sys.stdin = open(os.devnull, "w")

def main():
    n, m = map(int, input().split())
    a = list(map(lambda x: int(x), input()))
    b = list(map(lambda x: int(x), input()))
    
    for i in range(n):
        if (a[0] == 0) or (b[0] == 0):
            continue
        
        if (a[0] + b[0]) % 2!= 0:
            continue
            
        a.append(a[0])
        b.append(b[0])
        a.pop()
        b.pop()
        a.sort()
        b.sort()
        c = []
        while True:
            if (a[-1] - b[-1]) < 1:
                break
                
            c.insert(-1, a[-1])
            a.pop()
            b.pop()
        a.reverse()
        b.reverse()
        c.reverse()
        print("".join([str(c[i]) for i in range(len(c))]))
main()
################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', 'g', '.', '.']

