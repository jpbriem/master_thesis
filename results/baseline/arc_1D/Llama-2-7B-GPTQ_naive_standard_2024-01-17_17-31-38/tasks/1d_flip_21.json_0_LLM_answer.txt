Input token: 284
Output token: 456
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['g', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']
output: ['a', 'a', 'a', 'a', 'a', 'g', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'd', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'd', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'd', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'd', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'g', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.']
"""
from typing import List, Optional
import collections


class Solution(object):
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        :rtype: None
        """
        if not isinstance(s, list):
            return
        # 把字符串转化为list，并且去重
        words = set([x for x in s])
        # 遍历每个单词，判断是否需要反向处理
        for word in words:
            if len(word) > 0:
                # 如果长度大于0，则进行反向处理
                self._reverse_words(word, 0, len(word))

    def _reverse_words(self, word: str, start: int, end: int) -> None:
        """
        :type word: str
        :param start: 起始位置
        :param end: 结束位置
        :return:
        """
        if start == end:
            return
        # 将字符串分解成两部分，前缀和后缀
        prefix = word[:start]
        suffix = word[end:]
        # 对前缀进行反向处理
        self._reverse_words(prefix, start + 1, -1)
        # 对后缀进行反向处理
        self._reverse_words(suffix, -1, -1)


if __name__ == "__main__":
    solution = Solution()
    print("Input:", " ".join(solution.reverseWords("".join(["." for i in range(5)]))))
################################################################

Solution:
['.', '.', '.', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.', '.']

