Input token: 228
Output token: 448
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', 'f', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'f', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', 'f']
output: ['.', '.', '.', '.', '.', 'h', 'h', 'h', 'f']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', 'f']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'f']

Test case:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', '.', 'f']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'f']
"""
import sys
from typing import List, Optional

def solution(s: str) -> int:
    if len(s) == 0 or s[0]!= ".": return -1
    
    stack = []
    for i in range(len(s)):
        if s[i] == ".":
            while not stack[-1].endswith("."):
                stack.pop()
            
            if stack[-1][:-1] == "."*4:
                stack.append(".")
                
        elif s[i] == "f":
            while not stack[-1].endswith("f"):
                stack.pop()
        
            if stack[-1][:-1] == "."*5 + "f":
                stack.append("f")
                
        else:
            if s[i] == "h":
                while not stack[-1].endswith("h"):
                    stack.pop()
                
                if stack[-1][:-1] == "."*6 + "h":
                    stack.append("h")
                
            else:
                if s[i] == "b":
                    while not stack[-1].endswith("b"):
                        stack.pop()
                
                    if stack[-1][:-1] == "."*7 + "b":
                        stack.append("b")
                
                else:
                    if s[i] == "g":
                        while not stack[-1].endswith("g"):
                            stack.pop()
                
                        if stack[-1][:-1] == "."*8 + "g":
                            stack.append("g")
                
                    else:
                        raise ValueError("Invalid character.")
                
    return len(stack)-1

################################################################

Solution:
['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'f']

