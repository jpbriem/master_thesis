Input token: 323
Output token: 462
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.']
output: ['.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']

Example_3:
input: ['.', '.', '.', '.', '.', 'e', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']
"""
from __future__ import print_function, division
import sys
sys.stdin = open(os.devnull, "w")

def main():
    n, m = map(int, input().split())
    a = list(map(lambda x: int(x), input()))
    b = list(map(lambda x: int(x), input()))
    
    for i in range(n):
        if (a[i] == 0) or (b[i] == 0): continue
        
        if (a[i] > b[i]) :
            cnt = 0
            while True:
                if (a[i] - b[i] < 4): break
                
                cnt += 1
                a[i], b[i] = b[i], a[i]
            
            if (cnt >= 5):
                print("Case #%d:" % (i + 1))
                print(" ".join([str(j) for j in a]))
                print()
                print(" ".join([str(k) for k in b]))
                print()
                return
        else:
            cnt = 0
            while True:
                if (a[i] - b[i] <= 4): break
                
                cnt += 1
                a[i], b[i] = b[i], a[i]
            
            if (cnt >= 5):
                print("Case #%d:" % (i + 1))
                print(" ".join([str(j) for j in a]))
                print()
                print(" ".join([str(k) for k in b]))
                print()
                return

if __name__ == "__main__":
    main()
################################################################

Solution:
['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']

