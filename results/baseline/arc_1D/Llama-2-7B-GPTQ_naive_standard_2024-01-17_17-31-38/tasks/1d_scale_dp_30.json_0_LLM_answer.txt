Input token: 303
Output token: 1027
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', 'd', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'd', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'd']

Example_3:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'd', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', '.']

Test case:
input: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', 'd', '.']
################################################################

LLM answer:

output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'd', '.']
"""
import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> int:
    """Returns next state based on current state."""
    if len(current_state) == 0:
        return 0
    elif current_state[0] in "bc":
        return 1
    else:
        return -1


class StateMachine:
    def __init__(self):
        self._states = ["", "."] * 4 + ["d"]
        self._transitions = []
        self._current_state = ""
        self._prev_state = None
        self._curr_char = None
        self._prev_char = None

    @property
    def states(self) -> List[str]:
        return self._states

    @property
    def transitions(self) -> List[Tuple[int, str]]:
        return self._transitions

    @property
    def curr_char(self) -> str:
        return self._curr_char

    @property
    def prev_char(self) -> str:
        return self._prev_char

    def set_prev_char(self, char: str) -> None:
        self._prev_char = char

    def set_curr_char(self, char: str) -> None:
        self._curr_char = char

    def add_transition(self, to_state: str, from_state: str, action: int) -> None:
        self._transitions.append((action, to_state))

    def update(self, chars: List[str]) -> None:
        for i, c in enumerate(chars):
            if not (i % 2):
                self._set_curr_char(c)
            elif i < 5 or i > 6:
                self._add_transition("", "", 0)
            else:
                self._add_transition(*get_next(self._current_state), c)

    def run(self, chars: List[str], start=False) -> None:
        self.update(chars)
        while True:
            if self._curr_char is None:
                break
            self._set_prev_char()
            self._set_curr_char()
            self._run_cycle()

    def _run_cycle(self) -> None:
        if self._curr_char!= self._prev_char:
            self._change_to_new_state()
        else:
            self._advance_in_same_state()

    def _change_to_new_state(self) -> None:
        if self._prev_state is not None:
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_char
            self._prev_state += self._curr_
################################################################

Solution:
['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'd', '.']

