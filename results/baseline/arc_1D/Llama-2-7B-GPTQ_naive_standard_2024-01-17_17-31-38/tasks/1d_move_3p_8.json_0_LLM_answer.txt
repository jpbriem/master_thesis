Input token: 221
Output token: 206
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'b', 'b', 'b', 'b', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'h', 'h', 'h', '.']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', '.']

Test case:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']
"""
import sys
from typing import List, Optional

class Solution(object):
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        :rtype: None
        """
        
        if not isinstance(s,str):
            return 0
            
        words = []
        for i in range(len(s)):
            word = ''
            for j in range(i+1, len(s)):
                if s[j] == ',':
                    break
                else:
                    word += s[j]
            words.append(word)
        print('words: {}'.format(words))
        for w in reversed(words):
            print(w)

################################################################

Solution:
['.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.']

