Input token: 375
Output token: 258
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.']
output: ['.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.']

Example_3:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.']
output: ['.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.']

Test case:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']
"""

import sys
from collections import deque, namedtuple

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str) or len(s) == 0: return ''
        
        words = []
        for char in s:
            if char.isalpha():
                words.append(char)
                
        # sort by length of word
        sorted_words = sorted(words, key=lambda x:len(x))
        
        # create a queue to store reversed string
        q = deque()
        for w in sorted_words:
            q.appendleft(w[::-1])
            
        # join all reversed strings into one
        result = "".join([w[-1] for w in q])
        
        return result
################################################################

Solution:
['.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']

