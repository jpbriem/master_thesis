Input token: 344
Output token: 201
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'g', '.']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'g']
output: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g']

Example_3:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'g', '.', '.']
output: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'g', '.', '.']

Test case:
input: ['b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['b', 'b', 'b', 'b', 'b', 'b', 'g', '.', '.', '.', '.', '.', '.', '.', '.']
"""
import sys
from typing import List, Optional

def solution(s: str) -> int:
    """
    :param s: a string of length n
    :return: the number of unique characters in the given string
    """
    if len(s) == 0 or not s[0]: return 0
    
    # find the first character
    char = s[0]
    count = 1
    for i in range(len(s)):
        if s[i]!= char: break
        
        count += 1
        if count > 1: continue
        
        char = s[i+1]
        
    return count - 1

################################################################

Solution:
['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.', '.', '.', '.']

