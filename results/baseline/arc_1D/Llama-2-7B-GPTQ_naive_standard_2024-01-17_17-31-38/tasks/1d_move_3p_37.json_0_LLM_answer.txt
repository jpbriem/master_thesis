Input token: 222
Output token: 206
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', '.']

Test case:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', '.']
"""
import sys
from typing import List, Optional

class Solution(object):
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        :rtype: None
        """
        
        if not isinstance(s,str):
            return 0
            
        words = []
        for i in range(len(s)):
            word = ''
            for j in range(i+1, len(s)):
                char = s[j]
                
                if char == '.':
                    break
                    
                elif char == ',':
                    continue
                    
                else:
                    word += char
                    
            words.append(word)
            
        return words

################################################################

Solution:
['.', '.', '.', 'g', 'g', 'g', 'g', '.', '.']

