Input token: 301
Output token: 173
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a']
output: ['.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'g', 'g', 'g', 'g']

Example_2:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', '.', '.', 'g', 'g', 'g', 'g', '.']

Test case:
input: ['.', '.', '.', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']
"""
from typing import List, Optional
import collections


class Solution(object):
    def reverseWords(self, s: str) -> str:
        """
        :type s: str
        :rtype: str
        """
        if not isinstance(s, str):
            return ''
        
        words = []
        for char in s:
            if char == '.':
                words.append('.')
            else:
                words.append('a' + char)
                
        return ''.join([w[::-1] for w in words])

################################################################

Solution:
['.', '.', '.', 'g', 'g', '.', 'f', 'f', 'f', '.', '.', '.', '.']

