Input token: 274
Output token: 296
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', '.', 'e', 'e']
output: ['.', '.', 'a', 'a', 'a', '.', '.', '.', 'i', '.', 'c', 'c']

Example_2:
input: ['.', 'e', 'e', '.', 'e', '.', '.', 'e', 'e', 'e', '.', '.']
output: ['.', 'c', 'c', '.', 'i', '.', '.', 'a', 'a', 'a', '.', '.']

Example_3:
input: ['.', '.', '.', 'e', 'e', 'e', '.', '.', 'e', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', '.', '.', 'i', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'e', '.', 'e', 'e', 'e', '.', 'e', 'e', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'a', 'a', 'a', '.', '.', 'i', '.', '.', '.']
"""
from typing import List, Optional
import collections


class Solution(object):
    def findKthLargest(self, nums: List[int], k: int) -> List[int]:
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        if len(nums) < 2 or k <= 0:
            return []
        
        # sort by ascending order
        nums = sorted(nums, reverse=True)
        n = len(nums) - 1
        while n >= 0:
            if n > k:
                break
            
            i = (n + k) // 2
            j = i + 1
            if nums[j] == nums[i]:
                continue
                
            if nums[j] > nums[i]:
                nums[k:] = nums[:j+1]
                break
            else:
                nums[k:] = nums[i:j+1]
                break
            
        return nums
################################################################

Solution:
['.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', 'c', 'c', '.']

