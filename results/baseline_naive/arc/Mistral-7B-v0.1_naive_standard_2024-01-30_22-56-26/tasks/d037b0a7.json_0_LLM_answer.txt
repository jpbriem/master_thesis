Input token: 245
Output token: 376
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'f'], ['.', 'd', '.'], ['c', '.', '.']]
output: [['.', '.', 'f'], ['.', 'd', 'f'], ['c', 'd', 'f']]

Example_2:
input: [['.', 'b', '.'], ['g', '.', 'h'], ['.', '.', '.']]
output: [['.', 'b', '.'], ['g', 'b', 'h'], ['g', 'b', 'h']]

Example_3:
input: [['d', '.', '.'], ['.', 'b', '.'], ['.', '.', '.']]
output: [['d', '.', '.'], ['d', 'b', '.'], ['d', 'b', '.']]

Test case:
input: [['d', '.', 'h'], ['.', '.', '.'], ['.', 'g', '.']]
################################################################

LLM answer:

output: [['d', '.', 'h'], ['.', '.', 'h'], ['.', 'g', 'h']]
'''

class Solution(object):
    def floodFill(self, image, sr, sc, newColor):
        """
        :type image: List[List[int]]
        :type sr: int
        :type sc: int
        :type newColor: int
        :rtype: List[List[int]]
        """
        if not image or len(image) == 0 or len(image[0]) == 0: return image
        m = len(image)
        n = len(image[0])
        color = image[sr][sc]
        if color!= newColor:
            self.fill(image, sr, sc, color, newColor, m, n)
        return image

    def fill(self, image, sr, sc, oldColor, newColor, m, n):
        if sr < 0 or sr >= m or sc < 0 or sc >= n or image[sr][sc]!= oldColor:
            return
        image[sr][sc] = newColor
        self.fill(image, sr - 1, sc, oldColor, newColor, m, n)
        self.fill(image, sr + 1, sc, oldColor, newColor, m, n)
        self.fill(image, sr, sc - 1, oldColor, newColor, m, n)
        self.fill(image, sr, sc + 1, oldColor, newColor, m, n)
################################################################

Solution:
[['d', '.', 'h'], ['d', '.', 'h'], ['d', 'g', 'h']]

