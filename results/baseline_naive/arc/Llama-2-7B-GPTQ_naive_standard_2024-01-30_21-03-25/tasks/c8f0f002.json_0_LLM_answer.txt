Input token: 390
Output token: 361
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'h', 'h', 'g', 'g', 'h'], ['a', 'a', 'g', 'g', 'a', 'h'], ['g', 'a', 'a', 'g', 'g', 'h']]
output: [['a', 'h', 'h', 'e', 'e', 'h'], ['a', 'a', 'e', 'e', 'a', 'h'], ['e', 'a', 'a', 'e', 'e', 'h']]

Example_2:
input: [['g', 'g', 'g', 'a'], ['a', 'h', 'a', 'g'], ['g', 'a', 'a', 'g']]
output: [['e', 'e', 'e', 'a'], ['a', 'h', 'a', 'e'], ['e', 'a', 'a', 'e']]

Example_3:
input: [['a', 'h', 'a', 'g', 'a'], ['g', 'h', 'h', 'a', 'a'], ['g', 'a', 'h', 'h', 'g']]
output: [['a', 'h', 'a', 'e', 'a'], ['e', 'h', 'h', 'a', 'a'], ['e', 'a', 'h', 'h', 'e']]

Test case:
input: [['a', 'g', 'g', 'a', 'g'], ['h', 'a', 'g', 'g', 'g'], ['h', 'g', 'a', 'g', 'h']]
################################################################

LLM answer:

output: [['a', 'e', 'e', 'a', 'e'], ['e', 'a', 'e', 'a', 'e'], ['e', 'e', 'a', 'e', 'e']]
"""
import sys
from typing import List, Tuple

def main():
    n = int(sys.stdin.readline().strip())
    for _ in range(n):
        s = list(map(int, sys.stdin.readline().split()))
        print(' '.join([str(x) for x in solution(s)]))

def solution(s:List[Tuple[int]]) -> List[Tuple[int]]:
    def f(s:List[Tuple[int]], i:int)->List[Tuple[int]]:
        if len(s) == 0 or not isinstance(i, tuple): return []
        
        res = []
        for j in range(len(s)):
            if s[j][0]!= s[j+1][0]:
                break
            
            if s[j][0] < s[j+1][0]:
                tmp = s[:j]+[tuple(sorted(s[j], reverse=True))]
                res += f(tmp, j+1)
                
            else:
                tmp = s[:j+1]+[tuple(sorted(s[j+1], reverse=False))]
                res += f(tmp, j)
                
        return res
    
    return f(s, 0)[::-1]

################################################################

Solution:
[['a', 'e', 'e', 'a', 'e'], ['h', 'a', 'e', 'e', 'e'], ['h', 'e', 'a', 'e', 'h']]

