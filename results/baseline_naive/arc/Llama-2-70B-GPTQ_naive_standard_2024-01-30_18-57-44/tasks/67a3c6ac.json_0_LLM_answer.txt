Input token: 708
Output token: 326
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['f', 'f', 'f', 'b'], ['f', 'a', 'f', 'b'], ['g', 'b', 'g', 'b'], ['a', 'g', 'b', 'b']]
output: [['b', 'f', 'f', 'f'], ['b', 'f', 'a', 'f'], ['b', 'g', 'b', 'g'], ['b', 'b', 'g', 'a']]

Example_2:
input: [['g', 'g', 'g', 'f', 'f', 'f', 'b'], ['f', 'g', 'a', 'a', 'g', 'g', 'a'], ['g', 'g', 'b', 'a', 'b', 'f', 'f'], ['b', 'b', 'g', 'g', 'g', 'b', 'b'], ['g', 'b', 'g', 'a', 'b', 'g', 'b'], ['f', 'f', 'f', 'b', 'b', 'a', 'a'], ['f', 'b', 'f', 'f', 'f', 'f', 'f']]
output: [['b', 'f', 'f', 'f', 'g', 'g', 'g'], ['a', 'g', 'g', 'a', 'a', 'g', 'f'], ['f', 'f', 'b', 'a', 'b', 'g', 'g'], ['b', 'b', 'g', 'g', 'g', 'b', 'b'], ['b', 'g', 'b', 'a', 'g', 'b', 'g'], ['a', 'a', 'b', 'b', 'f', 'f', 'f'], ['f', 'f', 'f', 'f', 'f', 'b', 'f']]

Example_3:
input: [['a', 'b', 'g', 'a', 'a', 'a'], ['b', 'a', 'g', 'g', 'b', 'f'], ['b', 'a', 'b', 'f', 'b', 'a'], ['a', 'b', 'a', 'g', 'f', 'b'], ['b', 'g', 'a', 'b', 'g', 'a'], ['b', 'a', 'f', 'b', 'g', 'g']]
output: [['a', 'a', 'a', 'g', 'b', 'a'], ['f', 'b', 'g', 'g', 'a', 'b'], ['a', 'b', 'f', 'b', 'a', 'b'], ['b', 'f', 'g', 'a', 'b', 'a'], ['a', 'g', 'b', 'a', 'g', 'b'], ['g', 'g', 'b', 'f', 'a', 'b']]

Test case:
input: [['g', 'f', 'a'], ['f', 'g', 'f'], ['f', 'b', 'b']]
################################################################

LLM answer:

output: [['b', 'g', 'a'], ['g', 'f', 'f'], ['b', 'b', 'f']]
"""

import collections
from typing import List, Tuple


class Solution(object):
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list
        2. compare first char of sorted strings to find anagram groups
        3. add all words from current group into a new list
        4. return lists of grouped anagrams
        :param strs:
        :return:
        """
        # O(n) time | O(n) space - where n is number of unique characters in all inputs
        if not strs or len(strs) == 0:
            return []

        # create dictionary with keys as sorted strings and values as lists of original strings
        d = {}
        for word in strs:
            s = "".join(sorted(word))
            if s not in d:
                d[s] = []
            d[s].append(word)

        # create output list of grouped anagrams
        out = []
        for k, v in d.items():
            out.append([])
            for w in v:
                out[-1].append("".join(w))

        return out

################################################################

Solution:
[['a', 'f', 'g'], ['f', 'g', 'f'], ['b', 'b', 'f']]

