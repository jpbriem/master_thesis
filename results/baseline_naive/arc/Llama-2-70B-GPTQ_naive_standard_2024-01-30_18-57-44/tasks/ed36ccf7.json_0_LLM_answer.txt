Input token: 317
Output token: 370
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['i', '.', '.'], ['i', 'i', 'i'], ['i', 'i', 'i']]
output: [['.', 'i', 'i'], ['.', 'i', 'i'], ['i', 'i', 'i']]

Example_2:
input: [['f', 'f', 'f'], ['.', '.', '.'], ['f', 'f', '.']]
output: [['f', '.', '.'], ['f', '.', 'f'], ['f', '.', 'f']]

Example_3:
input: [['.', '.', 'i'], ['.', '.', 'i'], ['i', 'i', 'i']]
output: [['i', 'i', 'i'], ['.', '.', 'i'], ['.', '.', 'i']]

Example_4:
input: [['b', '.', 'b'], ['.', '.', 'b'], ['.', 'b', 'b']]
output: [['b', 'b', 'b'], ['.', '.', 'b'], ['b', '.', '.']]

Test case:
input: [['.', '.', '.'], ['e', '.', '.'], ['.', 'e', 'e']]
################################################################

LLM answer:

output: [['e', 'e', 'e'], ['.', '.', 'e'], ['.', '.', 'e']]
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, isEnd=False):
        self.val = val
        self.isEnd = isEnd
        self.next = []


class Solution(object):
    def orangesSinking(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: List[List[str]]
        """
        if not grid or not grid[0]: return None
        
        directions = [(0,-1), (0, 1), (-1, 0), (1, 0)]
        queue = collections.deque()
        queue.append((grid[0][0].index('i'), 0))
        while queue:
            x, y = queue.popleft()
            
            # check all possible neighbors
            for dx, dy in directions:
                newX = x + dx
                newY = y + dy
                
                if -1 <= newX < len(grid) and -1 <= newY < len(grid[0]) \
                   and grid[newX][newY] == '.':
                    
                    # mark as visited
                    grid[x][y] = '.'
                    grid[newX][newY] = 'i'
                    
                    # enqueue neighbor node
                    queue.append((newX, newY))
                    
        return grid
################################################################

Solution:
[['.', '.', 'e'], ['.', '.', 'e'], ['.', 'e', '.']]

