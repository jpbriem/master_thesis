Input token: 437
Output token: 506
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['e', '.', '.'], ['c', 'e', '.'], ['.', '.', 'e']]
output: [['e', 'c', '.'], ['.', 'e', '.'], ['.', '.', 'e']]

Example_2:
input: [['e', '.', '.', '.'], ['.', 'e', '.', '.'], ['f', '.', 'e', '.'], ['f', '.', 'd', 'e']]
output: [['e', '.', 'f', 'f'], ['.', 'e', '.', '.'], ['.', '.', 'e', 'd'], ['.', '.', '.', 'e']]

Example_3:
input: [['e', '.', '.', '.', '.'], ['.', 'e', '.', '.', '.'], ['h', 'h', 'e', '.', '.'], ['.', 'b', '.', 'e', '.'], ['.', 'b', '.', 'a', 'e']]
output: [['e', '.', 'h', '.', '.'], ['.', 'e', 'h', 'b', 'b'], ['.', '.', 'e', '.', '.'], ['.', '.', '.', 'e', 'a'], ['.', '.', '.', '.', 'e']]

Test case:
input: [['e', '.', '.', '.', '.', '.'], ['.', 'e', '.', '.', '.', '.'], ['c', 'c', 'e', '.', '.', '.'], ['.', '.', '.', 'e', '.', '.'], ['b', '.', 'h', 'h', 'e', '.'], ['b', '.', 'f', '.', '.', 'e']]
################################################################

LLM answer:

output: [['e', '.', 'c', 'b', 'b', '.'], ['.', 'e', 'c', 'c', 'f', '.'], ['.', '.', 'e', '.', '.', '.'], ['.', '.', '.', 'e', 'h', '.'], ['.', '.', '.', '.', '.', 'e']]
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, isEnd=False):
        self.val = val
        self.isEnd = isEnd
        self.next = []


class Solution(object):
    def orangesSinking(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: List[List[str]]
        """
        
        # 0. check inputs & outputs
        if not all([len(row) == len(grid[0]) for row in grid]):
            return None
            
        # 1. process
        result = [[None]*len(grid[0]) for _ in range(len(grid))]
        queue = deque()
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j]!= '.':
                    node = Node(grid[i][j])
                    queue.append((node, (i, j)))
                    
        while queue:
            node, pos = queue.popleft()
            x, y = pos
            if node.isEnd:
                continue
            for dx, dy in [(0, -1), (-1, 0), (0, 1), (1, 0)]:
                newX, newY = x+dx, y+dy
                if 0 <= newX < len(result) and 0 <= newY < len(result[newX]) \
                   and result[newX][newY] == '.':
                    result[x][y] = result[newX][newY] = node.val
                    queue.append((Node(node.val), (newX, newY)))
        return result
################################################################

Solution:
[['e', '.', 'c', '.', 'b', 'b'], ['.', 'e', 'c', '.', '.', '.'], ['.', '.', 'e', '.', 'h', 'f'], ['.', '.', '.', 'e', 'h', '.'], ['.', '.', '.', '.', 'e', '.'], ['.', '.', '.', '.', '.', 'e']]

