
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[8, 8, 0, 0, 0], [8, 8, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [2, 2, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Example_2:
input: [[0, 8, 0], [0, 0, 0], [0, 0, 0]]
output: [[0, 0, 0], [0, 2, 0], [0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [0, 8, 8, 8, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 2, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 8, 0, 0], [0, 8, 8, 0, 0], [0, 0, 8, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

###########################################################
Sample Outputs:
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 4, 4, 4, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
*/

public class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return new int[0][];
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] == 0) {
                    queue.offer(i * matrix[i].length + j);
                } else {
                    matrix[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        int[] dirs = {-1, 0, 1, 0, -1};
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            int x = cur / matrix[0].length;
            int y = cur % matrix[0].length;
            for (int k = 0; k < 4; k++) {
                int nx = x + dirs[k];
                int ny = y + dirs[k+1];
                if (nx >= 0 && nx < matrix.length && ny >= 0 && ny < matrix[0].length && matrix[nx][ny] > matrix[x][y] + 1) {
                    matrix[nx][ny] = matrix[x][y] + 1;
                    queue.offer(nx * matrix[0].length + ny);
                }
            }
        }
        return matrix;
    }
}


###########################################################
Result:
solution: [[0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [0, 2, 2, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.037037037037037035

cat_success_cnt: 1

cat_success_rate: 0.037037037037037035

