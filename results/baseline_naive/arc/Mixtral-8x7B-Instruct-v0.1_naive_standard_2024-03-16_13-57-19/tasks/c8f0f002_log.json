{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[1, 8, 8, 7, 7, 8], [1, 1, 7, 7, 1, 8], [7, 1, 1, 7, 7, 8]]\noutput: [[1, 8, 8, 5, 5, 8], [1, 1, 5, 5, 1, 8], [5, 1, 1, 5, 5, 8]]\n\nExample_2:\ninput: [[7, 7, 7, 1], [1, 8, 1, 7], [7, 1, 1, 7]]\noutput: [[5, 5, 5, 1], [1, 8, 1, 5], [5, 1, 1, 5]]\n\nExample_3:\ninput: [[1, 8, 1, 7, 1], [7, 8, 8, 1, 1], [7, 1, 8, 8, 7]]\noutput: [[1, 8, 1, 5, 1], [5, 8, 8, 1, 1], [5, 1, 8, 8, 5]]\n\nTest case:\ninput: [[1, 7, 7, 1, 7], [8, 1, 7, 7, 7], [8, 7, 1, 7, 8]]\n\n###########################################################\nSample Outputs:\noutput: [[1, 7, 7, 4, 7], [8, 1, 4, 4, 7], [8, 4, 1, 4, 8]]\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid update(int **grid, int n, int m) {\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (i > 0 && grid[i - 1][j] == 1) {\n                grid[i][j] -= 1;\n            }\n            if (j > 0 && grid[i][j - 1] == 1) {\n                grid[i][j] -= 1;\n            }\n        }\n    }\n}\n\nvoid printGrid(int **grid, int n, int m) {\n    cout << \"[\" << endl;\n    for (int i = 0; i < n; ++i) {\n        cout << \"\\t\";\n        for (int j = 0; j < m; ++j) {\n            cout << grid[i][j];\n            if (j!= m - 1) {\n                cout << \", \";\n            }\n        }\n        cout << endl;\n    }\n    cout << \"]\" << endl;\n}\n\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n\n    int **grid = new int *[n];\n    for (int i = 0; i < n; ++i) {\n        grid[i] = new int[m];\n        for (int j = 0; j < m; ++j) {\n            cin >> grid[i][j];\n        }\n    }\n\n    // Update the grid with values from neighbours.\n    update(grid, n, m);\n\n    // Print the updated grid.\n    printGrid(grid, n, m);\n\n    // Free memory allocated to grid.\n    for (int i = 0; i < n; ++i) {\n        delete[] grid[i];\n    }\n    delete[] grid;\n}\n\nint main() {\n    solve();\n    return 0;\n}"
        }
    ],
    "idx": 35,
    "task": "c8f0f002",
    "category": "training",
    "ys": [
        "c8f0f002.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[1, 5, 5, 1, 5], [8, 1, 5, 5, 5], [8, 5, 1, 5, 8]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.05555555555555555,
        "cat_success_cnt": 2,
        "cat_success_rate": 0.05555555555555555
    },
    "usage_so_far": {
        "completion_tokens": 61489,
        "prompt_tokens": 65970,
        "cost": null
    }
}