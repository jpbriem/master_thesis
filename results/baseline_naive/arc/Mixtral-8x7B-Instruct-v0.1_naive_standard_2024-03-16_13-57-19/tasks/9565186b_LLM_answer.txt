
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[2, 2, 2], [2, 1, 8], [2, 8, 8]]
output: [[2, 2, 2], [2, 5, 5], [2, 5, 5]]

Example_2:
input: [[1, 1, 1], [8, 1, 3], [8, 2, 2]]
output: [[1, 1, 1], [5, 1, 5], [5, 5, 5]]

Example_3:
input: [[2, 2, 2], [8, 8, 2], [2, 2, 2]]
output: [[2, 2, 2], [5, 5, 2], [2, 2, 2]]

Example_4:
input: [[3, 3, 8], [4, 4, 4], [8, 1, 1]]
output: [[5, 5, 5], [4, 4, 4], [5, 5, 5]]

Test case:
input: [[1, 3, 2], [3, 3, 2], [1, 3, 2]]

###########################################################
Sample Outputs:
output: [[1, 3, 2], [3, 6, 2], [1, 3, 2]]
*/

public class Solution {
    public int[][] UpdateMatrix(int[][] mat) {
        if (mat == null || mat.Length == 0) return new int[0][];

        var m = mat.Length;
        var n = mat[0].Length;

        // Initialize the queue with all zeroes in matrix
        var q = new Queue<Tuple<int, int>>();
        for (var i = 0; i < m; ++i) {
            for (var j = 0; j < n; ++j) {
                if (mat[i][j] == 0) {
                    q.Enqueue(new Tuple<int, int>(i, j));
                } else {
                    mat[i][j] = -1;
                }
            }
        }

        // BFS to update values of non-zero elements
        while (q.Count > 0) {
            var tpl = q.Dequeue();
            var x = tpl.Item1;
            var y = tpl.Item2;

            if (x > 0 && mat[x - 1][y] == -1) {
                q.Enqueue(new Tuple<int, int>(x - 1, y));
                mat[x - 1][y] = mat[x][y] + 1;
            }

            if (x < m - 1 && mat[x + 1][y] == -1) {
                q.Enqueue(new Tuple<int, int>(x + 1, y));
                mat[x + 1][y] = mat[x][y] + 1;
            }

            if (y > 0 && mat[x][y - 1] == -1) {
                q.Enqueue(new Tuple<int, int>(x, y - 1));
                mat[x][y - 1] = mat[x][y] + 1;
            }

            if (y < n - 1 && mat[x][y + 1] == -1) {
                q.Enqueue(new Tuple<int, int>(x, y + 1));
                mat[x][y + 1] = mat[x][y] + 1;
            }
        }

        return mat;
    }
}


###########################################################
Result:
solution: [[5, 3, 5], [3, 3, 5], [5, 3, 5]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.043478260869565216

cat_success_cnt: 1

cat_success_rate: 0.043478260869565216

