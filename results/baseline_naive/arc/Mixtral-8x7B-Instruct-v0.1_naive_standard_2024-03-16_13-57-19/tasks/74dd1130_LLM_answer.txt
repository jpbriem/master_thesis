
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[2, 2, 1], [1, 5, 1], [5, 2, 2]]
output: [[2, 1, 5], [2, 5, 2], [1, 1, 2]]

Example_2:
input: [[2, 2, 5], [6, 2, 2], [5, 5, 5]]
output: [[2, 6, 5], [2, 2, 5], [5, 2, 5]]

Example_3:
input: [[9, 9, 5], [5, 5, 8], [5, 8, 9]]
output: [[9, 5, 5], [9, 5, 8], [5, 8, 9]]

Example_4:
input: [[2, 6, 6], [2, 1, 1], [2, 6, 2]]
output: [[2, 2, 2], [6, 1, 6], [6, 1, 2]]

Test case:
input: [[9, 3, 4], [9, 4, 4], [9, 3, 4]]

###########################################################
Sample Outputs:
output: [[9, 3, 4], [9, 4, 4], [9, 3, 4]]
*/

#include <iostream>
#include <vector>
using namespace std;

void sortRow(vector<int>& row) {
    int minIndex = 0;
    for (int i = 1; i < row.size(); ++i) {
        if (row[minIndex] > row[i]) {
            minIndex = i;
        }
    }
    swap(row[0], row[minIndex]);
}

void rearrangeMatrix(vector<vector<int>>& matrix) {
    // sort each row
    for (auto &row : matrix) {
        sortRow(row);
    }

    // find the first column's max value and its index
    vector<int> colMaxes;
    for (int j = 0; j < matrix[0].size(); ++j) {
        int maxValue = INT_MIN;
        int maxIndex = -1;
        for (int i = 0; i < matrix.size(); ++i) {
            if (matrix[i][j] > maxValue) {
                maxValue = matrix[i][j];
                maxIndex = i;
            }
        }
        colMaxes.push_back(maxIndex);
    }

    // rearrange rows based on the order of their max values in columns
    for (int i = 1; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[0].size() && matrix[colMaxes[j]][j] == matrix[i][j]; ++j) {}
        swap(matrix[i], matrix[colMaxes[j]]);
    }
}

int main() {
    vector<vector<int>> input = {{2, 2, 1}, {1, 5, 1}, {5, 2, 2}};
    rearrangeMatrix(input);
    cout << "rearranged matrix is:" << endl;
    for (auto &row : input) {
        for (auto &num : row) {
            cout << num <<'';
        }
        cout << endl;
    }
    return 0;
}


###########################################################
Result:
solution: [[9, 9, 9], [3, 4, 3], [4, 4, 4]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.05555555555555555

cat_success_cnt: 1

cat_success_rate: 0.05555555555555555

