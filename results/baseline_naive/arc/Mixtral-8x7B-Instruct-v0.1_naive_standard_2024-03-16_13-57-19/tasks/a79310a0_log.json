{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[8, 8, 0, 0, 0], [8, 8, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0], [2, 2, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\n\nExample_2:\ninput: [[0, 8, 0], [0, 0, 0], [0, 0, 0]]\noutput: [[0, 0, 0], [0, 2, 0], [0, 0, 0]]\n\nExample_3:\ninput: [[0, 0, 0, 0, 0], [0, 8, 8, 8, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 2, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\n\nTest case:\ninput: [[0, 0, 8, 0, 0], [0, 8, 8, 0, 0], [0, 0, 8, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 4, 4, 4, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]\n*/\n\npublic class Solution {\n    public int[][] updateMatrix(int[][] matrix) {\n        if (matrix == null || matrix.length == 0) return new int[0][];\n        Queue<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                if (matrix[i][j] == 0) {\n                    queue.offer(i * matrix[i].length + j);\n                } else {\n                    matrix[i][j] = Integer.MAX_VALUE;\n                }\n            }\n        }\n        int[] dirs = {-1, 0, 1, 0, -1};\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            int x = cur / matrix[0].length;\n            int y = cur % matrix[0].length;\n            for (int k = 0; k < 4; k++) {\n                int nx = x + dirs[k];\n                int ny = y + dirs[k+1];\n                if (nx >= 0 && nx < matrix.length && ny >= 0 && ny < matrix[0].length && matrix[nx][ny] > matrix[x][y] + 1) {\n                    matrix[nx][ny] = matrix[x][y] + 1;\n                    queue.offer(nx * matrix[0].length + ny);\n                }\n            }\n        }\n        return matrix;\n    }\n}"
        }
    ],
    "idx": 26,
    "task": "a79310a0",
    "category": "training",
    "ys": [
        "a79310a0.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [0, 2, 2, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 0, 0]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.037037037037037035,
        "cat_success_cnt": 1,
        "cat_success_rate": 0.037037037037037035
    },
    "usage_so_far": {
        "completion_tokens": 42946,
        "prompt_tokens": 46353,
        "cost": null
    }
}