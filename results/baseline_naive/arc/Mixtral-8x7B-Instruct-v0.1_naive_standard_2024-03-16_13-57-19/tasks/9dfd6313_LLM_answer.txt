
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[5, 0, 0], [3, 5, 0], [0, 0, 5]]
output: [[5, 3, 0], [0, 5, 0], [0, 0, 5]]

Example_2:
input: [[5, 0, 0, 0], [0, 5, 0, 0], [6, 0, 5, 0], [6, 0, 4, 5]]
output: [[5, 0, 6, 6], [0, 5, 0, 0], [0, 0, 5, 4], [0, 0, 0, 5]]

Example_3:
input: [[5, 0, 0, 0, 0], [0, 5, 0, 0, 0], [8, 8, 5, 0, 0], [0, 2, 0, 5, 0], [0, 2, 0, 1, 5]]
output: [[5, 0, 8, 0, 0], [0, 5, 8, 2, 2], [0, 0, 5, 0, 0], [0, 0, 0, 5, 1], [0, 0, 0, 0, 5]]

Test case:
input: [[5, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0], [3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0], [2, 0, 8, 8, 5, 0], [2, 0, 6, 0, 0, 5]]

###########################################################
Sample Outputs:
output: [[5, 0, 3, 0, 0, 0], [0, 5, 3, 0, 0, 0], [0, 0, 5, 0, 8, 6], [0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5]]
*/

#include <iostream>
using namespace std;

void printArray(int arr[][10], int row, int col) {
    for (int i = 0; i < row; ++i) {
        cout << "[";
        for (int j = 0; j < col; ++j) {
            if (j!= 0) cout << ", ";
            cout << arr[i][j];
        }
        cout << "]" << endl;
    }
}

// Time complexity: O(n^2), Space complexity: O(1)
void rotateMatrix(int matrix[][10], int n) {
    // Transpose the matrix
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
            swap(matrix[i][j], matrix[j][i]);
        }
    }

    // Reverse each row
    for (int i = 0; i < n; ++i) {
        int left = 0, right = n - 1;
        while (left < right) {
            swap(matrix[i][left], matrix[i][right]);
            left++;
            right--;
        }
    }
}

int main() {
    int input[][10] = {{5, 0, 0}, {3, 5, 0}, {0, 0, 5}};
    int input2[][10] = {{5, 0, 0, 0}, {0, 5, 0, 0}, {6, 0, 5, 0}, {6, 0, 4, 5}};
    int input3[][10] = {{5, 0, 0, 0, 0}, {0, 5, 0, 0, 0}, {8, 8, 5, 0, 0}, {0, 2, 0, 5, 0}, {0, 2, 0, 1, 5}};
    int input4[][10] = {{5, 0, 0, 0, 0, 0}, {0, 5, 0, 0, 0, 0}, {3, 3, 5, 0, 0, 0}, {0, 0, 0, 5, 0, 0}, {2, 0, 8, 8, 5, 0}, {2, 0, 6, 0, 0, 5}};

    printArray(input, 3, 3);
    rotateMatrix(input, 3);
    printArray(input, 3, 3);

    cout << endl;

    printArray(input2, 4, 4);
    rotateMatrix(input2, 4);
    printArray(input2, 4, 4);

    cout << endl;

    printArray(input3, 5, 5);
    rotateMatrix(input3, 5);
    printArray(input3, 5, 5);

    cout << endl;

    printArray(input4, 6, 6);
    rotateMatrix(input4, 6);
    printArray(input4, 6, 6);

    return 0;
}


###########################################################
Result:
solution: [[5, 0, 3, 0, 2, 2], [0, 5, 3, 0, 0, 0], [0, 0, 5, 0, 8, 6], [0, 0, 0, 5, 8, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.041666666666666664

cat_success_cnt: 1

cat_success_rate: 0.041666666666666664

