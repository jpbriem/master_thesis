
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 6], [0, 4, 0], [3, 0, 0]]
output: [[0, 0, 6], [0, 4, 6], [3, 4, 6]]

Example_2:
input: [[0, 2, 0], [7, 0, 8], [0, 0, 0]]
output: [[0, 2, 0], [7, 2, 8], [7, 2, 8]]

Example_3:
input: [[4, 0, 0], [0, 2, 0], [0, 0, 0]]
output: [[4, 0, 0], [4, 2, 0], [4, 2, 0]]

Test case:
input: [[4, 0, 8], [0, 0, 0], [0, 7, 0]]

###########################################################
Sample Outputs:
output: [[4, 0, 8], [4, 7, 8], [4, 7, 8]]
*/

public class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        if (image == null || image.length == 0 || image[sr][sc] == newColor) return image;
        dfs(image, sr, sc, image[sr][sc], newColor);
        return image;
    }

    private void dfs(int[][] image, int r, int c, int oldColor, int newColor) {
        if (r < 0 || r >= image.length || c < 0 || c >= image[0].length || image[r][c]!= oldColor) return;
        image[r][c] = newColor;
        dfs(image, r + 1, c, oldColor, newColor);
        dfs(image, r - 1, c, oldColor, newColor);
        dfs(image, r, c + 1, oldColor, newColor);
        dfs(image, r, c - 1, oldColor, newColor);
    }
}


###########################################################
Result:
solution: [[4, 0, 8], [4, 0, 8], [4, 7, 8]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.05263157894736842

cat_success_cnt: 2

cat_success_rate: 0.05263157894736842

