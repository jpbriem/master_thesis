
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[1, 8, 8, 7, 7, 8], [1, 1, 7, 7, 1, 8], [7, 1, 1, 7, 7, 8]]
output: [[1, 8, 8, 5, 5, 8], [1, 1, 5, 5, 1, 8], [5, 1, 1, 5, 5, 8]]

Example_2:
input: [[7, 7, 7, 1], [1, 8, 1, 7], [7, 1, 1, 7]]
output: [[5, 5, 5, 1], [1, 8, 1, 5], [5, 1, 1, 5]]

Example_3:
input: [[1, 8, 1, 7, 1], [7, 8, 8, 1, 1], [7, 1, 8, 8, 7]]
output: [[1, 8, 1, 5, 1], [5, 8, 8, 1, 1], [5, 1, 8, 8, 5]]

Test case:
input: [[1, 7, 7, 1, 7], [8, 1, 7, 7, 7], [8, 7, 1, 7, 8]]

###########################################################
Sample Outputs:
output: [[1, 7, 7, 4, 7], [8, 1, 4, 4, 7], [8, 4, 1, 4, 8]]
*/

#include <iostream>
using namespace std;

void update(int **grid, int n, int m) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (i > 0 && grid[i - 1][j] == 1) {
                grid[i][j] -= 1;
            }
            if (j > 0 && grid[i][j - 1] == 1) {
                grid[i][j] -= 1;
            }
        }
    }
}

void printGrid(int **grid, int n, int m) {
    cout << "[" << endl;
    for (int i = 0; i < n; ++i) {
        cout << "\t";
        for (int j = 0; j < m; ++j) {
            cout << grid[i][j];
            if (j!= m - 1) {
                cout << ", ";
            }
        }
        cout << endl;
    }
    cout << "]" << endl;
}

void solve() {
    int n, m;
    cin >> n >> m;

    int **grid = new int *[n];
    for (int i = 0; i < n; ++i) {
        grid[i] = new int[m];
        for (int j = 0; j < m; ++j) {
            cin >> grid[i][j];
        }
    }

    // Update the grid with values from neighbours.
    update(grid, n, m);

    // Print the updated grid.
    printGrid(grid, n, m);

    // Free memory allocated to grid.
    for (int i = 0; i < n; ++i) {
        delete[] grid[i];
    }
    delete[] grid;
}

int main() {
    solve();
    return 0;
}


###########################################################
Result:
solution: [[1, 5, 5, 1, 5], [8, 1, 5, 5, 5], [8, 5, 1, 5, 8]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.05555555555555555

cat_success_cnt: 2

cat_success_rate: 0.05555555555555555

