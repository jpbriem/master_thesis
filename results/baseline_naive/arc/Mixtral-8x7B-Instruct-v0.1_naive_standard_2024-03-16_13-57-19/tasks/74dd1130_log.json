{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[2, 2, 1], [1, 5, 1], [5, 2, 2]]\noutput: [[2, 1, 5], [2, 5, 2], [1, 1, 2]]\n\nExample_2:\ninput: [[2, 2, 5], [6, 2, 2], [5, 5, 5]]\noutput: [[2, 6, 5], [2, 2, 5], [5, 2, 5]]\n\nExample_3:\ninput: [[9, 9, 5], [5, 5, 8], [5, 8, 9]]\noutput: [[9, 5, 5], [9, 5, 8], [5, 8, 9]]\n\nExample_4:\ninput: [[2, 6, 6], [2, 1, 1], [2, 6, 2]]\noutput: [[2, 2, 2], [6, 1, 6], [6, 1, 2]]\n\nTest case:\ninput: [[9, 3, 4], [9, 4, 4], [9, 3, 4]]\n\n###########################################################\nSample Outputs:\noutput: [[9, 3, 4], [9, 4, 4], [9, 3, 4]]\n*/\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid sortRow(vector<int>& row) {\n    int minIndex = 0;\n    for (int i = 1; i < row.size(); ++i) {\n        if (row[minIndex] > row[i]) {\n            minIndex = i;\n        }\n    }\n    swap(row[0], row[minIndex]);\n}\n\nvoid rearrangeMatrix(vector<vector<int>>& matrix) {\n    // sort each row\n    for (auto &row : matrix) {\n        sortRow(row);\n    }\n\n    // find the first column's max value and its index\n    vector<int> colMaxes;\n    for (int j = 0; j < matrix[0].size(); ++j) {\n        int maxValue = INT_MIN;\n        int maxIndex = -1;\n        for (int i = 0; i < matrix.size(); ++i) {\n            if (matrix[i][j] > maxValue) {\n                maxValue = matrix[i][j];\n                maxIndex = i;\n            }\n        }\n        colMaxes.push_back(maxIndex);\n    }\n\n    // rearrange rows based on the order of their max values in columns\n    for (int i = 1; i < matrix.size(); ++i) {\n        for (int j = 0; j < matrix[0].size() && matrix[colMaxes[j]][j] == matrix[i][j]; ++j) {}\n        swap(matrix[i], matrix[colMaxes[j]]);\n    }\n}\n\nint main() {\n    vector<vector<int>> input = {{2, 2, 1}, {1, 5, 1}, {5, 2, 2}};\n    rearrangeMatrix(input);\n    cout << \"rearranged matrix is:\" << endl;\n    for (auto &row : input) {\n        for (auto &num : row) {\n            cout << num <<'';\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        }
    ],
    "idx": 17,
    "task": "74dd1130",
    "category": "training",
    "ys": [
        "74dd1130.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[9, 9, 9], [3, 4, 3], [4, 4, 4]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.05555555555555555,
        "cat_success_cnt": 1,
        "cat_success_rate": 0.05555555555555555
    },
    "usage_so_far": {
        "completion_tokens": 26635,
        "prompt_tokens": 29136,
        "cost": null
    }
}