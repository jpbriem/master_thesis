{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[2, 2, 2], [2, 1, 8], [2, 8, 8]]\noutput: [[2, 2, 2], [2, 5, 5], [2, 5, 5]]\n\nExample_2:\ninput: [[1, 1, 1], [8, 1, 3], [8, 2, 2]]\noutput: [[1, 1, 1], [5, 1, 5], [5, 5, 5]]\n\nExample_3:\ninput: [[2, 2, 2], [8, 8, 2], [2, 2, 2]]\noutput: [[2, 2, 2], [5, 5, 2], [2, 2, 2]]\n\nExample_4:\ninput: [[3, 3, 8], [4, 4, 4], [8, 1, 1]]\noutput: [[5, 5, 5], [4, 4, 4], [5, 5, 5]]\n\nTest case:\ninput: [[1, 3, 2], [3, 3, 2], [1, 3, 2]]\n\n###########################################################\nSample Outputs:\noutput: [[1, 3, 2], [3, 6, 2], [1, 3, 2]]\n*/\n\npublic class Solution {\n    public int[][] UpdateMatrix(int[][] mat) {\n        if (mat == null || mat.Length == 0) return new int[0][];\n\n        var m = mat.Length;\n        var n = mat[0].Length;\n\n        // Initialize the queue with all zeroes in matrix\n        var q = new Queue<Tuple<int, int>>();\n        for (var i = 0; i < m; ++i) {\n            for (var j = 0; j < n; ++j) {\n                if (mat[i][j] == 0) {\n                    q.Enqueue(new Tuple<int, int>(i, j));\n                } else {\n                    mat[i][j] = -1;\n                }\n            }\n        }\n\n        // BFS to update values of non-zero elements\n        while (q.Count > 0) {\n            var tpl = q.Dequeue();\n            var x = tpl.Item1;\n            var y = tpl.Item2;\n\n            if (x > 0 && mat[x - 1][y] == -1) {\n                q.Enqueue(new Tuple<int, int>(x - 1, y));\n                mat[x - 1][y] = mat[x][y] + 1;\n            }\n\n            if (x < m - 1 && mat[x + 1][y] == -1) {\n                q.Enqueue(new Tuple<int, int>(x + 1, y));\n                mat[x + 1][y] = mat[x][y] + 1;\n            }\n\n            if (y > 0 && mat[x][y - 1] == -1) {\n                q.Enqueue(new Tuple<int, int>(x, y - 1));\n                mat[x][y - 1] = mat[x][y] + 1;\n            }\n\n            if (y < n - 1 && mat[x][y + 1] == -1) {\n                q.Enqueue(new Tuple<int, int>(x, y + 1));\n                mat[x][y + 1] = mat[x][y] + 1;\n            }\n        }\n\n        return mat;\n    }\n}"
        }
    ],
    "idx": 22,
    "task": "9565186b",
    "category": "training",
    "ys": [
        "9565186b.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[5, 3, 5], [3, 3, 5], [5, 3, 5]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.043478260869565216,
        "cat_success_cnt": 1,
        "cat_success_rate": 0.043478260869565216
    },
    "usage_so_far": {
        "completion_tokens": 38152,
        "prompt_tokens": 41815,
        "cost": null
    }
}