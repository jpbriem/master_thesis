Input token: 316
Output token: 497
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[1, 1, 1], [0, 0, 0], [0, 0, 0]]
output: [[0, 0, 0], [1, 1, 1], [0, 0, 0]]

Example_2:
input: [[0, 0, 0], [1, 1, 1], [0, 0, 0]]
output: [[0, 0, 0], [0, 0, 0], [1, 1, 1]]

Example_3:
input: [[0, 1, 0], [1, 1, 0], [0, 0, 0]]
output: [[0, 0, 0], [0, 1, 0], [1, 1, 0]]

Example_4:
input: [[0, 2, 2], [0, 0, 2], [0, 0, 0]]
output: [[0, 0, 0], [0, 2, 2], [0, 0, 2]]

Test case:
input: [[2, 0, 0], [2, 0, 0], [0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0], [0, 0, 0], [2, 2, 2]]
"""

# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def rotate(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        """
        
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return
            
        n = len(matrix)
        m = len(matrix[0])
                    
        # find the center of the matrix
        cx = (n - 1)/2
        cy = (m - 1)/2
        
        # rotate the matrix by 90 degrees clockwise
        for i in range(cx+1):
            for j in range(i, min(cy + 1, m)):
                temp = matrix[i][j]
                matrix[i][j] = matrix[n-j-1][i]
                matrix[n-j-1][i] = matrix[n-i-1][n-j-1]
                matrix[n-i-1][n-j-1] = matrix[j][n-i-1]
                matrix[j][n-i-1] = temp
                
        # rotate the matrix by 90 degrees counterclockwise
        for i in range(n//2):
            for j in range(i, max(i+1, n-i-1), 2):
                temp = matrix[i][j]
                matrix[i][j] = matrix[j][i]
                matrix[j][i] = matrix[n-i-1][j]
                matrix[n-i-1][j] = matrix[n-j-1][n-i-1]
                matrix[n-j-1][n-i-1] = temp
################################################################

Solution:
[[0, 0, 0], [2, 0, 0], [2, 0, 0]]

