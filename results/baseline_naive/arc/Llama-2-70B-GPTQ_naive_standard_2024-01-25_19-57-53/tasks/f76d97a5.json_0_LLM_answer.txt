Input token: 490
Output token: 339
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[4, 5, 4], [5, 5, 5], [4, 5, 4]]
output: [[0, 4, 0], [4, 4, 4], [0, 4, 0]]

Example_2:
input: [[5, 5, 6, 6, 6], [6, 5, 5, 6, 6], [6, 6, 5, 5, 6], [6, 6, 6, 5, 5], [5, 6, 6, 6, 5]]
output: [[6, 6, 0, 0, 0], [0, 6, 6, 0, 0], [0, 0, 6, 6, 0], [0, 0, 0, 6, 6], [6, 0, 0, 0, 6]]

Example_3:
input: [[9, 5, 9, 9, 9], [9, 9, 5, 5, 9], [9, 5, 9, 9, 9], [9, 9, 5, 9, 9], [9, 9, 9, 5, 5]]
output: [[0, 9, 0, 0, 0], [0, 0, 9, 9, 0], [0, 9, 0, 0, 0], [0, 0, 9, 0, 0], [0, 0, 0, 9, 9]]

Test case:
input: [[3, 3, 3, 5, 3], [3, 5, 3, 3, 3], [3, 5, 5, 3, 5], [3, 3, 3, 5, 3], [5, 5, 5, 3, 3]]
################################################################

LLM answer:

output: [[0, 3, 0, 0, 0], [0, 0, 3, 3, 0], [0, 0, 0, 3, 0], [0, 0, 0, 3, 0], [0, 0, 0, 3, 0]]
"""
from typing import List
class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int) -> List[List[int]]:
        if not image or len(image) == 0 or len(image[0]) == 0: return []
        
        def dfs(i, j):
            if i < 0 or i >= m or j < 0 or j >= n or image[i][j]!= 1: return
            
            image[i][j] = 2
            for di in [-1, 0, 1]:
                for dj in [-1, 0, 1]:
                    if (di + dj) % 2 == 0: continue # skip diagonal direction
                    
                    dfs(i+di, j+dj)
            
        m, n = len(image), len(image[0])
        for i in range(m):
            for j in range(n):
                if image[i][j] == 1:
                    dfs(i, j)
        return image
################################################################

Solution:
[[0, 0, 0, 3, 0], [0, 3, 0, 0, 0], [0, 3, 3, 0, 3], [0, 0, 0, 3, 0], [3, 3, 3, 0, 0]]

