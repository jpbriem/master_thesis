
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'g'], ['a', 'e', 'a'], ['d', 'a', 'a']]
output: [['a', 'a', 'g'], ['a', 'e', 'g'], ['d', 'e', 'g']]

Example_2:
input: [['a', 'c', 'a'], ['h', 'a', 'i'], ['a', 'a', 'a']]
output: [['a', 'c', 'a'], ['h', 'c', 'i'], ['h', 'c', 'i']]

Example_3:
input: [['e', 'a', 'a'], ['a', 'c', 'a'], ['a', 'a', 'a']]
output: [['e', 'a', 'a'], ['e', 'c', 'a'], ['e', 'c', 'a']]

Test case:
input: [['e', 'a', 'i'], ['a', 'a', 'a'], ['a', 'h', 'a']]

###########################################################
Sample Outputs:
output: [['e', 'a', 'i'], ['e', 'a', 'i'], ['e', 'h', 'i']]
*/
public class Solution {
    public String[][] solve(String[][] board) {
        if (board == null || board.length < 1 || board[0].length < 1){
            return new String[0][];
        }
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i=0; i<m; ++i){
            dfs(board, visited, i, 0);
            dfs(board, visited, i, n-1);
        }
        for (int j=0; j<n; ++j){
            dfs(board, visited, 0, j);
            dfs(board, visited, m-1, j);
        }
        // System.out.println("visited");
        // printMatrix(visited);
        for (int i=0; i<m; ++i){
            for (int j=0; j<n; ++j){
                if (!visited[i][j]){
                    bfs(board, i, j);
                }
            }
        }
        return board;
    }

    private void dfs(String[][] board, boolean[][] visited, int x, int y){
        if (x >= 0 && x < board.length && y>=0 && y<board[0].length &&!visited[x][y] && board[x][y].equals("O")){
            visited[x][y] = true;
            dfs(board, visited, x+1, y);
            dfs(board, visited, x-1, y);
            dfs(board, visited, x, y+1);
            dfs(board, visited, x, y-1);
        }
    }

    private void bfs(String[][] board, int x, int y){
        Queue<Integer> queueX = new LinkedList<>();
        Queue<Integer> queueY = new LinkedList<>();
        queueX.offer(x);
        queueY.offer(y);
        while(!queueX.isEmpty()){
            Integer curX = queueX.poll();
            Integer curY = queueY.poll();
            if (curX >= 0 && curX < board.length && curY>=0 && curY<board[0].length && board[curX][curY].equals("O") ){
                board[curX][curY] = "T";
                queueX.offer(curX + 1);
                queueY.offer(curY);
                queueX.offer(curX - 1);
                queueY.offer(curY);
                queueX.offer(curX );
                queueY.offer(curY + 1);
                queueX.offer(curX );
                queueY.offer(curY - 1);
            }
        }
    }
}


###########################################################
Result:
solution: [['e', 'a', 'i'], ['e', 'a', 'i'], ['e', 'h', 'i']]


success: 1

too_long_prompt: False

tries: 1

success_rate: 0.13157894736842105

cat_success_cnt: 5

cat_success_rate: 0.13157894736842105

