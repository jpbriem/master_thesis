
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['c', 'c', 'h'], ['c', 'g', '.'], ['e', '.', '.']]
output: [['.', '.', 'e'], ['.', 'g', 'c'], ['h', 'c', 'c']]

Example_2:
input: [['e', 'e', 'b'], ['a', '.', '.'], ['.', '.', '.']]
output: [['.', '.', '.'], ['.', '.', 'a'], ['b', 'e', 'e']]

Test case:
input: [['f', 'c', 'e'], ['f', 'h', '.'], ['d', '.', '.']]

###########################################################
Sample Outputs:
output: [['.','d','f'],['.','h','f'],['e','c','e']]
*/
public class RotateMatrix {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        StringBuilder sb = new StringBuilder();

        int n = Integer.parseInt(br.readLine());
        char [][] matrix = new char[n][];
        for (int i=0;i<matrix.length;++i){
            matrix[i]=br.readLine().toCharArray();
        }

        rotate(matrix);

        System.out.println("-----------------");
        print(matrix);
    }

    private static void rotate(char[][] mtx){
        // 90도 회전하기
        /*
         *  1 2 3     7 4 1
         *  4 5 6 =>  8 5 2
         *  7 8 9     9 6 3
         */
        int rLen = mtx.length, cLen = mtx[0].length;
        if (rLen!= cLen) return ;

        for (int row=0;row<mtx.length/2;++row){
            for (int col=row;col<mtx.length - row - 1; ++col){
                swap(mtx, row, col, col, mtx.length - row - 1, mtx.length - row - 1, col, row);
            }
        }
    }

    private static void swap(char[][] mtx, int sRow, int sCol, int eRow, int eCol, int tRow, int tCol, int tempRow){
        char tmp = mtx[sRow][sCol];
        while ((tRow!=tempRow || tCol!=sCol)){
            mtx[tRow][tCol] = mtx[eRow][eCol];
            tRow -= 1;
            tCol += 1;
        }
        mtx[tempRow][sCol] = tmp;
    }

    private static void print(char[][] arr){
        for (int i=0;i<arr.length;++i){
            for (int j=0;j<arr[i].length;++j){
                System.out.print(arr[i][j]);
            }
            System.out.println("");
        }
    }
}


###########################################################
Result:
solution: [['.', '.', 'd'], ['.', 'h', 'f'], ['e', 'c', 'f']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

