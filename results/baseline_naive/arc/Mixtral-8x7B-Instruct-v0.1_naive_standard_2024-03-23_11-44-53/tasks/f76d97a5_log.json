{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [['e', 'f', 'e'], ['f', 'f', 'f'], ['e', 'f', 'e']]\noutput: [['a', 'e', 'a'], ['e', 'e', 'e'], ['a', 'e', 'a']]\n\nExample_2:\ninput: [['f', 'f', 'g', 'g', 'g'], ['g', 'f', 'f', 'g', 'g'], ['g', 'g', 'f', 'f', 'g'], ['g', 'g', 'g', 'f', 'f'], ['f', 'g', 'g', 'g', 'f']]\noutput: [['g', 'g', 'a', 'a', 'a'], ['a', 'g', 'g', 'a', 'a'], ['a', 'a', 'g', 'g', 'a'], ['a', 'a', 'a', 'g', 'g'], ['g', 'a', 'a', 'a', 'g']]\n\nExample_3:\ninput: [['j', 'f', 'j', 'j', 'j'], ['j', 'j', 'f', 'f', 'j'], ['j', 'f', 'j', 'j', 'j'], ['j', 'j', 'f', 'j', 'j'], ['j', 'j', 'j', 'f', 'f']]\noutput: [['a', 'j', 'a', 'a', 'a'], ['a', 'a', 'j', 'j', 'a'], ['a', 'j', 'a', 'a', 'a'], ['a', 'a', 'j', 'a', 'a'], ['a', 'a', 'a', 'j', 'j']]\n\nTest case:\ninput: [['d', 'd', 'd', 'f', 'd'], ['d', 'f', 'd', 'd', 'd'], ['d', 'f', 'f', 'd', 'f'], ['d', 'd', 'd', 'f', 'd'], ['f', 'f', 'f', 'd', 'd']]\n\n###########################################################\nSample Outputs:\noutput: [['a', 'd', 'a', 'a', 'a'], ['a', 'a', 'd', 'd', 'a'], ['a', 'd', 'a', 'a', 'a'], ['a', 'a', 'd', 'a', 'a'], ['d', 'a', 'a', 'a', 'a']]\n*/\n\npublic class Solution {\n    public char[][] replace(char[][] board) {\n        if (board == null || board.length == 0 || board[0].length == 0) return board;\n        int m = board.length, n = board[0].length;\n        boolean hasO = false;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (board[i][j] == 'O') {\n                    if (!hasAdjacentX(board, i, j)) {\n                        hasO = true;\n                    } else {\n                        board[i][j] = 'X';\n                    }\n                }\n            }\n        }\n        if (hasO) {\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (board[i][j] == 'O') {\n                        board[i][j] = 'A';\n                    }\n                }\n            }\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (board[i][j] == 'A' &&!hasAdjacentO(board, i, j)) {\n                        board[i][j] = 'X';\n                    }\n                }\n            }\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (board[i][j] == 'A') {\n                        board[i][j] = 'O';\n                    }\n                }\n            }\n        }\n        return board;\n    }\n\n    private boolean hasAdjacentX(char[][] board, int x, int y) {\n        if (x > 0 && board[x - 1][y] == 'X') return true;\n        if (x + 1 < board.length && board[x + 1][y] == 'X') return true;\n        if (y > 0 && board[x][y - 1] == 'X') return true;\n        if (y + 1 < board[0].length && board[x][y + 1] == 'X') return true;\n        return false;\n    }\n\n    private boolean hasAdjacentO(char[][] board, int x, int y) {\n        if (x > 0 && board[x - 1][y] == 'O') return true;\n        if (x + 1 < board.length && board[x + 1][y] == 'O') return true;\n        if (y > 0 && board[x][y - 1] == 'O') return true;\n        if (y + 1 < board[0].length && board[x][y + 1] == 'O') return true;\n        return false;\n    }\n}"
        }
    ],
    "idx": 48,
    "task": "f76d97a5",
    "category": "training",
    "ys": [
        "f76d97a5.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[['a', 'a', 'a', 'd', 'a'], ['a', 'd', 'a', 'a', 'a'], ['a', 'd', 'd', 'a', 'd'], ['a', 'a', 'a', 'd', 'a'], ['d', 'd', 'd', 'a', 'a']]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.12244897959183673,
        "cat_success_cnt": 6,
        "cat_success_rate": 0.12244897959183673
    },
    "usage_so_far": {
        "completion_tokens": 42887,
        "prompt_tokens": 88235,
        "cost": null
    }
}