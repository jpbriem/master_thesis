
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['c', 'c', 'c'], ['c', 'b', 'i'], ['c', 'i', 'i']]
output: [['c', 'c', 'c'], ['c', 'f', 'f'], ['c', 'f', 'f']]

Example_2:
input: [['b', 'b', 'b'], ['i', 'b', 'd'], ['i', 'c', 'c']]
output: [['b', 'b', 'b'], ['f', 'b', 'f'], ['f', 'f', 'f']]

Example_3:
input: [['c', 'c', 'c'], ['i', 'i', 'c'], ['c', 'c', 'c']]
output: [['c', 'c', 'c'], ['f', 'f', 'c'], ['c', 'c', 'c']]

Example_4:
input: [['d', 'd', 'i'], ['e', 'e', 'e'], ['i', 'b', 'b']]
output: [['f', 'f', 'f'], ['e', 'e', 'e'], ['f', 'f', 'f']]

Test case:
input: [['b', 'd', 'c'], ['d', 'd', 'c'], ['b', 'd', 'c']]

###########################################################
Sample Outputs:
output: [['f', 'f', 'c'], ['f', 'f', 'c'], ['f', 'f', 'c']]
*/

public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(char[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) return;
        if (board[x][y]!= 'E') return;
        int count = getMineCount(board, x, y);
        if (count > 0) {
            board[x][y] = (char)(count + '0');
            return;
        } else {
            board[x][y] = 'F';
            for (int i = -1; i <= 1; ++i) {
                for (int j = -1; j <= 1; ++j) {
                    if (i == 0 && j == 0) continue;
                    dfs(board, x+i, y+j);
                }
            }
        }
    }

    private int getMineCount(char[][] board, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                if (x+i < 0 || x+i >= board.length || y+j < 0 || y+j >= board[0].length) continue;
                if (board[x+i][y+j] == 'M') count++;
            }
        }
        return count;
    }
}


###########################################################
Result:
solution: [['f', 'd', 'f'], ['d', 'd', 'f'], ['f', 'd', 'f']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.08695652173913043

cat_success_cnt: 2

cat_success_rate: 0.08695652173913043

