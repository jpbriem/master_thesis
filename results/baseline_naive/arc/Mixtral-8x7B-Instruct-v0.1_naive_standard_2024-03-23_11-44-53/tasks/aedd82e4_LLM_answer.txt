
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'c', 'c'], ['a', 'c', 'c'], ['c', 'a', 'a']]
output: [['a', 'c', 'c'], ['a', 'c', 'c'], ['b', 'a', 'a']]

Example_2:
input: [['c', 'c', 'c', 'a'], ['a', 'c', 'a', 'a'], ['a', 'a', 'a', 'c'], ['a', 'c', 'a', 'a']]
output: [['c', 'c', 'c', 'a'], ['a', 'c', 'a', 'a'], ['a', 'a', 'a', 'b'], ['a', 'b', 'a', 'a']]

Example_3:
input: [['c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a'], ['c', 'c', 'a', 'c'], ['a', 'a', 'a', 'a'], ['a', 'c', 'c', 'c']]
output: [['c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a'], ['c', 'c', 'a', 'b'], ['a', 'a', 'a', 'a'], ['a', 'c', 'c', 'c']]

Example_4:
input: [['c', 'c', 'a'], ['c', 'a', 'c'], ['a', 'c', 'a']]
output: [['c', 'c', 'a'], ['c', 'a', 'b'], ['a', 'b', 'a']]

Test case:
input: [['c', 'c', 'a', 'c'], ['a', 'c', 'a', 'a'], ['a', 'a', 'c', 'a'], ['c', 'a', 'a', 'a'], ['a', 'a', 'c', 'c']]

###########################################################
Sample Outputs:
output: [['c', 'c', 'a', 'c'], ['a', 'c', 'a', 'a'], ['a', 'a', 'c', 'b'], ['c', 'a', 'a', 'a'], ['a', 'b', 'c', 'c']]
*/

public class Solution {
    public String[][] findSolution(String[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) return new String[][]{};
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'c') continue;
                boolean flag = true;
                // check up and down
                for (int k = 0; k < m && flag; ++k) {
                    if (board[k][j]!= 'c' && board[k][j]!= board[i][j]) {
                        flag = false;
                    }
                }
                if (!flag) continue;
                // check left and right
                flag = true;
                for (int k = 0; k < n && flag; ++k) {
                    if (board[i][k]!= 'c' && board[i][k]!= board[i][j]) {
                        flag = false;
                    }
                }
                if (flag) {
                    char c = board[i][j];
                    for (int k = 0; k < m; ++k) {
                        for (int l = 0; l < n; ++l) {
                            if (board[k][l] == 'c') continue;
                            board[k][l] = c == 'a'? 'b' : 'a';
                        }
                    }
                }
            }
        }
        return board;
    }
}


###########################################################
Result:
solution: [['c', 'c', 'a', 'b'], ['a', 'c', 'a', 'a'], ['a', 'a', 'b', 'a'], ['b', 'a', 'a', 'a'], ['a', 'a', 'c', 'c']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.1

cat_success_cnt: 3

cat_success_rate: 0.1

