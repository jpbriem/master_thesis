
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['e', 'f', 'e'], ['f', 'f', 'f'], ['e', 'f', 'e']]
output: [['a', 'e', 'a'], ['e', 'e', 'e'], ['a', 'e', 'a']]

Example_2:
input: [['f', 'f', 'g', 'g', 'g'], ['g', 'f', 'f', 'g', 'g'], ['g', 'g', 'f', 'f', 'g'], ['g', 'g', 'g', 'f', 'f'], ['f', 'g', 'g', 'g', 'f']]
output: [['g', 'g', 'a', 'a', 'a'], ['a', 'g', 'g', 'a', 'a'], ['a', 'a', 'g', 'g', 'a'], ['a', 'a', 'a', 'g', 'g'], ['g', 'a', 'a', 'a', 'g']]

Example_3:
input: [['j', 'f', 'j', 'j', 'j'], ['j', 'j', 'f', 'f', 'j'], ['j', 'f', 'j', 'j', 'j'], ['j', 'j', 'f', 'j', 'j'], ['j', 'j', 'j', 'f', 'f']]
output: [['a', 'j', 'a', 'a', 'a'], ['a', 'a', 'j', 'j', 'a'], ['a', 'j', 'a', 'a', 'a'], ['a', 'a', 'j', 'a', 'a'], ['a', 'a', 'a', 'j', 'j']]

Test case:
input: [['d', 'd', 'd', 'f', 'd'], ['d', 'f', 'd', 'd', 'd'], ['d', 'f', 'f', 'd', 'f'], ['d', 'd', 'd', 'f', 'd'], ['f', 'f', 'f', 'd', 'd']]

###########################################################
Sample Outputs:
output: [['a', 'd', 'a', 'a', 'a'], ['a', 'a', 'd', 'd', 'a'], ['a', 'd', 'a', 'a', 'a'], ['a', 'a', 'd', 'a', 'a'], ['d', 'a', 'a', 'a', 'a']]
*/

public class Solution {
    public char[][] replace(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        boolean hasO = false;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    if (!hasAdjacentX(board, i, j)) {
                        hasO = true;
                    } else {
                        board[i][j] = 'X';
                    }
                }
            }
        }
        if (hasO) {
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 'O') {
                        board[i][j] = 'A';
                    }
                }
            }
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 'A' &&!hasAdjacentO(board, i, j)) {
                        board[i][j] = 'X';
                    }
                }
            }
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 'A') {
                        board[i][j] = 'O';
                    }
                }
            }
        }
        return board;
    }

    private boolean hasAdjacentX(char[][] board, int x, int y) {
        if (x > 0 && board[x - 1][y] == 'X') return true;
        if (x + 1 < board.length && board[x + 1][y] == 'X') return true;
        if (y > 0 && board[x][y - 1] == 'X') return true;
        if (y + 1 < board[0].length && board[x][y + 1] == 'X') return true;
        return false;
    }

    private boolean hasAdjacentO(char[][] board, int x, int y) {
        if (x > 0 && board[x - 1][y] == 'O') return true;
        if (x + 1 < board.length && board[x + 1][y] == 'O') return true;
        if (y > 0 && board[x][y - 1] == 'O') return true;
        if (y + 1 < board[0].length && board[x][y + 1] == 'O') return true;
        return false;
    }
}


###########################################################
Result:
solution: [['a', 'a', 'a', 'd', 'a'], ['a', 'd', 'a', 'a', 'a'], ['a', 'd', 'd', 'a', 'd'], ['a', 'a', 'a', 'd', 'a'], ['d', 'd', 'd', 'a', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.12244897959183673

cat_success_cnt: 6

cat_success_rate: 0.12244897959183673

