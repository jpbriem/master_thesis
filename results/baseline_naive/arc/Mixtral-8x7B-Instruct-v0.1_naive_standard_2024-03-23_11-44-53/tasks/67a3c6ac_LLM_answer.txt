
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['g', 'g', 'g', 'c'], ['g', 'b', 'g', 'c'], ['h', 'c', 'h', 'c'], ['b', 'h', 'c', 'c']]
output: [['c', 'g', 'g', 'g'], ['c', 'g', 'b', 'g'], ['c', 'h', 'c', 'h'], ['c', 'c', 'h', 'b']]

Example_2:
input: [['h', 'h', 'h', 'g', 'g', 'g', 'c'], ['g', 'h', 'b', 'b', 'h', 'h', 'b'], ['h', 'h', 'c', 'b', 'c', 'g', 'g'], ['c', 'c', 'h', 'h', 'h', 'c', 'c'], ['h', 'c', 'h', 'b', 'c', 'h', 'c'], ['g', 'g', 'g', 'c', 'c', 'b', 'b'], ['g', 'c', 'g', 'g', 'g', 'g', 'g']]
output: [['c', 'g', 'g', 'g', 'h', 'h', 'h'], ['b', 'h', 'h', 'b', 'b', 'h', 'g'], ['g', 'g', 'c', 'b', 'c', 'h', 'h'], ['c', 'c', 'h', 'h', 'h', 'c', 'c'], ['c', 'h', 'c', 'b', 'h', 'c', 'h'], ['b', 'b', 'c', 'c', 'g', 'g', 'g'], ['g', 'g', 'g', 'g', 'g', 'c', 'g']]

Example_3:
input: [['b', 'c', 'h', 'b', 'b', 'b'], ['c', 'b', 'h', 'h', 'c', 'g'], ['c', 'b', 'c', 'g', 'c', 'b'], ['b', 'c', 'b', 'h', 'g', 'c'], ['c', 'h', 'b', 'c', 'h', 'b'], ['c', 'b', 'g', 'c', 'h', 'h']]
output: [['b', 'b', 'b', 'h', 'c', 'b'], ['g', 'c', 'h', 'h', 'b', 'c'], ['b', 'c', 'g', 'c', 'b', 'c'], ['c', 'g', 'h', 'b', 'c', 'b'], ['b', 'h', 'c', 'b', 'h', 'c'], ['h', 'h', 'c', 'g', 'b', 'c']]

Test case:
input: [['h', 'g', 'b'], ['g', 'h', 'g'], ['g', 'c', 'c']]

###########################################################
Sample Outputs:
output: [['g', 'g', 'h'], ['h', 'g', 'g'], ['c', 'c', 'g']]
*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<vector<char>> rotate(vector<vector<char>>& matrix) {
        int n = matrix.size();
        for (int i = 0; i < n / 2; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                char tmp = matrix[i][j];
                matrix[i][j] = matrix[n-j-1][i];
                matrix[n-j-1][i] = matrix[n-i-1][n-j-1];
                matrix[n-i-1][n-j-1] = matrix[j][n-i-1];
                matrix[j][n-i-1] = tmp;
            }
        }
        return matrix;
    }
};

void printMatrix(const vector<vector<char>> &matrix) {
    if (!matrix.empty()) {
        cout << "[" ;
        for (auto it = matrix.begin(); it!= matrix.end() - 1; ++it) {
            cout << "[";
            for (auto innerIt = (*it).begin(); innerIt!= (*it).end() - 1; ++innerIt) {
                cout << *innerIt << ", ";
            }
            cout << *(--(*it).end());
            cout << "], ";
        }
        cout << "[";
        for (auto innerIt = (*(matrix.end() - 1)).begin(); innerIt!= (*(matrix.end() - 1)).end() - 1; ++innerIt) {
            cout << *innerIt << ", ";
        }
        cout << *(--(*(matrix.end() - 1)));
        cout << "]]" << endl;
    } else {
        cout << "[]" << endl;
    }
}

int main() {
    Solution s;
    // Test Case 1
    vector<vector<char>> input_1{ {'g','g','g','c'},{'g','b','g','c'},{'h','c','h','c'},{'b','h','c','c'} };
    printMatrix(s.rotate(input_1));

    // Test Case 2
    vector<vector<char>> input_2{ {'h','h','h','g','g','g','c'},{'g','h','b','b','h','h','b'},{'h','h','c','b','c','g','g'},{'c','c','h','h','h','c','c'},{'h','c','h','b','c','h','c'},{'g','g','g','c','c','b','b'},{'g','c','g','g','g','g','g'} };
    printMatrix(s.rotate(input_2));

    // Test Case 3
    vector<vector<char>> input_3{ {'b','c','h','b','b','b'},{'c','b','h','h','c','g'},{'c','b','c','g','c','b'},{'b','c','b','h','g','c'},{'c','h','b','c','h','b'},{'c','b','g','c','h','h'} };
    printMatrix(s.rotate(input_3));

    // Test Case 4
    vector<vector<char>> input_4{ {'h','g','b'},{'g','h','g'},{'g','c','c'} };
    printMatrix(s.rotate(input_4));

    return 0;
}


###########################################################
Result:
solution: [['b', 'g', 'h'], ['g', 'h', 'g'], ['c', 'c', 'g']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.16666666666666666

cat_success_cnt: 2

cat_success_rate: 0.16666666666666666

