
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['g', 'g', 'h', 'g'], ['g', 'g', 'h', 'h'], ['h', 'h', 'g', 'h']]
output: [['c', 'c', 'h', 'c'], ['c', 'c', 'h', 'h'], ['h', 'h', 'c', 'h']]

Example_2:
input: [['h', 'h', 'h', 'g'], ['g', 'g', 'h', 'g'], ['h', 'h', 'g', 'h'], ['h', 'g', 'h', 'h'], ['h', 'g', 'h', 'g'], ['g', 'g', 'g', 'h']]
output: [['h', 'h', 'h', 'c'], ['c', 'c', 'h', 'c'], ['h', 'h', 'c', 'h'], ['h', 'c', 'h', 'h'], ['h', 'c', 'h', 'c'], ['c', 'c', 'c', 'h']]

Example_3:
input: [['h', 'h', 'g', 'g', 'g', 'g'], ['g', 'h', 'g', 'h', 'h', 'h'], ['h', 'g', 'h', 'h', 'g', 'h']]
output: [['h', 'h', 'c', 'c', 'c', 'c'], ['c', 'h', 'c', 'h', 'h', 'h'], ['h', 'c', 'h', 'h', 'c', 'h']]

Test case:
input: [['g', 'h', 'h', 'g'], ['g', 'h', 'g', 'h'], ['h', 'h', 'h', 'g'], ['h', 'g', 'h', 'g']]

###########################################################
Sample Outputs:
output: [['c', 'h', 'h', 'c'], ['c', 'h', 'c', 'h'], ['h', 'h', 'h', 'c'], ['h', 'c', 'h', 'c']]
*/

public class Solution {
    public char[][] replaceGWithC(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        boolean hasG = false;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'g') {
                    dfs(board, i, j);
                    hasG = true;
                }
            }
        }
        if (!hasG) return board;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'G') board[i][j] = 'g';
            }
        }
        return board;
    }

    private void dfs(char[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y]!= 'g') return;
        board[x][y] = 'G';
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
}


###########################################################
Result:
solution: [['c', 'h', 'h', 'c'], ['c', 'h', 'c', 'h'], ['h', 'h', 'h', 'c'], ['h', 'c', 'h', 'c']]


success: 1

too_long_prompt: False

tries: 1

success_rate: 0.12903225806451613

cat_success_cnt: 4

cat_success_rate: 0.12903225806451613

