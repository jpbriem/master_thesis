
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'g'], ['a', 'e', 'a'], ['d', 'a', 'a']]
output: [['a', 'a', 'g'], ['a', 'e', 'g'], ['d', 'e', 'g']]

Example_2:
input: [['a', 'c', 'a'], ['h', 'a', 'i'], ['a', 'a', 'a']]
output: [['a', 'c', 'a'], ['h', 'c', 'i'], ['h', 'c', 'i']]

Example_3:
input: [['e', 'a', 'a'], ['a', 'c', 'a'], ['a', 'a', 'a']]
output: [['e', 'a', 'a'], ['e', 'c', 'a'], ['e', 'c', 'a']]

Test case:
input: [['e', 'a', 'i'], ['a', 'a', 'a'], ['a', 'h', 'a']]

###########################################################
Sample Outputs:
output: [['e', 'a', 'i'], ['e', 'h', 'i'], ['e', 'h', 'i']]
*/

public class Solution {
    public String[][] floodFill(String[][] image, int sr, int sc, String newColor) {
        if (image == null || image.length == 0 || image[sr][sc] == newColor) return image;
        dfs(image, sr, sc, image[sr][sc], newColor);
        return image;
    }

    private void dfs(String[][] image, int i, int j, String oldColor, String newColor) {
        if (i < 0 || i >= image.length || j < 0 || j >= image[0].length || image[i][j]!= oldColor) return;
        image[i][j] = newColor;
        dfs(image, i + 1, j, oldColor, newColor);
        dfs(image, i - 1, j, oldColor, newColor);
        dfs(image, i, j + 1, oldColor, newColor);
        dfs(image, i, j - 1, oldColor, newColor);
    }
}


###########################################################
Result:
solution: [['e', 'a', 'i'], ['e', 'a', 'i'], ['e', 'h', 'i']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.13157894736842105

cat_success_cnt: 5

cat_success_rate: 0.13157894736842105

