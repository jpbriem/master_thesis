Input token: 184
Output token: 268
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['c', 'c', 'h'], ['c', 'g', '.'], ['e', '.', '.']]
output: [['.', '.', 'e'], ['.', 'g', 'c'], ['h', 'c', 'c']]

Example_2:
input: [['e', 'e', 'b'], ['a', '.', '.'], ['.', '.', '.']]
output: [['.', '.', '.'], ['.', '.', 'a'], ['b', 'e', 'e']]

Test case:
input: [['f', 'c', 'e'], ['f', 'h', '.'], ['d', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', 'd'], ['.', 'h', 'f'], ['e', 'c', 'f']]
"""
from typing import List, Tuple
import re

class Solution:
    def transform(self, words: List[List[str]]) -> None:
        """
        :type words: List[List[str]]
        :rtype: None Do not return anything, modify words in-place instead.
        """
        # Your code goes here
        for i in range(len(words)):
            if len(words) == 0 or (i + 1) % 3!= 0:
                continue
            word = words[i]
            if len(word) < 3:
                continue
            word = list(re.sub('[^A-Za-z]', '', word))
            word = sorted(word)
            words[i] = word[:3]

if __name__ == "__main__":
    s = Solution()
    print(s.transform([["f", "c", "e"], ["f", "h", "."], ["d", ".", "."]]))
################################################################

Solution:
[['.', '.', 'd'], ['.', 'h', 'f'], ['e', 'c', 'f']]

