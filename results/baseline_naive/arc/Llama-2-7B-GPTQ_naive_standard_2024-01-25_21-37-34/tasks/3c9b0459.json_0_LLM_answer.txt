Input token: 316
Output token: 296
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[2, 2, 1], [2, 1, 2], [2, 8, 1]]
output: [[1, 8, 2], [2, 1, 2], [1, 2, 2]]

Example_2:
input: [[9, 2, 4], [2, 4, 4], [2, 9, 2]]
output: [[2, 9, 2], [4, 4, 2], [4, 2, 9]]

Example_3:
input: [[8, 8, 8], [5, 5, 8], [8, 5, 5]]
output: [[5, 5, 8], [8, 5, 5], [8, 8, 8]]

Example_4:
input: [[3, 2, 9], [9, 9, 9], [2, 3, 3]]
output: [[3, 3, 2], [9, 9, 9], [9, 2, 3]]

Test case:
input: [[6, 4, 4], [6, 6, 4], [4, 6, 7]]
################################################################

LLM answer:

output: [[4, 6, 4], [6, 6, 4], [4, 6, 7]]
"""
import collections
from typing import List

class Solution(object):
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        if len(nums) == 0: return []
        
        # 排序，保证每个元素都是唯一的
        nums = sorted(set(nums))
        
        # 逆转数组
        res = list()
        for i in range(len(nums)):
            tmp = nums[:i+1] + nums[i:]
            
            # 判断当前元素是否为最后一位
            if i == len(tmp)-1: continue
                    
            # 如果当前元素不在原始数组中，则添加到结果列表中
            if not any([x in nums for x in tmp]):
                res.append(tmp)
                
        return res
################################################################

Solution:
[[7, 6, 4], [4, 6, 6], [4, 4, 6]]

