Input token: 184
Output token: 337
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[3, 3, 8], [3, 7, 0], [5, 0, 0]]
output: [[0, 0, 5], [0, 7, 3], [8, 3, 3]]

Example_2:
input: [[5, 5, 2], [1, 0, 0], [0, 0, 0]]
output: [[0, 0, 0], [0, 0, 1], [2, 5, 5]]

Test case:
input: [[6, 3, 5], [6, 8, 0], [4, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 4], [0, 8, 3], [5, 3, 6]]
"""
import sys
from collections import deque

class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        
        if not isinstance(matrix, list) or len(matrix) == 0:
            return []
            
        n = len(matrix)
        m = len(matrix[0])
        res = []
        queue = deque([[i, j] for i in range(n) for j in range(m)])
        while queue:
            row, col = queue.popleft()
            if row >= n - 1 or col >= m - 1:
                continue
                
            for i in range(-1, 2):
                for j in range(-1, 2):
                    if (row + i < 0) or (col + j < 0) \
                       or (row + i > n - 1) or (col + j > m - 1):
                        continue
                    
                    if matrix[row+i][col+j]:
                        queue.append((row+i, col+j))
                        res.append(matrix[row+i][col+j])
                        
        return res
################################################################

Solution:
[[0, 0, 4], [0, 8, 6], [5, 3, 6]]

