Input token: 490
Output token: 241
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[4, 5, 4], [5, 5, 5], [4, 5, 4]]
output: [[0, 4, 0], [4, 4, 4], [0, 4, 0]]

Example_2:
input: [[5, 5, 6, 6, 6], [6, 5, 5, 6, 6], [6, 6, 5, 5, 6], [6, 6, 6, 5, 5], [5, 6, 6, 6, 5]]
output: [[6, 6, 0, 0, 0], [0, 6, 6, 0, 0], [0, 0, 6, 6, 0], [0, 0, 0, 6, 6], [6, 0, 0, 0, 6]]

Example_3:
input: [[9, 5, 9, 9, 9], [9, 9, 5, 5, 9], [9, 5, 9, 9, 9], [9, 9, 5, 9, 9], [9, 9, 9, 5, 5]]
output: [[0, 9, 0, 0, 0], [0, 0, 9, 9, 0], [0, 9, 0, 0, 0], [0, 0, 9, 0, 0], [0, 0, 0, 9, 9]]

Test case:
input: [[3, 3, 3, 5, 3], [3, 5, 3, 3, 3], [3, 5, 5, 3, 5], [3, 3, 3, 5, 3], [5, 5, 5, 3, 3]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
"""
import sys
from typing import List

class Solution(object):
    def findKthLargest(self, nums: List[int], k: int) -> int:
        if len(nums) < k+1 or not isinstance(k, int):
            return -1
        
        # sort by ascending order
        nums = sorted(nums)
        i = j = 0
        while i <= j:
            if i >= j:
                break
            
            if nums[i] > nums[j]:
                i += 1
            else:
                j -= 1
                
        return (len(nums)-k)+i
################################################################

Solution:
[[0, 0, 0, 3, 0], [0, 3, 0, 0, 0], [0, 3, 3, 0, 3], [0, 0, 0, 3, 0], [3, 3, 3, 0, 0]]

