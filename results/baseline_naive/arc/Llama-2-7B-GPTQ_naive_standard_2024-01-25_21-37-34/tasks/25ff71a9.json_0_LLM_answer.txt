Input token: 316
Output token: 545
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[1, 1, 1], [0, 0, 0], [0, 0, 0]]
output: [[0, 0, 0], [1, 1, 1], [0, 0, 0]]

Example_2:
input: [[0, 0, 0], [1, 1, 1], [0, 0, 0]]
output: [[0, 0, 0], [0, 0, 0], [1, 1, 1]]

Example_3:
input: [[0, 1, 0], [1, 1, 0], [0, 0, 0]]
output: [[0, 0, 0], [0, 1, 0], [1, 1, 0]]

Example_4:
input: [[0, 2, 2], [0, 0, 2], [0, 0, 0]]
output: [[0, 0, 0], [0, 2, 2], [0, 0, 2]]

Test case:
input: [[2, 0, 0], [2, 0, 0], [0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
"""
import numpy as np
from typing import List

def rotate(matrix:np.ndarray) -> np.ndarray:
    """Rotate a matrix by 90 degrees counterclockwise."""
    return np.rot90(matrix)

def transpose(matrix:np.ndarray) -> np.ndarray:
    """Transpose a matrix."""
    return np.transpose(matrix)

def main():
    # Example_1
    matrix = np.array([[1, 1, 1], [0, 0, 0], [0, 0, 0]])
    output = rotate(transpose(matrix))
    print("Example_1")
    assert np.allclose(output, [[0, 0, 0], [1, 1, 1], [0, 0, 0]])
    
    # Example_2
    matrix = np.array([[0, 0, 0], [1, 1, 1], [0, 0, 0]])
    output = rotate(transpose(matrix))
    print("Example_2")
    assert np.allclose(output, [[0, 0, 0], [0, 0, 0], [1, 1, 1]])
    
    # Example_3
    matrix = np.array([[0, 1, 0], [1, 1, 0], [0, 0, 0]])
    output = rotate(transpose(matrix))
    print("Example_3")
    assert np.allclose(output, [[0, 0, 0], [0, 1, 0], [1, 1, 0]])
    
    # Example_4
    matrix = np.array([[2, 0, 0], [0, 0, 2], [0, 0, 0]])
    output = rotate(transpose(matrix))
    print("Example_4")
    assert np.allclose(output, [[0, 0, 0], [0, 0, 2], [2, 0, 0]])
    
if __name__ == "__main__":
    main()
################################################################

Solution:
[[0, 0, 0], [2, 0, 0], [2, 0, 0]]

