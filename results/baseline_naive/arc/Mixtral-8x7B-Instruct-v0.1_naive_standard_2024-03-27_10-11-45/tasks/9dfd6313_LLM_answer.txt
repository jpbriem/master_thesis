
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['e', '.', '.'], ['c', 'e', '.'], ['.', '.', 'e']]
output: [['e', 'c', '.'], ['.', 'e', '.'], ['.', '.', 'e']]

Example_2:
input: [['e', '.', '.', '.'], ['.', 'e', '.', '.'], ['f', '.', 'e', '.'], ['f', '.', 'd', 'e']]
output: [['e', '.', 'f', 'f'], ['.', 'e', '.', '.'], ['.', '.', 'e', 'd'], ['.', '.', '.', 'e']]

Example_3:
input: [['e', '.', '.', '.', '.'], ['.', 'e', '.', '.', '.'], ['h', 'h', 'e', '.', '.'], ['.', 'b', '.', 'e', '.'], ['.', 'b', '.', 'a', 'e']]
output: [['e', '.', 'h', '.', '.'], ['.', 'e', 'h', 'b', 'b'], ['.', '.', 'e', '.', '.'], ['.', '.', '.', 'e', 'a'], ['.', '.', '.', '.', 'e']]

Test case:
input: [['e', '.', '.', '.', '.', '.'], ['.', 'e', '.', '.', '.', '.'], ['c', 'c', 'e', '.', '.', '.'], ['.', '.', '.', 'e', '.', '.'], ['b', '.', 'h', 'h', 'e', '.'], ['b', '.', 'f', '.', '.', 'e']]

###########################################################
Sample Outputs:
output: [['e', '.', 'c', '.', 'b', '.'], ['.', 'e', 'c', '.', '.', 'b'], ['.', '.', 'e', 'e', 'h', 'f'], ['.', '.', '.', 'e', '.', '.'], ['.', '.', '.', '.', 'e', '.'], ['.', '.', '.', '.', '.', 'e']]
*/

// Solution 1:
class Solution {
    public void rotate(char[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                char tmp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
    }
}

// Solution 2:
class Solution {
    public void rotate(char[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                int k = n - j - 1;
                char tmp = matrix[i][j];
                matrix[i][j] = matrix[k][i];
                matrix[k][i] = matrix[n - i - 1][k];
                matrix[n - i - 1][k] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
    }
}


###########################################################
Result:
solution: [['e', '.', 'c', '.', 'b', 'b'], ['.', 'e', 'c', '.', '.', '.'], ['.', '.', 'e', '.', 'h', 'f'], ['.', '.', '.', 'e', 'h', '.'], ['.', '.', '.', '.', 'e', '.'], ['.', '.', '.', '.', '.', 'e']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.041666666666666664

cat_success_cnt: 1

cat_success_rate: 0.041666666666666664

