
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['c', 'c', '.'], ['.', 'c', '.'], ['c', '.', 'c']]
output: [['h', 'h', '.'], ['.', 'h', '.'], ['c', '.', 'c']]

Example_2:
input: [['.', 'c', '.', '.', '.', 'c'], ['.', 'c', 'c', 'c', '.', '.'], ['.', '.', '.', '.', 'c', '.'], ['.', 'c', '.', '.', '.', '.']]
output: [['.', 'h', '.', '.', '.', 'c'], ['.', 'h', 'h', 'h', '.', '.'], ['.', '.', '.', '.', 'c', '.'], ['.', 'c', '.', '.', '.', '.']]

Example_3:
input: [['c', 'c', '.', 'c'], ['c', 'c', '.', '.'], ['c', '.', '.', 'c'], ['.', '.', 'c', 'c']]
output: [['h', 'h', '.', 'c'], ['h', 'h', '.', '.'], ['h', '.', '.', 'h'], ['.', '.', 'h', 'h']]

Example_4:
input: [['c', 'c', '.', '.', '.', '.'], ['.', 'c', '.', '.', 'c', '.'], ['c', '.', '.', '.', '.', '.'], ['.', 'c', 'c', '.', '.', '.'], ['.', 'c', 'c', '.', '.', 'c']]
output: [['h', 'h', '.', '.', '.', '.'], ['.', 'h', '.', '.', 'c', '.'], ['c', '.', '.', '.', '.', '.'], ['.', 'h', 'h', '.', '.', '.'], ['.', 'h', 'h', '.', '.', 'c']]

Test case:
input: [['c', '.', 'c', '.', 'c'], ['c', 'c', 'c', '.', '.'], ['.', '.', '.', '.', 'c'], ['.', 'c', 'c', '.', '.'], ['.', 'c', 'c', '.', '.']]

###########################################################
Sample Outputs:
output: [['h', '.', 'h', '.', 'h'], ['h', 'h', 'h', '.', '.'], ['.', '.', '.', '.', 'c'], ['.', 'h', 'h', '.', '.'], ['.', 'h', 'h', '.', '.']]
*/

public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        if (board[click[0]][click[1]] == 'M') {
            board[click[0]][click[1]] = 'X';
            return board;
        }
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(char[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y]!= '.') {
            return;
        }
        int count = getCount(board, x, y);
        if (count > 0) {
            board[x][y] = (char)(count + '0');
            return;
        }
        board[x][y] = 'h';
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                dfs(board, x + i, y + j);
            }
        }
    }

    private int getCount(char[][] board, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                if (x + i < 0 || x + i >= board.length || y + j < 0 || y + j >= board[0].length) continue;
                if (board[x + i][y + j] == 'M' || board[x + i][y + j] == 'X') {
                    count++;
                }
            }
        }
        return count;
    }
}


###########################################################
Result:
solution: [['h', '.', 'h', '.', 'c'], ['h', 'h', 'h', '.', '.'], ['.', '.', '.', '.', 'c'], ['.', 'h', 'h', '.', '.'], ['.', 'h', 'h', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.09090909090909091

cat_success_cnt: 1

cat_success_rate: 0.09090909090909091

