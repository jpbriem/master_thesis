
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', 'f'], ['.', 'd', '.'], ['c', '.', '.']]
output: [['.', '.', 'f'], ['.', 'd', 'f'], ['c', 'd', 'f']]

Example_2:
input: [['.', 'b', '.'], ['g', '.', 'h'], ['.', '.', '.']]
output: [['.', 'b', '.'], ['g', 'b', 'h'], ['g', 'b', 'h']]

Example_3:
input: [['d', '.', '.'], ['.', 'b', '.'], ['.', '.', '.']]
output: [['d', '.', '.'], ['d', 'b', '.'], ['d', 'b', '.']]

Test case:
input: [['d', '.', 'h'], ['.', '.', '.'], ['.', 'g', '.']]

###########################################################
Sample Outputs:
output: [['d', '.', 'h'], ['d', '.', 'h'], ['d', 'g', 'h']]
*/

public class Solution {
    public String[][] solve(String[][] board) {
        if (board == null || board.length == 0) return new String[0][];
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; ++i) {
            dfs(board, i, 0);
            dfs(board, i, n - 1);
        }
        for (int j = 0; j < n; ++j) {
            dfs(board, 0, j);
            dfs(board, m - 1, j);
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!"O".equals(board[i][j])) continue;
                board[i][j] = "X";
            }
        }
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length ||!".".equals(board[x][y])) return;
        board[x][y] = "T";
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
}


###########################################################
Result:
solution: [['d', '.', 'h'], ['d', '.', 'h'], ['d', 'g', 'h']]


success: 1

too_long_prompt: False

tries: 1

success_rate: 0.10526315789473684

cat_success_cnt: 4

cat_success_rate: 0.10526315789473684

