
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['d', 'e', 'd'], ['e', 'e', 'e'], ['d', 'e', 'd']]
output: [['.', 'd', '.'], ['d', 'd', 'd'], ['.', 'd', '.']]

Example_2:
input: [['e', 'e', 'f', 'f', 'f'], ['f', 'e', 'e', 'f', 'f'], ['f', 'f', 'e', 'e', 'f'], ['f', 'f', 'f', 'e', 'e'], ['e', 'f', 'f', 'f', 'e']]
output: [['f', 'f', '.', '.', '.'], ['.', 'f', 'f', '.', '.'], ['.', '.', 'f', 'f', '.'], ['.', '.', '.', 'f', 'f'], ['f', '.', '.', '.', 'f']]

Example_3:
input: [['i', 'e', 'i', 'i', 'i'], ['i', 'i', 'e', 'e', 'i'], ['i', 'e', 'i', 'i', 'i'], ['i', 'i', 'e', 'i', 'i'], ['i', 'i', 'i', 'e', 'e']]
output: [['.', 'i', '.', '.', '.'], ['.', '.', 'i', 'i', '.'], ['.', 'i', '.', '.', '.'], ['.', '.', 'i', '.', '.'], ['.', '.', '.', 'i', 'i']]

Test case:
input: [['c', 'c', 'c', 'e', 'c'], ['c', 'e', 'c', 'c', 'c'], ['c', 'e', 'e', 'c', 'e'], ['c', 'c', 'c', 'e', 'c'], ['e', 'e', 'e', 'c', 'c']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', 'e', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'e', '.'], ['e', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public char[][] printMeeting(char[][] meetings) {
        int m = meetings.length;
        int n = meetings[0].length;

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (meetings[i][j] == 'e') continue;

                boolean isTopEdge = true, isLeftEdge = true;
                // check top edge
                for (int k = 0; k < n && isTopEdge; ++k) {
                    if (meetings[i - 1][k]!= 'e' && meetings[i - 1][k]!= meetings[i][j]) {
                        isTopEdge = false;
                    }
                }
                // check left edge
                for (int k = 0; k < m && isLeftEdge; ++k) {
                    if (meetings[k][j - 1]!= 'e' && meetings[k][j - 1]!= meetings[i][j]) {
                        isLeftEdge = false;
                    }
                }

                if (isTopEdge &&!isLeftEdge) {
                    meetings[i][j] = '.';
                } else if (!isTopEdge && isLeftEdge) {
                    meetings[i][j] = '.';
                } else if (isTopEdge && isLeftEdge) {
                    meetings[i][j] = '.';
                }
            }
        }

        return meetings;
    }
}

// Solution 2:
class Solution {
    public char[][] printMeeting(char[][] meetings) {
        int m = meetings.length;
        int n = meetings[0].length;

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (meetings[i][j] == 'e') continue;

                boolean isTopEdge = true, isLeftEdge = true;
                // check top edge
                for (int k = 0; k < n && isTopEdge; ++k) {
                    if (meetings[i - 1][k]!= 'e' && meetings[i - 1][k]!= meetings[i][j]) {
                        isTopEdge = false;
                    }
                }
                // check left edge
                for (int k = 0; k < m && isLeftEdge; ++k) {
                    if (meetings[k][j - 1]!= 'e' && meetings[k][j - 1]!= meetings[i][j]) {
                        isLeftEdge = false;
                    }
                }

                if ((isTopEdge || isLeftEdge) &&!(isTopEdge && isLeftEdge)) {
                    meetings[i][j] = '.';
                }
            }
        }

        return meetings;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', 'c', '.'], ['.', 'c', '.', '.', '.'], ['.', 'c', 'c', '.', 'c'], ['.', '.', '.', 'c', '.'], ['c', 'c', 'c', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.10204081632653061

cat_success_cnt: 5

cat_success_rate: 0.10204081632653061

