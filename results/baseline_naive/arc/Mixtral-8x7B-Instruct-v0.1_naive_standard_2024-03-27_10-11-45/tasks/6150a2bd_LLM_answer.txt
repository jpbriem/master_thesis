
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['c', 'c', 'h'], ['c', 'g', '.'], ['e', '.', '.']]
output: [['.', '.', 'e'], ['.', 'g', 'c'], ['h', 'c', 'c']]

Example_2:
input: [['e', 'e', 'b'], ['a', '.', '.'], ['.', '.', '.']]
output: [['.', '.', '.'], ['.', '.', 'a'], ['b', 'e', 'e']]

Test case:
input: [['f', 'c', 'e'], ['f', 'h', '.'], ['d', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', 'd'], ['.', 'h', 'f'], ['e', 'c', 'f']]
*/

public class Solution {
    public void rotate(char[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                char tmp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
    }
}


###########################################################
Result:
solution: [['.', '.', 'd'], ['.', 'h', 'f'], ['e', 'c', 'f']]


success: 1

too_long_prompt: False

tries: 1

success_rate: 0.1

cat_success_cnt: 1

cat_success_rate: 0.1

