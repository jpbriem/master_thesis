
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.'], ['.', 'b', 'b', 'b', '.', '.', '.'], ['.', '.', 'b', '.', '.', '.', '.'], ['.', 'b', 'b', 'b', 'b', '.', '.'], ['.', '.', 'b', 'b', 'b', '.', '.'], ['.', '.', '.', 'b', '.', '.', '.'], ['d', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.'], ['.', 'd', 'd', 'd', '.', '.', '.'], ['.', '.', 'd', '.', '.', '.', '.'], ['.', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'c', '.', '.', '.'], ['.', '.', 'c', 'c', 'c', '.', '.'], ['.', 'c', 'c', 'c', 'c', '.', '.'], ['.', 'c', 'c', '.', '.', '.', '.'], ['.', '.', 'c', 'c', '.', '.', '.'], ['f', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'f', '.', '.', '.'], ['.', '.', 'f', 'f', 'f', '.', '.'], ['.', 'f', 'f', 'f', 'f', '.', '.'], ['.', 'f', 'f', '.', '.', '.', '.'], ['.', '.', 'f', 'f', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.'], ['.', 'h', 'h', 'h', '.', '.', '.'], ['.', 'h', 'h', 'h', 'h', 'h', '.'], ['.', '.', '.', 'h', 'h', '.', '.'], ['.', '.', 'h', 'h', '.', '.', '.'], ['.', '.', 'h', 'h', 'h', '.', '.'], ['b', '.', '.', '.', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.', '.'], ['.', 'b', 'b', 'b', '.', '.', '.'], ['.', '.', 'b', '.', '.', '.', '.'], ['.', 'b', 'b', 'b', 'b', '.', '.'], ['.', '.', 'b', 'b', '.', '.', '.'], ['.', '.', '.', 'b', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public char[][] rotateMatrix(char[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2 + 1; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                // save the current element to temp variable
                char temp = matrix[i][j];

                // move elements from right to top
                matrix[i][j] = matrix[n-j-1][i];

                // move elements from bottom to left
                matrix[n-j-1][i] = matrix[n-i-1][n-j-1];

                // move elements from left to bottom
                matrix[n-i-1][n-j-1] = matrix[j][n-i-1];

                // put the saved value in the last position
                matrix[j][n-i-1] = temp;
            }
        }
        return matrix;
    }
}

// Solution 2:
class Solution {
    public char[][] rotateMatrix(char[][] matrix) {
        if (matrix == null || matrix.length <= 1) {
            return matrix;
        }

        int len = matrix.length;
        char[][] result = new char[len][len];

        for (int row = 0; row < len; row++) {
            for (int col = 0; col < len; col++) {
                result[col][len - row - 1] = matrix[row][col];
            }
        }

        return result;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.', '.'], ['.', 'b', 'b', 'b', '.', '.', '.'], ['.', 'b', 'b', 'b', 'b', 'b', '.'], ['.', '.', '.', 'b', 'b', '.', '.'], ['.', '.', 'b', 'b', '.', '.', '.'], ['.', '.', 'b', 'b', 'b', '.', '.'], ['.', '.', '.', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03571428571428571

cat_success_cnt: 1

cat_success_rate: 0.03571428571428571

