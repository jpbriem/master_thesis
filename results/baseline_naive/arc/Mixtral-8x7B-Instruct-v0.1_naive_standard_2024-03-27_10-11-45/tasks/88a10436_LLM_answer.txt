
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', 'b', '.', '.', '.', '.', '.', '.', '.'], ['b', 'b', 'a', '.', '.', '.', '.', '.', '.'], ['.', 'a', 'c', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'e', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', 'b', '.', '.', '.', '.', '.', '.', '.'], ['b', 'b', 'a', '.', '.', '.', '.', '.', '.'], ['.', 'a', 'c', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'b', '.', '.', '.'], ['.', '.', '.', '.', 'b', 'b', 'a', '.', '.'], ['.', '.', '.', '.', '.', 'a', 'c', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', 'f', '.', '.'], ['.', '.', '.', '.', 'a', 'a', '.'], ['.', '.', '.', '.', 'b', 'b', 'b'], ['.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.'], ['.', 'e', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', 'f', '.', '.'], ['.', '.', '.', '.', 'a', 'a', '.'], ['.', '.', '.', '.', 'b', 'b', 'b'], ['.', '.', '.', '.', '.', '.', '.'], ['f', '.', '.', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.', '.', '.'], ['b', 'b', 'b', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'e', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', 'b', 'b', '.', '.', '.', '.', '.'], ['.', '.', 'c', 'a', '.', '.', '.', '.'], ['.', 'c', 'c', 'a', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'b', 'b', '.', '.', '.'], ['.', '.', '.', '.', 'c', 'a', '.', '.'], ['.', '.', '.', 'c', 'c', 'a', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', 'b', 'b', '.', '.', '.', '.', '.'], ['.', '.', 'c', 'a', '.', '.', '.', '.'], ['.', 'c', 'c', 'a', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'b', 'b', '.', '.', '.', '.', '.', '.'], ['.', '.', 'a', 'a', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'b', 'b', '.', '.', '.', '.', '.', '.'], ['.', '.', 'a', 'a', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public void moveZeroes(int[] nums) {
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i]!= 0) {
                nums[index++] = nums[i];
            }
        }
        while (index < nums.length) {
            nums[index++] = 0;
        }
    }
}

// Solution 2:
class Solution {
    public void moveZeroes(int[] nums) {
        int lastNonZeroIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i]!= 0) {
                swap(nums, lastNonZeroIndex++, i);
            }
        }
    }

    private void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'b', 'b', '.', '.', '.', '.', '.', '.'], ['.', '.', 'a', 'a', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'b', 'b', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', 'a', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'c', 'c', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.047619047619047616

cat_success_cnt: 1

cat_success_rate: 0.047619047619047616

