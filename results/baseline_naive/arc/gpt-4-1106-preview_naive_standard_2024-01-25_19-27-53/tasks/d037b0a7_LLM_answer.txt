
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
#####
user:
#####

Example_1:
input: [[0, 0, 6], [0, 4, 0], [3, 0, 0]]
output: [[0, 0, 6], [0, 4, 6], [3, 4, 6]]

Example_2:
input: [[0, 2, 0], [7, 0, 8], [0, 0, 0]]
output: [[0, 2, 0], [7, 2, 8], [7, 2, 8]]

Example_3:
input: [[4, 0, 0], [0, 2, 0], [0, 0, 0]]
output: [[4, 0, 0], [4, 2, 0], [4, 2, 0]]

Test case:
input: [[4, 0, 8], [0, 0, 0], [0, 7, 0]]

###########################################################
Sample Outputs:
To solve this problem, you can follow these steps in Python:

1. Iterate through each row of the input matrix.
2. For each row, iterate from left to right to propagate the non-zero values to the right, filling the zeros with the last non-zero value seen.
3. Then, iterate from right to left to propagate the non-zero values to the left, ensuring that any zeros to the left of a non-zero value are filled.

Here's the Python code to achieve this:

```python
def fill_zeros(matrix):
    for row in matrix:
        last_value = 0
        # Propagate non-zero values to the right
        for i in range(len(row)):
            if row[i] != 0:
                last_value = row[i]
            else:
                row[i] = last_value
        
        # Propagate non-zero values to the left
        last_value = 0
        for i in range(len(row)-1, -1, -1):
            if row[i] != 0:
                last_value = row[i]
            else:
                row[i] = last_value
    return matrix

# Test case:
input_matrix = [[4, 0, 8], [0, 0, 0], [0, 7, 0]]
output_matrix = fill_zeros(input_matrix)
print(output_matrix)
```

When you run this code with the provided test case, the expected output should be:

```
[[4, 4, 8], [4, 4, 8], [4, 7, 7]]
```

This is because in the first row, the 4 is propagated to the right to fill the zero, and the 8 remains as is. In the second row, the 4 from the first row is propagated through the entire row, as there are no other non-zero values before or after. In the third row, 4 from the previous row is propagated to the first zero, and then the 7 is propagated to the right to fill the last zero.


###########################################################
Result:
solution: [[4, 0, 8], [4, 0, 8], [4, 7, 8]]


success: 0

tries: 1

success_rate: 0.07894736842105263

cat_success_cnt: 3

cat_success_rate: 0.07894736842105263

