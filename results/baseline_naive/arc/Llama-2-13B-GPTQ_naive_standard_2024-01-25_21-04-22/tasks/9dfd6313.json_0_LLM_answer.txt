Input token: 469
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[5, 0, 0], [3, 5, 0], [0, 0, 5]]
output: [[5, 3, 0], [0, 5, 0], [0, 0, 5]]

Example_2:
input: [[5, 0, 0, 0], [0, 5, 0, 0], [6, 0, 5, 0], [6, 0, 4, 5]]
output: [[5, 0, 6, 6], [0, 5, 0, 0], [0, 0, 5, 4], [0, 0, 0, 5]]

Example_3:
input: [[5, 0, 0, 0, 0], [0, 5, 0, 0, 0], [8, 8, 5, 0, 0], [0, 2, 0, 5, 0], [0, 2, 0, 1, 5]]
output: [[5, 0, 8, 0, 0], [0, 5, 8, 2, 2], [0, 0, 5, 0, 0], [0, 0, 0, 5, 1], [0, 0, 0, 0, 5]]

Test case:
input: [[5, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0], [3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0], [2, 0, 8, 8, 5, 0], [2, 0, 6, 0, 0, 5]]
################################################################

LLM answer:

output: [[5, 0, 3, 0, 0, 0], [0, 5, 3, 0, 0, 0], [0, 0, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5]]
"""

import unittest
from typing import List

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not write additional code here.
        
        Update your answer in the editor below.
        """
        if len(matrix) == 0 or len(matrix[0]) == 0: return
        n = len(matrix)
        m = len(matrix[0])
        for i in range(n):
            for j in range(m):
                matrix[i][j] = self._rotate(matrix, i, j)
    
    def _rotate(self, matrix: List[List[int]], i: int, j: int) -> int:
        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]): return -1
        if i == j: return matrix[i][j]
        if i > j: return self._rotate(matrix, i - 1, j + 1)
        else: return self._rotate(matrix, i + 1, j - 1)

class Testing(unittest.TestCase):
    def test_solution(self):
        solution = Solution()
        self.assertEqual([[5, 0, 0], [3, 5, 0], [0, 0, 5]], solution.rotate([[5, 0, 0], [3, 5, 0], [0, 0, 5]]))
        self.assertEqual([[5, 3, 0], [0, 5, 0], [0, 0, 5]], solution.rotate([[5, 0, 0], [3, 5, 0], [0, 0, 5]]))
        self.assertEqual([[5, 0, 6, 6], [0, 5, 0, 0], [0, 0, 5, 4], [0, 0, 0, 5]], solution.rotate([[5, 0, 0, 0], [0, 5, 0, 0], [6, 0, 5, 0], [6, 0, 4, 5]]))
        self.assertEqual([[5, 0, 8, 0, 0], [0, 5, 8, 2, 2], [0, 0, 5, 0, 0], [0, 0, 0, 5, 1], [0, 0, 0, 0, 5]], solution.rotate([[5, 0, 0, 0, 0], [0, 5, 0, 0, 0], [8, 8, 5, 0, 0], [0, 2, 0, 5, 0], [0, 2, 0, 1, 5]]))
        self.assertEqual([[5, 0, 3, 0, 0, 0], [0, 5, 3, 0, 0, 0], [0, 0, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5]], solution.rotate([[5, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0], [3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0], [2, 0, 8, 8, 5, 0], [2, 0, 6, 0, 0
################################################################

Solution:
[[5, 0, 3, 0, 2, 2], [0, 5, 3, 0, 0, 0], [0, 0, 5, 0, 8, 6], [0, 0, 0, 5, 8, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5]]

