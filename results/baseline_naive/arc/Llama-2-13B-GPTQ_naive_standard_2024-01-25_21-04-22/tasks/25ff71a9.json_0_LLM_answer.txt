Input token: 316
Output token: 632
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[1, 1, 1], [0, 0, 0], [0, 0, 0]]
output: [[0, 0, 0], [1, 1, 1], [0, 0, 0]]

Example_2:
input: [[0, 0, 0], [1, 1, 1], [0, 0, 0]]
output: [[0, 0, 0], [0, 0, 0], [1, 1, 1]]

Example_3:
input: [[0, 1, 0], [1, 1, 0], [0, 0, 0]]
output: [[0, 0, 0], [0, 1, 0], [1, 1, 0]]

Example_4:
input: [[0, 2, 2], [0, 0, 2], [0, 0, 0]]
output: [[0, 0, 0], [0, 2, 2], [0, 0, 2]]

Test case:
input: [[2, 0, 0], [2, 0, 0], [0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0], [0, 0, 0], [2, 0, 0]]
"""
from typing import List
import re

class Solution:
    def flipAndIncrement(self, nums: List[List[int]]) -> None:
        """
        Do not write additional code.
        
        Pre-condition:
            - `nums` is a list of lists where each inner list contains at most three integers.
            
        Post-condition:
            - For each element in `nums`, if it has two or more elements with value 0, then replace all such elements by 1; otherwise do nothing.
            - If there exists an element in `nums` that has exactly one nonzero element, then increment this element to 2.
        """
        for i in range(len(nums)):
            if len([j for j in nums[i] if j == 0]) >= 2:
                nums[i][:] = [1]*len(nums[i])
            elif len([j for j in nums[i] if j!= 0]) == 1:
                nums[i][:] = [2]*len(nums[i])

# Testing
tests = []
tests.append(([[2, 0, 0], [2, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [2, 0, 0]]))
tests.append(([[0, 0, 0], [1, 1, 1], [0, 0, 0]], [[0, 0, 0], [1, 1, 1], [0, 0, 0]]))
tests.append(([[0, 1, 0], [1, 1, 0], [0, 0, 0]], [[0, 0, 0], [0, 1, 0], [1, 1, 0]]))
tests.append(([[0, 2, 2], [0, 0, 2], [0, 0, 0]], [[0, 0, 0], [0, 2, 2], [0, 0, 2]]))
tests.append(([[2, 0, 0], [2, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [2, 0, 0]]))
for t in tests:
    s = Solution()
    actual = s.flipAndIncrement(t[0])
    assert actual == t[1]
################################################################

Solution:
[[0, 0, 0], [2, 0, 0], [2, 0, 0]]

