Input token: 490
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[8, 8, 0, 0, 0], [8, 8, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [2, 2, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Example_2:
input: [[0, 8, 0], [0, 0, 0], [0, 0, 0]]
output: [[0, 0, 0], [0, 2, 0], [0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [0, 8, 8, 8, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 2, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 8, 0, 0], [0, 8, 8, 0, 0], [0, 0, 8, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
"""

import unittest
from typing import List

class Solution:
    def toIncreasingOrder(self, nums: List[List[int]]) -> None:
        """
        Do not write additional code here.
        
        Pre-condition:
            Input is a list of lists where each inner list contains at most one nonzero element.
            
        Post-condition:
            Return an array that has been sorted in increasing order.
        """
        if len(nums) == 0: return
        for i in range(len(nums)):
            if nums[i][0]!= 0:
                nums[i].insert(0, 0)
        for i in range(len(nums)-1):
            if nums[i][0] > nums[i+1][0]:
                nums[i], nums[i+1] = nums[i+1], nums[i]

# Your Solution object will be instantiated and called as such:
# obj = Solution()
# obj.toIncreasingOrder(nums)

def test_solution():
    solution = Solution()
    assert solution.toIncreasingOrder([]) == []
    assert solution.toIncreasingOrder([[0, 0, 0]]) == [[0, 0, 0]]
    assert solution.toIncreasingOrder([[0, 0, 0, 0, 0]]) == [[0, 0, 0, 0, 0]]
    assert solution.toIncreasingOrder([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    assert solution.toIncreasingOrder([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    assert solution.toIncreasingOrder([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    assert solution.toIncreasingOrder([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == [[0, 0, 0, 0, 0], [0, 0
################################################################

Solution:
[[0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [0, 2, 2, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 0, 0]]

