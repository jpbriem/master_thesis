Input token: 316
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[2, 2, 1], [1, 5, 1], [5, 2, 2]]
output: [[2, 1, 5], [2, 5, 2], [1, 1, 2]]

Example_2:
input: [[2, 2, 5], [6, 2, 2], [5, 5, 5]]
output: [[2, 6, 5], [2, 2, 5], [5, 2, 5]]

Example_3:
input: [[9, 9, 5], [5, 5, 8], [5, 8, 9]]
output: [[9, 5, 5], [9, 5, 8], [5, 8, 9]]

Example_4:
input: [[2, 6, 6], [2, 1, 1], [2, 6, 2]]
output: [[2, 2, 2], [6, 1, 6], [6, 1, 2]]

Test case:
input: [[9, 3, 4], [9, 4, 4], [9, 3, 4]]
################################################################

LLM answer:

output: [[9, 3, 4], [9, 4, 4], [9, 3, 4]]
"""
from typing import List
import re

class Solution:
    def permute(self, nums: List[int]) -> None:
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        if len(nums) == 0:
            return
        
        for i in range(len(nums)):
            self._permute(nums, i)
    
    def _permute(self, nums: List[int], start: int):
        if start >= len(nums):
            return
        
        for j in range(start, len(nums)):
            nums[j], nums[start] = nums[start], nums[j]
            self._permute(nums, start + 1)
            nums[j], nums[start] = nums[start], nums[j]

def test():
    s = Solution()
    assert s.permute([2, 2, 1]) == []
    assert s.permute([1, 5, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert s.permute([2, 2, 1]) == []
    assert
################################################################

Solution:
[[9, 9, 9], [3, 4, 3], [4, 4, 4]]

