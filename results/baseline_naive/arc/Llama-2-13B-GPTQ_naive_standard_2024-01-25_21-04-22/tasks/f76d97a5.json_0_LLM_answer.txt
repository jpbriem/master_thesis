Input token: 490
Output token: 435
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[4, 5, 4], [5, 5, 5], [4, 5, 4]]
output: [[0, 4, 0], [4, 4, 4], [0, 4, 0]]

Example_2:
input: [[5, 5, 6, 6, 6], [6, 5, 5, 6, 6], [6, 6, 5, 5, 6], [6, 6, 6, 5, 5], [5, 6, 6, 6, 5]]
output: [[6, 6, 0, 0, 0], [0, 6, 6, 0, 0], [0, 0, 6, 6, 0], [0, 0, 0, 6, 6], [6, 0, 0, 0, 6]]

Example_3:
input: [[9, 5, 9, 9, 9], [9, 9, 5, 5, 9], [9, 5, 9, 9, 9], [9, 9, 5, 9, 9], [9, 9, 9, 5, 5]]
output: [[0, 9, 0, 0, 0], [0, 0, 9, 9, 0], [0, 9, 0, 0, 0], [0, 0, 9, 0, 0], [0, 0, 0, 9, 9]]

Test case:
input: [[3, 3, 3, 5, 3], [3, 5, 3, 3, 3], [3, 5, 5, 3, 5], [3, 3, 3, 5, 3], [5, 5, 5, 3, 3]]
################################################################

LLM answer:

output: [[0, 3, 0, 0, 0], [0, 0, 3, 3, 0], [0, 0, 0, 3, 3], [0, 0, 0, 0, 3], [0, 0, 0, 0, 0]]
"""
from typing import List
import numpy as np

class Solution:
    def numToDigits(self, n: int) -> List[int]:
        """
        :type n: int
        :rtype: List[int]
        """
        if not isinstance(n, int):
            raise TypeError("Expected type 'int', got %s instead." % (type(n),))
        
        result = []
        while n > 0:
            remainder = n % 10
            result.append(remainder)
            n //= 10
            
        return result
    
    def numsToDigits(self, nums: List[List[int]]) -> List[List[int]]:
        """
        :type nums: List[List[int]]
        :rtype: List[List[int]]
        """
        if not isinstance(nums, list):
            raise TypeError("Expected type 'list', got %s instead." % (type(nums),))
        
        for i in range(len(nums)):
            if len(nums[i])!= len(self.numToDigits(nums[i][0])):
                raise ValueError("Invalid input.")
        
        result = []
        for i in range(len(nums)):
            digits = self.numToDigits(nums[i][0])
            result.append([digits[j] for j in range(len(digits))])
        
        return result
################################################################

Solution:
[[0, 0, 0, 3, 0], [0, 3, 0, 0, 0], [0, 3, 3, 0, 3], [0, 0, 0, 3, 0], [3, 3, 3, 0, 0]]

