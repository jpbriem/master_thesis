Input token: 316
Output token: 588
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[2, 2, 2], [2, 1, 8], [2, 8, 8]]
output: [[2, 2, 2], [2, 5, 5], [2, 5, 5]]

Example_2:
input: [[1, 1, 1], [8, 1, 3], [8, 2, 2]]
output: [[1, 1, 1], [5, 1, 5], [5, 5, 5]]

Example_3:
input: [[2, 2, 2], [8, 8, 2], [2, 2, 2]]
output: [[2, 2, 2], [5, 5, 2], [2, 2, 2]]

Example_4:
input: [[3, 3, 8], [4, 4, 4], [8, 1, 1]]
output: [[5, 5, 5], [4, 4, 4], [5, 5, 5]]

Test case:
input: [[1, 3, 2], [3, 3, 2], [1, 3, 2]]
################################################################

LLM answer:

output: [[1, 3, 2], [5, 5, 2], [1, 3, 2]]
"""

import unittest
from typing import List

class Solution:
    def maxSlidingWindow(self, nums: List[int]) -> List[List[int]]:
        if not nums or len(nums) == 0: return []
        n = len(nums)
        window = []
        for i in range(n):
            if i > 0:
                window.append(max(window[-1]))
            window.append(nums[i])
        return window

class TestCase(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual([[2, 2, 2], [2, 5, 5], [2, 5, 5]], Solution().maxSlidingWindow([[2, 2, 2], [2, 1, 8], [2, 8, 8]]))
        
    def test_example_2(self):
        self.assertEqual([[1, 1, 1], [5, 1, 5], [5, 5, 5]], Solution().maxSlidingWindow([[1, 1, 1], [8, 1, 3], [8, 2, 2]]))
    
    def test_example_3(self):
        self.assertEqual([[2, 2, 2], [5, 5, 2], [2, 2, 2]], Solution().maxSlidingWindow([[2, 2, 2], [8, 8, 2], [2, 2, 2]]))
    
    def test_example_4(self):
        self.assertEqual([[5, 5, 5], [4, 4, 4], [5, 5, 5]], Solution().maxSlidingWindow([[3, 3, 8], [4, 4, 4], [8, 1, 1]]))
    
    def test_case(self):
        self.assertEqual([[1, 3, 2], [5, 5, 2], [1, 3, 2]], Solution().maxSlidingWindow([[1, 3, 2], [3, 3, 2], [1, 3, 2]]))

if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[[5, 3, 5], [3, 3, 5], [5, 3, 5]]

