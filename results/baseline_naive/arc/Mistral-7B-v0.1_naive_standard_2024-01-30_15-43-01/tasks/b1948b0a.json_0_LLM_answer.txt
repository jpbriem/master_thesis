Input token: 447
Output token: 282
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['g', 'g', 'h', 'g'], ['g', 'g', 'h', 'h'], ['h', 'h', 'g', 'h']]
output: [['c', 'c', 'h', 'c'], ['c', 'c', 'h', 'h'], ['h', 'h', 'c', 'h']]

Example_2:
input: [['h', 'h', 'h', 'g'], ['g', 'g', 'h', 'g'], ['h', 'h', 'g', 'h'], ['h', 'g', 'h', 'h'], ['h', 'g', 'h', 'g'], ['g', 'g', 'g', 'h']]
output: [['h', 'h', 'h', 'c'], ['c', 'c', 'h', 'c'], ['h', 'h', 'c', 'h'], ['h', 'c', 'h', 'h'], ['h', 'c', 'h', 'c'], ['c', 'c', 'c', 'h']]

Example_3:
input: [['h', 'h', 'g', 'g', 'g', 'g'], ['g', 'h', 'g', 'h', 'h', 'h'], ['h', 'g', 'h', 'h', 'g', 'h']]
output: [['h', 'h', 'c', 'c', 'c', 'c'], ['c', 'h', 'c', 'h', 'h', 'h'], ['h', 'c', 'h', 'h', 'c', 'h']]

Test case:
input: [['g', 'h', 'h', 'g'], ['g', 'h', 'g', 'h'], ['h', 'h', 'h', 'g'], ['h', 'g', 'h', 'g']]
################################################################

LLM answer:

output: [['c', 'c', 'h', 'c'], ['c', 'c', 'h', 'h'], ['h', 'h', 'c', 'h'], ['h', 'c', 'h', 'c']]
*/
public class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        if (A == null || A.length == 0) return new int[0][];
        for (int i = 0; i < A.length; ++i) {
            for (int j = 0, k = A[i].length - 1; j <= k; ++j, --k) {
                swap(A[i], j, k);
            }
        }
        for (int[] row : A) {
            for (int i = 0; i < row.length; ++i) {
                row[i] ^= 1;
            }
        }
        return A;
    }

    private void swap(int[] arr, int a, int b) {
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}
################################################################

Solution:
[['c', 'h', 'h', 'c'], ['c', 'h', 'c', 'h'], ['h', 'h', 'h', 'c'], ['h', 'c', 'h', 'c']]

