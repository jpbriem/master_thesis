Input token: 334
Output token: 333
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['b', 'b', 'b'], ['a', 'a', 'a'], ['a', 'a', 'a']]
output: [['a', 'a', 'a'], ['b', 'b', 'b'], ['a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a'], ['b', 'b', 'b'], ['a', 'a', 'a']]
output: [['a', 'a', 'a'], ['a', 'a', 'a'], ['b', 'b', 'b']]

Example_3:
input: [['a', 'b', 'a'], ['b', 'b', 'a'], ['a', 'a', 'a']]
output: [['a', 'a', 'a'], ['a', 'b', 'a'], ['b', 'b', 'a']]

Example_4:
input: [['a', 'c', 'c'], ['a', 'a', 'c'], ['a', 'a', 'a']]
output: [['a', 'a', 'a'], ['a', 'c', 'c'], ['a', 'a', 'c']]

Test case:
input: [['c', 'a', 'a'], ['c', 'a', 'a'], ['a', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a'], ['c', 'a', 'a'], ['c', 'a', 'a']]

Constraints:
1 <= arr.length <= 50
arr[i].length == 3
'a' <= arr[i][j] <= 'z'
 */
public class RotateImage {
    public static void main(String[] args) {
        String[][] input = new String[][]{
                {"a", "b", "a"},
                {"b", "b", "a"},
                {"a", "a", "a"}
        };
        rotate(input);
    }

    private static void rotate(String[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; i++) {
            for (int j = 0; j < n - 1 - i * 2; j++) {
                swap(matrix, i, j, i + j, n - 1 - i);
            }
        }
    }

    private static void swap(String[][] matrix, int x1, int y1, int x2, int y2) {
        String temp = matrix[x1][y1];
        matrix[x1][y1] = matrix[x2][y2];
        matrix[x2][y2] = temp;
    }
}
################################################################

Solution:
[['a', 'a', 'a'], ['c', 'a', 'a'], ['c', 'a', 'a']]

