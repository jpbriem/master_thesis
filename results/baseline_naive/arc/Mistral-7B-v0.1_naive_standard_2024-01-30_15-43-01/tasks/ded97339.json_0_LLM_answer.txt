Input token: 2175
Output token: 1020
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'i', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'i', 'i', 'i', 'i', 'i'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]

Test case:
input: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'i', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]
 */
public class Solution {
    public List<List<String>> updateBoard(List<List<String>> board, int[] click) {
        if (board == null || board.size() == 0 || board.get(0).size() == 0) return new ArrayList<>();
        int m = board.size();
        int n = board.get(0).size();
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board.get(i).get(j).equals("M")) continue;
                if (i == click[0] && j == click[1]) {
                    board.get(i).set(j, "X");
                    queue.offer(new int[]{i - 1, j});
                    queue.offer(new int[]{i + 1, j});
                    queue.offer(new int[]{i, j - 1});
                    queue.offer(new int[]{i, j + 1});
                } else if (board.get(i).get(j).equals("E")) {
                    int count = getCount(board, i, j);
                    if (count > 0) {
                        board.get(i).set(j, String.valueOf(count));
                        queue.offer(new int[]{i, j});
                    }
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0];
            int y = cur[1];
            if (x >= 0 && x < m && y >= 0 && y < n &&!board.get(x).get(y).equals("X") &&!board.get(x).get(y).equals("BK")) {
                int count = getCount(board, x, y);
                if (count > 0) {
                    board.get(x).set(y, String.valueOf(count));
                    queue.offer(new int[]{x, y});
                }
            }
        }
        return board;
    }

    private int getCount(List<List<String>> board, int x, int y) {
        int count = 0;
        for (int i = Math.max(x - 1, 0); i <= Math.min(x + 1, board.size() - 1); ++i) {
            for (int j = Math.max(y - 1, 0); j <= Math.min(y + 1, board.get(0).size() - 1); ++j) {
                if (i!= x || j!= y) {
                    if (board.get(i).get(j).equals("M")) {
                        ++count;
                    }
                }
            }
        }
        return count;
    }
}
################################################################

Solution:
[['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]

