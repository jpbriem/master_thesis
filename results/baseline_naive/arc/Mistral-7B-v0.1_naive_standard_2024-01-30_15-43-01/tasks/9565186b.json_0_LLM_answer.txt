Input token: 334
Output token: 731
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['c', 'c', 'c'], ['c', 'b', 'i'], ['c', 'i', 'i']]
output: [['c', 'c', 'c'], ['c', 'f', 'f'], ['c', 'f', 'f']]

Example_2:
input: [['b', 'b', 'b'], ['i', 'b', 'd'], ['i', 'c', 'c']]
output: [['b', 'b', 'b'], ['f', 'b', 'f'], ['f', 'f', 'f']]

Example_3:
input: [['c', 'c', 'c'], ['i', 'i', 'c'], ['c', 'c', 'c']]
output: [['c', 'c', 'c'], ['f', 'f', 'c'], ['c', 'c', 'c']]

Example_4:
input: [['d', 'd', 'i'], ['e', 'e', 'e'], ['i', 'b', 'b']]
output: [['f', 'f', 'f'], ['e', 'e', 'e'], ['f', 'f', 'f']]

Test case:
input: [['b', 'd', 'c'], ['d', 'd', 'c'], ['b', 'd', 'c']]
################################################################

LLM answer:

output: [['f', 'f', 'f'], ['f', 'f', 'f'], ['f', 'f', 'f']]
*/
public class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j].equals("M")) continue;
                else if (board[i][j].equals("E") && i == click[0] && j == click[1]) {
                    board[i][j] = "B";
                    queue.offer(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            int count = getCount(x, y, board);
            if (count > 0) {
                board[x][y] = Integer.toString(count);
                for (int i = -1; i <= 1; ++i) {
                    for (int j = -1; j <= 1; ++j) {
                        if (i!= 0 || j!= 0) {
                            int nextX = x + i, nextY = y + j;
                            if (nextX >= 0 && nextX < m && nextY >= 0 && nextY < n &&!visited[nextX][nextY]) {
                                if (board[nextX][nextY].equals("E")) {
                                    board[nextX][nextY] = "B";
                                    queue.offer(new int[]{nextX, nextY});
                                    visited[nextX][nextY] = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return board;
    }

    private int getCount(int x, int y, String[][] board) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i!= 0 || j!= 0) {
                    int nextX = x + i, nextY = y + j;
                    if (nextX >= 0 && nextX < board.length && nextY >= 0 && nextY < board[0].length && board[nextX][nextY].equals("M")) {
                        ++count;
                    }
                }
            }
        }
        return count;
    }
}
################################################################

Solution:
[['f', 'd', 'f'], ['d', 'd', 'f'], ['f', 'd', 'f']]

