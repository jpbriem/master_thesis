Input token: 1950
Output token: 550
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'c', 'a', 'a'], ['a', 'c', 'a', 'c', 'a', 'c', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'c', 'a', 'a'], ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['a', 'c', 'b', 'b', 'b', 'c', 'a', 'a'], ['a', 'c', 'b', 'c', 'b', 'c', 'a', 'a'], ['a', 'c', 'b', 'b', 'b', 'c', 'a', 'a'], ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'c', 'a', 'a', 'a', 'a'], ['a', 'c', 'a', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'a'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'a'], ['a', 'a', 'c', 'a', 'a', 'a', 'c', 'a'], ['a', 'a', 'c', 'a', 'c', 'a', 'c', 'a'], ['a', 'a', 'c', 'a', 'a', 'a', 'c', 'a'], ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a']]
output: [['a', 'a', 'a', 'c', 'a', 'a', 'a', 'a'], ['a', 'c', 'a', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'a'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'a'], ['a', 'a', 'c', 'b', 'b', 'b', 'c', 'a'], ['a', 'a', 'c', 'b', 'c', 'b', 'c', 'a'], ['a', 'a', 'c', 'b', 'b', 'b', 'c', 'a'], ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a']]

Example_3:
input: [['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'a', 'c', 'a', 'c', 'c', 'c', 'c', 'a'], ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a', 'c', 'a'], ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'a'], ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a', 'c', 'a'], ['a', 'a', 'a', 'c', 'a', 'c', 'a', 'c', 'c', 'c', 'c', 'a'], ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'c'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'c', 'a', 'c']]
output: [['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'b', 'b', 'b', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'b', 'c', 'b', 'c', 'c', 'c', 'c', 'a'], ['a', 'a', 'a', 'c', 'b', 'b', 'b', 'c', 'b', 'b', 'c', 'a'], ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'b', 'b', 'c', 'a'], ['a', 'a', 'a', 'c', 'b', 'b', 'b', 'c', 'b', 'b', 'c', 'a'], ['a', 'a', 'a', 'c', 'b', 'c', 'b', 'c', 'c', 'c', 'c', 'a'], ['a', 'a', 'a', 'c', 'b', 'b', 'b', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'c'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'c', 'a', 'c']]

Test case:
input: [['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a'], ['a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['c', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a'], ['c', 'a', 'c', 'a', 'c', 'a', 'a', 'a', 'a'], ['c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['a', 'a', 'c', 'b', 'b', 'b', 'c', 'a', 'a'], ['a', 'a', 'c', 'b', 'c', 'b', 'c', 'a', 'a'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['c', 'b', 'b', 'b', 'c', 'b', 'b', 'a', 'a'], ['c', 'b', 'c', 'b', 'c', 'b', 'b', 'a', 'a'], ['c', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a']]
'''

class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        if not matrix or len(matrix) == 0: return []
        m = len(matrix)
        n = len(matrix[0])
        visited = [[False for _ in range(n)] for _ in range(m)]
        queue = collections.deque()
        for i in xrange(m):
            for j in xrange(n):
                if matrix[i][j] == 0:
                    queue.append((i, j))
                    visited[i][j] = True
        while queue:
            row, col = queue.popleft()
            for dr, dc in ((0, -1), (0, 1), (-1, 0), (1, 0)):
                r, c = row + dr, col + dc
                if 0 <= r < m and 0 <= c < n and not visited[r][c]:
                    queue.append((r, c))
                    visited[r][c] = True
                    matrix[r][c] = matrix[row][col] + 1
        return matrix
################################################################

Solution:
[['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['a', 'a', 'c', 'b', 'b', 'b', 'c', 'a', 'a'], ['a', 'a', 'c', 'b', 'b', 'b', 'c', 'a', 'a'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a'], ['c', 'b', 'b', 'b', 'c', 'a', 'a', 'a', 'a'], ['c', 'b', 'c', 'b', 'c', 'a', 'a', 'a', 'a'], ['c', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c'], ['c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a']]

