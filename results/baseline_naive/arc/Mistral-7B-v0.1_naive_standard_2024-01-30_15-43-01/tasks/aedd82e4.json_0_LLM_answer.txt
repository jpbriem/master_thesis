Input token: 475
Output token: 398
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'c', 'c'], ['a', 'c', 'c'], ['c', 'a', 'a']]
output: [['a', 'c', 'c'], ['a', 'c', 'c'], ['b', 'a', 'a']]

Example_2:
input: [['c', 'c', 'c', 'a'], ['a', 'c', 'a', 'a'], ['a', 'a', 'a', 'c'], ['a', 'c', 'a', 'a']]
output: [['c', 'c', 'c', 'a'], ['a', 'c', 'a', 'a'], ['a', 'a', 'a', 'b'], ['a', 'b', 'a', 'a']]

Example_3:
input: [['c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a'], ['c', 'c', 'a', 'c'], ['a', 'a', 'a', 'a'], ['a', 'c', 'c', 'c']]
output: [['c', 'c', 'a', 'a'], ['a', 'c', 'a', 'a'], ['c', 'c', 'a', 'b'], ['a', 'a', 'a', 'a'], ['a', 'c', 'c', 'c']]

Example_4:
input: [['c', 'c', 'a'], ['c', 'a', 'c'], ['a', 'c', 'a']]
output: [['c', 'c', 'a'], ['c', 'a', 'b'], ['a', 'b', 'a']]

Test case:
input: [['c', 'c', 'a', 'c'], ['a', 'c', 'a', 'a'], ['a', 'a', 'c', 'a'], ['c', 'a', 'a', 'a'], ['a', 'a', 'c', 'c']]
################################################################

LLM answer:

output: [['c', 'c', 'a', 'c'], ['a', 'c', 'a', 'a'], ['a', 'a', 'c', 'b'], ['c', 'b', 'a', 'a'], ['a', 'b', 'c', 'c']]

Constraints:
1 <= A.length, B.length <= 50
A[i].length == B[i].length
1 <= A[i][j], B[i][j] <= 26
*/
class Solution {
    public String[] findReplaceString(String[] A, String[] B) {
        int n = A.length;
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            char c = B[i].charAt(0);
            if (!map.containsKey(c)) {
                map.put(c, (char)(c + 1));
            } else {
                map.put(c, (char)(c - 1));
            }
        }
        for (int i = 0; i < n; ++i) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < A[i].length(); ++j) {
                char c = A[i].charAt(j);
                if (map.getOrDefault(c, c)!= c) {
                    sb.append((char)(map.getOrDefault(c, c)));
                } else {
                    sb.append(c);
                }
            }
            A[i] = sb.toString();
        }
        return A;
    }
}
################################################################

Solution:
[['c', 'c', 'a', 'b'], ['a', 'c', 'a', 'a'], ['a', 'a', 'b', 'a'], ['b', 'a', 'a', 'a'], ['a', 'a', 'c', 'c']]

