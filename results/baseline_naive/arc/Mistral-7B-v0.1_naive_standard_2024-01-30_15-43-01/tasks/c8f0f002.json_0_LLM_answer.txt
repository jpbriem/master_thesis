Input token: 390
Output token: 793
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['b', 'i', 'i', 'h', 'h', 'i'], ['b', 'b', 'h', 'h', 'b', 'i'], ['h', 'b', 'b', 'h', 'h', 'i']]
output: [['b', 'i', 'i', 'f', 'f', 'i'], ['b', 'b', 'f', 'f', 'b', 'i'], ['f', 'b', 'b', 'f', 'f', 'i']]

Example_2:
input: [['h', 'h', 'h', 'b'], ['b', 'i', 'b', 'h'], ['h', 'b', 'b', 'h']]
output: [['f', 'f', 'f', 'b'], ['b', 'i', 'b', 'f'], ['f', 'b', 'b', 'f']]

Example_3:
input: [['b', 'i', 'b', 'h', 'b'], ['h', 'i', 'i', 'b', 'b'], ['h', 'b', 'i', 'i', 'h']]
output: [['b', 'i', 'b', 'f', 'b'], ['f', 'i', 'i', 'b', 'b'], ['f', 'b', 'i', 'i', 'f']]

Test case:
input: [['b', 'h', 'h', 'b', 'h'], ['i', 'b', 'h', 'h', 'h'], ['i', 'h', 'b', 'h', 'i']]
################################################################

LLM answer:

output: [['b', 'f', 'f', 'b', 'f'], ['f', 'b', 'f', 'f', 'f'], ['f', 'f', 'b', 'f', 'f']]
*/
public class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length() == 0) return new String[0][];
        int m = board.length;
        int n = board[0].length();
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j].equals("M")) continue;
                if (i == click[0] && j == click[1]) {
                    board[i][j] = "X";
                    queue.offer(new int[]{i, j});
                    visited[i][j] = true;
                } else {
                    int count = getCount(board, i, j);
                    if (count > 0) board[i][j] = Integer.toString(count);
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            int count = getCount(board, x, y);
            if (count <= 0) continue;
            if (x - 1 >= 0 &&!visited[x - 1][y]) {
                visited[x - 1][y] = true;
                queue.add(new int[]{x - 1, y});
            }
            if (x + 1 < m &&!visited[x + 1][y]) {
                visited[x + 1][y] = true;
                queue.add(new int[]{x + 1, y});
            }
            if (y - 1 >= 0 &&!visited[x][y - 1]) {
                visited[x][y - 1] = true;
                queue.add(new int[]{x, y - 1});
            }
            if (y + 1 < n &&!visited[x][y + 1]) {
                visited[x][y + 1] = true;
                queue.add(new int[]{x, y + 1});
            }
        }
        return board;
    }

    private int getCount(String[][] board, int x, int y) {
        int count = 0;
        for (int i = Math.max(x - 1, 0); i <= Math.min(x + 1, board.length - 1); ++i) {
            for (int j = Math.max(y - 1, 0); j <= Math.min(y + 1, board[0].length() - 1); ++j) {
                if (i!= x || j!= y) {
                    if (board[i][j].equals("M")) ++count;
                }
            }
        }
        return count;
    }
}
################################################################

Solution:
[['b', 'f', 'f', 'b', 'f'], ['i', 'b', 'f', 'f', 'f'], ['i', 'f', 'b', 'f', 'i']]

