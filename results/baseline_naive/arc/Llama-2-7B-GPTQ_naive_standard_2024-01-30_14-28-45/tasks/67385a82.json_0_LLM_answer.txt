Input token: 640
Output token: 433
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['d', 'd', 'a'], ['a', 'd', 'a'], ['d', 'a', 'd']]
output: [['i', 'i', 'a'], ['a', 'i', 'a'], ['d', 'a', 'd']]

Example_2:
input: [['a', 'd', 'a', 'a', 'a', 'd'], ['a', 'd', 'd', 'd', 'a', 'a'], ['a', 'a', 'a', 'a', 'd', 'a'], ['a', 'd', 'a', 'a', 'a', 'a']]
output: [['a', 'i', 'a', 'a', 'a', 'd'], ['a', 'i', 'i', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'd', 'a'], ['a', 'd', 'a', 'a', 'a', 'a']]

Example_3:
input: [['d', 'd', 'a', 'd'], ['d', 'd', 'a', 'a'], ['d', 'a', 'a', 'd'], ['a', 'a', 'd', 'd']]
output: [['i', 'i', 'a', 'd'], ['i', 'i', 'a', 'a'], ['i', 'a', 'a', 'i'], ['a', 'a', 'i', 'i']]

Example_4:
input: [['d', 'd', 'a', 'a', 'a', 'a'], ['a', 'd', 'a', 'a', 'd', 'a'], ['d', 'a', 'a', 'a', 'a', 'a'], ['a', 'd', 'd', 'a', 'a', 'a'], ['a', 'd', 'd', 'a', 'a', 'd']]
output: [['i', 'i', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'd', 'a'], ['d', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'i', 'a', 'a', 'a'], ['a', 'i', 'i', 'a', 'a', 'd']]

Test case:
input: [['d', 'a', 'd', 'a', 'd'], ['d', 'd', 'd', 'a', 'a'], ['a', 'a', 'a', 'a', 'd'], ['a', 'd', 'd', 'a', 'a'], ['a', 'd', 'd', 'a', 'a']]
################################################################

LLM answer:

output: [['i', 'i', 'a', 'a', 'd'], ['i', 'i', 'i', 'a', 'a'], ['i', 'i', 'i', 'a', 'd'], ['i', 'i', 'i', 'a', 'a']]
"""
import sys
from collections import deque, defaultdict
from typing import List, Tuple


def get_input(fname):
    with open(fname) as f:
        return list(map(''.join, map(lambda x: tuple(x), enumerate(f))))


def get_output(fname):
    with open(fname) + '.out' as f:
        return list(map(''.join, map(lambda x: tuple(x), enumerate(f))))


def solve(inputs: List[Tuple], output: str = None) -> int:
    if not isinstance(inputs, list):
        inputs = [tuple(sorted(list(set(x))) for x in x)) for _ in range(len(inputs))]
    if not isinstance(output, str):
        outputs = []
        for i in range(0, len(inputs)):
            outputs += sorted([tuple(sorted(list(set(y))) for y in x)) for x in inputs])
        output = '\n'.join(['\t'.join(str(x).split()) for x in outputs])
    return sum((len(x) - 1 for x in zip(*inputs)[1])) == (sum((len(x) - 1 for x in zip(*outputs)[1]]))


if __name__ == "__main__":
    if len(sys.argv) > 1:
        inputs = get_input(sys.argv[1])
        print(solve(inputs, *sys.argv[2:]))

################################################################

Solution:
[['i', 'a', 'i', 'a', 'd'], ['i', 'i', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'd'], ['a', 'i', 'i', 'a', 'a'], ['a', 'i', 'i', 'a', 'a']]

