Input token: 1936
Output token: 766
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0], [0, 2, 0, 2, 0, 2, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 1, 1, 1, 2, 0, 0], [0, 2, 1, 2, 1, 2, 0, 0], [0, 2, 1, 1, 1, 2, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 2, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 2, 0, 0, 0, 2, 0], [0, 0, 2, 0, 2, 0, 2, 0], [0, 0, 2, 0, 0, 0, 2, 0], [0, 0, 2, 2, 2, 2, 2, 0]]
output: [[0, 0, 0, 2, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 2, 1, 1, 1, 2, 0], [0, 0, 2, 1, 2, 1, 2, 0], [0, 0, 2, 1, 1, 1, 2, 0], [0, 0, 2, 2, 2, 2, 2, 0]]

Example_3:
input: [[0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2]]
output: [[0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 1, 2, 1, 2, 2, 2, 2, 0], [0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 0], [0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 2, 0], [0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 0], [0, 0, 0, 2, 1, 2, 1, 2, 2, 2, 2, 0], [0, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2]]

Test case:
input: [[0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 1, 1, 1, 2, 0, 0], [0, 0, 2, 1, 2, 1, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 1, 1, 1, 2, 1, 2, 0, 0], [2, 1, 2, 1, 2, 1, 2, 0, 0], [2, 1, 1, 1, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0]]
*/
class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m = mat.size();
        if (m == 0) return {};
        int n = mat[0].size();
        queue<pair<int, int>> q;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 0) {
                    q.push({i, j});
                } else {
                    mat[i][j] = INT_MAX;
                }
            }
        }
        while (!q.empty()) {
            auto cur = q.front();
            q.pop();
            int x = cur.first, y = cur.second;
            // up
            if (x > 0 && mat[x - 1][y] > mat[x][y] + 1) {
                mat[x - 1][y] = mat[x][y] + 1;
                q.push({x - 1, y});
            }
            // down
            if (x < m - 1 && mat[x + 1][y] > mat[x][y] + 1) {
                mat[x + 1][y] = mat[x][y] + 1;
                q.push({x + 1, y});
            }
            // left
            if (y > 0 && mat[x][y - 1] > mat[x][y] + 1) {
                mat[x][y - 1] = mat[x][y] + 1;
                q.push({x, y - 1});
            }
            // right
            if (y < n - 1 && mat[x][y + 1] > mat[x][y] + 1) {
                mat[x][y + 1] = mat[x][y] + 1;
                q.push({x, y + 1});
            }
        }
        return mat;
    }
};
################################################################

Solution:
[[0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 1, 1, 1, 2, 0, 0], [0, 0, 2, 1, 1, 1, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 1, 1, 1, 2, 0, 0, 0, 0], [2, 1, 2, 1, 2, 0, 0, 0, 0], [2, 1, 1, 1, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0]]

