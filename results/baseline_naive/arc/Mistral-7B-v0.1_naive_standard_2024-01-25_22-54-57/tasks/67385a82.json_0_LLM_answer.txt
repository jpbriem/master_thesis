Input token: 622
Output token: 338
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[3, 3, 0], [0, 3, 0], [3, 0, 3]]
output: [[8, 8, 0], [0, 8, 0], [3, 0, 3]]

Example_2:
input: [[0, 3, 0, 0, 0, 3], [0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 3, 0], [0, 3, 0, 0, 0, 0]]
output: [[0, 8, 0, 0, 0, 3], [0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 3, 0], [0, 3, 0, 0, 0, 0]]

Example_3:
input: [[3, 3, 0, 3], [3, 3, 0, 0], [3, 0, 0, 3], [0, 0, 3, 3]]
output: [[8, 8, 0, 3], [8, 8, 0, 0], [8, 0, 0, 8], [0, 0, 8, 8]]

Example_4:
input: [[3, 3, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0], [3, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0], [0, 3, 3, 0, 0, 3]]
output: [[8, 8, 0, 0, 0, 0], [0, 8, 0, 0, 3, 0], [3, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0], [0, 8, 8, 0, 0, 3]]

Test case:
input: [[3, 0, 3, 0, 3], [3, 3, 3, 0, 0], [0, 0, 0, 0, 3], [0, 3, 3, 0, 0], [0, 3, 3, 0, 0]]
################################################################

LLM answer:

output: [[8, 0, 8, 0, 3], [8, 8, 8, 0, 0], [0, 0, 0, 0, 3], [0, 8, 8, 0, 0], [0, 8, 8, 0, 0]]
'''

class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        if not matrix or len(matrix) == 0: return []
        m = len(matrix)
        n = len(matrix[0])
        visited = set()
        for i in range(m):
            for j in range(n):
                if matrix[i][j]!= 0:
                    visited.add((i, j))
        queue = list(visited)
        while queue:
            x, y = queue.pop(0)
            for dx, dy in ((x+1,y), (x-1,y), (x,y+1), (x,y-1)):
                if 0 <= dx < m and 0 <= dy < n and (dx,dy) not in visited:
                    matrix[dx][dy] += 1
                    visited.add((dx,dy))
                    queue.append((dx,dy))
        return matrix
################################################################

Solution:
[[8, 0, 8, 0, 3], [8, 8, 8, 0, 0], [0, 0, 0, 0, 3], [0, 8, 8, 0, 0], [0, 8, 8, 0, 0]]

