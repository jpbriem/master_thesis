Input token: 316
Output token: 289
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[9, 0, 0], [9, 9, 9], [9, 9, 9]]
output: [[0, 9, 9], [0, 9, 9], [9, 9, 9]]

Example_2:
input: [[6, 6, 6], [0, 0, 0], [6, 6, 0]]
output: [[6, 0, 0], [6, 0, 6], [6, 0, 6]]

Example_3:
input: [[0, 0, 9], [0, 0, 9], [9, 9, 9]]
output: [[9, 9, 9], [0, 0, 9], [0, 0, 9]]

Example_4:
input: [[2, 0, 2], [0, 0, 2], [0, 2, 2]]
output: [[2, 2, 2], [0, 0, 2], [2, 0, 0]]

Test case:
input: [[0, 0, 0], [5, 0, 0], [0, 5, 5]]
################################################################

LLM answer:

output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
*/
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        if (image[sr][sc] == newColor) return image;
        dfs(image, sr, sc, image[sr][sc], newColor);
        return image;
    }
private:
    void dfs(vector<vector<int>> &image, int r, int c, int color, int newColor){
        if (r < 0 || r >= image.size() || c < 0 || c >= image[0].size()) return;
        if (image[r][c]!= color) return;
        image[r][c] = newColor;
        dfs(image, r - 1, c, color, newColor);
        dfs(image, r + 1, c, color, newColor);
        dfs(image, r, c - 1, color, newColor);
        dfs(image, r, c + 1, color, newColor);
    }
};
################################################################

Solution:
[[0, 0, 5], [0, 0, 5], [0, 5, 0]]

