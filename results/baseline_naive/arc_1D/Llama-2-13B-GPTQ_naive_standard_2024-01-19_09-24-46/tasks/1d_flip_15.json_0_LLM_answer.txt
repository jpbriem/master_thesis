Input token: 271
Output token: 700
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['e', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['h', 'h', 'h', 'h', 'e', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'e', 'b', 'b', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'b', 'b', 'e', 'a', 'a', 'a']

Example_3:
input: ['h', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']
output: ['g', 'g', 'g', 'g', 'h', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'g', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'e', 'g', 'e', 'e', 'e', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not modify the input list. Instead, in place reorder it such that all 0's come to the front of the list.
        For example, given [0, 1, 0, 3, 12], the answer is [1, 0, 12, 0, 3].
        :param nums:
        :return:
        """
        if len(nums) == 0: return
        i = j = 0
        while i < len(nums):
            if nums[i]!= 0:
                nums[j] = nums[i]
                j += 1
            else:
                i += 1
        for _ in range(len(nums)-j):
            nums[j] = 0
        for _ in range(j, len(nums)):
            nums[j] = nums[j+1]
        for _ in range(j, len(nums)):
            nums[j] = 0

def test():
    s = Solution()
    assert s.moveZeroes([0, 1, 0, 3, 12]) == [1, 0, 12, 0, 3]
    assert s.moveZeroes(['a', 'a', 'a', 'a', 'e']) == ['a', 'a', 'a', 'a', 'e']
    assert s.moveZeroes(['h', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']) == ['g', 'g', 'g', 'g', 'h', 'a', 'a', 'a', 'a', 'a']
    assert s.moveZeroes(['e', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']) == ['h', 'h', 'h', 'h', 'e', 'a', 'a', 'a', 'a', 'a']
    assert s.moveZeroes(['a', 'a', 'a', 'a', 'e', 'b', 'b', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'b', 'b', 'e', 'a', 'a', 'a']
    assert s.moveZeroes(['h', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']) == ['g', 'g', 'g', 'g', 'h', 'a', 'a', 'a', 'a', 'a']

if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
['a', 'e', 'e', 'e', 'g', 'a', 'a', 'a', 'a', 'a']

