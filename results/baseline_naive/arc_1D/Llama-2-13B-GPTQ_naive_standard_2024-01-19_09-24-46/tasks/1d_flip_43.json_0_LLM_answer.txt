Input token: 313
Output token: 441
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'c', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'c', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'e', 'h', 'h', 'h', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'e', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'f', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'f', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'b', 'c', 'c', 'c', 'c', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'b', 'c', 'c', 'c', 'c', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s: return ''
        n = len(s)
        ans = []
        for i in range(n):
            c = s[i]
            j = 0
            while True:
                if j == n - 1: break
                if s[j]!= c: break
                j += 1
            ans.append(c)
            while j < n:
                ans.append(s[j])
                j += 1
        return ''.join(ans)

class TestSolution(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual('aaeeeceaaa', Solution().transform(['a','a','c','e','e','e','e','e','a','a','a','a']))
        
    def test_example_2(self):
        self.assertEqual('ahhhhaaa', Solution().transform(['a','a','a','a','a','a','e','h','h','h','a','a']))
        
    def test_example_3(self):
        self.assertEqual('afhhhhhfaa', Solution().transform(['a','a','a','f','h','h','h','h','h','a','a','a']))
        
    def test_example_4(self):
        self.assertEqual('abcccccaccaa', Solution().transform(['a','a','a','a','b','c','c','c','c','a','a','a']))

if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
['a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'b', 'a', 'a', 'a']

