Input token: 250
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'i', 'a']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'i', 'a']

Example_2:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'i']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'i']

Example_3:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'i', 'a']
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'i', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'a', 'i', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'i', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s or len(s) == 0: return ''
        n = len(s)
        i = 0
        while i < n - 1:
            if s[i]!= s[n - 1]: break
            i += 1
        j = n - 1
        while i < n - 1:
            if s[j]!= s[i]: break
            j -= 1
        if i > j: return ''
        res = []
        for k in range(i, j + 1):
            res.append(s[k])
        return ''.join(res)

class TestSolution(unittest.TestCase):
    def test_solution(self):
        self.assertEqual('abbaaaai', Solution().transform('abbaaaai'))
        self.assertEqual('hhhhii', Solution().transform('hhhhii'))
        self.assertEqual('cccaaaaaai', Solution().transform('cccaaaaaai'))
        self.assertEqual('ahhaiaa', Solution().transform('ahhaiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('aahhiiaa'))
        self.assertEqual('aahhiiaa', Solution().transform('a
################################################################

Solution:
['a', 'h', 'h', 'h', 'h', 'h', 'i', 'a', 'a']

