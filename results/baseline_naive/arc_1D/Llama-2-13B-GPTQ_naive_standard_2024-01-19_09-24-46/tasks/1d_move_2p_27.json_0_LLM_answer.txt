Input token: 250
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a']

Example_2:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a']

Example_3:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        """
        if not s: return
        words = s.split()
        for i in range(len(words)):
            self._reverseWord(words, i)
        print(''.join(words))
        
    def _reverseWord(self, words: List[str], index: int):
        word = words[index]
        if len(word) == 0 or index + 1 >= len(words): return
        startIndex = index + 1
        endIndex = len(words) - 1
        while True:
            if startIndex > endIndex: break
            if word[startIndex]!= words[endIndex][-1]: break
            startIndex += 1
            endIndex -= 1
        for j in range(startIndex, endIndex+1):
            words[j], words[index] = words[index], words[j]
            
if __name__ == "__main__":
    solution = Solution()
    testcase = [
        ('a',),
        ('h',),
        ('h',),
        ('h',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),
        ('a',),

################################################################

Solution:
['a', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'a']

