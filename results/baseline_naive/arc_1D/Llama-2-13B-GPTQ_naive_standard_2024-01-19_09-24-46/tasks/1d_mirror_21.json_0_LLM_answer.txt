Input token: 334
Output token: 442
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'b', 'b', 'b', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'a', 'a']

Example_2:
input: ['a', 'g', 'g', 'g', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'j', 'a', 'g', 'g', 'g', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'f', 'f', 'f', 'a', 'j', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'f', 'f', 'f', 'a']

Test case:
input: ['b', 'b', 'b', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s: return ''
        n = len(s)
        ans = []
        for i in range(n):
            if s[i] == 'a':
                ans += [s[i]] * 4
            elif s[i] == 'j':
                ans += [s[i]] * (n - i)
            else:
                ans += [s[i]] * (n - i + 1)
        return ''.join(ans)

class TestSolution(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual('aaaaaaajaaa', Solution().transform(['a','a','b','b','b','a','j','a','a','a','a','a','a']))
        
    def test_example_2(self):
        self.assertEqual('aaaaaggggaa', Solution().transform(['a','g','g','g','a','j','a','a','a','a','a','a','a']))
        
    def test_example_3(self):
        self.assertEqual('aaaaaffffaa', Solution().transform(['a','a','a','f','f','f','a','j','a','a','a','a','a']))
        
    def test_example_4(self):
        self.assertEqual('aaaaabbbjaa', Solution().transform(['b','b','b','a','j','a','a','a','a','a','a','a','a']))

if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
['a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

