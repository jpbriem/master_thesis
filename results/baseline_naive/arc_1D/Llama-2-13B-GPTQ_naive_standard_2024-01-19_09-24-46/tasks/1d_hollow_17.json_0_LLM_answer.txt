Input token: 397
Output token: 1023
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s: return ''
        n = len(s)
        ans = []
        for i in range(n):
            if s[i] == 'a':
                ans += [s[i]] * 4
            elif s[i] == 'b':
                ans += [s[i]] * 5
            else:
                ans += [s[i]] * (n - i)
        return ''.join(ans)

class TestSolution(unittest.TestCase):
    def test_solution(self):
        self.assertEqual('aaaaaaaad', Solution().transform('aabbb'))
        self.assertEqual('aaaaaaacccccc', Solution().transform('abcdefghijklmnopqrstuvwxyz'))
        self.assertEqual('aaaaaaaf', Solution().transform('aabbccdddeeeffgghhiiiii'))
        self.assertEqual('aaaaaaag', Solution().transform('aabbccdddeeeffffgghhiiiii'))
        self.assertEqual('aaaaaaahh', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaaiii', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaajjj', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaakkkk', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaallll', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaammmm', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaannnn', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaaoooo', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaapppp', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaqqqq', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaarrrr', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaassss', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaatttt', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaauuuu', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaavvvv', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaawwww', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaaxxxx', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaayyyy', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaazzzz', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaa0000', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaa1111', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaa2222', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaa3333', Solution().transform('aabbccdddeeeffffgghhiiiiii'))
        self.assertEqual('aaaaaaa444
################################################################

Solution:
['g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'a', 'a', 'a', 'a']

