Input token: 208
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['h', 'h', 'h', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'h', 'h', 'h', 'a']

Example_2:
input: ['d', 'd', 'd', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'd', 'd', 'a']

Example_3:
input: ['i', 'i', 'i', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'i', 'i', 'i', 'a']

Test case:
input: ['f', 'f', 'f', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'f', 'f', 'f', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        """
        if not s: return
        words = s.split()
        for i in range(len(words)):
            self.reverseWord(words, i)
        
    def reverseWord(self, words: List[str], index: int):
        """
        :type words: List[str]
        :type index: int
        """
        word = words[index]
        if len(word) == 0 or index + 1 >= len(words): return
        left = index - 1
        right = index + 1
        while True:
            if left < 0: break
            if right > len(words)-1: break
            if words[left][-1]!= " ": continue
            if words[right][0]!= " ": break
            
            temp = words[left]
            words[left] = words[right]
            words[right] = temp
            left -= 1
            right += 1

def test():
    assert Solution().reverseWords("") == ""
    assert Solution().reverseWords("abc") == "abc"
    assert Solution().reverseWords("abcd") == "dcba"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverseWords("abcd efghi jklmno pqrst uvwxyz") == \
           "zxywvuptrqsmlnhojgfiehcbdakl"
    assert Solution().reverse
################################################################

Solution:
['a', 'a', 'a', 'f', 'f', 'f', 'a']

