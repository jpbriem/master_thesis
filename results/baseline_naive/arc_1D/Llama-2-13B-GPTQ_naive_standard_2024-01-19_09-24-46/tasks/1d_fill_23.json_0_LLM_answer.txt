Input token: 313
Output token: 380
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a']
output: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'c', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'e', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'c', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s: return ''
        n = len(s)
        ans = []
        for i in range(n):
            if s[i] == 'a':
                ans += [s[i]] * 4
            elif s[i] == 'c':
                ans += [s[i]] * 3
        return ''.join(ans)

class TestSolution(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual('aaaiiiiaaaaaa', Solution().transform(['a','i','a','a','a','a','a','a','a','a','a']))
        
    def test_example_2(self):
        self.assertEqual('accccaaaaaa', Solution().transform(['a','c','a','a','c','a','a','a','a','a','a']))
        
    def test_example_3(self):
        self.assertEqual('aeeeeaaaaaa', Solution().transform(['a','a','a','e','a','e','a','a','a','a','a']))
        
    def test_case(self):
        self.assertEqual('accacaaaaaa', Solution().transform(['a','a','a','a','a','c','a','a','a','a','c','a']))
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a']

