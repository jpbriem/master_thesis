Input token: 628
Output token: 707
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'h', 'a', 'a', 'd', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'i', 'i', 'i', 'a', 'i', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'a', 'h', 'a', 'd', 'd', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'a', 'i', 'i', 'a', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'b', 'b', 'b', 'a', 'a', 'd', 'd', 'a', 'a', 'h', 'a', 'd', 'd', 'a', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'i', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'b', 'b', 'b', 'a', 'h', 'a', 'd', 'd', 'a', 'a', 'a', 'd', 'd', 'a', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        if not s or len(s) == 0: return []
        
        # split string into words
        words = [word for word in s.split(' ') if word]
        result = []
        for word in words:
            # get all possible permutations of letters
            permute = self._permute(word)
            
            # add to result only those that match the original word
            if word in permute:
                result.append(word)
                
        return result
    
    def _permute(self, word: str) -> List[str]:
        """
        Returns a list of all possible permutations of letters in `word`.
        """
        # base cases
        if len(word) <= 1: return [word]
        
        # recursive call
        result = []
        for i in range(len(word)):
            subWord = word[:i] + word[i+1:]
            result += self._permute(subWord)
        return result

if __name__ == "__main__":
    solution = Solution()
    assert solution.letterCasePermutation("") == [""]
    assert solution.letterCasePermutation("a") == ["a"]
    assert solution.letterCasePermutation("aa") == ["aa", "ba", "ab", "bb", "aa"]
    assert solution.letterCasePermutation("aaa") == ["aaa", "aba", "abb", "baa", "aba", "abb", "baa", "aba", "abb", "baa"]
    assert solution.letterCasePermutation("aaaa") == ["aaaa", "abab", "abba", "baba", "abab", "abba", "baba", "abab", "abba", "baba", "abab", "abba", "baba"]
    assert solution.letterCasePermutation("aaaaa") == ["aaaaa", "ababa", "abbba", "babba", "ababa", "abbba", "babba", "ababa", "abbba", "babba", "ababa", "abbba", "babba"]
    assert solution.letterCasePermutation("aaaaaa") == ["aaaaaa", "ababab", "abbbab", "babbba", "ababab", "abbbab", "babbba", "ababab", "abbbab", "babbba", "ababab", "abbbab", "babbba"]
################################################################

Solution:
['a', 'a', 'a', 'h', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'd', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'a']

