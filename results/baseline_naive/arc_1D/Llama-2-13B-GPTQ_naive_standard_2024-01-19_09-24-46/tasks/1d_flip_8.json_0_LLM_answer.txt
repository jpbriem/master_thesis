Input token: 250
Output token: 361
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'c', 'd', 'd', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'd', 'd', 'c', 'a', 'a']

Example_2:
input: ['d', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
output: ['e', 'e', 'e', 'd', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'd', 'f', 'f', 'f', 'a']
output: ['a', 'a', 'a', 'a', 'f', 'f', 'f', 'd', 'a']

Test case:
input: ['a', 'e', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'e', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def sortArrayByFrequency(self, nums: List[str]) -> None:
        """
        Time complexity: O(n)
        Space complexity: O(n)
        """
        # Write your code here
        if not nums: return
        freq = {}
        for i in range(len(nums)):
            freq[nums[i]] = 0 if nums[i] not in freq else freq[nums[i]] + 1
        for k, v in sorted(freq.items(), key=lambda x: -x[1], reverse=True):
            nums[:] = [k]*v

if __name__ == "__main__":
    solution = Solution()
    testcase = [
        ["a", "a", "a", "a", "c", "d", "d", "a", "a"],
        ["d", "e", "e", "e", "a", "a", "a", "a", "a"],
        ["a", "a", "a", "a", "d", "f", "f", "f", "a"]
    ]
    for tc in testcase:
        print("Input: ", tc)
        solution.sortArrayByFrequency(tc)
        print("Output: ", tc)

################################################################

Solution:
['a', 'f', 'f', 'f', 'e', 'a', 'a', 'a', 'a']

