Input token: 628
Output token: 450
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'h', 'h', 'a', 'a', 'a', 'h', 'a', 'h', 'h', 'h', 'a', 'h', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'g', 'a', 'g', 'g', 'g', 'a', 'g', 'a', 'a', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'a', 'h', 'h', 'h', 'a', 'h', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'i', 'i', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'g', 'a', 'g', 'a', 'a', 'g', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'h', 'h', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'h', 'h', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'i']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        if not s or len(s) == 0: return []
        
        # split string into words
        words = [word for word in s.split(' ') if word]
        result = []
        for word in words:
            # get all possible permutations of letters
            permuted_letters = self._permute_letters(word)
            
            # add each permutated word to result list
            for p in permuted_letters:
                result.append(p + " ")
                
        return result
    
    def _permute_letters(self, word: str) -> List[str]:
        """
        Returns a list of all possible permutations of letters in given word
        """
        # create regex that matches any character except space
        regex = r'[^ ]+'
        # match each character in word with regex
        for char in word:
            regex += r'(?=[\w\d])'
        # remove last character from regex (it is already matched by previous one)
        regex = regex[:-1]
        
        # find all substrings that match regex
        subs = re.findall(regex, word)
        
        # create empty list to store results
        result = []
        
        # iterate over all substrings found
        for sub in subs:
            # append substring to result list
            result.append(sub)
            
        return result
################################################################

Solution:
['a', 'g', 'g', 'g', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'a']

