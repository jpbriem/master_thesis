Input token: 397
Output token: 487
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[str]) -> int:
        if not nums or len(nums) == 0: return 0
        
        max_count = 0
        for i in range(len(nums)):
            count = 0
            while True:
                if nums[i]!= "a": break
                else: count += 1
                
            max_count = max(max_count, count)
            
        return max_count
    
class TestCase(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual(Solution().findMaxConsecutiveOnes(['a','b','b','b','b','b','b','b','b','a','a','a','a','a','a']), 4)
        
    def test_example_2(self):
        self.assertEqual(Solution().findMaxConsecutiveOnes(['a','c','c','c','c','c','c','c','c','a','a','a','a','a','a']), 5)
        
    def test_example_3(self):
        self.assertEqual(Solution().findMaxConsecutiveOnes(['a','b','b','b','b','a','a','a','a','a','a','a','a','a','a']), 3)
        
    def test_example_4(self):
        self.assertEqual(Solution().findMaxConsecutiveOnes(['e','e','e','e','e','e','e','e','e','e','a','a','a','a','a','a']), 6)
        
if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a']

