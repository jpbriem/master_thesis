Input token: 397
Output token: 369
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'e', 'e', 'a', 'a', 'e', 'e', 'e']
output: ['a', 'a', 'f', 'a', 'a', 'g', 'g', 'g', 'a', 'h', 'h', 'a', 'a', 'g', 'g', 'g']

Example_2:
input: ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'e', 'a', 'e', 'e', 'a', 'a', 'e', 'e', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'a', 'f', 'a', 'h', 'h', 'a', 'a', 'h', 'h', 'a']

Example_3:
input: ['a', 'a', 'e', 'a', 'e', 'e', 'e', 'a', 'e', 'e', 'a', 'a', 'e', 'e', 'a', 'a']
output: ['a', 'a', 'f', 'a', 'g', 'g', 'g', 'a', 'h', 'h', 'a', 'a', 'h', 'h', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'e', 'a', 'a', 'e']
################################################################

LLM answer:

output: ['a', 'a', 'b', 'a', 'c', 'd', 'a', 'e', 'a', 'f', 'g', 'h', 'i', 'j', 'k', 'l']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        if not s or len(s) == 0: return []
        result = [[]]
        for i in range(len(s)):
            result += self._letterCasePermutation(s[:i], s[i+1:])
        return result
    
    def _letterCasePermutation(self, prefix: str, suffix: str):
        if not prefix or len(prefix) == 0: return []
        if not suffix or len(suffix) == 0: return [prefix]
        
        # find all possible permutations of letters in prefix
        permute = set()
        for p in itertools.product(*map(set, map(ord, prefix))):
            permute.add(''.join([chr(x) for x in p]))
        
        # find all possible permutations of letters in suffix
        permute += set()
        for p in itertools.product(*map(set, map(ord, suffix))):
            permute.add(''.join([chr(x) for x in p]))
        
        # combine them together
        result = []
        for p in permute:
            result.append(p + suffix)
        return result
################################################################

Solution:
['a', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'h', 'h', 'a', 'f', 'a', 'a', 'f']

