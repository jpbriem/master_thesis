Input token: 208
Output token: 292
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['h', 'h', 'h', 'a', 'a', 'g', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'g', 'a']

Example_2:
input: ['d', 'd', 'd', 'a', 'a', 'g', 'a']
output: ['a', 'a', 'd', 'd', 'd', 'g', 'a']

Example_3:
input: ['i', 'i', 'i', 'a', 'a', 'g', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'g', 'a']

Test case:
input: ['f', 'f', 'f', 'a', 'a', 'g', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'f', 'f', 'f', 'g', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, S: str) -> List[str]:
        if not S or len(S) == 0: return []
        result = [[]]
        for i in range(len(S)):
            result += self._letterCasePermutationHelper(S, i)
        return result
    
    def _letterCasePermutationHelper(self, S: str, index: int):
        if index >= len(S): return [S]
        
        result = []
        for c in S[:index]:
            result += self._letterCasePermutationHelper(S, index + 1)
            
        for c in S[index+1:]:
            result += self._letterCasePermutationHelper(S, index + 1)
        return result

if __name__ == "__main__":
    solution = Solution()
    testcase = ["f", "f", "f", "a", "a", "g", "a"]
    print(solution.letterCasePermutation(testcase))
################################################################

Solution:
['a', 'a', 'f', 'f', 'f', 'g', 'a']

