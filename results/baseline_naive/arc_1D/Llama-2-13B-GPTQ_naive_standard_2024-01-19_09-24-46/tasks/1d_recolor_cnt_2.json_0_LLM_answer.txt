Input token: 334
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'j', 'a', 'a', 'j', 'j', 'j', 'a', 'a', 'j', 'j', 'a', 'a']
output: ['a', 'e', 'a', 'a', 'd', 'd', 'd', 'a', 'a', 'h', 'h', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'j', 'j', 'a', 'j', 'j', 'j', 'a', 'a', 'j', 'a']
output: ['a', 'a', 'a', 'h', 'h', 'a', 'd', 'd', 'd', 'a', 'a', 'e', 'a']

Example_3:
input: ['a', 'j', 'a', 'a', 'a', 'j', 'j', 'j', 'a', 'a', 'a', 'j', 'j']
output: ['a', 'e', 'a', 'a', 'a', 'd', 'd', 'd', 'a', 'a', 'a', 'h', 'h']

Test case:
input: ['a', 'a', 'j', 'a', 'j', 'j', 'j', 'a', 'j', 'j', 'a', 'j', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'h', 'a', 'd', 'd', 'd', 'a', 'h', 'h', 'a', 'e', 'a']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        if not s or len(s) == 0: return []
        result = [[]]
        for i in range(len(s)):
            result += self._letterCasePermutation(s[:i], s[i+1:])
        return result
    
    def _letterCasePermutation(self, s1: str, s2: str):
        if not s1 or len(s1) == 0: return []
        if not s2 or len(s2) == 0: return [s1]
        
        # find all possible permutations of letters in s1
        # and apply them to s2
        result = []
        for p in itertools.product(*map(set, zip(s1, s2))):
            r = ''
            for c1, c2 in zip(p, s2):
                r += c1 + c2
            result.append(r)
        return result

if __name__ == "__main__":
    solution = Solution()
    assert solution.letterCasePermutation('') == []
    assert solution.letterCasePermutation('a') == ['a']
    assert solution.letterCasePermutation('aa') == ['aa']
    assert solution.letterCasePermutation('ab') == ['ab', 'ba']
    assert solution.letterCasePermutation('abc') == ['abc', 'acb', 'bca', 'cab']
    assert solution.letterCasePermutation('abcd') == ['abcd', 'dcba', 'cbad', 'dbca', 'acbd', 'bcda', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', 'bacd', 'cadb', 'dabc', '
################################################################

Solution:
['a', 'a', 'e', 'a', 'd', 'd', 'd', 'a', 'h', 'h', 'a', 'e', 'a']

