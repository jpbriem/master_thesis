Input token: 271
Output token: 407
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'g', 'c', 'c', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'g', 'a']

Example_2:
input: ['a', 'f', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']
output: ['a', 'i', 'i', 'i', 'i', 'f', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'd', 'i', 'i', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'i', 'i', 'd', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'h', 'h', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'i', 'h', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def reverseString(self, s: str) -> None:
        """
        Do not modify the input string.
        :param s: Given string
        :return: nothing
        """
        if len(s) == 0: return
        n = len(s)
        i = j = 0
        while i < n:
            if s[i]!= 'a':
                s[j], s[i] = s[i], s[j]
                j += 1
            i += 1


class TestSolution(unittest.TestCase):
    def test_example_1(self):
        self.assertListEqual(list('aaaaaaaccc'), list('a'))

    def test_example_2(self):
        self.assertListEqual(list('aiiiiaaf'), list('i'))

    def test_example_3(self):
        self.assertListEqual(list('adiaiiaa'), list('i'))

    def test_solution(self):
        solution = Solution()
        self.assertListEqual(list('aaaaaaaccc'), solution.reverseString('a'))
        self.assertListEqual(list('aiiiiaaf'), solution.reverseString('f'))
        self.assertListEqual(list('adiaiiaa'), solution.reverseString('d'))
        self.assertListEqual(list('hhhiiaa'), solution.reverseString('h'))

if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'i', 'a']

