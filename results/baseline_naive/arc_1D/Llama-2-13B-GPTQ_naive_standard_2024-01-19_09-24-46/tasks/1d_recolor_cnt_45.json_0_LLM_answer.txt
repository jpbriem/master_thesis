Input token: 628
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'i', 'i', 'a', 'i', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'd', 'a', 'a', 'c', 'c', 'c', 'a', 'h', 'a', 'd', 'd', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'd', 'a', 'a', 'h', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'h', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'd', 'd', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'b', 'b', 'b', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'j', 'a', 'j', 'j', 'j', 'a', 'a', 'a', 'j', 'j', 'j', 'j', 'j', 'j']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        if not s or len(s) == 0: return []
        
        # split string into words
        words = [word for word in s.split()]
        # get all possible permutations of letters
        permute = self._permute(words)
        # convert to output format
        result = []
        for p in permute:
            result.append(''.join([char for char in p if char!= '_']))
        return result
    
    def _permute(self, words: List[str]) -> List[List[str]]:
        """
        Recursive function that generates all possible permutations of a list of strings
        :param words: list of strings
        :return: list of lists of strings
        """
        if not words: return []
        else:
            # base case
            if len(words) == 1: return [[words[0]]]
            
            # recursive step
            res = []
            for w in words:
                for p in self._permute(words[:len(words)-1]):
                    res.extend([w+p])
            return res

if __name__ == "__main__":
    solution = Solution()
    assert solution.letterCasePermutation("") == [""]
    assert solution.letterCasePermutation("a") == ["a"]
    assert solution.letterCasePermutation("aa") == ["aa", "_a", "_aa"]
    assert solution.letterCasePermutation("aaa") == ["aaa", "_aa", "_aaa", "_a", "_aa", "_a", "_aaa"]
    assert solution.letterCasePermutation("aaaa") == ["aaaa", "_aaa", "_aaaa", "_a", "_aaa", "_a", "_aaaa"]
    assert solution.letterCasePermutation("aaaaa") == ["aaaaa", "_aaaa", "_aaaaa", "_a", "_aaaa", "_a", "_aaaaa"]
    assert solution.letterCasePermutation("aaaaaa") == ["aaaaaa", "_aaaaa", "_aaaaaa", "_a", "_aaaaa", "_a", "_aaaaaa"]
    assert solution.letterCasePermutation("aaaaaaa") == ["aaaaaaa", "_aaaaaa", "_aaaaaaa", "_a", "_aaaaaa", "_a", "_aaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaa") == ["aaaaaaaa", "_aaaaaaa", "_aaaaaaaa", "_a", "_aaaaaaa", "_a", "_aaaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaaa") == ["aaaaaaaaa", "_aaaaaaaa", "_aaaaaaaaa", "_a", "_aaaaaaaa", "_a", "_aaaaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaaaa") == ["aaaaaaaaaa", "_aaaaaaaaa", "_aaaaaaaaaa", "_a", "_aaaaaaaaa", "_a", "_aaaaaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaaaaa") == ["aaaaaaaaaaa", "_aaaaaaaaaa", "_aaaaaaaaaaa", "_a", "_aaaaaaaaaa", "_a", "_aaaaaaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaaaaaa") == ["aaaaaaaaaaaa", "_aaaaaaaaaaa", "_aaaaaaaaaaaa", "_a", "_aaaaaaaaaaa", "_a", "_aaaaaaaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaaaaaaa") == ["aaaaaaaaaaaaa", "_aaaaaaaaaaaa", "_aaaaaaaaaaaaa", "_a", "_aaaaaaaaaaaa", "_a", "_aaaaaaaaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaaaaaaaa") == ["aaaaaaaaaaaaaa", "_aaaaaaaaaaaaa", "_aaaaaaaaaaaaaa", "_a", "_aaaaaaaaaaaaa", "_a", "_aaaaaaaaaaaaaa"]
    assert solution.letterCasePermutation("aaaaaaaaaaaaaaaa") == ["aaaaaaaaaaaaaaaa", "_aaaaaaaaaaaaaa",
################################################################

Solution:
['a', 'a', 'c', 'c', 'c', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'h', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'a', 'a']

