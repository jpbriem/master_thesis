Input token: 292
Output token: 373
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'f']
output: ['a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'f']

Example_2:
input: ['d', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'f', 'a', 'a']
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'f', 'a', 'a']

Example_3:
input: ['a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'f', 'a', 'a']
output: ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'f', 'a', 'a']

Test case:
input: ['a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'f', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'f']
"""

import unittest
from typing import List, Tuple

class Solution:
    def removeDuplicates(self, s: str) -> str:
        if not s: return ''
        n = len(s)
        i = 0
        while i < n - 1:
            j = self._find_next_duplicate(s, i)
            if j == -1: break
            s[i], s[j] = s[j], s[i]
            i += 1
        return s[:n - 1] + s[-1:]
    
    def _find_next_duplicate(self, s: str, i: int) -> int:
        for j in range(i+1, len(s)):
            if s[i]!= s[j]: return -1
        return i
        
if __name__ == "__main__":
    solution = Solution()
    testcase = [
        ('a','a','d','d','d','d','d','a','a','f','a'),
        ('a','a','d','d','d','d','a','a','f','a','a')
    ]
    for tc in testcase:
        print('Input: ', tc[0])
        actual = solution.removeDuplicates(tc[0])
        assert actual == tc[1], f'Expected {tc[1]} but got {actual}'

################################################################

Solution:
['a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'f', 'a']

