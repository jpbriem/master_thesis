Input token: 376
Output token: 457
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'a']

Example_2:
input: ['a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s: return ''
        n = len(s)
        ans = []
        for i in range(n):
            c = s[i]
            if c == 'a':
                ans += [c] * 4
            elif c == 'b':
                ans += [c] * 5
            else:
                ans += [c] * (n - i)
        return ''.join(ans)

class TestSolution(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual('aaaaaaaggggggaa', Solution().transform(['a','a','a','a','a','a','a','g','g','g','g','a','a','a','a']))
        
    def test_example_2(self):
        self.assertEqual('aaaaaaaccccaaa', Solution().transform(['a','c','c','c','a','a','a','a','a','a','a','a','a','a','a']))
        
    def test_example_3(self):
        self.assertEqual('aaaaaiiiiaaa', Solution().transform(['a','i','i','i','i','i','a','a','a','a','a','a','a','a','a']))
        
    def test_solution(self):
        self.assertEqual('aaaaaiiiiaaa', Solution().transform(['a','i','i','i','i','i','a','a','a','a','a','a','a','a','a']))

if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a']

