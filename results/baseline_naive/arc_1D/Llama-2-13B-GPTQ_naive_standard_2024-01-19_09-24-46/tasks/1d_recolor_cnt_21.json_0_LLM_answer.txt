Input token: 418
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'e', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'a', 'e', 'e', 'a', 'a', 'a']
output: ['a', 'h', 'h', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'd', 'a', 'h', 'h', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'e', 'e', 'a', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'a', 'a']
output: ['a', 'a', 'a', 'h', 'h', 'a', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'd', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'e', 'a', 'a', 'e', 'e', 'a', 'e', 'e', 'e', 'a', 'e', 'e', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'a', 'a', 'h', 'h', 'a', 'b', 'b', 'b', 'a', 'h', 'h', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'e', 'e', 'a', 'a', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'h', 'h', 'a', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'h', 'h', 'a', 'a']
"""

import re
from typing import List, Tuple

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        if not s or len(s) == 0: return []
        result = [[]]
        for i in range(len(s)):
            result += self._letterCasePermutation(s[:i], s[i+1:])
        return result
    
    def _letterCasePermutation(self, s1: str, s2: str):
        if not s1 or len(s1) == 0: return []
        if not s2 or len(s2) == 0: return [s1]
        
        # find all possible permutations of letters in s1
        # and apply them to s2
        result = []
        for p in itertools.product(*map(set, zip(s1, s2))):
            newS1 = "".join([c for c in s1 if c in p[0]])
            newS2 = "".join([c for c in s2 if c in p[1]])
            
            # check whether we have a valid pair
            if newS1!= "" and newS2!= "":
                result.append((newS1 + newS2).upper())
                
        return result

if __name__ == "__main__":
    solution = Solution()
    assert solution.letterCasePermutation("") == [""]
    assert solution.letterCasePermutation("a") == ["A", "a"]
    assert solution.letterCasePermutation("aa") == ["AA", "AA", "Aa", "Aa", "aa"]
    assert solution.letterCasePermutation("aaaa") == ["AAAA", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAAa", "AAA
################################################################

Solution:
['a', 'a', 'a', 'h', 'h', 'a', 'a', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

