Input token: 208
Output token: 434
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['h', 'h', 'h', 'a', 'a', 'a', 'j']
output: ['a', 'a', 'a', 'h', 'h', 'h', 'j']

Example_2:
input: ['d', 'd', 'd', 'a', 'a', 'j', 'a']
output: ['a', 'a', 'd', 'd', 'd', 'j', 'a']

Example_3:
input: ['i', 'i', 'i', 'a', 'a', 'a', 'j']
output: ['a', 'a', 'a', 'i', 'i', 'i', 'j']

Test case:
input: ['f', 'f', 'f', 'a', 'a', 'j', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'f', 'f', 'f', 'j', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s or len(s) == 0: return ''
        n = len(s)
        if n <= 1: return s
        
        # find first letter
        i = 0
        while i < n and s[i]!= 'a': i += 1
        if i >= n: return ''
        
        # find last letter
        j = n - 1
        while j > 0 and s[j]!= 'a': j -= 1
        if j < 0: return ''
        
        # swap letters
        for k in range(i + 1, j):
            temp = s[k]
            s[k] = s[i]
            s[i] = temp
            
        return s
    
class TestCase(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual('aaaj', Solution().transform(['h','h','h','a','a','a','j']))
        
    def test_example_2(self):
        self.assertEqual('adaad', Solution().transform(['d','d','d','a','a','j','a']))
        
    def test_example_3(self):
        self.assertEqual('aiiaij', Solution().transform(['i','i','i','a','a','a','j']))
        
    def test_example_4(self):
        self.assertEqual('afafja', Solution().transform(['f','f','f','a','a','j','a']))
        
if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
['a', 'a', 'f', 'f', 'f', 'j', 'a']

