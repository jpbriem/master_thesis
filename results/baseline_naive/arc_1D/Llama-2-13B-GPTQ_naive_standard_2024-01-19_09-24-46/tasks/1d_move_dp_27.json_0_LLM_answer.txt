Input token: 250
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'j']
output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'j']

Example_2:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'j', 'a', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'h', 'j', 'a', 'a']

Example_3:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'j', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'c', 'j', 'a', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'j']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'j']
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s or len(s) == 0: return ''
        n = len(s)
        if n <= 1: return s
        
        # find first a
        i = bisect.bisect_left(s, 'a')
        j = bisect.bisect_right(s, 'a')[0] - 1
        if i > j: return ''
        if i < j:
            return s[i+1:j].join('a') + s[:i]
        
        # find last b
        i = bisect.bisect_left(s, 'b')
        j = bisect.bisect_right(s, 'b')[0] - 1
        if i > j: return ''
        if i < j:
            return s[:i].join('b') + s[j+1:]
        
        # find middle b
        i = bisect.bisect_left(s, 'b')
        j = bisect.bisect_right(s, 'b')[0] - 1
        if i > j: return ''
        if i < j:
            return s[i+1:j].join('b') + s[:i]
        
        # find middle a
        i = bisect.bisect_left(s, 'a')
        j = bisect.bisect_right(s, 'a')[0] - 1
        if i > j: return ''
        if i < j:
            return s[i+1:j].join('a') + s[:i]
        
        # find both a and b in the middle
        i = bisect.bisect_left(s, 'a')
        j = bisect.bisect_right(s, 'b')[0] - 1
        if i > j: return ''
        if i < j:
            return s[i+1:j].join('a') + s[:i] + s[j+1:]
        
        # find both b and a in the middle
        i = bisect.bisect_left(s, 'b')
        j = bisect.bisect_right(s, 'a')[0] - 1
        if i > j: return ''
        if i < j:
            return s[i+1:j].join('b') + s[:i] + s[j+1:]
        
        # find all three in the middle
        i = bisect.bisect_left(s, 'a')
        j = bisect.bisect_right(s, 'b')[0] - 1
        k = bisect.bisect_right(s, 'a')[0] - 1
        if i > j: return ''
        if i < j:
            return s[i+1:j].join('a') + s[:i] + s[j+1:]
        if j > k: return ''
        if j < k:
            return s[i+1:k].join('a') + s[k+1:j].join('b') + s[:i] + s[j+1:]
        
        # find two of them in the middle
        i = bisect.bisect_left(s, 'a')
        j = bisect.bisect_right(s, 'b')[0] - 1
        k = bisect.bisect_right(s, 'a')[0] - 1
        if i > j: return ''
        if i < j:
            return s[i+1:j].join('a') + s[:i] + s[j+1:]
        if j > k: return ''
        if j < k:
            return s[i+1:k].join('a') + s[k+1:j].join('b') + s[:i] + s[j+1:]
        
        # find one of them in the middle
        i = bisect.bisect_left(s, 'a')
        j = bisect.bisect_right(s, 'b')[0] - 1
        if i > j: return ''
       
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'j']

