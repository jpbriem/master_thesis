Input token: 208
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'd', 'd', 'd', 'a', 'a', 'a']
output: ['a', 'a', 'd', 'd', 'd', 'a', 'a']

Example_2:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'a', 'a', 'a']

Example_3:
input: ['d', 'd', 'd', 'a', 'a', 'a', 'a']
output: ['a', 'd', 'd', 'd', 'a', 'a', 'a']

Test case:
input: ['e', 'e', 'e', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'e', 'e', 'e', 'a', 'a', 'a']
"""

import unittest
from typing import List, Tuple

class Solution:
    def sortArrayByFrequency(self, nums: List[str]) -> None:
        """
        Time complexity: O(n)
        Space complexity: O(n)
        """
        # Write your code here
        if not nums: return
        n = len(nums)
        freq = [0] * 26
        for c in nums:
            freq[ord(c)] += 1
        for i in range(len(freq)):
            if freq[i] > 0:
                j = i + freq[i] - 1
                while j < n:
                    nums[j], nums[i] = nums[i], nums[j]
                    j += 1

def test():
    s = Solution()
    assert s.sortArrayByFrequency(['e','e','e','a','a','a','a']) == ['a', 'e', 'e', 'e', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','b','c','d','e','e','e']) == ['a', 'b', 'c', 'd', 'e', 'e', 'e']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a']
    assert s.sortArrayByFrequency(['a','a','a','a','a','a','a']) == ['a', 'a', 'a', 'a', '
################################################################

Solution:
['a', 'e', 'e', 'e', 'a', 'a', 'a']

