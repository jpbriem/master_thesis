Input token: 502
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'g', 'g', 'g', 'g', 'g', 'a', 'i', 'i', 'i', 'i', 'a', 'i', 'a', 'i', 'i', 'a', 'i', 'a', 'i', 'a']
"""

import re
from typing import List, Tuple

class Solution:
    def transform(self, s: str) -> str:
        if not s or len(s) == 0: return ''
        # split string into words
        words = [word for word in s.split(' ') if word]
        # get all unique words
        uniques = set()
        for word in words:
            uniques.add(word)
        
        # create a dictionary of words to indices
        dict_words = {}
        for i, word in enumerate(uniques):
            dict_words[word] = i
            
        # find index of each word
        indices = []
        for word in words:
            indices.append(dict_words[word])
        
        # sort indices by frequency
        sorted_indices = sorted(indices, key=lambda x: -len(set([x])))
        
        # build output string
        out = ''
        for idx in sorted_indices:
            out += self._get_char(idx)
        return out
    
    def _get_char(self, idx: int) -> str:
        """
        Returns character corresponding to given index
        """
        if idx < 0: return ''
        elif idx == 0: return 'a'
        else: return chr((ord('A') + (idx % 26)) % 94)

if __name__ == "__main__":
    solution = Solution()
    assert solution.transform("") == ""
    assert solution.transform("a") == "a"
    assert solution.transform("aa") == "aa"
    assert solution.transform("ab") == "a"
    assert solution.transform("ba") == "b"
    assert solution.transform("bb") == "b"
    assert solution.transform("abc") == "c"
    assert solution.transform("abcd") == "d"
    assert solution.transform("aaaa") == "a"
    assert solution.transform("ababa") == "a"
    assert solution.transform("ababab") == "b"
    assert solution.transform("abababab") == "b"
    assert solution.transform("ababababab") == "b"
    assert solution.transform("abababababab") == "b"
    assert solution.transform("ababababababab") == "b"
    assert solution.transform("abababababababab") == "b"
    assert solution.transform("ababababababababab") == "b"
    assert solution.transform("abababababababababab") == "b"
    assert solution.transform("ababababababababababab") == "b"
    assert solution.transform("abababababababababababab") == "b"
    assert solution.transform("ababababababababababababab") == "b"
    assert solution.transform("abababababababababababababab") == "b"
    assert solution.transform("ababababababababababababababab") == "b"
    assert solution.transform("abababababababababababababababab") == "b"
    assert solution.transform("ababababababababababababababababab") == "b"
    assert solution.transform("abababababababababababababababababab") == "b"
    assert solution.transform("ababababababababababababababababababab") == "b"
    assert solution.transform("abababababababababababababababababababab") == "b"
    assert solution.transform("ababababababababababababababababababababab") == "b"
    assert solution.transform("ababababababababababababababababab
################################################################

Solution:
['a', 'g', 'g', 'g', 'g', 'g', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'a']

