Input token: 250
Output token: 240
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [1, 1, 1, 1, 1, 0, 0, 0, 0]
output: [0, 0, 0, 1, 1, 1, 1, 1, 0]

Example_2:
input: [7, 7, 7, 7, 0, 0, 0, 0, 0]
output: [0, 0, 0, 7, 7, 7, 7, 0, 0]

Example_3:
input: [2, 2, 2, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 2, 2, 2, 0, 0, 0]

Test case:
input: [0, 7, 7, 7, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 7, 7, 7, 7, 0, 0]
"""
import sys
from typing import List

class Solution(object):
    def reverseWords(self, s: str) -> str:
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str):
            return None
            
        words = []
        for i in range(len(s)):
            word = ''
            j = i+1
            while j< len(s):
                char = s[j]
                
                # if it's a space or punctuation mark
                if (char =='') | (char == ',') | (char == ';'):
                    break
                    
                else:
                    word += char
                    j+=1
                
            words.append(word)
            
        return " ".join([w for w in reversed(words)]).strip()
################################################################

Solution:
[0, 0, 0, 0, 7, 7, 7, 0, 0]

