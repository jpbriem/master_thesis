Input token: 313
Output token: 488
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [3, 3, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 9, 0, 3, 3, 3, 0, 0, 0]

Example_2:
input: [0, 5, 5, 5, 0, 9, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 9, 0, 5, 5, 5, 0, 0]

Example_3:
input: [4, 4, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 9, 0, 4, 4, 4, 0, 0, 0]

Test case:
input: [0, 0, 2, 2, 2, 0, 9, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 9, 0, 2, 2, 2, 0, 0, 0]
'''

import sys
from collections import deque

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str) or len(s) == 0: return ''
        
        words = []
        for i in range(len(s)):
            word = s[i:]
            
            while True:
                if i >= len(s)-1: break
                
                if s[i].isalpha():
                    if s[i+1].isalnum() and s[i+1].islower():
                        # 如果下一个字符是数字，则不做处理
                        continue
                    
                    elif s[i+1].isdigit():
                        # 如果下一个字符是数字，则不做处理
                        continue
                    
                    else:
                        # 如果下一个字符不在字母和数字之间，则抛出错误
                        raise ValueError('Invalid character')
                    
                    words.append(word[:])
                    del words[-1][:-1]
                    break
                
                else:
                    if s[i+1].isspace():
                        # 如果下一个字符是空格，则不做处理
                        continue
                    
                    else:
                        # 如果下一个字符不在字母和数字之间，则抛出错误
                        raise ValueError('Invalid character')
                    
                    words.append(word[:])
                    del words[-1][:-1]
                    break
                
        return ''.join([w+''for w in words]).strip().split()

################################################################

Solution:
[0, 0, 0, 0, 0, 0, 9, 0, 2, 2, 2, 0]

