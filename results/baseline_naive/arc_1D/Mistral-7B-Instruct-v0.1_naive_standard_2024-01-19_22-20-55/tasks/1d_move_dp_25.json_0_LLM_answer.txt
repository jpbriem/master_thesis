Input token: 544
Output token: 889
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'h', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'h', 'a']

Example_2:
input: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'h', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7']

The output of each example is a string that contains only lowercase letters, where each letter appears exactly once. In Example_1, the first 9 characters are all 'c's, followed by an 'a' and then an 'h'. In Example_2, the first 8 characters are all 'i's, followed by two 'a's and then an 'h'. In Example_3, the first 9 characters are all 'g's, followed by an 'a' and then an 'h'. In Test case, the first 9 characters are all 'g's, followed by an 'a' and then an 'h'.

Your task is to write a Python function that takes in a list of strings as input and returns a list of strings as output, where each output string contains only lowercase letters and has the same length as the corresponding input string. If there is no way to transform the input string into a valid output string (e.g., if it contains non-alphabetic characters), then the output should be an empty string.

Note: You may assume that the input list will contain at most 10^5 elements.

Constraints:

* Time complexity: O(n)
* Space complexity: O(n)

Examples:
```python
Input: ["c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "a", "a", "h", "a"]
Output: ["a", "a", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "h", "a"]

Input: ["a", "a", "i", "i", "i", "i", "i", "i", "i", "i", "i", "a", "a", "h", "a", "a", "a", "a", "a", "a", "a"]
Output: ["a", "a", "a", "a", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "h", "a", "a", "a", "a", "a", "a"]

Input: ["a", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "a", "a", "h", "a"]
Output: ["a", "a", "a", "a", "a", "a", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7"]

Input: ["a", "a", "a", "a", "a", "a", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "a", "a", "h", "a"]
Output: ["a", "a", "a", "a", "a", "a", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7"]
```
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', 'a']

