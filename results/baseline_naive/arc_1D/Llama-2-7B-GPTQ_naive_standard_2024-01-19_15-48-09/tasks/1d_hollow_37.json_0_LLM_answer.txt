Input token: 250
Output token: 289
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['f', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['a', 'f', 'a', 'a', 'f', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a']
"""
import sys
from typing import List, Optional

def solution(s: str) -> int:
    """
    :type s: str
    :rtype: int
    """
    if len(s) == 0 or not s[0].isalpha():
        return -1
    
    # 暴力解法，时间复杂度 O(n^2)
    # 假设输入为字符串 s = [x]
    # 递归函数：solution(s + x)
    def solution_recursive(s: str):
        if len(s) > 0 and s[0].isupper() and s[-1].islower():
            return 0
        
        for i in range(len(s)):
            if s[i].isdigit():
                continue
            
            if s[i].isupper():
                return 0
                
            elif s[i].islower():
                return 1
                
        return 0
    
    return solution_recursive(s)

################################################################

Solution:
['a', 'a', 'a', 'h', 'a', 'a', 'a', 'h', 'a']

