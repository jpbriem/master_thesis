Input token: 271
Output token: 232
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['e', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['h', 'h', 'h', 'h', 'e', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'e', 'b', 'b', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'b', 'b', 'e', 'a', 'a', 'a']

Example_3:
input: ['h', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']
output: ['g', 'g', 'g', 'g', 'h', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'g', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'g', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
"""
import sys
from collections import deque, defaultdict

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str) or len(s) == 0: return ''
        words = [w for w in s.split()]
        reversed_words = []
        for word in words[::-1]:
            reversed_word = ""
            
            for char in word:
                if char.isalpha():
                    reversed_word += char
                else:
                    reversed_word += " " + char
                    
            reversed_words.append(reversed_word)
        
        return " ".join([w for w in reversed_words])

################################################################

Solution:
['a', 'e', 'e', 'e', 'g', 'a', 'a', 'a', 'a', 'a']

