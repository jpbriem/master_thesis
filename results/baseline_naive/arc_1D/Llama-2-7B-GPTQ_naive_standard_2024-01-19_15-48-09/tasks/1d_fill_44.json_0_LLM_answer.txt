Input token: 271
Output token: 367
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'c', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['e', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'h', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'd', 'a', 'a', 'd', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'd', 'a', 'a', 'd', 'a', 'a']
"""
import sys
from collections import deque, defaultdict

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str) or len(s) == 0: return ''
        
        # 暴力解法，时间复杂度为O(n^2),空间复权为O(n)
        # 先将字符串分割成多个单词，然后遍历每一个单词，判断是否需要反转。
        # 如果需要反转，则反转该单词，并且将其添加到最终的结果中。
        words = [x for x in s]
        res = []
        for word in words:
            if word[0].isupper():
                res += [word[::-1]]
            
        return "".join(res)
    
if __name__ == '__main__':
    test_case = ["a", "a", "a", "a", "d", "a", "a", "d", "a", "a"]
    print("Input: ",test_case)
    print("Output: ",Solution().reverseWords(test_case))
################################################################

Solution:
['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a']

