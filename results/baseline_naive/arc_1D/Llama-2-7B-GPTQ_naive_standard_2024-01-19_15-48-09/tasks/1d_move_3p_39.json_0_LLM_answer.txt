Input token: 313
Output token: 1024
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a']

Example_2:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""
import sys
from collections import deque, defaultdict

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str) or len(s) == 0: return ''
        
        # 暴力解法，时间复杂度为O(n^2),空间复权为O(n)
        # 先将字符串分割成多个单词，然后遍历每一个单词，判断是否需要反转。
        # 如果需要反转，则反转该单词，并且记录下这个单词的前面和后面两个单词。
        # 最终返回所有单词的反转结果。
        words = [x for x in s]
        reversed_words = []
        for word in words:
            if word[::-1]!= word:
                reversed_word = word[::-1]
                reversed_word_prev = None
                reversed_word_next = None
                
                while True:
                    if reversed_word[-1] =='':
                        break
                    
                    if reversed_word[:len(reversed_word)-1] == reversed_word_prev + " ":
                        reversed_word_prev += " "
                        continue
                    
                    if reversed_word[:len(reversed_word)] == reversed_word_next + " ":
                        reversed_word_next += " "
                        continue
                    
                    reversed_word_prev = reversed_word_prev + " "
                    reversed_word_next = reversed_word_next + " "
                    reversed_word = reversed_word[::-1]
            
                reversed_words.append(" ".join([reversed_word_prev, reversed_word]))
                reversed_words.append(" ".join([reversed_word_next, reversed_word]))
                
        return "".join(reversed_words).split()
        
        # 使用双指针实现，时间复权为O(n)，空间复权为O(1)
        # 首先将字符串分割成多个单词，然后遍历每一个单词，判断是否需要反转。
        # 如果需要反转，则反转该单词，并且记录下这个单词的前面和后面两个单词。
        # 最终返回所有单词的反转结果。
        words = [x for x in s]
        reversed_words = []
        for i, word in enumerate(words):
            if word[::-1]!= word:
                reversed_word = word[::-1]
                reversed_word_prev = None
                reversed_word_next = None
                
                while True:
                    if reversed_word[-1] =='':
                        break
                    
                    if reversed_word[:len(reversed_word)-1] == reversed_word_prev + " ":
                        reversed_word_prev += " "
                        continue
                    
                    if reversed_word[:len(reversed_word)] == reversed_word_next + " ":
                        reversed_word_next += " "
                        continue
                    
                    reversed_word_prev = reversed_word_prev + " "
                    reversed_word_next = reversed_word_next + " "
                    reversed_word = reversed_word[::-1]
            
                reversed_words.insert(i+1, " ".join([reversed_word_prev, reversed_word
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a']

