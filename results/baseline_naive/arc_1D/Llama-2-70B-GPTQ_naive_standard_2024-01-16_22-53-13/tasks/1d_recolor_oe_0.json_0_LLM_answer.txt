Input token: 430
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', 'b', 'b', '.', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', '.', 'h', 'h', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'b', 'b', '.', 'b', '.', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', '.']
output: ['.', '.', 'h', 'h', '.', 'a', '.', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.']

Example_3:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', 'b', '.']
output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', 'a', '.']

Test case:
input: ['.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', '.', 'b', 'b', '.', '.', 'b', '.', '.']
################################################################

LLM answer:

output: ['.', 'h', 'h', 'h', 'h', 'h', '.', '.', 'a', 'a', 'a', 'a', '.', 'h', 'h', '.', '.', 'a', '.', '.']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, isEnd=False):
        self.val = val
        self.isEnd = isEnd
        self.next = []


class Solution(object):
    def orangesSquaring(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        
        # 0. check inputs & initialize
        if not grid or len(grid) == 0 or len(grid[0]) == 0: return 0
        m = len(grid)
        n = len(grid[0])
        directions = [(i, j) for i in range(-1, 2) for j in range(-1, 2)]
        directions.remove((0, -1))
        directions.remove((0, 1))
        directions.append((0, 0))
        directions = list(set(directions))
        directions.sort()
        directions.reverse()
        directions = tuple(directions)
        directions = {d: (i, j) for d, (i, j) in enumerate(directions)}
        directions[-1] = (-1, 0)
        directions[0] = (1, 0)
        directions[1] = (0, -1)
        directions[2] = (0, 1)
        directions[3] = (-1, -1)
        directions[4] = (-1, 1)
        directions[5] = (1, -1)
        directions[6] = (1, 1)
        directions[7] = (0, 0)
        directions = dict(zip(range(8), directions))
        directions = {k: v for k, v in sorted(directions.items(), key=lambda x: x[0], reverse=True)}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items()}
        directions = {v: k for k, v in directions.items
################################################################

Solution:
['.', 'a', 'a', 'a', 'a', 'a', '.', '.', 'h', 'h', 'h', 'h', '.', 'h', 'h', '.', '.', 'a', '.', '.']

