Input token: 291
Output token: 239
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', '.', '.', 'd', '.']
output: ['.', '.', 'f', 'f', 'f', '.', '.', 'b', 'b', '.', '.', 'h', '.']

Example_2:
input: ['.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', '.', 'd', '.', '.']
output: ['.', 'f', 'f', 'f', '.', '.', '.', 'b', 'b', '.', 'h', '.', '.']

Example_3:
input: ['.', '.', 'd', '.', '.', '.', 'd', 'd', '.', '.', 'd', 'd', 'd']
output: ['.', '.', 'h', '.', '.', '.', 'b', 'b', '.', '.', 'f', 'f', 'f']

Test case:
input: ['.', '.', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'f', 'f', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.'].
"""
# @author unknwon
class Solution(object):
    def transform(self, grid):
        """
        :type grid: List[str]
        :rtype: str
        """
        
        # 0 -.; 1 - d; 2 - f; 3 - b; 4 - h
        for i in xrange(len(grid)):
            if grid[i][0] == '.': continue
            
            if grid[i][0] == 'd' or grid[i][0] == 'b':
                grid[i] = ['f','f','f']
                
            elif grid[i][0] == 'f' or grid[i][0] == 'h':
                grid[i] = ['b','b','b']
                
        return ''.join(map(lambda x:x[0], grid))
################################################################

Solution:
['.', '.', 'b', 'b', '.', '.', '.', 'f', 'f', 'f', '.', '.', '.']

