Input token: 441
Output token: 317
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'h', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.']

Example_2:
input: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.']
output: ['.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'h', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'h', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', 'h', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'h', '.', '.', '.', '.']
"""

import collections
from typing import List, Tuple


class Solution:
    def transform(self, grid: List[List[str]]) -> None:
        """
        Do not return anything, modify grid in-place instead.

        :param grid: a list of lists of strings
        :return: void
        """
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == "." or grid[i][j] == "h":
                    continue
                else:
                    grid[i][j] = "."
        for i in range(len(grid) - 1):
            for j in range(len(grid[0]) - 1):
                if grid[i][j]!= ".":
                    continue
                elif grid[i + 1][j] == "h":
                    grid[i][j] = grid[i + 1][j]
                elif grid[i][j + 1] == "h":
                    grid[i][j] = grid[i][j + 1]

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'h', '.', '.', '.', '.']

