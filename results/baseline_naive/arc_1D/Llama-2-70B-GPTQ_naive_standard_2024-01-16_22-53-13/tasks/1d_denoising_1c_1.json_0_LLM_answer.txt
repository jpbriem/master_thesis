Input token: 613
Output token: 877
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'b', '.', '.', '.', '.', 'b', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', 'g', '.', '.', '.', '.', 'g', '.', '.', '.', 'g', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'b', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'b', '.', '.', 'b', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""

__author__ = "lunarl"
__date__ = "2019/4/8 15:37"

import sys
from typing import List, Optional


class Solution:
    def floodFill(self, image: List[List[str]], sr: int, sc: int) -> None:
        """
        找到最近的邻居，并将其填充为相同的值。
        :param image: 图像数组
        :param sr: 起始行索引
        :param sc: 起始列索引
        :return: 无返回值
        """
        if not image or len(image) == 0 or sr < 0 or sc < 0:
            return

        # 记录已经访问过的点
        visited = set()
        queue = []
        queue.append((sr, sc))
        while queue:
            row, col = queue.pop(0)
            if (row, col) in visited:
                continue
            visited.add((row, col))
            image[row][col] = '#'
            for dr, dc in [(0, -1), (-1, 0), (0, 1), (1, 0)]:
                newRow, newCol = row + dr, col + dc
                if 0 <= newRow < len(image):
                    if 0 <= newCol < len(image[newRow]) \
                            and image[newRow][newCol]!= '#':
                        queue.append((newRow, newCol))


if __name__ == '__main__':
    s = Solution()
    print("Example_1")
    image = [[".", ".", ".", "b", ".", ".", ".", ".", "b", ".", ".", ".", "b", "b", "b", "b", "b", "b", "b", "b", "b"],
             ["b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b"]]
    s.floodFill(image, 0, 0)
    print(image)
    print("\n\nExample_2")
    image = [[".", ".", ".", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", "g", ".", ".", ".", ".", "g", ".", ".", ".", ".", "g", ".", ".", ".", "g", ".", "."]]
    s.floodFill(image, 0, 0)
    print(image)
    print("\n\nExample_3")
    image = [[".", ".", ".", ".", "b", ".", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", ".", ".", ".", "b", ".", ".", "b", ".", ".", ".", ".", "."]]
    s.floodFill(image, 0, 0)
    print(image)

################################################################

Solution:
['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

