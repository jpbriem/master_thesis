Input token: 323
Output token: 598
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.']
output: ['.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']

Example_3:
input: ['.', '.', '.', '.', '.', 'e', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']
"""

from typing import List, Optional

class Solution:
    def floodFill(self, image: List[List[str]], sr: int, sc: int) -> None:
        """
        Do not return anything, modify grid in-place instead.
        
        Parameters
        ----------
        image : list of str
            A 2D array representing a grid where each element is either '.' or '#'
            
        sr : int
            Starting row index (inclusive).
            
        sc : int
            Starting column index (inclusive).
                    
        Returns
        -------
        None. Modify grid in-place instead.
        """
        if image[sr][sc] == '.':
            return
        self._floodfill(image, sr, sc)

    def _floodfill(self, image: List[List[str]], r: int, c: int):
        if image[r][c]!= '#':
            return
        image[r][c] = '.'
        for dr, dc in [(0, 1), (0, -1), (-1, 0), (1, 0)]:
            self._floodfill(image, r + dr, c + dc)

# n : the dimension of the input image, i.e., len(image)
# m : the dimension of the input image, i.e., len(image[i])

## Time Complexity: O(n * m)
# The overhead in time is the cost of DFS, which is of O(n * m).

## Space Complexity: O(n * m)
# The overhead in space is the storage for image, which is of O(n * m).

import unittest

class Testing(unittest.TestCase):

    def test_case_1(self):
        solution = Solution()
        self.assertEqual(solution.floodFill([['.','.','.','g'],['.','.','.','.'],['.','.','.','.'],['.','.','.','g']], 0, 3), ['.','.','.','g','g','g','g','g','g','g','g','g','.','.','.','.'])

if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']

