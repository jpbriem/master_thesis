Input token: 381
Output token: 490
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', '.', '.', '.', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', 'i', '.', '.', 'i', 'i', '.']
output: ['.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'f', 'f', 'f', 'f', '.', '.', 'f', 'f', '.']

Example_3:
input: ['.', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'f', 'f', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, isEnd=False):
        self.val = val
        self.isEnd = isEnd
        self.next = []


class Solution(object):
    def orangesSquaring(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: void Do not return anything, modify grid in-place instead.
        """
        if len(grid) == 0 or len(grid[0]) == 0:
            return
        
        rows = len(grid)
        cols = len(grid[0])
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        queue = collections.deque()
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == "i":
                    queue.append((i, j))
                    
        while queue:
            size = len(queue)
            for _ in range(size):
                curPos = queue.popleft()
                row, col = curPos
                for direction in directions:
                    newRow, newCol = row + direction[0], col + direction[1]
                    if 0 <= newRow < rows and 0 <= newCol < cols \
                       and grid[newRow][newCol]!= ".":
                        continue
                    else:
                        grid[row][col] = "."
                        grid[newRow][newCol] = "."
                        queue.append((newRow, newCol))
                        
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == ".":
                    grid[i][j] = "o"

################################################################

Solution:
['.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.']

