Input token: 314
Output token: 440
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', 'b', 'd', 'd', 'd', 'd', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'b', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'f', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'f', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'e', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', 'g', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', 'h', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.', '.']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution(object):
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        
        if not head or (m == 0) or (n == len(head)): return head
        
        dummyHead = Node('dummy')
        dummyHead.left = head
        cur = dummyHead
        while True:
            if cur.left is None: break
            
            if cur.left.val!= '.':
                cur.left = cur.left.right
                
            else:
                cur.left = cur.left.left
                if cur.left is None: break
    
        # print(cur.left)
        # print(cur.right)
        
        newHead = cur.left
        cur.left = None
        
        cur = newHead
        i = 0
        while True:
            if cur.left is None: break
            
            if cur.left.val!= '.':
                cur.left = cur.left.right
                
            else:
                cur.left = cur.left.left
                if cur.left is None: break
            
            i += 1
            if i >= m - 1:
                cur.left = cur.left.right
                cur.right = cur.right.reverse()
                break
            
        return newHead
################################################################

Solution:
['.', '.', '.', '.', 'h', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.', '.']

