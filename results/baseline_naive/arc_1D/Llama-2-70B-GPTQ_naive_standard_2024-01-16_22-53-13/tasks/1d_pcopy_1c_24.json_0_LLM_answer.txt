Input token: 577
Output token: 477
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'd', 'd', 'd', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'a', 'a', 'a', '.', '.', '.', '.', 'a', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', '.', 'h', '.', '.', '.', 'h', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', '.', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
"""

import collections
from typing import List, Tuple


class Solution:
    def transform(self, grid: List[str]) -> List[str]:
        """
        思路：找到每个字符的最大值，然后将其它元素变成该最大值。
            - 先遍历所有元素，统计出每种元素的数量，存入一个 dict。
                - 如果是. 则直接跳过
            - 再次遍历所有元素，判断是否为.，不为. 就取出对应的最大值进行修改
                    - 注意这里需要处理两种情况：
                    1）当前元素的最大值比原来的最大值还小时，那么就更新最大值；
                    2）当前元素的最大值等于原来的最大值时，也需要更新最大值（因为可能之前没有发现到这种情况）
        """
        max_dict = {}
        for i in range(len(grid)):
            if grid[i]!= '.':
                max_dict[grid[i]] = max(max_dict.get(grid[i], 0), len([j for j in range(i + 1) if grid[j] == grid[i]]))
        for i in range(len(grid)):
            if grid[i]!= '.':
                grid[i] = str(max_dict[grid[i]])
        return grid

################################################################

Solution:
['.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

