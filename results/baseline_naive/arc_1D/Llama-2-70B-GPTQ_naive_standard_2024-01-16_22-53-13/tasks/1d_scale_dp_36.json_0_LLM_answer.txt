Input token: 344
Output token: 444
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'g', '.']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'g']
output: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g']

Example_3:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'g', '.', '.']
output: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'g', '.', '.']

Test case:
input: ['b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', 'b', 'b', 'b', 'b']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, isEnd=False):
        self.val = val
        self.isEnd = isEnd
        self.next = []


class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) == 0: return 0
        
        # build linked list
        head = None
        for i in range(len(nums)):
            node = Node(nums[i])
            
            if head is None:
                head = node
                
            else:
                tail = head
                while True:
                    if tail.next!= []:
                        tail = tail.next[-1]
                    
                    elif tail.next == []:
                        tail.next.append(node)
                        break
                    
                    else:
                        raise Exception("Error")
        
        # find max length of consecutive nodes
        maxLength = 0
        currentLength = 0
        for i in range(len(head.next)-1,-1,-1):
            if head.next[i].isEnd:
                continue
            
            else:
                currentLength += 1
                if currentLength > maxLength:
                    maxLength = currentLength
                
                if head.next[i+1].val - head.next[i].val == 1:
                    currentLength -= 1
                
                else:
                    currentLength = 0
                
        return maxLength
################################################################

Solution:
['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.', '.', '.', '.']

