Input token: 513
Output token: 405
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', 'i', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'i', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'i', '.', '.', '.']

Example_3:
input: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', 'i', '.']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'i', '.']

Test case:
input: ['.', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i']
"""

import collections
from typing import List, Tuple


class Solution:
    def reverse(self, s):
        return s[::-1]

    def rotate(self, s):
        return self.reverse(s) + self.reverse(s[:len(s) // 2])

    def shift(self, s, n=0):
        if not n:
            return s
        else:
            return self.rotate(s)[n:] + self.rotate(s)[:n]

    def transform(self, s):
        # find first non-dot char
        i = s.find('.')
        while i!= -1:
            j = s.index('i', i+1)
            k = s.rindex('.', 0, j)
            l = s.index('.', j+1)
            m = s.index('.', l+1)
            t = s[k:l]
            u = s[j:m]
            v = s[l:m]
            w = s[m:].replace('.', '')
            x = self.shift(t, len(u))
            y = self.shift(v, len(w))
            z = self.shift(x, len(y))
            s = s[:k] + z + s[m:]
            i = s.find('.')
        return s

    def solution(self, s):
        return self.transform(s).strip()

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']

