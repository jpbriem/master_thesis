Input token: 198
Output token: 524
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', '.', 'g', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'f', '.', 'f', '.']
output: ['.', '.', '.', '.', 'f', 'f', 'f', '.']

Example_3:
input: ['.', '.', '.', 'g', '.', '.', 'g', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', '.']

Test case:
input: ['.', 'a', '.', '.', 'a', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', '.']
"""

# @lc code=start
class Solution(object):
    def transformToHighest(self, grid):
        """
        :type grid: List[str]
        :rtype: List[str]
        """
        
        # 0. check corner cases & preprocess
        if not grid or len(grid) == 0: return []
        for i in range(len(grid)):
            if grid[i][0]!= '.':
                return self._transformToHighest(grid, i, 0)
            
        # 1. main logic
        return self._transformToHighest(grid, 0, 0)
    
    def _transformToHighest(self, grid, row, col):
        # 1. init vars
        max_row = len(grid) - 1
        max_col = len(grid[0]) - 1
        direction = {
                      (0, 1), (-1, 0), (0, -1), (1, 0)
                   }
        directions = list()
        for d in direction:
            directions += [(d[0], d[1]), (d[1], d[0])]
        
        # 2. process
        while True:
            # 2.1 get current char
            cur_char = grid[row][col]
            if cur_char == '.': break
            
            # 2.2 update all neighbors to highest char
            for dr, dc in directions:
                new_row = row + dr
                new_col = col + dc
                if new_row >= 0 and new_row <= max_row \
                    and new_col >= 0 and new_col <= max_col:
                    grid[new_row][new_col] = cur_char
            
            # 2.3 move to next cell
            if col > 0:
                col -= 1
            else:
                col = max_col
                row -= 1
                continue
        
        # 3. done
        return grid
        
# @lc code=end
################################################################

Solution:
['.', 'a', 'a', 'a', 'a', '.', '.', '.']

