Input token: 458
Output token: 620
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', '.', 'g', '.', '.', '.', '.', '.', 'g', '.', 'g', '.', '.', '.', '.', '.', 'g', '.', 'g', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'f', '.', 'f', '.', '.', '.', '.', '.', 'f', '.', 'f', '.', '.', '.', '.', '.', 'f', '.', 'f', '.']
output: ['.', '.', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', 'f', 'f', 'f', '.']

Example_3:
input: ['.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', 'g', '.', '.', 'g', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', 'g', 'g', 'g', 'g', '.']

Test case:
input: ['.', 'a', '.', '.', 'a', '.', '.', '.', '.', 'a', '.', '.', 'a', '.', '.', '.', '.', 'a', '.', '.', 'a', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""

from typing import List, Optional

class Solution:
    def floodFill(self, image: List[List[str]], sr: int, sc: int) -> None:
        """
        Do not return anything, modify grid in-place instead.
        
        Parameters
        ----------
        image : list of str
            A 2D array representing a grid where each element is either "." or a character denoting a color.
        sr : int
            Starting row index for the fill operation (inclusive).
        sc : int
            Starting column index for the fill operation (inclusive).
            
        Returns
        -------
        None. Modifies `image` in place.
        """
        if image[sr][sc] == ".":
            return
        self._fill(image, sr, sc, image[sr][sc])
    
    def _fill(self, image: List[List[str]], r: int, c: int, color: str):
        if image[r][c]!= color:
            return
        directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        for dr, dc in directions:
            newR = r + dr
            newC = c + dc
            if 0 <= newR < len(image) and 0 <= newC < len(image[newR]) \
                and image[newR][newC] == "." \
                and image[r][c] == image[newR][newC]:
                    self._fill(image, newR, newC, color)
        image[r][c] = "#"

# n : the length of `image`, which will be between 1 and 50.
# m : the width of `image`, which will be between 1 and 50.
# s : the number of elements to change from `.` to `#`.

## Time Complexity: O(n * m)
# Where `n` is the length of `image`, and `m` is the width of `image`.

## Space Complexity: O(n * m)
# Where `n` is the length of `image`, and `m` is the width of `image`.

import unittest

if __name__ == "__main__":
    unittest.main()

################################################################

Solution:
['.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.']

