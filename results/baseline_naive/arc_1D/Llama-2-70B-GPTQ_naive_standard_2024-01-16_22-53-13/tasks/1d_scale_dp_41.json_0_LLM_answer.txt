Input token: 324
Output token: 426
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'd', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'd', '.']

Example_2:
input: ['.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', 'd', '.', '.']
output: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'd', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'd', '.']
output: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'd', '.']

Test case:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'd', '.', '.']
################################################################

LLM answer:

output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'd', '.', '.']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, isEnd):
        self.val = val
        self.isEnd = isEnd
        self.next = []


class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) == 0: return 0
        
        # build linked list
        head = None
        for i in range(len(nums)):
            node = Node(nums[i], False)
            
            if head is None:
                head = node
                
            else:
                lastNode = head
                while True:
                    if lastNode.next!= []:
                        lastNode = lastNode.next[-1]
                    
                    elif lastNode.val + 1 == node.val:
                        lastNode.next.append(node)
                        break
                    
                    else:
                        lastNode.next.append(None)
                        lastNode = lastNode.next[-1]
                        continue
                
                break
        
        # find max length of consecutive numbers
        maxLength = 0
        currentLength = 0
        for i in range(len(head.next)-1,-1,-1):
            if head.next[i].isEnd:
                currentLength += 1
                maxLength = max(maxLength,currentLength)
            else:
                currentLength -= 1
        
        return maxLength
################################################################

Solution:
['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'd', '.', '.']

