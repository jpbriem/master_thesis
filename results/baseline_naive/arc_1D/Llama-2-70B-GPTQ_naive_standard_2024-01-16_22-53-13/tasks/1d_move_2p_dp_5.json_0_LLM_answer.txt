Input token: 480
Output token: 351
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'e', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'e', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'e', '.', '.', '.', '.', '.', '.', '.', '.']
"""

import re
from typing import List, Optional


class Solution:
    def findReplaceString(self, S: str) -> str:
        """
        1 <= len(S) <= 500
        S consists of lowercase English letters, digits, and the characters ".", "?".
        All occurrences of a character in S are the same.
        There is at least one occurrence of each unique character in S.
        """
        # Runtime: 48 ms, faster than 97.62% of Python3 online submissions for Find Replace String.
        # Memory Usage: 13.9 MB, less than 100.00% of Python3 online submissions for Find Replace String.
        if not S or not re.search("[a-z]", S):
            return ""

        chars = list(set(re.findall("\w+", S)))
        for char in chars:
            if char == "." or char == "?" or char == " ":
                continue
            else:
                start = S.index(char)
                end = S.rindex(char) + 1
                S = S[:start] + "." * (end - start) + S[end:]
        return S

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

