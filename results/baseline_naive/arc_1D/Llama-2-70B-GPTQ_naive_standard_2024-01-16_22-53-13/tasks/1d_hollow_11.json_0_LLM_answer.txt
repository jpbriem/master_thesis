Input token: 335
Output token: 733
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', 'a', '.', '.']

Example_2:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['e', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.']
output: ['.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', 'a']
"""
from typing import List, Optional

class Solution:
    def spiralMatrixIII(self, n: int) -> List[List[int]]:
        """
        思路：
            递归求解，每一步都是从左上角开始向右下方走。
                如果当前位置不在边界内，则直接返回该位置的值；
                否则，将其设为0，并且继续向右下方走。
            O(n^2)时间复杂度，O(n^2)空间复杂度。
        :type n: int
        :rtype: List[List[int]]
        """
        if not n or n < 0: return []
        res = [[None for _ in range(n)] for __ in range(n)]
        self._spiralMatrixIIIHelper(res, 0, 0, n - 1, n - 1, n)
        return res
    
    def _spiralMatrixIIIHelper(self, res: List[List[Optional[int]]], x: int, y: int, rx: int, ry: int, n: int):
        if x == rx and y == ry: return
        if (rx + ry) % 2!= 0: # 奇数行列
            if x > rx:
                if y <= ry:
                    res[y][x] = None
                    self._spiralMatrixIIIHelper(res, x, y+1, rx, ry, n)
                else:
                    res[ry][x] = None
                    self._spiralMatrixIIIHelper(res, x, ry-1, rx, y, n)
            elif y >= ry:
                res[ry][x] = None
                self._spiralMatrixIIIHelper(res, x, ry-1, rx, y, n)
            else:
                res[ry][x] = None
                self._spiralMatrixIIIHelper(res, x, y+1, rx, ry, n)
        else: # 偶数行列
            if x <= rx:
                if y > ry:
                    res[y][x] = None
                    self._spiralMatrixIIIHelper(res, x, y-1, rx, ry, n)
                else:
                    res[ry][x] = None
                    self._spiralMatrixIIIHelper(res, x, ry+1, rx, y, n)
            elif y < ry:
                res[ry][x] = None
                self._spiralMatrixIIIHelper(res, x, ry+1, rx, y, n)
            else:
                res[ry][x] = None
                self._spiralMatrixIIIHelper(res, x, y-1, rx, ry, n)

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', 'a', '.']

