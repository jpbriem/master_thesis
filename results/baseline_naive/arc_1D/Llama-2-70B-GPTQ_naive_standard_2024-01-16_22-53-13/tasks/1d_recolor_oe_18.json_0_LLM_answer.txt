Input token: 539
Output token: 720
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.']
output: ['.', '.', '.', 'f', 'f', 'f', '.', '.', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'f', 'f', 'f', '.']

Example_2:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', 'g', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', 'f', 'f', 'f', '.', 'f', '.', '.', '.', '.']

Example_3:
input: ['.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', 'g', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', 'h', '.', '.', 'f', '.']

Test case:
input: ['.', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'f', 'f', 'f', 'f', 'f', '.', 'h', 'h', 'h', 'h', '.', '.', 'h', 'h', 'h', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']
"""

import re
from typing import List, Optional


class Solution:
    def transform(self, grid: List[str]) -> str:
        """
        思路：
            1、找到所有的 g 字符串，并将其转换为 f。
            2、检查每个 g 字符串周围是否存在 h 字符串，如果不存在则添加一个 h 字符串。
            3、返回最终结果。
        :param grid:
        :return:
        """
        # 获取所有的 g 字符串
        gs = self._get_gs(grid)
        for i in range(len(gs)):
            if not self._is_exist_hs(grid, gs[i]):
                self._add_hs(grid, gs[i], i)
        return "".join(grid)

    @staticmethod
    def _get_gs(grid: List[str]) -> List[List]:
        """
        获取所有的 g 字符串
        :param grid:
        :return:
        """
        result = []
        for i in range(0, len(grid), 4):
            if grid[i] == ".":
                continue
            start = i
            end = i + 3
            while True:
                if grid[end]!= "." or (start - 1 >= 0 and grid[start - 1] == "."):
                    break
                else:
                    end += 1
            result.append([grid[start], grid[start+1], grid[start+2]])
        return result

    @staticmethod
    def _is_exist_hs(grid: List[str], gs: List[str]) -> bool:
        """
        判断 gs 周围是否存在 h 字符串
        :param grid:
        :param gs:
        :return:
        """
        for i in range(-1, 5):
            if i == 0:
                continue
            elif grid[gs[0]+i] == "h":
                return True
        return False

    @staticmethod
    def _add_hs(grid: List[str], gs: List[str], index: int) -> None:
        """
        向 gs 位置添加 h 字符串
        :param grid:
        :param gs:
        :param index:
        :return:
        """
        if index > 0:
            grid[gs[index]] = "h"
        elif index < 2:
            grid[gs[-index]] = "h"

################################################################

Solution:
['.', 'f', 'f', 'f', 'f', 'f', '.', 'h', 'h', 'h', 'h', '.', '.', 'f', 'f', 'f', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']

