Input token: 565
Output token: 233
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'a', 'a', 'a', 'a']
output: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'c', 'c', 'a', 'a']

Test case:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""
from typing import List, Optional


class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        """
        1. sort each string in ascending order of its characters
        2. compare two strings to see if they have the same length and the same sorted character sequence
            - if yes, then add them into a list
            - else, skip this pair
        3. return all lists
        Time complexity: O(nlogn) where n is the number of strings
        Space complexity: O(n) where n is the number of strings
        """
        # TODO: implement your solution here
        pass

################################################################

Solution:
['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

