Input token: 607
Output token: 508
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'j', 'j', 'j', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'g', 'a', 'g', 'g', 'g', 'a', 'g', 'g', 'g', 'a', 'g', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'j', 'a', 'j', 'j', 'j', 'a', 'j', 'j', 'j', 'a', 'j', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'g', 'g', 'g', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a']
output: ['a', 'j', 'j', 'j', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'j', 'j', 'j', 'j', 'j', 'a', 'a']

Test case:
input: ['a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'a', 'g', 'g', 'g', 'g', 'a', 'g', 'g', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'j', 'j', 'a', 'a', 'a', 'g', 'g', 'a', 'j', 'j', 'j', 'j', 'a', 'j', 'j', 'a', 'a', 'a']
"""

import re
from typing import List, Pattern


class Solution:
    def replaceWords(self, words: List[str]) -> str:
        """
        思路：正则表达式匹配，替换字符串。
            - 先将所有单词转化为小写，再进行匹配和替换操作。
                - 注意：如果单词中包含大写字母，那么这些大写字母会被当成标点符号处理，因此不能直接使用re.sub()函数来进行替换。
                    解决方法是在进行替换前对原始字符串进行转义，以防止出现错误的替换结果。
            - 最后再将所有单词转回原始形态（大小写）。
        :param words:
        :return:
        """
        # 将所有单词转化为小写
        lowercase = [word.lower() for word in words]

        # 定义正则表达式模式
        pattern = r"\b([a-z]+)\b(?=\s+|$)|\b([A-Z][a-zA-Z]*)"

        # 通过正则表达式匹配并替换字符串
        result = re.sub(pattern, lambda match: self._replace(match), " ".join(lowercase))

        # 将所有单词转回原始形态（大小写）
        return result.upper()

    @staticmethod
    def _replace(_):
        pass

################################################################

Solution:
['a', 'a', 'j', 'j', 'j', 'j', 'j', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'e', 'e', 'e', 'e', 'a', 'e', 'e', 'a', 'a', 'a']

