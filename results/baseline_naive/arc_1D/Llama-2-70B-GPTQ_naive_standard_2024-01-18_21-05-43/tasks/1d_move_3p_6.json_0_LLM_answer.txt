Input token: 418
Output token: 578
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'a', 'a']

Example_3:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val=0, children=[], meta={}):
        self.val = val
        self.children = children
        self.meta = meta

def buildTree(arr):
    if not arr or len(arr) == 0: return None
    root = Node()
    stack = [root]
    i = 0
    while True:
        node = stack[-1]
        if i >= len(arr): break
        childNode = Node(arr[i])
        node.addChild(childNode)
        stack.append(childNode)
        i += 1
    return root

def getMeta(node):
    if "max" in node.meta:
        return node.meta["max"]
    else:
        return -float("inf")

def setMax(node, maxVal):
    node.meta["max"] = maxVal

def addChild(parent, child):
    parent.children.append(child)

def findParent(node, target):
    if node is None: return False
    elif node.val == target: return True
    else:
        for child in node.children:
            found = findParent(child, target)
            if found: return True
        return False

def dfs(node, minVal=-float("inf")):
    if node is None: return
    if node.val < minVal:
        print("Found new minimum value at", node.val)
        minVal = node.val
    for child in node.children:
        dfs(child, minVal)

def bfs(queue):
    while queue:
        node = queue.popleft()
        if node is None: continue
        print("Visiting", node.val)
        for child in node.children:
            queue.append(child)

if __name__ == "__main__":
    # Test
    tree = buildTree(['a','b'])
    print(tree)
    print(getMeta(tree))
    print(setMax(tree, 5))
    print(findParent(tree,'a'))
    dfs(tree)
    bfs([tree])
################################################################

Solution:
['a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a']

