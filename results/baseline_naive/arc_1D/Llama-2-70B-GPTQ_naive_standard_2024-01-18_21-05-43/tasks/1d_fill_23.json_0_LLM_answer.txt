Input token: 313
Output token: 461
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a']
output: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'c', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'e', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'c', 'a']
################################################################

LLM answer:

expected output: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def transformToPreorder(self, A):
        """
        :type A: List[str]
        :rtype: str
        """
        
        # 2018/7/4
        # O(n) time complexity
        # O(n) space complexity
        if not A or len(A) == 0: return ''
        root = Node('')
        stack = [root]
        i = 0
        while True:
            node = stack[-1].val
            if i < len(A)-1 and A[i+1]!= node:
                break
            
            stack.append(Node(node))
            i += 1
        while stack:
            node = stack.pop()
            if i >= len(A):
                break
            child = A[i]
            if child == node.val:
                stack.append(Node(child))
                i += 1
            else:
                stack.append(Node(child))
        return root.to_preorder()
    
    def to_preorder(self):
        res = []
        self._to_preorder(res, self.children)
        return res + [self.val]
    
    def _to_preorder(self, res, nodes):
        if not nodes: return
        self._to_preorder(res, nodes[:len(nodes)/2])
        res.extend([node.val for node in nodes[len(nodes)/2:]])
        self._to_preorder(res, nodes[len(nodes)/2:])
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a']

