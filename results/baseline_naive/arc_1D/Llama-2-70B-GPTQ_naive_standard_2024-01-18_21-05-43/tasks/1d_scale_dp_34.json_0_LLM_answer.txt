Input token: 376
Output token: 425
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'b', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'b', 'a', 'a']

Example_2:
input: ['a', 'c', 'c', 'c', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'b', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a']
################################################################

LLM answer:

expected output: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'b', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) == 0: return 0
        
        root = Node('')
        stack = [root]
        while stack:
            node = stack[-1]
            
            # pop from stack
            stack.pop()
            
            # add child to current node
            for i in range(len(node.val)):
                char = node.val[i]
                
                # check if there is already a child with this character
                if char in node.children:
                    continue
                    
                # create new node
                newNode = Node(char)
                node.children[char] = newNode
                stack.append(newNode)
                
        maxLen = 0
        for key in sorted(list(root.children.keys())):
            curLen = 1
            curNode = root.children[key]
            while True:
                nextChar = chr((ord(curNode.val)+1))
                if nextChar in curNode.children:
                    curNode = curNode.children[nextChar]
                    curLen += 1
                else:
                    break
            maxLen = max(maxLen, curLen)
        return maxLen
################################################################

Solution:
['a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'b', 'a', 'a']

