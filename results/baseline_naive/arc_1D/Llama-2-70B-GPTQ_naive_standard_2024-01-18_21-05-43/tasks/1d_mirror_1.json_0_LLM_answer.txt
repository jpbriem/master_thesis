Input token: 439
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'c', 'c', 'c', 'c', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'f', 'f', 'f', 'f', 'f', 'a', 'a']

Example_3:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a']
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        """
        1. sort each string in ascending order
        2. compare two strings by comparing their sorted versions
            - if they're equal, then add them to a list of anagrams
                - otherwise, create a new list for that word
                  (and add it to the list)
        3. return the list of lists
        :param strs:
        :return:
        """
        # O(nlogn + m) time | O(m) space
        # n = len(strs), m = max(len(word))
        # TODO: how can we improve this?
        #       - use a dictionary instead of a list of lists?
        #           - but what would be our key?
        #               - maybe the sorted version of the word?
        #           - or maybe just the first letter of the word?
        #           - or maybe the length of the word?
        #           - or maybe the number of unique letters in the word?
        #           - or maybe some combination of these things?
        #           - or maybe something else entirely?
        #           -...
        #       - use a set instead of a list?
        #           - but what would be our key?
        #               - maybe the sorted version of the word?
        #           - or maybe just the first letter of the word?
        #           - or maybe the length of the word?
        #           - or maybe the number of unique letters in the word?
        #           - or maybe some combination of these things?
        #           - or maybe something else entirely?
        #           -...
        #       - use a heap instead of a list/set?
        #           - but what would be our key?
        #               - maybe the sorted version of the word?
        #           - or maybe just the first letter of the word?
        #           - or maybe the length of the word?
        #           - or maybe the number of unique letters in the word?
        #           - or maybe some combination of these things?
        #           - or maybe something else entirely?
        #           -...
        #       - use a trie instead of a list/set/heap?
        #           - but what would be our key?
        #               - maybe the sorted version of the word?
        #           - or maybe just the first letter of the word?
        #           - or maybe the length of the word?
        #           - or maybe the number of unique letters in the word?
        #           - or maybe some combination of these things?
        #           - or maybe something else entirely?
        #           -...
        #       - use a graph instead of a list/set/heap/trie?
        #           - but what would be our key?
        #               - maybe the sorted version of the word?
        #           - or maybe just the first letter of the word?
        #           - or maybe the length of the word?
        #           - or maybe the number of unique letters in the word?
        #           - or maybe some combination of these things?
        #           - or maybe something else entirely?
        #           -...
        #       - use a tree instead of a list/set/heap/trie/graph?
        #           - but what would be our key?
        #               - maybe the sorted version of the word?
        #           - or maybe just the first letter of the word?
        #           - or maybe the length of the word?
        #           - or maybe the number of unique letters in the word?
        #           - or maybe some combination of these things?
        #           - or maybe something else entirely?
        #           -...
        #       - use a hash table instead of a list/set/heap/trie/tree?
        #           - but what would be our key?
        #               - maybe the sorted version of the word?
        #           - or maybe just the first letter of the word?
        #           - or maybe the length of the word?
        #           -
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a']

