Input token: 460
Output token: 404
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b']
output: ['a', 'a', 'a', 'i', 'i', 'a', 'j', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e']

Example_2:
input: ['a', 'b', 'b', 'b', 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b']
output: ['a', 'e', 'e', 'e', 'a', 'j', 'a', 'a', 'i', 'i', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'e', 'e']

Example_3:
input: ['a', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'b', 'a', 'b', 'b', 'b', 'a']
output: ['a', 'j', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'i', 'i', 'a', 'j', 'a', 'e', 'e', 'e', 'a']

Test case:
input: ['a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'i', 'i', 'a', 'j', 'a', 'a', 'i', 'i', 'a', 'a', 'a']
"""
from typing import List, Optional


class Solution:
    def transform(self, s: str) -> str:
        """
        思路：找出最长的连续字符串，然后将其转换为对应的单个字母。
                如果有多个最长的连续字符串，则选取第一个（即从左到右）进行转换。
                O(n^2) 时间复杂度，O(n) 空间复杂度
        :param s:
        :return:
        """
        if not s or len(s) == 0:
            return ""

        max_len = 1
        start = -1
        for i in range(len(s)):
            if i + max_len > len(s):
                break
            if s[i]!= s[i+max_len]:
                continue
            if max_len < (i - start + 1):
                max_len = i - start + 1
                start = i - max_len + 1

        result = []
        for c in s[:start]:
            result.append(c)
        result.extend([str(ord(c)-64)] * max_len)
        for c in s[start+max_len:]:
            result.append(c)
        return "".join(result)

################################################################

Solution:
['a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'i', 'i', 'a', 'j', 'a', 'a', 'i', 'i', 'a', 'a', 'a']

