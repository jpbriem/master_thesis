Input token: 460
Output token: 415
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'b', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'a', 'b', 'b', 'a']
output: ['a', 'f', 'f', 'f', 'a', 'c', 'a', 'a', 'a', 'j', 'j', 'a', 'a', 'a', 'c', 'a', 'j', 'j', 'a']

Example_2:
input: ['a', 'b', 'b', 'b', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a']
output: ['a', 'f', 'f', 'f', 'a', 'j', 'j', 'a', 'c', 'a', 'a', 'a', 'j', 'j', 'a', 'c', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'b', 'a', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'b']
output: ['a', 'a', 'a', 'c', 'a', 'j', 'j', 'a', 'a', 'f', 'f', 'f', 'a', 'a', 'a', 'j', 'j', 'a', 'c']

Test case:
input: ['a', 'a', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'e', 'a', 'g', 'h', 'i', 'a', 'a', 'd', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s']
"""
from typing import List, Optional


class Solution:
    def encode(self, s: str) -> str:
        """
        1. 找到最长的字符串，并且记录下来。
        2. 将该字符串转换为一个新的字符串，然后再次进行检查。
        3. 如果没有重复出现，则返回结果。
        4. 否则继续寻找最长的字符串。
        :param s:
        :return:
        """
        max_len = 0
        result = ""
        for i in range(len(s)):
            if i == len(s)-1 or s[i]!= s[i+1]:
                tmp = self._get_max_length(s[:i])
                if tmp > max_len:
                    max_len = tmp
                    result = s[:i] + chr(ord('a') + (tmp - 1)) * tmp
        return result

    @staticmethod
    def _get_max_length(s):
        max_len = 0
        for i in range(len(s)):
            if i == len(s)-1 or s[i]!= s[i+1]:
                tmp = s[:i].count(s[i])
                if tmp > max_len:
                    max_len = tmp
        return max_len

################################################################

Solution:
['a', 'a', 'c', 'a', 'f', 'f', 'f', 'a', 'a', 'a', 'j', 'j', 'a', 'a', 'a', 'c', 'a', 'a', 'a']

