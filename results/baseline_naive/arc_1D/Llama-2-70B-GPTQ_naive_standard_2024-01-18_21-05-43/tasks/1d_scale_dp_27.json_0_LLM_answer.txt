Input token: 250
Output token: 381
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'i', 'a']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'i', 'a']

Example_2:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'i']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'i']

Example_3:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'i', 'a']
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'i', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'a', 'i', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'h', 'h', 'h', 'a', 'a', 'i', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) == 0: return 0
        
        root = Node(nums[0])
        q = [root]
        while q:
            node = q.pop()
            
            if node.left is None:
                node.left = Node(node.val - 1)
                
            if node.right is None:
                node.right = Node(node.val + 1)
            
            q.append(node.left)
            q.append(node.right)
        
        maxLen = 0
        for i in range(len(nums)):
            curNode = root
            while True:
                if curNode.val > nums[i]: break
                elif curNode.val < nums[i]:
                    curNode = curNode.right
                else:
                    maxLen += 1
                    
                    curNode = curNode.left
                    while curNode!= None:
                        curNode = curNode.right
                    break
        return maxLen
################################################################

Solution:
['a', 'h', 'h', 'h', 'h', 'h', 'i', 'a', 'a']

