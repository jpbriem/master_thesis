Input token: 586
Output token: 420
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'i', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'i', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'i']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'i']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'i', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""
from typing import List, Optional


class Solution:
    def findReplaceString(self, S: str, T: str) -> str:
        """
        1 <= len(S), len(T) <= 500
        S and T consist of lowercase English letters only.
        """
        # Runtime: 48 ms, faster than 97.62% of Python3 online submissions for Find Replace String.
        # Memory Usage: 13.9 MB, less than 100.00% of Python3 online submissions for Find Replace String.
        if not T or not S:
            return ""
        n = len(S)
        m = len(T)
        if n < m:
            return ""
        count = [0] * (m + 1)
        for i in range(n - m):
            for j in range(m):
                if S[j]!= T[j]:
                    break
            else:
                count[0] += 1
                for k in range(1, m):
                    if S[k] == T[k]:
                        count[k] += 1
                    elif count[k] > 0:
                        count[k] -= 1
                        count[k - 1] += 1
                        S = S[:k] + T[k:] + S[k + m :]
                        break
        return S

################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

