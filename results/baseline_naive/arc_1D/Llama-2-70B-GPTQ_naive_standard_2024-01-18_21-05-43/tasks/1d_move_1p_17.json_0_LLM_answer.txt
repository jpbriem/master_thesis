Input token: 397
Output token: 433
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def transformToPreorder(self, A):
        """
        :type A: List[str]
        :rtype: str
        """
        
        # 2018/7/4
        # O(n) time complexity
        # O(n) space complexity
        if not A or len(A) == 1: return A
        root = Node('')
        stack = [root]
        i = j = k = 0
        while True:
            node = stack[-1]
            if i >= len(A): break
            
            if A[i]!= node.val:
                node.children = []
                
                while i < len(A) - 1 and A[i + 1] == node.val:
                    i += 1
                    
                node.children.append(Node(A[i]))
                stack.append(node.children[-1])
                continue
            
            while i <= j:
                node.children.append(Node(A[j]))
                stack.append(node.children[-1])
                j -= 1
            
            while i <= k:
                node.children.insert(0, Node(A[k]))
                stack.append(node.children[0])
                k += 1
            
            i += 1
        
        return list(map(lambda x: x.val, stack))
################################################################

Solution:
['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']

