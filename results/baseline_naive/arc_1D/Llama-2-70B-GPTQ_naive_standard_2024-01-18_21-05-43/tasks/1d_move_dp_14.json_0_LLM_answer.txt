Input token: 544
Output token: 462
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'h']
output: ['a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h']

Example_2:
input: ['a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'h', 'a']
output: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'h', 'a']

Example_3:
input: ['a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'h']
output: ['a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'h']

Test case:
input: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'h', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'h']
"""

import collections
from typing import List, Tuple


class Solution:
    def transform(self, arr: List[str]) -> List[str]:
        """
        思路：
            将数组中的元素分成两部分，一个是开头的连续相同字符串，另外一个是后面的不同字符串。
            然后对这两部分进行处理，如果前者为空则直接返回后者；否则，把前者转换为后者的第一个元素，并且保持原始长度，再加上后者。
            O(n) 时间复杂度，O(1) 空间复杂度。
        :param arr:
        :return:
        """
        if not arr or len(arr) == 0:
            return []

        # 获取前缀和后缀
        prefix = ""
        suffix = ""
        for i in range(len(arr)):
            if arr[i]!= arr[-1]:
                break
            else:
                prefix += arr[i]
        for j in range(-1, -len(arr), -1):
            if arr[j]!= arr[-1]:
                break
            else:
                suffix += arr[j]

        # 处理前缀
        if prefix!= "":
            new_prefix = [suffix[0]] * (len(prefix) + 1)
            return new_prefix + suffix[1:]
        else:
            return suffix

################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'h', 'a', 'a']

