Input token: 334
Output token: 339
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'i', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'i', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'h', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'h', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'i', 'j', 'j', 'j', 'j', 'j', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'j', 'j', 'j', 'j', 'j', 'i', 'a', 'a', 'a']

Test case:
input: ['h', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['h', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        
        if not preorder or not inorder: return None
        root = Node(preorder[0])
        stack = []
        i = 0
        while True:
            node = stack[-1] if len(stack) > 0 else None
            
            # find the index of current node's value in inorder list
            idx = inorder.index(node.val) if node is not None else -1
            if idx == i:
                stack.pop()
                
            elif idx < i:
                break
            
            else:
                leftChild = Node(inorder[i], [])
                rightChild = Node(inorder[i+1], [])
                node.addChildren([leftChild, rightChild])
                stack.append(rightChild)
                i += 2
        return root
################################################################

Solution:
['g', 'g', 'g', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

