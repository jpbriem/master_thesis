Input token: 313
Output token: 435
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'j', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'j', 'a', 'a', 'a']

Example_2:
input: ['a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'j', 'a']
output: ['a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'j', 'a']

Example_3:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'j']
output: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'j']

Test case:
input: ['a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'j']
################################################################

LLM answer:

expected output: ['a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'j']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) == 0: return 0
        
        root = Node('')
        stack = [root]
        while stack:
            node = stack[-1]
            
            # pop from stack
            stack.pop()
            
            # add child to current node
            for i in range(len(node.val)):
                char = node.val[i]
                
                if char!= '.':
                    newNode = Node(char + '.')
                    
                    if i < len(node.val)-1:
                        newNode.children = []
                        newNode.children.append(Node(node.val[i+1]))
                    else:
                        newNode.children = None
                    
                    node.addChild(newNode)
                    
            # push to stack
            stack.append(node)
        
        maxLen = 0
        for i in range(len(stack[0].children)):
            curMaxLen = 0
            curNode = stack[0].children[i]
            while curNode is not None:
                curMaxLen += 1
                curNode = curNode.children[0]
            maxLen = max(maxLen, curMaxLen)
        
        return maxLen

################################################################

Solution:
['a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'j']

