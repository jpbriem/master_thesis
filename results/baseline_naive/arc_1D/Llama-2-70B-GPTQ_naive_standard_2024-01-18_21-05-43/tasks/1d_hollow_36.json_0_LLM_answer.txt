Input token: 334
Output token: 350
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'i', 'a', 'a']

Test case:
input: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def transformToPreorder(self, A):
        """
        :type A: List[str]
        :rtype: str
        """
        
        # 2018/7/4
        # O(n) time complexity
        # O(n) space complexity
        if not A or len(A) == 0: return ''
        root = Node('')
        stack = [root]
        for i in range(len(A)):
            node = stack[-1].children
            while node is None:
                node = stack.pop()
            if node.val!= A[i]:
                node.val = A[i]
                node.children = []
            else:
                node.children.append(Node(A[i]))
            stack.append(node)
            
        res = []
        while stack:
            node = stack.pop()
            if node.children:
                stack.extend([child for child in reversed(node.children)])
            res.append(node.val)
                    
        return ''.join(res)
################################################################

Solution:
['a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a']

