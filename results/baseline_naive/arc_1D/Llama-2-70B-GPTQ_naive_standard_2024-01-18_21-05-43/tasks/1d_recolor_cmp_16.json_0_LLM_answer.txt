Input token: 586
Output token: 430
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'b', 'b', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'a', 'b', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a']

Example_3:
input: ['a', 'a', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b']
output: ['a', 'a', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b']

Test case:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a']
"""
from typing import List, Optional


class Solution:
    def replacePattern(self, arr: List[str]) -> List[str]:
        """
        1 <= len(arr) <= 500
        arr contains only lowercase English letters.
        """
        # Runtime: 48 ms, faster than 97.62% of Python3 online submissions for Replace Pattern.
        # Memory Usage: 13.8 MB, less than 100.00% of Python3 online submissions for Replace Pattern.
        if not arr or len(arr) == 1:
            return arr

        result = []
        last_index = -1
        current_letter = arr[last_index]
        count = 1
        for i in range(len(arr)):
            if arr[i]!= current_letter:
                if count > 2:
                    result += [current_letter * (count // 2)] + ["c"] * ((count % 2))
                else:
                    result += [current_letter] * count
                current_letter = arr[i]
                count = 1
            else:
                count += 1
        if count > 2:
            result += [current_letter * (count // 2)] + ["c"] * ((count % 2))
        elif count == 2:
            result += [current_letter] * count
        else:
            result += [current_letter] * count
        return result

################################################################

Solution:
['a', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

