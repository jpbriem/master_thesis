Input token: 334
Output token: 356
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'i', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a']

Test case:
input: ['a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def replaceWords(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        # 1. build tree from words
        root = Node('')
        for word in words:
            node = root
            for char in reversed(word):
                if not hasattr(node, "children") or char not in node.children:
                    node.children[char] = Node(char)
                node = node.children[char]
        # 2. traverse tree to get result
        res = []
        stack = [root]
        while len(stack) > 0:
            curNode = stack[-1]
            if isinstance(curNode.val, list):
                res += curNode.val
            else:
                res.append(curNode.val)
            stack.pop()
            if hasattr(curNode, "children"):
                for child in sorted(list(curNode.children.values()), key=lambda x: x.val):
                    stack.append(child)
        return ''.join(res)

################################################################

Solution:
['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']

