Input token: 565
Output token: 508
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
"""
from typing import List, Optional


class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        """
        1. sort each string in ascending order of its characters
        2. compare adjacent strings to see if they're anagrams or not
            - if yes, add them into a list
            - else, create new list for next set of anagrams
        3. return all lists with anagrams
        Time complexity: O(nlogn) where n is number of strings
                          (sorting takes O(nlgn))
        Space complexity: O(n) where n is number of strings
                           (creating new lists takes O(n) space)
        """
        # sort each string in ascending order of its characters
        sorted_strings = [sorted(string) for string in strs]

        # create empty list to store anagram groups
        result = []

        # iterate through sorted strings
        for i in range(len(sorted_strings)):
            current_list = []  # initialize current list as empty
            current_index = i     # index of first element in current list

            while True:   # loop until we reach end of list
                # check if current string is anagram of previous one
                if i == len(sorted_strings)-1 or sorted_strings[i]!= sorted_strings[i+1]:
                    # append current list to final result
                    result.append(current_list)

                    # reset current list and index variables
                    current_list = []
                    current_index = i + 1

                # otherwise, add current string to current list
                else:
                    current_list.append(strs[i])

                # increment counter by 1
                i += 1

        return result

################################################################

Solution:
['a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a']

