Input token: 313
Output token: 314
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'i', 'a']
output: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'i', 'a']

Example_2:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i']
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'i']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'i', 'a', 'a']
output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'i', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'i', 'a']
################################################################

LLM answer:

expected output: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
        stack = []
        maxlen = 0
        for i in range(len(s)):
            if s[i] == "(":
                stack.append((i, "("))
            elif s[i] == ")":
                if len(stack) > 0:
                    last = stack[-1][0]
                    if (last - i + 1) >= maxlen:
                        maxlen = last - i + 1
                else:
                    return 0
                stack.pop()
        while len(stack) > 0:
            last = stack[-1][0]
            if (last - len(s) + 1) >= maxlen:
                maxlen = last - len(s) + 1
            stack.pop()
        return maxlen

################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'i', 'a']

