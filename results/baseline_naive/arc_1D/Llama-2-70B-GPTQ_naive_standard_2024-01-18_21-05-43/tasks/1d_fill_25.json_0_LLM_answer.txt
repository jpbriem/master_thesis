Input token: 229
Output token: 229
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'h', 'a', 'h', 'a', 'a', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'g', 'a', 'g', 'a']
output: ['a', 'a', 'a', 'a', 'g', 'g', 'g', 'a']

Example_3:
input: ['a', 'a', 'a', 'h', 'a', 'a', 'h', 'a']
output: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'a']

Test case:
input: ['a', 'b', 'a', 'a', 'b', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'b', 'a', 'a', 'b', 'b', 'b', 'a']
"""

# @lc code=start
class Solution(object):
    def longestDupSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or len(s) == 0: return 0
        
        maxLen = 0
        for i in range(len(s)):
            j = i + 1
            
            while j < len(s):
                if s[i]!= s[j]: break
                
                # found a substring of length 2*k+1
                k = (j - i)/2
                if k > maxLen:
                    maxLen = k
                    
                j += 1
                
            i += 1
        
        return maxLen * 2 + 1
# @lc code=end

################################################################

Solution:
['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a']

