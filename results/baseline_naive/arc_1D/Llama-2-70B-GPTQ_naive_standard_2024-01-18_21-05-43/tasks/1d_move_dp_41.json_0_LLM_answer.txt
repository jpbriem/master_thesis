Input token: 355
Output token: 394
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'b']
output: ['a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'b']

Example_2:
input: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'c', 'c', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'b', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'b', 'a']

Test case:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'b', 'a']
################################################################

LLM answer:

output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']
"""

# Definition for a Node.
class Node(object):
    def __init__(self, val, children=None):
        self.val = val
        self.children = children


class Solution(object):
    def transformToPreorder(self, A):
        """
        :type A: List[str]
        :rtype: str
        """
        
        # 2018/7/4
        # O(n) time complexity
        # O(n) space complexity
        if not A or len(A) == 0: return ''
        root = Node('')
        stack = [root]
        for i in range(len(A)):
            node = stack[-1].children
            while node is None:
                stack.pop()
                node = stack[-1].children
            
            if node is None:
                node = []
                stack[-1].children = node
                
            node.append(Node(A[i]))
            stack.append(node[-1])
        return root.to_preorder()
    
    def to_preorder(self):
        res = []
        self._to_preorder(res)
        return ''.join(res)
    
    def _to_preorder(self, res):
        if self.children is None:
            return
        for child in reversed(self.children):
            child._to_preorder(res)
        res.append(self.val)

################################################################

Solution:
['a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'b', 'a']

