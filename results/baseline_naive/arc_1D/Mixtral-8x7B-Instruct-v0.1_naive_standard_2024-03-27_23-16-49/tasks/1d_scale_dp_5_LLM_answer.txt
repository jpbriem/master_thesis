
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'e', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'e', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', 'e', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'e', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.']
*/

public class Solution {
    public String[] expand(String S) {
        List<String> res = new ArrayList<>();
        int len = 0;
        while (len < S.length()) {
            char c = S.charAt(len);
            if (Character.isLetter(c)) {
                res.add("" + c);
            } else {
                int count = 0, start = len + 1;
                while (start < S.length() && Character.isDigit(S.charAt(start))) {
                    count = count * 10 + (S.charAt(start++) - '0');
                }
                for (int i = 0; i < count; ++i) {
                    res.add(res.get(res.size() - 1));
                }
            }
            len += 2 + Integer.toString(count).length();
        }
        return res.toArray(new String[res.size()]);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'e', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.21205357142857142

cat_success_cnt: 21

cat_success_rate: 0.45652173913043476

