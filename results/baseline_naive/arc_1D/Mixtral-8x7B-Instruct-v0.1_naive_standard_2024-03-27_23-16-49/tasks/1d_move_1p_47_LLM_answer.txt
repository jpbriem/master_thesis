
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']
output: ['.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String[] dominoes) {
        int n = dominoes.length;
        char[] left = new char[n]; // left[i] is the force on i-th domino from its left side
        Arrays.fill(left, '.');
        for (int i = 0; i < n; ++i) {
            if (dominoes[i].equals(".")) continue;
            if (i > 0 && left[i - 1] == 'L') {
                left[i] = 'R';
            } else if (i > 0 && left[i - 1] == 'R') {
                left[i] = 'R';
            } else {
                left[i] = 'L';
            }
        }

        char[] right = new char[n]; // right[i] is the force on i-th domino from its right side
        Arrays.fill(right, '.');
        for (int i = n - 1; i >= 0; --i) {
            if (dominoes[i].equals(".")) continue;
            if (i + 1 < n && right[i + 1] == 'L') {
                right[i] = 'R';
            } else if (i + 1 < n && right[i + 1] == 'R') {
                right[i] = 'R';
            } else {
                right[i] = 'L';
            }
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; ++i) {
            if (left[i] == '.' && right[i] == '.') {
                sb.append('.');
            } else if (left[i] == 'L' && right[i] == 'L') {
                sb.append('.');
            } else if (left[i] == 'R' && right[i] == 'R') {
                sb.append('.');
            } else if (left[i] == 'L' && right[i] == 'R') {
                sb.append('R');
            } else if (left[i] == 'R' && right[i] == 'L') {
                sb.append('L');
            } else {
                sb.append('.');
            }
        }

        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2944606413994169

cat_success_cnt: 14

cat_success_rate: 0.32558139534883723

