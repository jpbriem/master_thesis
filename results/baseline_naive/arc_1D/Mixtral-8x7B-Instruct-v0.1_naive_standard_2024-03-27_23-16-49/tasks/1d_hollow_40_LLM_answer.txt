
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', 'a', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.']

Example_3:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        // left and right are the index of last non-dot character to the left and right of current position respectively
        int left = -1, right = -1;
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '.') continue;
            if (left == -1) {
                left = i;
            } else {
                if (arr[left] == 'L' && arr[i] == 'R') {
                    for (int j = left + 1; j < i; ++j) {
                        arr[j] = '.' ^ arr[j];
                    }
                }
                left = i;
            }
        }
        left = -1;
        for (int i = len - 1; i >= 0; --i) {
            if (arr[i] == '.') continue;
            if (right == -1) {
                right = i;
            } else {
                if (arr[right] == 'R' && arr[i] == 'L') {
                    for (int j = right - 1; j > i; --j) {
                        arr[j] = '.' ^ arr[j];
                    }
                }
                right = i;
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3305084745762712

cat_success_cnt: 5

cat_success_rate: 0.1388888888888889

