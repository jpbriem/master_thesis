
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', '.', '.', 'b', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']

Example_2:
input: ['d', '.', 'd', '.', '.', '.', '.', '.', '.', '.']
output: ['d', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', 'g', '.', 'g', '.']
output: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', '.']

Test case:
input: ['.', '.', '.', '.', 'c', '.', '.', 'c', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', '.', '.']
*/

public class Solution {
    public String[] fill(String[] arr) {
        if (arr == null || arr.length < 2) return arr;
        int len = arr.length, i = 0;
        while (i < len && arr[i].equals(".")) i++;
        for (int j = i + 1; j < len; j++) {
            if (!arr[j].equals(".")) continue;
            if (j - i > 1) {
                arr[j] = arr[i];
            } else {
                arr[j] = "";
            }
        }
        return arr;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2714285714285714

cat_success_cnt: 10

cat_success_rate: 0.25

