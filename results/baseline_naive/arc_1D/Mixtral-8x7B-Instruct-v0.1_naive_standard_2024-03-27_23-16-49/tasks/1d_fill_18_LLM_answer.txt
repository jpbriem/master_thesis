
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

Example_3:
input: ['.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] expand(String S) {
        List<String> res = new ArrayList<>();
        int len = 0;
        while (len < S.length()) {
            char c = S.charAt(len);
            if (c == '.') break;
            int count = 0;
            while (len < S.length() && Character.isDigit(S.charAt(len))) {
                count = count * 10 + (S.charAt(len++) - '0');
            }
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < count; ++i) {
                sb.append(c);
            }
            res.add(sb.toString());
            len++;
        }
        if (len >= S.length()) return new String[]{res.get(0)};
        List<String> temp = new ArrayList<>();
        dfs(temp, res, S, len);
        Collections.sort(temp);
        return temp.toArray(new String[temp.size()]);
    }

    private void dfs(List<String> temp, List<String> res, String s, int index) {
        if (index >= s.length()) {
            temp.add("");
            return;
        }
        char c = s.charAt(index);
        if (Character.isLetter(c)) {
            temp.add(c + "");
            dfs(temp, res, s, index + 1);
        } else {
            int count = 0;
            while (index < s.length() && Character.isDigit(s.charAt(index))) {
                count = count * 10 + (s.charAt(index++) - '0');
            }
            for (int i = 0; i < count; ++i) {
                for (String str : res) {
                    temp.add(str);
                }
            }
            dfs(temp, res, s, index);
        }
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27927927927927926

cat_success_cnt: 3

cat_success_rate: 0.2727272727272727

