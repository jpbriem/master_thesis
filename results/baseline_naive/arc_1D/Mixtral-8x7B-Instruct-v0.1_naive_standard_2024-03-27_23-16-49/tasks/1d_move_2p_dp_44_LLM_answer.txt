
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['g', 'g', 'g', '.', '.', 'f', '.']
output: ['.', '.', 'g', 'g', 'g', 'f', '.']

Example_2:
input: ['c', 'c', 'c', '.', '.', 'f', '.']
output: ['.', '.', 'c', 'c', 'c', 'f', '.']

Example_3:
input: ['h', 'h', 'h', '.', '.', 'f', '.']
output: ['.', '.', 'h', 'h', 'h', 'f', '.']

Test case:
input: ['e', 'e', 'e', '.', '.', 'f', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'e', 'e', 'e', 'f', '.']
*/

// Solution 1:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');

        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
                continue;
            }

            // find the first non-dot from left and right side of current dot
            int l = i - 1, r = i + 1;
            while (l >= 0 && arr[l] == '.') --l;
            while (r < len && arr[r] == '.') ++r;

            // check whether there is a force to push this dot
            if (l >= 0 && arr[l] == 'L' || r < len && arr[r] == 'R') {
                arr[i] = (l >= 0 && arr[l] == 'L')? 'L' : 'R';
            } else if (l >= 0 && r < len && arr[l] == 'R' && arr[r] == 'L') {
                arr[i] = '.';
            }
        }

        return new String(arr);
    }
}

// Solution 2:
class Solution {
    public String pushDominoes(String dominoes) {
        StringBuilder sb = new StringBuilder();
        int f = 0;
        for (char c : dominoes.toCharArray()) {
            if (c == '.' && f == 0) {
                sb.append('.');
            } else if (c == 'L') {
                sb.append("L".repeat(Math.max(0, f)));
                f = -1;
            } else if (c == 'R') {
                if (f > 0) {
                    sb.append(".".repeat(f));
                }
                sb.append('R');
                f = 1;
            } else {
                if (f > 0) {
                    sb.append(".".repeat(f));
                }
                sb.append('R');
                f = 0;
            }
        }
        if (f > 0) {
            sb.append(".".repeat(f));
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', 'e', 'e', 'e', 'f', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.25227272727272726

cat_success_cnt: 2

cat_success_rate: 0.05

