
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', 'f', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', 'a', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.']
*/

public class Solution {
    public String[] fill(String[] input) {
        if (input == null || input.length < 2) return input;

        int len = input.length, start = -1, end = -1;
        for (int i = 0; i < len; ++i) {
            if (start == -1 &&!input[i].equals(".")) start = i;
            else if (!input[i].equals(".") && start!= -1) end = i;
        }

        // no filled area found
        if (start == -1) return input;

        char c = input[start].charAt(0);
        while (++end < len && input[end].equals("."));

        for (int i = start-1; i >= 0; --i) input[i] = "" + c;
        for (int i = end+1; i < len; ++i) input[i] = "" + c;

        return input;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.28

cat_success_cnt: 14

cat_success_rate: 0.28

