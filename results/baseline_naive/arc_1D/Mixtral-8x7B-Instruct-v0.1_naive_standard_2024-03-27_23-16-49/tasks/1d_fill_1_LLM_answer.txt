
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.']

Test case:
input: ['.', '.', '.', 'c', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.']
*/

public class Solution {
    public String[] fill(String[] board) {
        if (board == null || board.length < 3 || board[0].length() < 3) return board;
        int m = board.length, n = board[0].length();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j]!= '.' && isEdge(board, i, j)) {
                    dfs(board, i, j);
                }
            }
        }
        return board;
    }

    private void dfs(String[] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length()) return;
        if (board[x][y]!= '.' && board[x][y] == board[x - 1][y]) {
            board[x][y] = board[x - 1][y];
            dfs(board, x + 1, y);
        } else if (board[x][y]!= '.' && board[x][y] == board[x + 1][y]) {
            board[x][y] = board[x + 1][y];
            dfs(board, x - 1, y);
        } else if (board[x][y]!= '.' && board[x][y] == board[x][y - 1]) {
            board[x][y] = board[x][y - 1];
            dfs(board, x, y + 1);
        } else if (board[x][y]!= '.' && board[x][y] == board[x][y + 1]) {
            board[x][y] = board[x][y + 1];
            dfs(board, x, y - 1);
        }
    }

    private boolean isEdge(String[] board, int x, int y) {
        if (x == 0 || x == board.length - 1 || y == 0 || y == board[0].length() - 1) return true;
        if ((x > 0 && board[x - 1][y]!= board[x][y]) || (x < board.length - 1 && board[x + 1][y]!= board[x][y])) {
            return true;
        }
        if ((y > 0 && board[x][y - 1]!= board[x][y]) || (y < board[0].length() - 1 && board[x][y + 1]!= board[x][y])) {
            return true;
        }
        return false;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.28431372549019607

cat_success_cnt: 1

cat_success_rate: 0.5

