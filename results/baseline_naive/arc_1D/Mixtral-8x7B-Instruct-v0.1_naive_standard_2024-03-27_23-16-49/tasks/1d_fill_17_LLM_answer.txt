
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.']

Example_2:
input: ['.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']

Test case:
input: ['f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f']
*/

public class Solution {
    public String[] replace(String[] arr) {
        if (arr == null || arr.length <= 0) return new String[0];
        int start = -1;
        for (int i = 0; i < arr.length; i++) {
            if (".".equals(arr[i])) continue;
            else if (start == -1) start = i;
            while (i + 1 < arr.length &&!".".equals(arr[++i]));
            fill(arr, start, i);
            start = -1;
        }
        return arr;
    }

    private void fill(String[] arr, int start, int end) {
        char c = arr[start].charAt(0);
        for (int i = start; i <= end; i++) {
            arr[i] = "" + c;
        }
    }
}


###########################################################
Result:
solution: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2818181818181818

cat_success_cnt: 3

cat_success_rate: 0.3

