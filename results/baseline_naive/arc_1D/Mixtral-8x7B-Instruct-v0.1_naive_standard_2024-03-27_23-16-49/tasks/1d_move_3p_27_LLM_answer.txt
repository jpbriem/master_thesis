
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.']

Example_2:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', '.', '.']

Example_3:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', '.', '.', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'g', 'g', 'g', '.', '.', '.']
*/

public class Solution {
    public String move(String s) {
        int i = 0;
        while (i < s.length() && s.charAt(i) == '.') {
            i++;
        }
        if (i >= s.length()) return "";
        StringBuilder sb = new StringBuilder();
        for (int j = i; j < s.length(); j++) {
            if (s.charAt(j)!= '.') {
                sb.append(s.charAt(j));
            } else {
                break;
            }
        }
        for (int k = 0; k < i; k++) {
            sb.append('.');
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'g', 'g', 'g', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.24416135881104034

cat_success_cnt: 1

cat_success_rate: 0.047619047619047616

