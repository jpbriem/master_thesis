
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'a', 'a', 'a', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'c', 'c', 'c', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'c', 'c', 'c', '.', '.', '.', 'c', 'c', 'c', '.', '.', '.', 'c', 'c', 'c', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'd', 'd', 'd', '.', '.', '.', '.', 'd', '.', '.', '.', 'd', '.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] findLongestChain(String[] input) {
        if (input == null || input.length <= 0) return new String[0];

        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < input.length; i++) {
            int index = -1, count = 0;
            char c = input[i].charAt(0);
            for (int j = i + 1; j < input.length; j++) {
                if (input[j].charAt(0)!= c) break;
                count++;
            }
            if (count > 0) {
                List<Integer> temp = new ArrayList<>();
                temp.add(i);
                temp.add(count);
                list.add(temp);
                i += count;
            } else {
                list.add(new ArrayList<>());
            }
        }

        Collections.sort(list, new Comparator<List<Integer>>() {
            @Override
            public int compare(List<Integer> o1, List<Integer> o2) {
                return Integer.compare(o1.get(1), o2.get(1));
            }
        });

        StringBuilder sb = new StringBuilder();
        for (List<Integer> l : list) {
            if (!l.isEmpty()) {
                for (int i = 0; i < l.get(1); i++) {
                    sb.append(input[l.get(0)]);
                }
            }
        }

        String output = sb.toString();
        return output.split("");
    }
}


###########################################################
Result:
solution: ['.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2096505823627288

cat_success_cnt: 0

cat_success_rate: 0.0

