
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']

Example_3:
input: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']

Test case:
input: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String[] dominoes) {
        int len = dominoes.length;
        char[] left = new char[len]; //left[i] represents the force on i-th position from left side
        Arrays.fill(left, '.');
        for (int i = 0; i < len && dominoes[i].equals("."); i++) {}
        if (i!= len) {
            left[i] = dominoes[i];
            for (int j = i + 1; j < len &&!dominoes[j].equals("."); j++) {
                if (dominoes[j] == 'R') break;
                else left[j] = 'L';
            }
        }
        char[] right = new char[len];//right[i] represents the force on i-th position from right side
        Arrays.fill(right, '.');
        for (int i = len - 1; i >= 0 && dominoes[i].equals("."); i--) {}
        if (i!= -1) {
            right[i] = dominoes[i];
            for (int j = i - 1; j >= 0 &&!dominoes[j].equals("."); j--) {
                if (dominoes[j] == 'L') break;
                else right[j] = 'R';
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; i++) {
            if (left[i] == '.' && right[i] == '.') sb.append('.');
            else if (left[i] == 'L' && right[i] == '.') sb.append('L');
            else if (left[i] == '.' && right[i] == 'R') sb.append('R');
            else if (left[i] == 'L' && right[i] == 'R') sb.append('.');
            else sb.append('J');
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2875816993464052

cat_success_cnt: 1

cat_success_rate: 0.16666666666666666

