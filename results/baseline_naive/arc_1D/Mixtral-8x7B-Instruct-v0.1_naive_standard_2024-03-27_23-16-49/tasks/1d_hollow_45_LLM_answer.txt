
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.']

Example_3:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['c', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            if (isValid(words[i])) {
                result.add(words[i]);
            }
        }
        return result.toArray(new String[result.size()]);
    }

    private boolean isValid(String word) {
        int firstCharCode = Character.toLowerCase(word.charAt(0));
        Set<Integer> set = getSet(firstCharCode);
        for (int i = 1; i < word.length(); i++) {
            int charCode = Character.toLowerCase(word.charAt(i));
            if (!set.contains(charCode)) {
                return false;
            }
        }
        return true;
    }

    private Set<Integer> getSet(int code) {
        switch (code) {
            case 97: // a
            case 101: // e
            case 111: // o
            case 117: // u
                return new HashSet<>(Arrays.asList(97, 101, 105, 111, 117));
            case 108: // l
            case 116: // t
                return new HashSet<>(Arrays.asList(108, 116));
            default:
                return null;
        }
    }
}


###########################################################
Result:
solution: ['a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3236514522821577

cat_success_cnt: 5

cat_success_rate: 0.12195121951219512

