
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'h', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.']
output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']

Example_2:
input: ['.', 'b', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'd', '.', 'd', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', 'b', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'b', 'b', '.', '.', '.', 'b', '.']
*/

public class Solution {
    public String[] solve(String[] input) {
        if (input == null || input.length < 2) return input;
        int len = input.length, idx = -1;
        for (int i = 0; i < len; ++i) {
            if (!input[i].equals(".")) {
                idx = i;
                break;
            }
        }
        if (idx == -1) return input;
        char c = input[idx].charAt(0);
        while (++idx < len &&!input[idx].equals("."));
        --idx;
        while (idx >= 0 && input[idx].equals(".")) --idx;
        for (int i = idx + 1; i <= idx + (len - idx)/2; ++i) {
            input[i] = "" + c;
        }
        return input;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.28205128205128205

cat_success_cnt: 5

cat_success_rate: 0.29411764705882354

