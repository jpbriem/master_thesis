
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['c', 'c', 'c', 'c', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.']
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'h', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'h', '.']
output: ['.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.']

Example_3:
input: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', 'h', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'h', '.']

Test case:
input: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'h', '.']

###########################################################
Sample Outputs:
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        // left and right are the index of last non-dot character before current position from left and right respectively
        int left = -1, right = len;
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '.' && left >= 0) {
                arr[i] = arr[left];
            } else if (arr[i]!= '.') {
                left = i;
            }
        }
        for (int i = len - 1; i >= 0; --i) {
            if (arr[i] == '.' && right < len) {
                arr[i] = arr[right];
            } else if (arr[i]!= '.') {
                right = i;
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.20207852193995382

cat_success_cnt: 6

cat_success_rate: 0.375

