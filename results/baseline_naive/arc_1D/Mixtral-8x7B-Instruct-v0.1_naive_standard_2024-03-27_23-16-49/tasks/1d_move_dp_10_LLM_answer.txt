
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'a', '.', '.']
output: ['.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'a', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', 'a', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', '.', '.']

Test case:
input: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'a']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        boolean leftToRight = true;
        int force = 0;
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '.' && force!= 0) {
                arr[i] = force > 0? 'R' : 'L';
            } else if (arr[i]!= '.') {
                if (leftToRight) {
                    if (force > 0) {
                        int j = i - 1;
                        while (j >= 0 && arr[j] == 'R') {
                            --j;
                        }
                        if (j >= 0 && arr[j] == 'L') {
                            int k = j + 1;
                            while (k <= i) {
                                arr[k++] = 'R';
                            }
                        }
                    }
                    force = arr[i] == 'L'? -1 : 1;
                } else {
                    if (force < 0) {
                        int j = i - 1;
                        while (j >= 0 && arr[j] == 'L') {
                            --j;
                        }
                        if (j >= 0 && arr[j] == 'R') {
                            int k = j + 1;
                            while (k <= i) {
                                arr[k++] = 'L';
                            }
                        }
                    }
                    force = arr[i] == 'L'? 1 : -1;
                }
                leftToRight = arr[i] == 'L';
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.24055666003976142

cat_success_cnt: 0

cat_success_rate: 0.0

