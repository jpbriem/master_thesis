{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.']\noutput: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.']\n\nExample_2:\ninput: ['.', '.', 'c', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\noutput: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n\nExample_3:\ninput: ['.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.']\noutput: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']\n\nTest case:\ninput: ['.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']\n\n###########################################################\nSample Outputs:\noutput: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.']\n*/\n\npublic class Solution {\n    public String[] freqQuery(String[] queries) {\n        Map<Integer, Integer> countMap = new HashMap<>(); // <value, frequency>\n        Map<Integer, Integer> freqMap = new HashMap<>(); // <frequency, number of values with this frequency>\n        List<String> result = new ArrayList<>();\n\n        for (String query : queries) {\n            int operation = Integer.parseInt(query.split(\" \")[0]);\n            int value = Integer.parseInt(query.split(\" \")[1]);\n\n            if (operation == 1) {\n                int oldFrequency = countMap.getOrDefault(value, 0);\n                countMap.put(value, oldFrequency + 1);\n\n                int newFrequency = oldFrequency + 1;\n                freqMap.put(newFrequency, freqMap.getOrDefault(newFrequency, 0) + 1);\n            } else {\n                int frequency = countMap.get(value);\n                if (frequency > 0) {\n                    freqMap.put(frequency, freqMap.get(frequency) - 1);\n\n                    int newFrequency = frequency - 1;\n                    freqMap.put(newFrequency, freqMap.getOrDefault(newFrequency, 0) + 1);\n\n                    countMap.put(value, frequency - 1);\n                }\n            }\n\n            boolean isExist = false;\n            for (int key : freqMap.keySet()) {\n                if (freqMap.get(key) > 0 && key == countMap.size()) {\n                    isExist = true;\n                    break;\n                }\n            }\n\n            result.add((isExist? \"Yes\" : \"No\"));\n        }\n\n        return result.toArray(new String[result.size()]);\n    }\n}"
        }
    ],
    "idx": 106,
    "task": "1d_fill_14",
    "category": "1d_fill",
    "ys": [
        "1d_fill_14.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.2897196261682243,
        "cat_success_cnt": 3,
        "cat_success_rate": 0.42857142857142855
    },
    "usage_so_far": {
        "completion_tokens": 94662,
        "prompt_tokens": 66258,
        "cost": null
    }
}