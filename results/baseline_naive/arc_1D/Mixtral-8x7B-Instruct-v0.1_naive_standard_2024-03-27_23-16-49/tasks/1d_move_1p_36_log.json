{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']\noutput: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']\n\nExample_2:\ninput: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']\noutput: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']\n\nExample_3:\ninput: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']\noutput: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']\n\nTest case:\ninput: ['b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n\n###########################################################\nSample Outputs:\noutput: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n*/\n\npublic class Solution {\n    public String pushDominoes(String dominoes) {\n        int len = dominoes.length();\n        char[] arr = new char[len];\n        Arrays.fill(arr, '.');\n        for (int i = 0; i < len; ++i) {\n            if (dominoes.charAt(i)!= '.') {\n                arr[i] = dominoes.charAt(i);\n            }\n        }\n        boolean leftToRight = true;\n        int indexL = -1;\n        int indexR = -1;\n        while (true) {\n            // find the first non-dot from left to right\n            if (leftToRight && indexL == -1) {\n                indexL = findFirstNonDotIndex(arr, 0, len, false);\n                if (indexL == -1) break;\n            }\n            // find the first non-dot from right to left\n            if (!leftToRight && indexR == -1) {\n                indexR = findFirstNonDotIndex(arr, len - 1, -1, true);\n                if (indexR == -1) break;\n            }\n            // move forward or backward\n            if (leftToRight) {\n                moveForward(arr, indexL);\n                indexL = findFirstNonDotIndex(arr, indexL + 1, len, false);\n            } else {\n                moveBackward(arr, indexR);\n                indexR = findFirstNonDotIndex(arr, indexR - 1, -1, true);\n            }\n            leftToRight =!leftToRight;\n        }\n        return new String(arr);\n    }\n\n    private void moveForward(char[] arr, int start) {\n        int end = start;\n        while (end < arr.length && arr[end] == '.' && arr[start] == arr[end - 1]) {\n            ++end;\n        }\n        if (end > start + 1) {\n            arr[start + 1] = arr[start];\n        }\n    }\n\n    private void moveBackward(char[] arr, int start) {\n        int end = start;\n        while (end >= 0 && arr[end] == '.' && arr[start] == arr[end + 1]) {\n            --end;\n        }\n        if (end < start - 1) {\n            arr[start - 1] = arr[start];\n        }\n    }\n\n    private int findFirstNonDotIndex(char[] arr, int start, int end, boolean reverse) {\n        if (reverse) {\n            while (start >= 0 && arr[start] == '.') {\n                --start;\n            }\n            return start;\n        } else {\n            while (start < arr.length && arr[start] == '.') {\n                ++start;\n            }\n            return start;\n        }\n    }\n}"
        }
    ],
    "idx": 330,
    "task": "1d_move_1p_36",
    "category": "1d_move_1p",
    "ys": [
        "1d_move_1p_36.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['.', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.2930513595166163,
        "cat_success_cnt": 10,
        "cat_success_rate": 0.3225806451612903
    },
    "usage_so_far": {
        "completion_tokens": 181266,
        "prompt_tokens": 152960,
        "cost": null
    }
}