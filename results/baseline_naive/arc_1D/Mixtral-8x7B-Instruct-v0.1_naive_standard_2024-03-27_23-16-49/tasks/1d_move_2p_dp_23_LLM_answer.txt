
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'h', '.', '.']

Example_2:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'h', '.', '.', '.']

Example_3:
input: ['.', 'd', 'd', 'd', 'd', 'd', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'h', '.', '.']

Test case:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', 'h', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        boolean leftToRight = true;
        for (int i = 0; i < len && arr[i] == '.'; ++i) {}
        if (i < len - 1 && arr[i] == 'L' && arr[i + 1] == '.') {
            arr[i + 1] = 'L';
            leftToRight = false;
        }
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '.') continue;
            if (leftToRight) {
                int j = i + 1;
                while (j < len && arr[j] == '.') ++j;
                if (j < len && arr[j] == 'R') {
                    int k = i + 1;
                    while (k < j) {
                        arr[k++] = 'R';
                    }
                    arr[j] = '.';
                } else if (j < len && arr[j] == 'L') {
                    int k = i + 1;
                    while (k < j) {
                        arr[k++] = 'R';
                    }
                    arr[j] = 'L';
                }
            } else {
                int j = i - 1;
                while (j >= 0 && arr[j] == '.') --j;
                if (j >= 0 && arr[j] == 'L') {
                    int k = i - 1;
                    while (k > j) {
                        arr[k--] = 'L';
                    }
                    arr[j] = '.';
                } else if (j >= 0 && arr[j] == 'R') {
                    int k = i - 1;
                    while (k > j) {
                        arr[k--] = 'L';
                    }
                    arr[j] = 'R';
                }
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'h', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26139088729016785

cat_success_cnt: 0

cat_success_rate: 0.0

