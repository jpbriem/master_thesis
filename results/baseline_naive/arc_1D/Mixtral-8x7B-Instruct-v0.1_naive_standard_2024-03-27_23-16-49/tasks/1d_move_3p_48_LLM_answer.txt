
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String[] dominoes) {
        int n = dominoes.length;
        char[] arr = new char[n];
        for (int i = 0; i < n; ++i) {
            if (dominoes[i].charAt(0)!= '.') {
                arr[i] = dominoes[i].charAt(0);
            } else {
                break;
            }
        }
        for (int i = n - 1; i >= 0 && arr[n - 1] == '.'; --i) {
            if (dominoes[i].charAt(1)!= '.') {
                arr[i] = dominoes[i].charAt(1);
            } else {
                break;
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0; i < n; ++i) {
            if (arr[i] == '.') continue;
            if (arr[i] == 'l' || arr[i] == 'r') {
                flip(arr, i);
            } else {
                extend(arr, i);
            }
        }
        return Arrays.stream(arr).mapToObj(c -> c + "").toArray(String[]::new);
    }

    private void flip(char[] arr, int idx) {
        while (idx > 0 && arr[idx - 1]!= '.' && arr[idx - 1]!= arr[idx]) {
            arr[idx - 1] = arr[idx] == 'l'? 'r' : 'l';
            --idx;
        }
    }

    private void extend(char[] arr, int idx) {
        while (idx + 1 < arr.length && arr[idx + 1]!= '.' && arr[idx]!= arr[idx + 1]) {
            arr[idx + 1] = arr[idx] == 'l'? 'r' : 'l';
            ++idx;
        }
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.242914979757085

cat_success_cnt: 6

cat_success_rate: 0.13636363636363635

