
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.']

Example_2:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', '.', '.', '.']

Example_3:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', '.', '.', '.', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'g', 'g', 'g', '.', '.', '.', '.']
*/

public class Solution {
    public String move(String s) {
        if (s == null || s.length() <= 1) return s;
        char[] arr = s.toCharArray();
        int j = -1;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i]!= '.' && ++j > -1) {
                swap(arr, i, j);
            } else if (arr[i] == '.') {
                while (++j < arr.length && arr[j] == '.') {}
                if (j >= arr.length) break;
                swap(arr, i, j);
            }
        }
        return new String(arr);
    }

    private void swap(char[] arr, int a, int b) {
        char tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'g', 'g', 'g', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2830188679245283

cat_success_cnt: 1

cat_success_rate: 0.047619047619047616

