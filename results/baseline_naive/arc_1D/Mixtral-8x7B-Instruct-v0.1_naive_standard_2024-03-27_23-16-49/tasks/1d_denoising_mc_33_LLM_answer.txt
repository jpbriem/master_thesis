
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', 'd', 'b', 'g', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'h', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'g', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']

Test case:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'h', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String[] replace(String[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (!arr[i].equals(".") &&!arr[i].equals(getMaxChar(arr, i))) {
                arr[i] = ".";
            }
        }
        return arr;
    }

    private char getMaxChar(String[] arr, int index) {
        char maxChar = arr[index].charAt(0);
        int count = 1;
        for (int j = index - 1; j >= 0; j--) {
            if (arr[j].equals(arr[index])) {
                count++;
            } else {
                break;
            }
        }
        for (int k = index + 1; k < arr.length; k++) {
            if (arr[k].equals(arr[index])) {
                count++;
            } else {
                break;
            }
        }
        if (count > 1) {
            maxChar = arr[index].charAt(0);
        }
        return maxChar;
    }
}

// Solution 2:
class Solution {
    public String[] replace(String[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (!arr[i].equals(".")) {
                boolean isMax = true;
                for (int j = i - 1; j >= 0; j--) {
                    if (arr[j].compareTo(arr[i]) > 0) {
                        isMax = false;
                        break;
                    }
                }
                for (int k = i + 1; k < arr.length; k++) {
                    if (arr[k].compareTo(arr[i]) > 0) {
                        isMax = false;
                        break;
                    }
                }
                if (!isMax) {
                    arr[i] = ".";
                }
            }
        }
        return arr;
    }
}


###########################################################
Result:
solution: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.23076923076923078

cat_success_cnt: 14

cat_success_rate: 0.5

