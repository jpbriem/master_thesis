
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'b', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', 'b', '.', '.', '.', 'b', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', 'd', '.', '.', '.', 'd', '.', '.', '.', '.', 'd', '.', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'e', '.', '.', 'e', '.', '.', 'e', '.', '.', 'e', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'e', '.', '.', 'e', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.', '.', '.', 'c', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String removeDuplicateLetters(String s) {
        if (s == null || s.length() <= 1) return s;

        int[] count = new int[26]; // record the number of each char in string s
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }

        Stack<Character> stack = new Stack<>();
        boolean[] visited = new boolean[26]; // mark whether a char has been added to stack or not

        for (int i = 0; i < s.length(); i++) {
            char cur = s.charAt(i);
            count[cur - 'a']--;

            /*
             * If current char is smaller than top element, and it's unvisited, then pop all elements that are larger than current char from stack until we find an unvisited one.
             */
            while (!stack.isEmpty() &&!visited[stack.peek() - 'a'] && stack.peek() > cur) {
                if (count[stack.peek() - 'a'] == 0) break;
                stack.pop();
            }

            if (!visited[cur - 'a']) {
                stack.push(cur);
                visited[cur - 'a'] = true;
            }
        }

        StringBuilder sb = new StringBuilder();
        for (char c : stack) {
            sb.append(c);
        }

        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.037037037037037035

cat_success_cnt: 1

cat_success_rate: 0.037037037037037035

