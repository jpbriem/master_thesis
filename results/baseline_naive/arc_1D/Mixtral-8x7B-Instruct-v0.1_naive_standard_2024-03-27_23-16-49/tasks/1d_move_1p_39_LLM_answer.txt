
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

// Solution 1:
/*
function moveFloor(arr) {
    let left = -1;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === ".") {
            left++;
            continue;
        } else if (left!== -1 && arr[left] === ".") {
            arr[left] = arr[i];
            arr[i] = ".";
            left--;
        }
    }
    return arr;
}
*/

// Solution 2:
const moveFloor = arr => {
    const len = arr.length;
    let index = -1;
    while (index++ < len - 1) {
        if (arr[index] === ".") continue;
        if (arr[--index] === ".") {
            [arr[index], arr[index + 1]] = [arr[index + 1], arr[index]];
        }
    }
    return arr;
};

console.log(moveFloor(['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.'])); // ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']
console.log(moveFloor(['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.'])); // ['.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']
console.log(moveFloor(['f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.'])); // ['.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']
console.log(moveFloor(['.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.'])); // ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2904191616766467

cat_success_cnt: 10

cat_success_rate: 0.29411764705882354

