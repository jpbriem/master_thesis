
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', 'd', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.']

Example_2:
input: ['.', 'f', '.', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', 'h', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', '.']

Test case:
input: ['.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] fill(String[] board) {
        if (board == null || board.length < 3 || board[0].length() < 3) return board;

        int m = board.length, n = board[0].length();
        boolean hasFilled = false;

        // check horizontal lines
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j + 2 < n; ++j) {
                char c = board[i].charAt(j);
                if (c!= '.' && board[i].charAt(j+1) == '.' && board[i].charAt(j+2) == c) {
                    for (int k = j; k <= j+2; ++k) board[i].setCharAt(k, c);
                    hasFilled = true;
                }
            }
        }

        // check vertical lines
        for (int j = 0; j < n; ++j) {
            for (int i = 0; i + 2 < m; ++i) {
                char c = board[i].charAt(j);
                if (c!= '.' && board[i+1].charAt(j) == '.' && board[i+2].charAt(j) == c) {
                    for (int k = i; k <= i+2; ++k) board[k].setCharAt(j, c);
                    hasFilled = true;
                }
            }
        }

        // check corners
        for (int i = 0; i + 2 < m; ++i) {
            for (int j = 0; j + 2 < n; ++j) {
                char c = board[i].charAt(j);
                if (c!= '.' && board[i+1].charAt(j+1) == '.' && board[i+1].charAt(j+1) == c) {
                    board[i].setCharAt(j, c);
                    board[i+1].setCharAt(j+1, c);
                    hasFilled = true;
                }
            }
        }

        if (!hasFilled) return board;

        // recheck horizontal and vertical lines
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j + 2 < n; ++j) {
                char c = board[i].charAt(j);
                if (c!= '.' && board[i].charAt(j+1) == '.' && board[i].charAt(j+2) == c) {
                    for (int k = j; k <= j+2; ++k) board[i].setCharAt(k, c);
                }
            }
        }

        for (int j = 0; j < n; ++j) {
            for (int i = 0; i + 2 < m; ++i) {
                char c = board[i].charAt(j);
                if (c!= '.' && board[i+1].charAt(j) == '.' && board[i+2].charAt(j) == c) {
                    for (int k = i; k <= i+2; ++k) board[k].setCharAt(j, c);
                }
            }
        }

        return board;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.273972602739726

cat_success_cnt: 12

cat_success_rate: 0.2608695652173913

