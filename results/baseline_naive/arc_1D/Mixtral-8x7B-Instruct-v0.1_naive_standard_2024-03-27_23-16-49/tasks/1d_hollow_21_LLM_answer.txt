
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', 'c', '.']

Example_3:
input: ['.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] solution(String[] strArr) {
        int len = strArr.length;
        for (int i = 0; i < len - 1; i++) {
            if (strArr[i].equals(".") &&!strArr[i + 1].equals(".")) {
                // 왼쪽에.이면서, 오른쪽에.가 아닌 경우
                if (!isLeftDot(strArr, i)) {
                    swap(strArr, i, findFirstEmptyIndex(strArr));
                }
            } else if (strArr[i].equals(".") && strArr[i + 1].equals(".")) {
                continue;
            } else if (!strArr[i].equals(".") && strArr[i + 1].equals(".")) {
                // 왼쪽에.가 아니고, 오른쪽에.인 경우
                if (isRightDot(strArr, i)) {
                    swap(strArr, i, findLastEmptyIndex(strArr));
                }
            }
        }
        return strArr;
    }

    private boolean isLeftDot(String[] arr, int index) {
        while (index > 0 && arr[--index].equals(".")) {}
        return arr[index].equals(".");
    }

    private boolean isRightDot(String[] arr, int index) {
        while (index < arr.length - 1 && arr[++index].equals(".")) {}
        return arr[index].equals(".");
    }

    private void swap(String[] arr, int a, int b) {
        String temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    private int findFirstEmptyIndex(String[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].equals(".")) {
                return i;
            }
        }
        return -1;
    }

    private int findLastEmptyIndex(String[] arr) {
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i].equals(".")) {
                return i;
            }
        }
        return -1;
    }
}


###########################################################
Result:
solution: ['g', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3488372093023256

cat_success_cnt: 2

cat_success_rate: 0.13333333333333333

