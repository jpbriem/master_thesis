
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'a', 'f', 'f', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'a', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'c', 'g', 'g', 'g', 'g', '.', '.']
output: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'c', '.', '.']

Example_3:
input: ['e', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['f', 'f', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'd', 'e', 'e', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'e', 'e', 'd', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public void moveZeroes(int[] nums) {
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i]!= 0) {
                swap(nums, index++, i);
            }
        }
    }

    private void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}

// Solution 2:
class Solution {
    public void moveZeroes(int[] nums) {
        int insertPos = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i]!= 0) {
                nums[insertPos++] = nums[i];
            }
        }
        while (insertPos < nums.length) {
            nums[insertPos++] = 0;
        }
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'e', 'e', 'd', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.3148148148148148

cat_success_cnt: 9

cat_success_rate: 0.75

