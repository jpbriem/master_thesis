
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'i', 'i', 'i', '.', '.', '.', '.', 'i', '.', '.', '.', 'i', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', '.', 'i', 'i', 'i', '.', '.', '.', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'i', 'i', 'i', '.', '.', '.', 'i', '.', '.', '.', 'i', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', '.', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'e', 'e', 'e', '.', '.', 'e', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String longestDiverseString(int a, int b, int c) {
        StringBuilder sb = new StringBuilder();
        while (a > 0 || b > 0 || c > 0) {
            if (b > 0 && c > 0 && (a == 0 || Math.min(b, c) >= a)) {
                // choose i
                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == 'i') {
                    sb.append('i');
                    --c;
                } else {
                    sb.append("ii");
                    --b;
                    --c;
                }
            } else if (a > 0 && c > 0 && (b == 0 || Math.min(a, c) >= b)) {
                // choose e
                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == 'e') {
                    sb.append('e');
                    --a;
                } else {
                    sb.append("ee");
                    --a;
                    --c;
                }
            } else if (a > 0 && b > 0 && (c == 0 || Math.min(a, b) >= c)) {
                // choose g
                if (sb.length() > 0 && sb.charAt(sb.length() - 1) == 'g') {
                    sb.append('g');
                    --b;
                } else {
                    sb.append("gg");
                    --a;
                    --b;
                }
            } else if (b > 0) {
                // choose i
                sb.append('i');
                --b;
            } else if (a > 0) {
                // choose e
                sb.append('e');
                --a;
            } else if (c > 0) {
                // choose g
                sb.append('g');
                --c;
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20556414219474498

cat_success_cnt: 7

cat_success_rate: 0.14893617021276595

