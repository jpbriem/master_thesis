
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'g', '.', 'g', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'f', '.', 'f', '.']
output: ['.', '.', '.', '.', 'f', 'f', 'f', '.']

Example_3:
input: ['.', '.', '.', 'g', '.', '.', 'g', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', '.']

Test case:
input: ['.', 'a', '.', '.', 'a', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', '.']
*/

public class Solution {
    public String[] fill(String[] board) {
        if (board == null || board.length == 0) return new String[0];
        int m = board.length, n = board[0].length();
        for (int i = 0; i < m; i++) {
            if (i % 2 == 0 && board[i].charAt(0)!= 'x') {
                dfs(board, i, 0);
            } else if (i % 2 == 1 && board[i].charAt(n - 1)!= 'x') {
                dfs(board, i, n - 1);
            }
        }
        for (int j = 0; j < n; j++) {
            if (j % 2 == 0 && board[0].charAt(j)!= 'x') {
                dfs(board, 0, j);
            } else if (j % 2 == 1 && board[m - 1].charAt(j)!= 'x') {
                dfs(board, m - 1, j);
            }
        }
        return board;
    }

    private void dfs(String[] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length() || board[x].charAt(y) == 'x') {
            return;
        }
        char c = board[x].charAt(y);
        board[x] = board[x].substring(0, y) + "x" + board[x].substring(y + 1);
        if (x > 0) board[x - 1] = board[x - 1].substring(0, y) + c + board[x - 1].substring(y + 1);
        if (x + 1 < board.length) board[x + 1] = board[x + 1].substring(0, y) + c + board[x + 1].substring(y + 1);
        if (y > 0) board[x] = board[x].substring(0, y - 1) + c + board[x].substring(y);
        if (y + 1 < board[0].length()) board[x] = board[x].substring(0, y + 1) + c + board[x].substring(y + 2);
        dfs(board, x - 1, y);
        dfs(board, x + 1, y);
        dfs(board, x, y - 1);
        dfs(board, x, y + 1);
    }
}


###########################################################
Result:
solution: ['.', 'a', 'a', 'a', 'a', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2773109243697479

cat_success_cnt: 5

cat_success_rate: 0.2631578947368421

