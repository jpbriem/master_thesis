
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']
output: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']

Example_2:
input: ['.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.']

Example_3:
input: ['b', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

Test case:
input: ['g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g']
*/

public class Solution {
    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            if (isValid(words[i])) {
                result.add(words[i]);
            }
        }
        return result.toArray(new String[result.size()]);
    }

    private boolean isValid(String word) {
        int firstRow = getValue('q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p');
        int secondRow = getValue('a','s', 'd', 'f', 'g', 'h', 'j', 'k', 'l');
        int thirdRow = getValue('z', 'x', 'c', 'v', 'b', 'n','m');

        int row = -1;
        char c = word.charAt(0);
        if (Character.isLowerCase(c)) {
            c = Character.toUpperCase(c);
        }
        switch (c) {
            case 'Q':
            case 'W':
            case 'E':
            case 'R':
            case 'T':
            case 'Y':
            case 'U':
            case 'I':
            case 'O':
            case 'P':
                row = firstRow;
                break;
            case 'A':
            case 'S':
            case 'D':
            case 'F':
            case 'G':
            case 'H':
            case 'J':
            case 'K':
            case 'L':
                row = secondRow;
                break;
            case 'Z':
            case 'X':
            case 'C':
            case 'V':
            case 'B':
            case 'N':
            case 'M':
                row = thirdRow;
                break;
            default:
                return false;
        }

        for (int j = 1; j < word.length(); j++) {
            c = word.charAt(j);
            if (Character.isLowerCase(c)) {
                c = Character.toUpperCase(c);
            }
            if ((row & getValue(c)) == 0) {
                return false;
            }
        }
        return true;
    }

    private int getValue(char... chars) {
        int value = 0;
        for (char c : chars) {
            value |= (1 << (c - 'A'));
        }
        return value;
    }
}


###########################################################
Result:
solution: ['g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2713178294573643

cat_success_cnt: 7

cat_success_rate: 0.2413793103448276

