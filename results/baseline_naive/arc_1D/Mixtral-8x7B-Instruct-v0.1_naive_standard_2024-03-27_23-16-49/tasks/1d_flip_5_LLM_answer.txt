
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'd', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.') {
                arr[i] = '0';
            } else {
                arr[i] = dominoes.charAt(i);
            }
        }

        // left to right
        for (int i = 0, j = 0; i < len && j < len; ) {
            while (j < len && arr[j]!= '.' && arr[j] == arr[i]) {
                ++j;
            }
            if (j >= len || arr[j] == '.') break;
            int k = j - 1;
            while (k > i) {
                arr[k--] = arr[i];
            }
            arr[i++] = arr[j++];
        }

        // right to left
        for (int i = len - 1, j = len - 1; i >= 0 && j >= 0; ) {
            while (j >= 0 && arr[j]!= '.' && arr[j] == arr[i]) {
                --j;
            }
            if (j < 0 || arr[j] == '.') break;
            int k = j + 1;
            while (k < i) {
                arr[k++] = arr[i];
            }
            arr[i--] = arr[j--];
        }

        return Arrays.toString(arr).replaceAll("[\\[\\],]", "").split(", ");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3520408163265306

cat_success_cnt: 27

cat_success_rate: 0.5869565217391305

