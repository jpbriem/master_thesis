
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', '.', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', '.', '.']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.']

Test case:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'c', 'c', 'c', 'c']
*/

public class Solution {
    public String[] move(String[] board) {
        // Write your solution here
        if (board == null || board.length < 2) return board;
        int len = board.length, idx = -1;
        for (int i = 0; i < len; i++) {
            if (!board[i].equals(".")) {
                idx++;
                board[idx] = board[i];
            }
        }
        while (idx + 1 < len) {
            board[++idx] = ".";
        }
        return board;
    }
}


###########################################################
Result:
solution: ['.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2731829573934837

cat_success_cnt: 5

cat_success_rate: 0.10204081632653061

