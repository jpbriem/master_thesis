
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Test case:
input: ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String[] pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == 'R') {
                while (i + 1 < len && dominoes.charAt(i + 1)!= 'L') {
                    ++i;
                }
                if (i + 1 < len) {
                    --i;
                }
            } else if (dominoes.charAt(i) == 'L') {
                int j = i - 1;
                while (j >= 0 && dominoes.charAt(j)!= 'R') {
                    --j;
                }
                if (j >= 0) {
                    --j;
                }
                for (int k = i; k > j; --k) {
                    arr[k] = 'L';
                }
                i = j;
            }
        }
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '\u0000') {
                arr[i] = dominoes.charAt(i);
            }
        }
        return Arrays.copyOfRange(arr, 0, len);
    }
}

// Solution 2:
class Solution {
    public String[] pushDominoes(String dominoes) {
        int len = dominoes.length();
        StringBuilder sb = new StringBuilder();
        int left = 0;
        while (left < len && dominoes.charAt(left) == '.') {
            ++left;
        }
        for (int right = left; right < len; ++right) {
            if (dominoes.charAt(right) == 'R') {
                sb.append('R');
                while (right + 1 < len && dominoes.charAt(right + 1) == '.' ) {
                    ++right;
                }
                if (right + 1 < len && dominoes.charAt(right + 1) == 'L') {
                    int mid = right + 1;
                    while (mid + 1 < len && dominoes.charAt(mid + 1)!= 'R') {
                        ++mid;
                    }
                    if (mid + 1 < len) {
                        right += 2;
                    } else {
                        right = mid;
                    }
                }
            } else if (dominoes.charAt(right) == 'L' || right == left) {
                sb.append('.');
            } else { // dominoes.charAt(right) == '.'
                int mid = right;
                while (mid + 1 < len && dominoes.charAt(mid + 1)!= 'R') {
                    ++mid;
                }
                if (mid + 1 < len) {
                    sb.append("L".repeat(mid - right + 1));
                    right = mid;
                } else {
                    sb.append('.');
                }
            }
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2922077922077922

cat_success_cnt: 3

cat_success_rate: 0.375

