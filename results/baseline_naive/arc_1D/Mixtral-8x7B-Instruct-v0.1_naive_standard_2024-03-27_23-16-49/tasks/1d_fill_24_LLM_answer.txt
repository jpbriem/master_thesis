
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'f', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.', 'f', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', 'f', 'f', '.', '.', '.', '.', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] fill(String[] input) {
        if (input == null || input.length < 2) return input;

        int len = input.length, idx = -1;
        for (int i = 0; i < len; ++i) {
            if (input[i].equals(".")) continue;
            else if (!input[i].equals("f")) throw new IllegalArgumentException();
            else idx = i;
        }

        // no f in the array
        if (idx == -1) return input;

        while (idx >= 0 && idx + 1 < len && input[idx].equals("f") && input[idx+1].equals(".")) {
            input[++idx] = "f";
        }

        idx = -1;
        for (int i = 0; i < len; ++i) {
            if (input[i].equals(".")) continue;
            else if (!input[i].equals("f")) throw new IllegalArgumentException();
            else idx = i;
        }

        // no f in the array
        if (idx == -1) return input;

        while (idx >= 0 && idx + 1 < len && input[idx].equals("f") && input[idx-1].equals(".")) {
            input[--idx] = "f";
        }

        return input;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2796610169491525

cat_success_cnt: 5

cat_success_rate: 0.2777777777777778

