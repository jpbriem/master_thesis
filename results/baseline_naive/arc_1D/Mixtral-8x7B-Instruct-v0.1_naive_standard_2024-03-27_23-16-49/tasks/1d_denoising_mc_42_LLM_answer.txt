
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'i', 'i', 'i', 'b', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'd', 'i', 'i', 'i', 'd', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'b', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String reverseOnlyLetters(String S) {
        char[] arr = S.toCharArray();
        int i = 0, j = arr.length - 1;
        while (i < j) {
            if (!Character.isAlphabetic(arr[i])) {
                i++;
            } else if (!Character.isAlphabetic(arr[j])) {
                j--;
            } else {
                swap(arr, i++, j--);
            }
        }
        return new String(arr);
    }

    private void swap(char[] arr, int i, int j) {
        char tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}

// Solution 2:
class Solution {
    public String reverseOnlyLetters(String S) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < S.length(); ++i) {
            if (Character.isLetter(S.charAt(i))) {
                sb.append(S.charAt(i));
            }
        }
        for (int i = 0; i < S.length(); ++i) {
            if (!Character.isLetter(S.charAt(i))) {
                sb.append(S.charAt(i));
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.26136363636363635

cat_success_cnt: 19

cat_success_rate: 0.5

