
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.']

Example_3:
input: ['.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (isValidWord(word)) {
                result.add(word);
            }
        }
        return result.toArray(new String[result.size()]);
    }

    private boolean isValidWord(String word) {
        int row = -1;
        char firstChar = word.charAt(0);
        if (firstChar >= 'A' && firstChar <= 'Z') {
            firstChar += 32;
        }
        switch (firstChar) {
            case 'a':
            case 'e':
            case 'i':
            case 'o':
            case 'u':
                row = 0;
                break;
            case 'p':
            case 'y':
                row = 1;
                break;
            default:
                return false;
        }
        for (int i = 1; i < word.length(); i++) {
            char c = word.charAt(i);
            if (c >= 'A' && c <= 'Z') {
                c += 32;
            }
            if ((row == 0 &&!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'))
                    || (row == 1 &&!(c == 'p' || c == 'y'))) {
                return false;
            }
        }
        return true;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3377777777777778

cat_success_cnt: 3

cat_success_rate: 0.12

