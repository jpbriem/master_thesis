
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.']

Example_2:
input: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', 'a', 'a', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', 'e', '.', '.']

Test case:
input: ['.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'h', 'h', 'h', 'h', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'e', '.', '.']
*/

public class Solution {
    public String replace(String input) {
        if (input == null || input.length() <= 0) return "";
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < input.length()) {
            char c = input.charAt(i);
            if (c!= 'a') {
                sb.append(c);
            } else {
                // find the next non-'a' character
                int j = i + 1;
                for (; j < input.length(); j++) {
                    if (input.charAt(j)!= 'a') break;
                }
                // append h or e to string builder based on whether it is a head or end of word
                if (j - i > 1 && j < input.length() - 1) {
                    sb.append("h");
                } else if (j - i == 1) {
                    sb.append("h");
                } else {
                    sb.append("e");
                }
                i = j;
            }
            i++;
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', 'h', 'h', 'h', 'h', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'e', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.19785458879618595

cat_success_cnt: 10

cat_success_rate: 0.2564102564102564

