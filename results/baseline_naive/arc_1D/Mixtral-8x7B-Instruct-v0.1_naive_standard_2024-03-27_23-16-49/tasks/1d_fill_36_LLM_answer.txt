
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'd', '.', '.', '.', 'd', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'h', '.', '.', '.', '.', 'h', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', '.', '.']

Test case:
input: ['.', '.', 'b', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] fill(String[] board) {
        if (board == null || board.length < 3 || board[0].length()!= board.length) return board;
        int n = board.length, m = board[0].length();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (board[i][j] == '.') continue;
                // up
                if (i > 0 && board[i - 1][j] == '.') {
                    int k = i;
                    while (k > 0 && board[k - 1][j] == '.') --k;
                    if (board[k][j] == board[i][j]) continue;
                    else {
                        for (int p = i; p > k; --p) board[p][j] = board[i][j];
                    }
                }
                // down
                if (i + 1 < n && board[i + 1][j] == '.') {
                    int k = i;
                    while (k + 1 < n && board[k + 1][j] == '.') ++k;
                    if (board[k][j] == board[i][j]) continue;
                    else {
                        for (int p = i; p < k; ++p) board[p][j] = board[i][j];
                    }
                }
                // left
                if (j > 0 && board[i][j - 1] == '.') {
                    int k = j;
                    while (k > 0 && board[i][k - 1] == '.') --k;
                    if (board[i][k] == board[i][j]) continue;
                    else {
                        for (int p = j; p > k; --p) board[i][p] = board[i][j];
                    }
                }
                // right
                if (j + 1 < m && board[i][j + 1] == '.') {
                    int k = j;
                    while (k + 1 < m && board[i][k + 1] == '.') ++k;
                    if (board[i][k] == board[i][j]) continue;
                    else {
                        for (int p = j; p < k; ++p) board[i][p] = board[i][j];
                    }
                }
            }
        }
        return board;
    }
}


###########################################################
Result:
solution: ['.', '.', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26717557251908397

cat_success_cnt: 7

cat_success_rate: 0.22580645161290322

