
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'd', '.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', '.', '.', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'i', '.', '.', 'g', 'g', 'g', '.', '.', 'e', 'e', '.', '.', 'e', 'e', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', '.', 'd', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', 'g', 'g', '.', '.', '.', 'e', 'e', '.', 'i', '.', 'g', 'g', 'g', '.', '.', '.', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'd', 'd', '.', '.', '.', 'd', '.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', 'd', 'd', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'e', 'e', '.', '.', '.', 'i', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', 'e', 'e', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', '.', 'd', '.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'e', 'e', 'g', '.', '.', '.', 'g', 'g', '.', 'i', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', 'e', 'e', '.', '.', '.']
*/

public class Solution {
    public String[] solution(String[] input) {
        for (int i = 0; i < input.length; i++) {
            if ("d".equals(input[i])) {
                switch (getCount("d", input, i)) {
                    case 1:
                        input[i] = "e";
                        break;
                    case 2:
                        input[i] = "g";
                        break;
                    default:
                        input[i] = "i";
                        break;
                }
            } else if (".".equals(input[i])) {
                continue;
            } else {
                throw new IllegalArgumentException();
            }
        }
        return input;
    }

    private int getCount(String target, String[] arr, int index) {
        int count = 0;
        while (index < arr.length && target.equals(arr[index])) {
            count++;
            index++;
        }
        return count;
    }
}


###########################################################
Result:
solution: ['.', '.', 'g', 'g', 'g', '.', '.', '.', 'e', 'e', '.', 'i', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.19642857142857142

cat_success_cnt: 0

cat_success_rate: 0.0

