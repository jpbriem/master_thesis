
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'c', 'c', 'c', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', '.']

Example_3:
input: ['c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', '.', 'c', 'c', 'c', '.']

Test case:
input: ['d', 'd', 'd', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'd', 'd', 'd', '.']
*/

public class Solution {
    public String[] moveZeros(String[] arr) {
        int len = arr.length;
        if (len == 0 || len == 1) return arr;

        // two pointers, one for zero and another for non-zero
        int pZero = -1;
        int pNonZero = 0;

        while (pNonZero < len) {
            if (arr[pNonZero].equals(".")) {
                pNonZero++;
            } else {
                swap(arr, ++pZero, pNonZero++);
            }
        }

        return arr;
    }

    private void swap(String[] arr, int i, int j) {
        String temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'd', 'd', 'd', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2429718875502008

cat_success_cnt: 7

cat_success_rate: 0.14583333333333334

