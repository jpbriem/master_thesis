
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.']

Test case:
input: ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.']
*/

// Solution 1:
/*
function moveElementToEnd(array, toMove) {
    let left = 0;
    let right = array.length - 1;

    while (left < right) {
        if (array[right] === toMove && array[left]!== toMove) {
            // swap elements at indexes left and right
            const temp = array[left];
            array[left] = array[right];
            array[right] = temp;
            left++;
            right--;
        } else if (array[right]!== toMove) {
            right--;
        } else if (array[left] === toMove) {
            left++;
        }
    }

    return array;
}
*/

// Solution 2:
const moveElementToEnd = (array, toMove) => {
    let writeIdx = array.length - 1;

    for (let i = array.length - 1; i >= 0; i--) {
        if (array[i]!== toMove) {
            array[writeIdx] = array[i];
            writeIdx--;
        }
    }

    for (let j = writeIdx; j >= 0; j--) {
        array[j] = toMove;
    }

    return array;
};

console.log(moveElementToEnd(['a', 'a', 'a', 'a', '.', '.', '.', '.', '.'], '.'));
console.log(moveElementToEnd(['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], '.'));
console.log(moveElementToEnd(['.', '.', '.', 'e', 'e', 'e', 'e', '.'], '.'));
console.log(moveElementToEnd(['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], '.'));


###########################################################
Result:
solution: ['.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.29329608938547486

cat_success_cnt: 1

cat_success_rate: 0.125

