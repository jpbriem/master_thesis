
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.']
output: ['.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.']

Example_3:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.']
output: ['.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.']

Test case:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']
*/

public class Solution {
    public String[] solve(String[] board) {
        if (board == null || board.length < 3 || board[0].length() < 3) return board;
        int m = board.length, n = board[0].length();
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; ++i) {
            if (board[i].charAt(0) == 'O' &&!visited[i][0]) dfs(board, i, 0, visited);
            if (board[i].charAt(n - 1) == 'O' &&!visited[i][n - 1]) dfs(board, i, n - 1, visited);
        }
        for (int j = 0; j < n; ++j) {
            if (board[0].charAt(j) == 'O' &&!visited[0][j]) dfs(board, 0, j, visited);
            if (board[m - 1].charAt(j) == 'O' &&!visited[m - 1][j]) dfs(board, m - 1, j, visited);
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!visited[i][j] && board[i].charAt(j) == 'O') board[i] = board[i].substring(0, j) + "X" + board[i].substring(j + 1);
            }
        }
        return board;
    }

    private void dfs(String[] board, int x, int y, boolean[][] visited) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length()) return;
        if (visited[x][y] || board[x].charAt(y)!= 'O') return;
        visited[x][y] = true;
        dfs(board, x + 1, y, visited);
        dfs(board, x - 1, y, visited);
        dfs(board, x, y + 1, visited);
        dfs(board, x, y - 1, visited);
    }
}


###########################################################
Result:
solution: ['.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.33191489361702126

cat_success_cnt: 5

cat_success_rate: 0.14285714285714285

