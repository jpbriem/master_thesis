
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', 'f', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'f', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', 'f']
output: ['.', '.', '.', '.', '.', 'h', 'h', 'h', 'f']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', 'f']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'f']

Test case:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', '.', 'f']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'f']
*/

// Solution 1:
/*
function moveFloor(arr) {
    let left = arr.indexOf('.');
    let right = arr.lastIndexOf('.');
    if (left === -1 || right === -1) return arr;
    for (let i = left + 1, j = right - 1; i < j; i++, j--) {
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}
*/

// Solution 2:
const moveFloor = arr => {
    const indexes = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === '.') indexes.push(i);
    }
    if (indexes.length <= 1) return arr;
    const left = indexes[0];
    const right = indexes[indexes.length - 1];
    for (let i = left + 1, j = right - 1; i < j; i++, j--) {
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
};

console.log(moveFloor(['.', 'b', 'b', 'b', 'b', '.', '.', 'f', '.'])) // ['.', '.', '.', 'b', 'b', 'b', 'b', 'f', '.'];
console.log(moveFloor(['.', '.', 'h', 'h', 'h', '.', '.', '.', 'f'])) // ['.', '.', '.', '.', '.', 'h', 'h', 'h', 'f'];
console.log(moveFloor(['h', 'h', 'h', 'h', 'h', '.', '.', '.', 'f'])) // ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'f'];
console.log(moveFloor(['c', 'c', 'c', 'c', 'c', '.', '.', '.', 'f'])) // ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'f'];


###########################################################
Result:
solution: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'f']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.22586520947176686

cat_success_cnt: 3

cat_success_rate: 0.061224489795918366

