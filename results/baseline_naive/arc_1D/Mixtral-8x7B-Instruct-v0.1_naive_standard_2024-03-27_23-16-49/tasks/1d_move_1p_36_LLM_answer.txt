
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

Example_3:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']
output: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Test case:
input: ['b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        boolean leftToRight = true;
        int indexL = -1;
        int indexR = -1;
        while (true) {
            // find the first non-dot from left to right
            if (leftToRight && indexL == -1) {
                indexL = findFirstNonDotIndex(arr, 0, len, false);
                if (indexL == -1) break;
            }
            // find the first non-dot from right to left
            if (!leftToRight && indexR == -1) {
                indexR = findFirstNonDotIndex(arr, len - 1, -1, true);
                if (indexR == -1) break;
            }
            // move forward or backward
            if (leftToRight) {
                moveForward(arr, indexL);
                indexL = findFirstNonDotIndex(arr, indexL + 1, len, false);
            } else {
                moveBackward(arr, indexR);
                indexR = findFirstNonDotIndex(arr, indexR - 1, -1, true);
            }
            leftToRight =!leftToRight;
        }
        return new String(arr);
    }

    private void moveForward(char[] arr, int start) {
        int end = start;
        while (end < arr.length && arr[end] == '.' && arr[start] == arr[end - 1]) {
            ++end;
        }
        if (end > start + 1) {
            arr[start + 1] = arr[start];
        }
    }

    private void moveBackward(char[] arr, int start) {
        int end = start;
        while (end >= 0 && arr[end] == '.' && arr[start] == arr[end + 1]) {
            --end;
        }
        if (end < start - 1) {
            arr[start - 1] = arr[start];
        }
    }

    private int findFirstNonDotIndex(char[] arr, int start, int end, boolean reverse) {
        if (reverse) {
            while (start >= 0 && arr[start] == '.') {
                --start;
            }
            return start;
        } else {
            while (start < arr.length && arr[start] == '.') {
                ++start;
            }
            return start;
        }
    }
}


###########################################################
Result:
solution: ['.', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2930513595166163

cat_success_cnt: 10

cat_success_rate: 0.3225806451612903

