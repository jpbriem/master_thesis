
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.']

Example_2:
input: ['g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g']
*/

public class Solution {
    public String[] pushDominoes(String[] dominoes) {
        int n = dominoes.length;
        char[] arr = new char[n];
        for (int i = 0; i < n; ++i) {
            if (dominoes[i].charAt(0)!= '.') {
                arr[i] = dominoes[i].charAt(0);
            } else {
                break;
            }
        }
        for (int i = n - 1; i >= 0 && arr[n - 1] == '.'; --i) {
            if (dominoes[i].charAt(1)!= '.') {
                arr[i] = dominoes[i].charAt(1);
            } else {
                break;
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0, j = 0; i < n; ++i) {
            while (j < n && arr[j] == '.') {
                ++j;
            }
            if (j == n || arr[j] == '.' || arr[i] == '.' || arr[i]!= arr[j]) {
                continue;
            }
            int k = i + 1;
            while (k < j) {
                dominoes[k++] = arr[i];
            }
            i = j++;
        }
        return dominoes;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3054545454545455

cat_success_cnt: 3

cat_success_rate: 0.12

