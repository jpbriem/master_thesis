
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', '.', '.', '.', 'a', '.', '.', '.', '.', 'a', '.', '.', '.', 'a', '.', '.', '.', '.', 'a', '.', '.', '.', 'a', '.', '.', '.', '.']
output: ['a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

Example_2:
input: ['e', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', 'e', '.', '.', '.', '.']
output: ['e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Example_3:
input: ['.', 'e', '.', '.', 'e', '.', '.', '.', '.', '.', 'e', '.', '.', 'e', '.', '.', '.', '.', '.', 'e', '.', '.', 'e', '.', '.', '.', '.']
output: ['.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', 'g', '.', '.', '.', 'g', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', '.']
*/

// Solution 1:
class Solution {
    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (isValid(word)) {
                result.add(word);
            }
        }
        return result.toArray(new String[0]);
    }

    private boolean isValid(String s) {
        int row = -1;
        for (char c : s.toLowerCase().toCharArray()) {
            switch (c) {
                case 'q':
                    if (row!= 1) return false;
                    break;
                case 'w':
                    if (row!= 1) return false;
                    break;
                case 'e':
                    if (row!= 1) return false;
                    break;
                case 'r':
                    if (row!= 1) return false;
                    break;
                case 't':
                    if (row!= 1) return false;
                    break;
                case 'y':
                    if (row!= 1) return false;
                    break;
                case 'u':
                    if (row!= 4) return false;
                    break;
                case 'i':
                    if (row!= 4) return false;
                    break;
                case 'o':
                    if (row!= 4) return false;
                    break;
                case 'p':
                    if (row!= 4) return false;
                    break;
                case 'a':
                    if (row!= 0) return false;
                    break;
                case's':
                    if (row!= 0) return false;
                    break;
                case 'd':
                    if (row!= 0) return false;
                    break;
                case 'f':
                    if (row!= 0) return false;
                    break;
                case 'g':
                    if (row!= 0) return false;
                    break;
                case 'h':
                    if (row!= 5) return false;
                    break;
                case 'j':
                    if (row!= 5) return false;
                    break;
                case 'k':
                    if (row!= 5) return false;
                    break;
                case 'l':
                    if (row!= 5) return false;
                    break;
                case 'z':
                    if (row!= 2) return false;
                    break;
                case 'x':
                    if (row!= 2) return false;
                    break;
                case 'c':
                    if (row!= 2) return false;
                    break;
                case 'v':
                    if (row!= 2) return false;
                    break;
                case 'b':
                    if (row!= 3) return false;
                    break;
                case 'n':
                    if (row!= 3) return false;
                    break;
                case'm':
                    if (row!= 3) return false;
                    break;
                default:
                    return false;
            }
            row = (row + 1) % 6;
        }
        return true;
    }
}

// Solution 2:
class Solution {
    public String[] findWords(String[] words) {
        List<String> list = new ArrayList<>();
        Set<Character> set1 = new HashSet<>(Arrays.asList('q','w','e','r','t','y'));
        Set<Character> set2 = new HashSet<>(Arrays.asList('u','i','o','p'));
        Set<Character> set3 = new HashSet<>(Arrays.asList('a','s','d','f'));
        Set<Character> set4 = new HashSet<>(Arrays.asList('g','h','j','k'));
        Set<Character> set5 = new HashSet<>(Arrays.asList('z','x','c','v'));
        Set<Character> set6 = new HashSet<>(Arrays.asList('b','n','m'));
        for (String str : words) {
            char first = Character.toLowerCase(str.charAt(0));
            if (set1.contains(first)) {
                for (int i = 1; i < str.length(); i++) {
                    if (!set1.contains(Character.toLowerCase(str.charAt(i)))) {
                        break;
                    }
                    if (i == str.length()-1) {
                        list.add(str);
                    }
                }
            } else if (set2.contains(first)) {
                for (int i = 1; i < str.length(); i++) {
                    if (!set2.contains(Character.toLowerCase(str.charAt(i)))) {
                        break;
                    }
                    if (i == str.length()-1) {
                        list.add(str);
                    }
                }
            } else if (set3.contains(first)) {
                for (int i = 1; i < str.length(); i++) {
                    if (!set3.contains(Character.toLowerCase(str.charAt(i)))) {
                        break;
                    }
                    if (i == str.length()-1) {
                        list.add(str);
                    }
                }
            } else if (set4.contains(first)) {
                for (int i = 1; i < str.length(); i++) {
                    if (!set4.contains(Character.toLowerCase(str.charAt(i)))) {
                        break;
                    }
                    if (i == str.length()-1) {
                        list.add(str);
                    }
                }
            } else if (set5.contains(first)) {
                for (int i = 1; i < str.length(); i++) {
                    if (!set5.contains(Character.toLowerCase(str.charAt(i)))) {
                        break;
                    }
                    if (i == str.length()-1) {
                        list.add(str);
                    }
                }
            } else if (set6.contains(first)) {
                for (int i = 1; i < str.length(); i++) {
                    if (!set6.contains(Character.toLowerCase(str.charAt(i)))) {
                        break;
                    }
                    if (i == str.length()-1) {
                        list.add(str);
                    }
                }
            }
        }
        return list.toArray(new String[list.size()]);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.21305841924398625

cat_success_cnt: 0

cat_success_rate: 0.0

