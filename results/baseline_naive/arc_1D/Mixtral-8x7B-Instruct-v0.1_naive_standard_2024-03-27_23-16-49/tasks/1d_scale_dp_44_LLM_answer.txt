
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['g', 'g', 'g', '.', '.', 'd', '.']
output: ['g', 'g', 'g', 'g', 'g', 'd', '.']

Example_2:
input: ['c', 'c', 'c', '.', '.', 'd', '.']
output: ['c', 'c', 'c', 'c', 'c', 'd', '.']

Example_3:
input: ['h', 'h', 'h', '.', '.', '.', 'd']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'd']

Test case:
input: ['e', 'e', 'e', '.', '.', 'd', '.']

###########################################################
Sample Outputs:
output: ['e', 'e', 'e', 'e', 'e', 'd', '.']
*/

// Solution 1:
class Solution {
    public String[] replaceDots(String[] board) {
        int len = board.length;
        for (int i = 0; i < len; ++i) {
            if (board[i].charAt(len - 1) == 'd') {
                for (int j = 0; j < len; ++j) {
                    if (board[j].charAt(i)!= 'x' && board[j].charAt(i)!= 'd') {
                        board[j] = board[j].substring(0, i) + 'x' + board[j].substring(i + 1);
                    }
                }
            }
        }
        for (int i = 0; i < len; ++i) {
            if (board[len - 1].charAt(i) == 'd') {
                for (int j = 0; j < len; ++j) {
                    if (board[i].charAt(j)!= 'x' && board[i].charAt(j)!= 'd') {
                        board[i] = board[i].substring(0, j) + 'x' + board[i].substring(j + 1);
                    }
                }
            }
        }
        for (int i = 0; i < len; ++i) {
            if (board[len - 1].charAt(len - 1) == 'd') {
                if (board[len - 1].charAt(i)!= 'x' && board[len - 1].charAt(i)!= 'd') {
                    board[len - 1] = board[len - 1].substring(0, i) + 'x' + board[len - 1].substring(i + 1);
                }
                if (board[i].charAt(len - 1)!= 'x' && board[i].charAt(len - 1)!= 'd') {
                    board[i] = board[i].substring(0, len - 1) + 'x';
                }
            }
        }
        return board;
    }
}

// Solution 2:
class Solution {
    public String[] replaceDots(String[] board) {
        // check row
        for (int r = 0; r < board.length; ++r) {
            boolean hasX = false;
            boolean hasD = false;
            for (int c = 0; c < board.length; ++c) {
                switch (board[r].charAt(c)) {
                    case 'x':
                        hasX = true;
                        break;
                    case 'd':
                        hasD = true;
                        break;
                    default:
                        if (!hasX) {
                            board[r] = board[r].substring(0, c) + "x" + board[r].substring(c + 1);
                        }
                        break;
                }
            }
            if (hasD &&!hasX) {
                for (int c = 0; c < board.length; ++c) {
                    if (board[r].charAt(c)!= 'x' && board[r].charAt(c)!= 'd') {
                        board[r] = board[r].substring(0, c) + "x" + board[r].substring(c + 1);
                    }
                }
            }
        }

        // check col
        for (int c = 0; c < board.length; ++c) {
            boolean hasX = false;
            boolean hasD = false;
            for (int r = 0; r < board.length; ++r) {
                switch (board[r].charAt(c)) {
                    case 'x':
                        hasX = true;
                        break;
                    case 'd':
                        hasD = true;
                        break;
                    default:
                        if (!hasX) {
                            char tmp = board[r].charAt(c);
                            board[r] = board[r].substring(0, c) + "x" + board[r].substring(c + 1);
                        }
                        break;
                }
            }
            if (hasD &&!hasX) {
                for (int r = 0; r < board.length; ++r) {
                    if (board[r].charAt(c)!= 'x' && board[r].charAt(c)!= 'd') {
                        board[r] = board[r].substring(0, c) + "x" + board[r].substring(c + 1);
                    }
                }
            }
        }

        // check corner
        for (int d = 0; d < 4; ++d) {
            int r = board.length - 1;
            int c = board.length - 1;
            if (d % 2 == 0) {
                --r;
            } else {
                --c;
            }
            if (board[r][c]!= 'x' && board[r][c]!= 'd') {
                if (d % 2 == 0) {
                    board[r][c] = 'x';
                    board[r][board.length - 1] = 'x';
                } else {
                    board[r][c] = 'x';
                    board[board.length - 1][c] = 'x';
                }
            }
        }

        return board;
    }
}


###########################################################
Result:
solution: ['e', 'e', 'e', 'e', 'e', 'd', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2101123595505618

cat_success_cnt: 18

cat_success_rate: 0.45

