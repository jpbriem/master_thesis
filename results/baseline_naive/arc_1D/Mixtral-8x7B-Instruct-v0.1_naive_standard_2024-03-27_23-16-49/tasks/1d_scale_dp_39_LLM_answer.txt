
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'h', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'h', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', 'h']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'h']

Example_3:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'h', '.', '.']
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'h', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'h', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'h', '.']
*/

public class Solution {
    public String[] fill(String[] arr) {
        if (arr == null || arr.length <= 0) return new String[0];
        int len = arr.length;
        for (int i = 0; i < len - 1; i++) {
            if (arr[i].equals(".") &&!arr[i + 1].equals(".")) {
                while (!arr[++i].equals("h")) {}
                break;
            } else if (arr[i].equals(".") && arr[i + 1].equals(".")) {
                continue;
            } else {
                while (!arr[--i].equals("b")) {}
                break;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < i; j++) {
            sb.append(arr[j]);
        }
        for (int k = i; k < len; k++) {
            sb.append('b');
        }
        sb.append(arr[len - 1]);
        arr = sb.toString().split("");
        return arr;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'h', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.20701357466063347

cat_success_cnt: 14

cat_success_rate: 0.4117647058823529

