
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', '.', 'e', 'e']
output: ['.', '.', 'a', 'a', 'a', '.', '.', '.', 'i', '.', 'c', 'c']

Example_2:
input: ['.', 'e', 'e', '.', 'e', '.', '.', 'e', 'e', 'e', '.', '.']
output: ['.', 'c', 'c', '.', 'i', '.', '.', 'a', 'a', 'a', '.', '.']

Example_3:
input: ['.', '.', '.', 'e', 'e', 'e', '.', '.', 'e', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', '.', '.', 'i', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'e', '.', 'e', 'e', 'e', '.', 'e', 'e', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'c', '.', 'i', 'a', 'a', '.', 'i', 'c', '.']
*/

public class Solution {
    public String findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        List<Integer> list = new ArrayList<>();
        for (int i : indexes){
            if (S.substring(i, i + sources[0].length()).equals(sources[0])){
                list.add(i);
            }
        }
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        int j = 0;
        for (int i = 0; i < S.length(); i++){
            while (j < list.size() && list.get(j) == i){
                sb.append(targets[j]);
                i += sources[0].length() - 1;
                j++;
            }
            if (j < list.size()) continue;
            sb.append(S.charAt(i));
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', 'c', 'c', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.19524405506883605

cat_success_cnt: 2

cat_success_rate: 0.04081632653061224

