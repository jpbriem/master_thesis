
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

Example_2:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']

Example_3:
input: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'R') {
                arr[i] = 'R';
            } else {
                break;
            }
        }
        for (int i = len - 1; i >= 0 && arr[len - 1]!= '.'; --i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'L') {
                arr[i] = 'L';
            } else {
                break;
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0, j = 0; i < len; ++i) {
            while (j < len && arr[j] == '.') {
                ++j;
            }
            if (j == len) {
                break;
            }
            if (arr[i] == arr[j]) {
                continue;
            }
            if (arr[i] == 'R' && arr[j] == 'L') {
                int k = i + 1;
                while (k < j) {
                    arr[k++] = '0';
                }
            } else if (arr[i] == 'L' && arr[j] == 'R') {
                int k = j - 1;
                while (k > i) {
                    arr[k--] = '0';
                }
            }
            ++j;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            sb.append(arr[i]);
        }
        return sb.toString();
    }
}

// Solution 2:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length(), left = 0;
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == 'R') {
                left = i;
            } else if (dominoes.charAt(i) == 'L') {
                for (int j = Math.max(0, left - 1); j <= i - 1; ++j) {
                    arr[j] = '0';
                }
                left = i;
            }
        }
        if (left < len) {
            for (int j = left; j < len; ++j) {
                arr[j] = '0';
            }
        }
        for (int i = 0, j = 0; i < len; ++i) {
            while (j < len && arr[j] == '.') {
                ++j;
            }
            if (j == len) {
                break;
            }
            if (arr[i] == arr[j]) {
                continue;
            }
            if (arr[i] == 'R' && arr[j] == 'L') {
                int k = i + 1;
                while (k < j) {
                    arr[k++] = '0';
                }
            } else if (arr[i] == 'L' && arr[j] == 'R') {
                int k = j - 1;
                while (k > i) {
                    arr[k--] = '0';
                }
            }
            ++j;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            sb.append(arr[i]);
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27461139896373055

cat_success_cnt: 2

cat_success_rate: 0.05555555555555555

