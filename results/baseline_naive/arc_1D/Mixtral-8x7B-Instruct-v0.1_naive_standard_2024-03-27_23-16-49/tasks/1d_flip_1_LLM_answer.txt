
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['f', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']
output: ['g', 'g', 'g', 'f', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'a', 'h', 'h', 'h', 'h', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'a', '.', '.', '.']

Example_3:
input: ['g', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']
output: ['b', 'b', 'b', 'b', 'g', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'f', 'd', 'd', 'd', 'd', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'd', 'd', 'd', 'd', 'f', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String[] reorderSpaces(String text) {
        int count = 0;
        for (int i = 0; i < text.length(); ++i) {
            if (text.charAt(i) =='') {
                count++;
            }
        }

        List<String> words = new ArrayList<>();
        StringBuilder word = new StringBuilder();
        for (int i = 0; i < text.length(); ++i) {
            char c = text.charAt(i);
            if (c!='') {
                word.append(c);
            } else if (!word.toString().isEmpty()) {
                words.add(word.toString());
                word = new StringBuilder();
            }
        }
        if (!word.toString().isEmpty()) {
            words.add(word.toString());
        }

        int spaceCount = count - (words.size() - 1);
        int gapSize = spaceCount / (words.size() - 1);
        int extraSpace = spaceCount % (words.size() - 1);

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < words.size() - 1; ++i) {
            sb.append(words.get(i));
            for (int j = 0; j < gapSize; ++j) {
                sb.append(' ');
            }
        }
        sb.append(words.get(words.size() - 1));
        while (extraSpace-- > 0) {
            sb.append(' ');
        }

        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['.', '.', 'd', 'd', 'd', 'd', 'f', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2894736842105263

cat_success_cnt: 2

cat_success_rate: 1.0

