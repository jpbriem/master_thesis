
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']
output: ['.', 'e', '.', '.', 'e', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', 'c', '.', '.', 'c', '.', '.', '.', '.']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
output: ['g', '.', '.', '.', 'g', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'd', '.', '.', 'd', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] reformat(String[] input) {
        int len = input.length;
        if (len == 0 || len % 2!= 0) return new String[0];

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; i += 2) {
            if (i + 1 < len && input[i].equals(".") &&!input[i+1].equals(".")) {
                sb.append('.');
            }
            sb.append(input[i]);
        }

        String[] res = new String[len];
        int idx = 0, jdx = 0;
        while (idx < len) {
            if (!sb.toString().substring(jdx, jdx + 1).equals(".")) {
                res[idx] = sb.toString().substring(jdx, jdx + 1);
                idx++;
            }
            jdx++;
        }

        return res;
    }
}


###########################################################
Result:
solution: ['.', 'd', '.', 'd', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3224489795918367

cat_success_cnt: 6

cat_success_rate: 0.13333333333333333

