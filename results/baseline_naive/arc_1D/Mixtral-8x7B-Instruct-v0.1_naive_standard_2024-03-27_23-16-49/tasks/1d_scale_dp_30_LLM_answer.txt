
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', 'd', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'd', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'd']

Example_3:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'd', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', '.']

Test case:
input: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', 'd', '.']

###########################################################
Sample Outputs:
output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'd', '.']
*/

public class Solution {
    public String[] fill(String[] strs, char c) {
        for (int i = 0; i < strs.length; ++i) {
            if (strs[i].equals(".")) {
                strs[i] = "" + c;
            }
        }
        return strs;
    }

    public String[] replaceAllZerosWithOnes(String[] strs) {
        int indexOfD = -1;
        for (int i = 0; i < strs.length; ++i) {
            if (!strs[i].equals(".") &&!strs[i].equals("d")) {
                throw new IllegalArgumentException();
            } else if (strs[i].equals("d")) {
                indexOfD = i;
            }
        }
        if (indexOfD == -1) {
            throw new IllegalArgumentException();
        }
        String[] result = Arrays.copyOfRange(strs, 0, indexOfD);
        result = fill(result, 'c');
        result = Arrays.copyOfRange(result, 0, result.length + 1);
        result[result.length - 1] = "d";
        return result;
    }
}


###########################################################
Result:
solution: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'd', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.20342857142857143

cat_success_cnt: 9

cat_success_rate: 0.36

