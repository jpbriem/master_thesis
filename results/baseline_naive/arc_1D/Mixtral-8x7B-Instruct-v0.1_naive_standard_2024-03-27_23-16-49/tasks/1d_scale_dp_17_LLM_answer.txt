
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', 'h', '.']
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', '.']

Example_2:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'h', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'h', '.', '.', '.']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.']
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', '.', '.', '.', '.']

Test case:
input: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'h', '.', '.']

###########################################################
Sample Outputs:
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'h', '.', '.']
*/

// Solution 1:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'R') {
                arr[i] = 'R';
            } else {
                break;
            }
        }
        for (int i = len - 1; i >= 0 && arr[len - 1]!= 'L'; --i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'L') {
                arr[i] = 'L';
            } else {
                break;
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0, j = 0; i < len; ++i) {
            while (j < len && arr[j] == '.') {
                ++j;
            }
            if (j == len) {
                break;
            }
            if (arr[i] == 'R' && arr[j] == 'L') {
                int k = i + 1;
                while (k < j) {
                    arr[k++] = '0';
                }
            }
            ++j;
        }
        return new String(arr);
    }
}

// Solution 2:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length(), left = 0;
        StringBuilder sb = new StringBuilder();
        for (int right = 0; right < len; ++right) {
            switch (dominoes.charAt(right)) {
                case 'R':
                    sb.append('R');
                    left = right;
                    break;
                case 'L':
                    sb.append("0".repeat(right - left)).append('L');
                    left = right;
                    break;
                default:
                    break;
            }
        }
        if (left < len) {
            sb.append("0".repeat(len - left));
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'h', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.20116279069767443

cat_success_cnt: 4

cat_success_rate: 0.4

