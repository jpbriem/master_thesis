
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'c', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'c', '.']

Example_2:
input: ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', 'c', '.']
output: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'c', '.']

Example_3:
input: ['h', 'h', 'h', 'h', '.', '.', 'c', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'c', '.', '.', '.']

Test case:
input: ['f', 'f', 'f', 'f', '.', '.', 'c', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'f', 'f', 'f', 'f', 'c', '.', '.', '.']
*/

// Solution 1: Two pointers, O(n) time complexity and O(1) space complexity.
public class MoveZerosToEnd {
    public static void moveZeroesToEnd(char[] inputArray) {
        int left = 0; // Pointer to the first non-zero element in the array.
        for (int right = 0; right < inputArray.length; right++) {
            if (inputArray[right]!= '\u0000') { // If current element is not zero.
                swap(inputArray, left, right); // Swap it with the first non-zero element.
                left++; // Increment pointer of the first non-zero element.
            }
        }
    }

    private static void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


###########################################################
Result:
solution: ['.', '.', 'f', 'f', 'f', 'f', 'c', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.26004728132387706

cat_success_cnt: 1

cat_success_rate: 0.043478260869565216

