
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'i', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'i', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', 'i', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'i', '.']

Example_3:
input: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', 'i', '.']
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'i', '.']

Test case:
input: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', 'i', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', 'i', '.']
*/

public class Solution {
    public String[] expand(String S) {
        List<String> res = new ArrayList<>();
        dfs(S, 0, "", res);
        return res.toArray(new String[res.size()]);
    }

    private void dfs(String s, int idx, String cur, List<String> res){
        if (idx == s.length()){
            res.add(cur);
            return;
        }

        char c = s.charAt(idx);
        if (c!= '.'){
            StringBuilder sb = new StringBuilder();
            sb.append(cur).append(c);
            dfs(s, idx + 1, sb.toString(), res);
        } else {
            dfs(s, idx + 1, cur, res);
            dfs(s, idx + 1, cur + ".", res);
        }
    }
}


###########################################################
Result:
solution: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'i', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.19976635514018692

cat_success_cnt: 2

cat_success_rate: 0.3333333333333333

