
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', 'g', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.']
*/

// Solution 1:
class Solution {
    public String[] reformat(String[] arr) {
        int len = arr.length;
        if (len == 0 || len % 2!= 0) return new String[0];

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; i++) {
            if (arr[i].equals(".")) continue;
            sb.append(arr[i]);
        }

        String str = sb.toString();
        char[] chars = str.toCharArray();
        Arrays.sort(chars);

        int idx = 0, jdx = 0;
        while (idx < len && jdx < chars.length) {
            if (arr[idx].equals(".")) {
                arr[idx] = "" + chars[jdx++];
            } else {
                idx++;
            }
        }

        return arr;
    }
}

// Solution 2:
class Solution {
    public String[] reformat(String[] arr) {
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            if (!arr[i].equals(".")) list.add(i);
        }

        if (list.size() == 0 || list.size() % 2!= 0) return new String[0];

        Collections.sort(list, (x, y) -> Character.compare(arr[x].charAt(0), arr[y].charAt(0)));

        for (int i = 0, j = 0; i < arr.length; i++) {
            if (arr[i].equals(".")) {
                arr[i] = "" + arr[list.get(j++)].charAt(0);
            }
        }

        return arr;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.29523809523809524

cat_success_cnt: 3

cat_success_rate: 0.6

