{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['.', '.', 'b', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']\noutput: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'b', '.', '.', '.', '.']\n\nExample_2:\ninput: ['.', '.', '.', '.', '.', '.', 'd', 'g', 'g', 'g', '.', '.']\noutput: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'd', '.', '.']\n\nExample_3:\ninput: ['.', '.', '.', 'e', 'g', 'g', 'g', 'g', '.', '.', '.', '.']\noutput: ['.', '.', '.', 'g', 'g', 'g', 'g', 'e', '.', '.', '.', '.']\n\nTest case:\ninput: ['.', '.', '.', '.', 'a', 'b', 'b', 'b', 'b', '.', '.', '.']\n\n###########################################################\nSample Outputs:\noutput: ['.', '.', '.', '.', 'b', 'b', 'b', 'b', 'a', '.', '.', '.']\n*/\n\n// Solution 1:\nclass Solution {\n    public String[] rearrange(String[] input) {\n        if (input == null || input.length < 4) return input;\n\n        int len = input.length, left = 0, right = len - 1;\n        while (left < right) {\n            // move the first non-'.' from left to right\n            while (left < len && input[left].equals(\".\")) ++left;\n            // move the last non-'.' from right to left\n            while (right >= 0 && input[right].equals(\".\")) --right;\n            if (left < right) swap(input, left++, right--);\n        }\n\n        for (int i = 0; i + 1 < len; i += 2) {\n            if (!input[i].equals(\".\") &&!input[i].equals(input[i+1])) {\n                swap(input, i, findFirstNonDotIndex(input, i));\n            }\n        }\n\n        return input;\n    }\n\n    private void swap(String[] arr, int a, int b) {\n        String tmp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = tmp;\n    }\n\n    private int findFirstNonDotIndex(String[] arr, int start) {\n        for (int i = start; i < arr.length; ++i) {\n            if (!arr[i].equals(\".\")) return i;\n        }\n        throw new IllegalArgumentException();\n    }\n}\n\n// Solution 2:\nclass Solution {\n    public String[] rearrange(String[] input) {\n        if (input == null || input.length < 4) return input;\n\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < input.length; ++i) {\n            if (!input[i].equals(\".\")) list.add(i);\n        }\n\n        Collections.sort(list, (x, y) -> {\n            char c1 = input[x], c2 = input[y];\n            if (c1!= c2) return c2 - c1;\n            else return x - y;\n        });\n\n        for (int i = 0; i < list.size() / 2; ++i) {\n            swap(input, list.get(i), list.get(list.size() - 1 - i));\n        }\n\n        return input;\n    }\n\n    private void swap(String[] arr, int a, int b) {\n        String tmp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = tmp;\n    }\n}"
        }
    ],
    "idx": 188,
    "task": "1d_flip_43",
    "category": "1d_flip",
    "ys": [
        "1d_flip_43.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['.', '.', '.', '.', 'b', 'b', 'b', 'b', 'a', '.', '.', '.']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.36507936507936506,
        "cat_success_cnt": 27,
        "cat_success_rate": 0.6923076923076923
    },
    "usage_so_far": {
        "completion_tokens": 129017,
        "prompt_tokens": 97106,
        "cost": null
    }
}