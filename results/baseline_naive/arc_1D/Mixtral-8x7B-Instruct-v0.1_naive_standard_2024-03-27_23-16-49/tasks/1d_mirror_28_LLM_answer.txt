
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'e', 'e', 'e', 'e', 'e', '.', '.']

Example_3:
input: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.']

Test case:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', 'g']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        // left and right are the index of last non-dot character before current position from left and right respectively
        int left = -1, right = -1;
        boolean isLeftPush = false;
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '.') continue;
            if (left == -1 && arr[i] == 'R') {
                left = i;
            } else if (left >= 0 && arr[i] == 'L') {
                if (!isLeftPush) {
                    int j = left + 1;
                    while (j <= i) {
                        arr[j++] = 'L';
                    }
                }
                left = -1;
            } else if (left >= 0 && arr[i] == 'R') {
                if (isLeftPush) {
                    int j = i;
                    while (j > left) {
                        arr[--j] = 'R';
                    }
                }
                left = -1;
            }
            if (right == -1 && arr[len - 1 - i] == 'L') {
                right = len - 1 - i;
            } else if (right >= 0 && arr[len - 1 - i] == 'R') {
                if (!isLeftPush) {
                    int j = right - 1;
                    while (j >= len - 1 - i) {
                        arr[j--] = 'R';
                    }
                }
                right = -1;
            } else if (right >= 0 && arr[len - 1 - i] == 'L') {
                if (isLeftPush) {
                    int j = len - 1 - i;
                    while (j < right) {
                        arr[++j] = 'L';
                    }
                }
                right = -1;
            }
            if (left >= 0 && right >= 0) {
                int l = Math.min(left, right);
                int r = Math.max(left, right);
                if (l == left) {
                    int j = l + 1;
                    while (j <= r) {
                        arr[j++] = 'R';
                    }
                } else {
                    int j = r;
                    while (j > l) {
                        arr[--j] = 'L';
                    }
                }
                left = -1;
                right = -1;
            }
            if (left >= 0) {
                isLeftPush = true;
            } else if (right >= 0) {
                isLeftPush = false;
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3088235294117647

cat_success_cnt: 3

cat_success_rate: 0.13636363636363635

