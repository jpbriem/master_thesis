
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        // left and right are the index of the last non-dot character to the left and right of curr respectively
        int left = -1, right = -1;
        for (int curr = 0; curr < len; ++curr) {
            if (arr[curr] == '.') continue;
            if (left == -1 && arr[curr] == 'R') {
                left = curr;
            } else if (left >= 0 && arr[curr] == 'L') {
                int dist = (curr - left + 1) / 2;
                while (dist-- > 0) {
                    arr[++left] = 'R';
                }
                left = -1;
            } else if (left >= 0 && arr[curr] == 'R') {
                left = curr;
            }
            if (right == -1 && arr[len - curr - 1] == 'L') {
                right = len - curr - 1;
            } else if (right >= 0 && arr[len - curr - 1] == 'R') {
                int dist = (right - (len - curr - 1)) / 2;
                while (dist-- > 0) {
                    arr[--right] = 'L';
                }
                right = -1;
            } else if (right >= 0 && arr[len - curr - 1] == 'L') {
                right = len - curr - 1;
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.25165562913907286

cat_success_cnt: 0

cat_success_rate: 0.0

