
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'a', '.', '.', 'h', '.']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', '.']

Example_2:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', 'h']
output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h']

Example_3:
input: ['b', 'b', 'b', '.', '.', '.', '.', 'h', '.']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'h', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', '.', 'h', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'g', 'g', 'g', '.', '.', 'h', '.', '.']
*/

public class Solution {
    public String[] extend(String[] input) {
        if (input == null || input.length <= 0) return new String[0];
        int len = input.length;
        for (int i = len - 1; i >= 0; --i) {
            if (!".".equals(input[i])) break;
            ++len;
        }
        String[] result = new String[len];
        System.arraycopy(input, 0, result, 0, Math.min(result.length, input.length));
        for (int i = input.length; i < result.length; ++i) {
            result[i] = ".";
        }
        return result;
    }

    public String[] extendLeft(String[] input) {
        if (input == null || input.length <= 0) return new String[0];
        int len = input.length;
        for (int i = 0; i < len; ++i) {
            if (!".".equals(input[i])) break;
            ++len;
        }
        String[] result = new String[len];
        for (int i = 0; i < result.length && i < input.length; ++i) {
            result[i] = input[i];
        }
        for (int i = input.length; i < result.length; ++i) {
            result[i] = ".";
        }
        return result;
    }

    public String[] longestCommonSubsequence(String[] A, String[] B) {
        // write your code here
        if (A == null || A.length == 0 || B == null || B.length == 0) return new String[0];
        int m = A.length;
        int n = B.length;
        String[][] dp = new String[m + 1][n + 1];
        for (int i = 0; i <= m; ++i) {
            for (int j = 0; j <= n; ++j) {
                if (i == 0 || j == 0) {
                    dp[i][j] = "";
                } else if (A[i - 1].equals(B[j - 1])) {
                    dp[i][j] = dp[i - 1][j - 1] + A[i - 1];
                } else {
                    dp[i][j] = dp[i - 1][j].length() > dp[i][j - 1].length()? dp[i - 1][j] : dp[i][j - 1];
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = m; i > 0 &&!"".equals(dp[i][n]); --i) {
            sb.append(A[i - 1]);
        }
        String s = sb.reverse().toString();
        return s.isEmpty()? new String[0] : s.split("");
    }
}


###########################################################
Result:
solution: ['.', 'g', 'g', 'g', 'g', 'g', 'h', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20091848450057406

cat_success_cnt: 6

cat_success_rate: 0.2857142857142857

