
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']
output: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']

Example_3:
input: ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'R') {
                arr[i] = 'R';
            } else {
                arr[i] = 'L';
            }
        }

        // move left to right
        for (int i = 0, j = 0; i < len && j < len; ) {
            while (j < len && arr[j]!= 'L') {
                ++j;
            }
            if (j >= len) break;

            int k = j - 1;
            while (k > i && arr[k] == 'R') --k;

            if (k <= i) continue;

            int dist = j - k - 1;
            for (int m = i + 1; m < j; ++m) {
                if (arr[m] == 'R') {
                    arr[m] = 'F';
                } else {
                    arr[m] = 'E';
                }
            }
            for (int m = i + 1; m < j; ++m) {
                if (arr[m] == 'E') {
                    arr[m] = 'R';
                } else {
                    arr[m] = 'L';
                }
            }
            for (int m = i + 1; m < j; ++m) {
                if (arr[m] == 'F') {
                    arr[m] = '.';
                }
            }

            i = j;
        }

        // move right to left
        for (int i = len - 1, j = len - 1; i >= 0 && j >= 0; ) {
            while (j >= 0 && arr[j]!= 'R') {
                --j;
            }
            if (j < 0) break;

            int k = j + 1;
            while (k < len && arr[k] == 'L') ++k;

            if (k >= len) continue;

            int dist = k - j - 1;
            for (int m = i - 1; m > j; --m) {
                if (arr[m] == 'L') {
                    arr[m] = 'B';
                } else {
                    arr[m] = 'A';
                }
            }
            for (int m = i - 1; m > j; --m) {
                if (arr[m] == 'A') {
                    arr[m] = 'L';
                } else {
                    arr[m] = 'R';
                }
            }
            for (int m = i - 1; m > j; --m) {
                if (arr[m] == 'B') {
                    arr[m] = '.';
                }
            }

            i = j;
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            sb.append(arr[i]);
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2912912912912913

cat_success_cnt: 10

cat_success_rate: 0.30303030303030304

