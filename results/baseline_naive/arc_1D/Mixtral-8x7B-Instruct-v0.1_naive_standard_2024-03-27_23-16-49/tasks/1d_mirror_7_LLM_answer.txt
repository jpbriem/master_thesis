
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'd', 'd', 'd', '.', 'i', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'd', 'd', 'd', '.']

Example_3:
input: ['f', 'f', 'f', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'i', '.', 'f', 'f', 'f', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'a', 'a', 'a', '.', 'i', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', 'i', 'a', 'a', 'a', '.', '.', '.']
*/

public class Solution {
    public String[] move(String[] board) {
        int len = board.length;
        for (int i = 0; i < len / 2; ++i) {
            if (board[i].equals(".")) continue;
            int j = findEmpty(board, i);
            if (j == -1) break;
            swap(board, i, j);
        }
        return board;
    }

    private int findEmpty(String[] board, int start) {
        int len = board.length;
        for (int i = start + 1; i < len; ++i) {
            if (!board[i].equals(".")) continue;
            return i;
        }
        return -1;
    }

    private void swap(String[] board, int a, int b) {
        String tmp = board[a];
        board[a] = board[b];
        board[b] = tmp;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.29194630872483224

cat_success_cnt: 6

cat_success_rate: 0.125

