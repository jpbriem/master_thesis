
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'h', '.', '.']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'h', '.', '.']

Test case:
input: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', 'h', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h']
*/

public class Solution {
    public String[] move(String[] board) {
        // Write your solution here
        if (board == null || board.length < 2) return board;
        int len = board.length, idx = -1;
        for (int i = 0; i < len; i++) {
            if (!".".equals(board[i])) {
                idx++;
                board[idx] = board[i];
            }
        }
        while (idx + 1 < len && ".".equals(board[idx+1])) {
            idx++;
        }
        if (idx >= 0 && idx < len-1 && "h".equals(board[idx+1])) {
            board[idx+1] = ".";
        }
        return Arrays.copyOfRange(board, 0, idx+1);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'h', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2372549019607843

cat_success_cnt: 0

cat_success_rate: 0.0

