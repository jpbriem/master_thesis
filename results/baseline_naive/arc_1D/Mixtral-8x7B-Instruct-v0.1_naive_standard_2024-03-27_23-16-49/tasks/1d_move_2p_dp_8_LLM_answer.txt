
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', 'e', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'e', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', '.', '.', 'e', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'e', '.']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', 'e', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'e', '.']

Test case:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', 'e', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'e', '.']
*/

// Solution 1: Two pointers, O(n) time and space.
class Solution {
    public String pushDominoes(String dominoes) {
        if (dominoes == null || dominoes.length() <= 1) return dominoes;

        char[] arr = new char[dominoes.length()];
        Arrays.fill(arr, '.');

        int left = 0;
        while (left < dominoes.length()) {
            // Find the first non-dot from left side.
            while (left < dominoes.length() && dominoes.charAt(left) == '.') ++left;

            // If there is no dot in the string.
            if (left >= dominoes.length()) break;

            // Set the value of current position to be same as the next one.
            arr[left] = dominoes.charAt(left);

            // Move right pointer until meet a dot or reach end of array.
            int right = left + 1;
            while (right < dominoes.length() && dominoes.charAt(right)!= '.') {
                arr[right] = dominoes.charAt(left);
                ++right;
            }

            // Update values between two pointers.
            for (int i = left + 1; i < right; ++i) {
                if (arr[left] == 'R' && arr[right] == 'L') {
                    arr[i] = '.' ;
                } else if (arr[left] == 'R') {
                    arr[i] = 'R';
                } else if (arr[right] == 'L') {
                    arr[i] = 'L';
                }
            }

            // Move left pointer to the next non-dot.
            while (left < dominoes.length() && dominoes.charAt(left)!= '.') ++left;
        }

        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'e', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.25389755011135856

cat_success_cnt: 5

cat_success_rate: 0.10204081632653061

