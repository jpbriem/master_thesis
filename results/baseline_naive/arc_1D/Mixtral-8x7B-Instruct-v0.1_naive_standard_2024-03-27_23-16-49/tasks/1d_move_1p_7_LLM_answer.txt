
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'c', 'c', 'c', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', '.', '.', '.']

Example_3:
input: ['c', 'c', 'c', '.', '.', '.', '.']
output: ['.', 'c', 'c', 'c', '.', '.', '.']

Test case:
input: ['d', 'd', 'd', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'd', 'd', 'd', '.', '.', '.']
*/

public class Solution {
    public String compress(String s) {
        if (s == null || s.length() <= 1) return s;

        StringBuilder sb = new StringBuilder();
        int count = 0;
        char preChar = s.charAt(0);
        for (int i = 0; i < s.length(); i++) {
            if (preChar!= s.charAt(i)) {
                sb.append(preChar).append(count > 1? count : "");
                preChar = s.charAt(i);
                count = 1;
            } else {
                count++;
            }
        }
        // append the last character and its count
        sb.append(preChar).append(count > 1? count : "");

        return sb.toString().length() >= s.length()? s : sb.toString();
    }
}


###########################################################
Result:
solution: ['.', 'd', 'd', 'd', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2959770114942529

cat_success_cnt: 16

cat_success_rate: 0.3333333333333333

