
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'h', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', 'h', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'h', '.']

Example_3:
input: ['c', 'c', 'c', 'c', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'h', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'h', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'l') {
                arr[i] = '.';
            } else {
                arr[i] = dominoes.charAt(i);
            }
        }
        // System.out.println(Arrays.toString(arr));
        boolean isLeft = false;
        for (int i = 0; i < len - 1; ++i) {
            if (arr[i]!= '.' && arr[i + 1] == '.') {
                int j = i + 1;
                while (j < len && arr[j] == '.') {
                    arr[j++] = arr[i];
                }
                --j;
                if (!isLeft) {
                    int k = i;
                    while (k > 0 && arr[k - 1] == '.') {
                        arr[k--] = arr[i];
                    }
                } else {
                    int k = i;
                    while (k > 0 && arr[k - 1] == 'r') {
                        arr[k--] = '.';
                    }
                }
                isLeft = true;
                i = j;
            } else if (arr[i] == 'r' && arr[i + 1] == 'l') {
                isLeft = false;
            }
        }
        return Arrays.copyOfRange(arr, 0, len);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'h', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2540415704387991

cat_success_cnt: 1

cat_success_rate: 0.030303030303030304

