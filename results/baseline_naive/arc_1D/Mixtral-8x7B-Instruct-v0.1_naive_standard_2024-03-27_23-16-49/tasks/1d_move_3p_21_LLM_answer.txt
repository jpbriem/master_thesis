
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.']

Example_2:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']

Example_3:
input: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'R') {
                arr[i] = 'R';
            } else {
                arr[i] = 'L';
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0; i < len - 1; ++i) {
            if (arr[i] == 'L' && arr[i + 1] == 'R') {
                int j = i + 1;
                while (j < len && arr[j]!= '.') {
                    if (arr[j] == 'L') break;
                    --j;
                }
                if (j >= len) continue;
                int k = i + 1;
                while (k <= j) {
                    arr[k++] = '0';
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (char c : arr) {
            sb.append(c);
        }
        return sb.toString().replaceAll("0", ".");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.24731182795698925

cat_success_cnt: 1

cat_success_rate: 0.06666666666666667

