
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', 'i']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'i']

Example_2:
input: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] rearrange(String[] input) {
        int len = input.length;
        if (len < 4 || len % 2 == 0) return input;

        // find the first group of g's and i's
        for (int i = 0; i + 5 <= len && input[i].equals("."); ++i);
        boolean isG = true, found = false;
        for (int j = i; j < i + 6; ++j) {
            if (!input[j].equals(".") &&!input[j].equals((isG? "g" : "i"))) {
                found = true;
                break;
            }
            isG =!isG;
        }
        if (!found) return input;

        // swap elements in groups
        while (true) {
            int k = -1;
            for (int j = i; j < len; ++j) {
                if (input[j].equals(".")) continue;
                if (k!= -1) {
                    String tmp = input[k];
                    input[k] = input[j];
                    input[j] = tmp;
                }
                k = j;
            }
            if (k == -1) break;

            // check next group
            isG = true;
            for (int j = k + 1; j < k + 7; ++j) {
                if (!input[j].equals(".") &&!input[j].equals((isG? "g" : "i"))) {
                    i = k + 1;
                    break;
                }
                isG =!isG;
            }
        }

        return input;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.22426470588235295

cat_success_cnt: 1

cat_success_rate: 0.022727272727272728

