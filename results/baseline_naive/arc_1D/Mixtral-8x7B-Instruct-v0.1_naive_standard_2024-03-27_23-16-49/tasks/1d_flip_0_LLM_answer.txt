
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'd', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', 'f', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'f', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', 'f', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class ReverseSubstring {
    public static void main(String[] args) {
        String input = "...... f b b b b b b b....";
        System.out.println("Original string is : " + input);
        System.out.println("Reversed substring is : " + reverseSubstring(input));
    }

    private static String reverseSubstring(String str){
        StringBuilder sb = new StringBuilder();
        int i=0, j=str.length()-1;
        while (i<j && str.charAt(i)=='.' && str.charAt(j)=='.'){
            i++;
            j--;
        }
        if(i>=j) return str;
        while (i<=j){
            if(str.charAt(i)!='.') sb.append(str.charAt(i));
            if(i!=j && str.charAt(j)!='.') sb.append(str.charAt(j));
            i++;
            j--;
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2847682119205298

cat_success_cnt: 1

cat_success_rate: 1.0

