
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'c', 'c', 'c', 'c', '.', '.', 'b', '.']
output: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'b', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', '.', '.', '.', 'b']
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'b']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', 'b']
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b']

Test case:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', 'b']

###########################################################
Sample Outputs:
output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b']
*/

public class Solution {
    public String[] fill(String[] strs) {
        if (strs == null || strs.length <= 0) return new String[0];
        int len = strs.length;
        for (int i = len - 1; i >= 0; --i) {
            if (!strs[i].equals(".")) break;
            strs[i] = "g";
        }
        for (int i = 0; i < len; ++i) {
            if (strs[i].equals(".")) {
                strs[i] = strs[len-1];
            }
        }
        return strs;
    }
}


###########################################################
Result:
solution: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.20521541950113378

cat_success_cnt: 12

cat_success_rate: 0.375

