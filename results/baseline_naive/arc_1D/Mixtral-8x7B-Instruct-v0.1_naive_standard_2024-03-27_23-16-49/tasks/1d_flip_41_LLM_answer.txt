
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'a', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['a', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['e', 'e', 'e', 'e', 'e', 'e', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'h', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'e', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String reorderSpaces(String text) {
        int count = 0;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); ++i) {
            if (text.charAt(i) =='') {
                ++count;
            } else {
                sb.append(text.charAt(i));
            }
        }

        List<String> words = Arrays.asList(sb.toString().split("\\s+"));
        int numWords = words.size();
        if (numWords == 0) return "";

        // If there is only one word, add spaces to the end of it.
        if (count > 0 && numWords == 1) {
            return words.get(0) + " ".repeat(count);
        }

        int avgSpaceNum = count / (numWords - 1);
        int extraSpaceNum = count % (numWords - 1);

        StringBuilder res = new StringBuilder();
        for (int i = 0; i < numWords - 1; ++i) {
            res.append(words.get(i)).append(" ");
            res.append(" ".repeat(avgSpaceNum));
        }
        res.append(words.get(numWords - 1));
        res.append(" ".repeat(extraSpaceNum));

        return res.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'e', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.36363636363636365

cat_success_cnt: 26

cat_success_rate: 0.7027027027027027

