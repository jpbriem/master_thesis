
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'b', 'b', 'b', 'b', 'i', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'h', 'c', 'd', 'e', 'c', 'h', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'd', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'a', 'a', 'e', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'a', 'a', 'e', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String[] findWords(String[] words) {
        List<String> list = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            if (isRow(words[i])) {
                list.add(words[i]);
            }
        }
        return list.toArray(new String[list.size()]);
    }

    private boolean isRow(String word) {
        int row = -1;
        char c = word.charAt(0);
        if ('q' == c || 'w' == c || 'e' == c || 'r' == c || 't' == c || 'y' == c || 'u' == c || 'i' == c || 'o' == c || 'p' == c) {
            row = 0;
        } else if ('a' == c ||'s' == c || 'd' == c || 'f' == c || 'g' == c || 'h' == c || 'j' == c || 'k' == c || 'l' == c) {
            row = 1;
        } else if ('z' == c || 'x' == c || 'c' == c || 'v' == c || 'b' == c || 'n' == c ||'m' == c) {
            row = 2;
        }
        for (int j = 1; j < word.length(); j++) {
            c = word.charAt(j);
            if ((row == 0 &&!('q' == c || 'w' == c || 'e' == c || 'r' == c || 't' == c || 'y' == c || 'u' == c || 'i' == c || 'o' == c || 'p' == c))
                    || (row == 1 && (!('a' == c ||'s' == c || 'd' == c || 'f' == c || 'g' == c || 'h' == c || 'j' == c || 'k' == c || 'l' == c)))
                    || (row == 2 && (!('z' == c || 'x' == c || 'c' == c || 'v' == c || 'b' == c || 'n' == c ||'m' == c)))) {
                return false;
            }
        }
        return true;
    }
}

// Solution 2:
class Solution {
    public String[] findWords(String[] words) {
        Set<Character> set1 = new HashSet<>(Arrays.asList('q','w','e','r','t','y','u','i','o','p'));
        Set<Character> set2 = new HashSet<>(Arrays.asList('a','s','d','f','g','h','j','k','l'));
        Set<Character> set3 = new HashSet<>(Arrays.asList('z','x','c','v','b','n','m'));
        List<String> result = new ArrayList<>();
        for (String s : words) {
            Set<Character> temp = null;
            if (set1.contains(s.toLowerCase().charAt(0))) {
                temp = set1;
            } else if (set2.contains(s.toLowerCase().charAt(0))) {
                temp = set2;
            } else {
                temp = set3;
            }
            for (int i = 1; i < s.length(); i++) {
                if (!temp.contains(s.toLowerCase().charAt(i))) {
                    break;
                }
                if (i == s.length()-1) {
                    result.add(s);
                }
            }
        }
        return result.toArray(new String[result.size()]);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.25882352941176473

cat_success_cnt: 18

cat_success_rate: 0.5142857142857142

