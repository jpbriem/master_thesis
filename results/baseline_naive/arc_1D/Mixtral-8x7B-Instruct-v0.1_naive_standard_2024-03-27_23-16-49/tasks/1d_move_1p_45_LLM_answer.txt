
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.']

Example_3:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String compressString(String S) {
        if (S == null || S.length() <= 2) return S;

        StringBuilder sb = new StringBuilder();
        int count = 0;
        char preChar = S.charAt(0);
        for (int i = 0; i < S.length(); i++) {
            if (preChar!= S.charAt(i)) {
                sb.append(preChar).append(count > 1? Integer.toString(count) : "");
                preChar = S.charAt(i);
                count = 1;
            } else {
                count++;
            }
        }
        // append the last character and its count
        sb.append(preChar).append(count > 1? Integer.toString(count) : "");

        return sb.length() >= S.length()? S : sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2932551319648094

cat_success_cnt: 13

cat_success_rate: 0.3170731707317073

