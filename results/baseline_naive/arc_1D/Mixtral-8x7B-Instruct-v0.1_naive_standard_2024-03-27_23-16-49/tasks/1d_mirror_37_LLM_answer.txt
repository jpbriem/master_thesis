
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'b', 'b', 'b', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'b', 'b', 'b', '.', 'i', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', 'b', 'b', 'b', '.']

Example_3:
input: ['.', '.', 'b', 'b', 'b', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'i', '.', 'b', 'b', 'b', '.', '.', '.']

Test case:
input: ['.', '.', 'a', 'a', 'a', '.', 'i', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', '.', '.']
*/

public class Solution {
    public String[] move(String[] board) {
        int len = board.length;
        for (int i = 0; i < len - 2; ++i) {
            if (board[i].equals(".") &&!board[i + 1].equals(".")) {
                char c = board[i + 1];
                int j = i + 1;
                while (!board[j].equals(".") && j < len - 1) {
                    if (board[j + 1].equals(".") || board[j + 1].equals(c + "")) {
                        break;
                    }
                    ++j;
                }
                if (j > i + 1) {
                    swap(board, i, j);
                }
            }
        }
        return board;
    }

    private void swap(String[] arr, int a, int b) {
        String tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.30141843971631205

cat_success_cnt: 4

cat_success_rate: 0.125

