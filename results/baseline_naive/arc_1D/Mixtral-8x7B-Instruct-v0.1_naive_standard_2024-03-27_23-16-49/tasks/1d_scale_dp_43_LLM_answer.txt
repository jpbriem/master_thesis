
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', 'e', '.', '.', '.']
output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'e', '.', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'e']
output: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'e']

Example_3:
input: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'e']
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'e']

Test case:
input: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', 'e']

###########################################################
Sample Outputs:
output: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'e']
*/

// Solution 1:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'R') {
                arr[i] = 'R';
            } else {
                arr[i] = 'L';
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0, j = 0; i < len && j < len; ) {
            while (j < len && arr[j]!= 'L') {
                ++j;
            }
            if (j >= len) break;
            int k = j - 1;
            while (k > i && arr[k] == 'R') --k;
            if (k <= i) continue;
            for (int l = i + 1; l < k; ++l) {
                arr[l] = 'R';
            }
            i = k;
        }
        StringBuilder sb = new StringBuilder();
        for (char c : arr) {
            sb.append(c);
        }
        return sb.toString();
    }
}

// Solution 2:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length(), left = 0;
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int right = 0; right < len; ++right) {
            if (dominoes.charAt(right) == 'R') {
                while (left < right) {
                    arr[left++] = 'R';
                }
            } else if (dominoes.charAt(right) == 'L' && left < right) {
                int dist = right - left - 1;
                for (int i = 0; i < dist / 2; ++i) {
                    arr[left + 1 + i] = 'R';
                    arr[right - i] = 'L';
                }
                if (dist % 2 == 1) {
                    arr[left + dist / 2 + 1] = 'R';
                }
                left = right + 1;
            }
        }
        if (left < len) {
            Arrays.fill(arr, left, len, 'L');
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'e']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2092238470191226

cat_success_cnt: 17

cat_success_rate: 0.4358974358974359

