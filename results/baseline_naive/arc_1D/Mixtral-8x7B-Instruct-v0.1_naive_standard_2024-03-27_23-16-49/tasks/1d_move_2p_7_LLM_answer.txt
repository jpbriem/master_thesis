
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'c', 'c', 'c', '.', '.', '.']
output: ['.', '.', '.', 'c', 'c', 'c', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', '.', '.']

Example_3:
input: ['c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', '.']

Test case:
input: ['d', 'd', 'd', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'd', 'd', 'd', '.', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            } else {
                break;
            }
        }
        for (int i = len - 1; i >= 0 && arr[i] == '.'; --i) {
            arr[i] = dominoes.charAt(i);
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0; i + 1 < len; ) {
            if (arr[i] == arr[i+1]) {
                for (int j = i; j <= i + 1; ++j) {
                    arr[j] = arr[i];
                }
                i += 2;
            } else if (arr[i] == '.' && arr[i+1]!= '.') {
                if (arr[i+1] == 'R') {
                    arr[i] = 'R';
                } else {
                    arr[i] = 'L';
                }
                i += 2;
            } else if (arr[i] == 'L' && arr[i+1] == 'R') {
                int j = i + 1;
                while (j < len && arr[j] == '.') {
                    arr[j++] = 'R';
                }
                if (j < len && arr[j] == 'L') {
                    j++;
                    while (j < len && arr[j] == '.') {
                        arr[j++] = 'L';
                    }
                }
                i = j;
            } else {
                i += 2;
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', 'd', 'd', 'd', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.27386934673366836

cat_success_cnt: 5

cat_success_rate: 0.10416666666666667

