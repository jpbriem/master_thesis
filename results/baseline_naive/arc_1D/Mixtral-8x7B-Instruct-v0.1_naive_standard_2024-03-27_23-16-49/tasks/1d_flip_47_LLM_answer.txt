
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['b', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', '.', '.']

Example_3:
input: ['.', 'c', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', '.', '.', '.']
*/

public class Solution {
    public String rearrangeString(String str) {
        if (str == null || str.length() <= 1) return str;

        int[] count = new int[26];
        for (char c : str.toCharArray()) {
            count[c - 'a']++;
        }

        StringBuilder sb = new StringBuilder();
        while (sb.length() < str.length()) {
            char maxChar = '\0';
            int maxCount = Integer.MIN_VALUE;
            for (int i = 0; i < count.length; i++) {
                if (count[i] > 0 && count[i] > maxCount) {
                    maxCount = count[i];
                    maxChar = (char)(i + 'a');
                }
            }

            // check whether the current character can be added to string builder
            boolean valid = true;
            for (int i = 0; i < sb.length(); i++) {
                if (Math.abs(maxChar - sb.charAt(i)) == 26) {
                    valid = false;
                    break;
                }
            }

            if (!valid) {
                return "";
            }

            sb.append(maxChar);
            count[maxChar - 'a']--;
        }

        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.35751295336787564

cat_success_cnt: 27

cat_success_rate: 0.627906976744186

