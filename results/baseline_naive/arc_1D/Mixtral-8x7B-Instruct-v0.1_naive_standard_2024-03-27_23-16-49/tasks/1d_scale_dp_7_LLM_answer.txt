
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'c', 'c', 'c', '.', '.', 'h']
output: ['.', 'c', 'c', 'c', 'c', 'c', 'h']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', 'h']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'h']

Example_3:
input: ['c', 'c', 'c', '.', '.', '.', 'h']
output: ['c', 'c', 'c', 'c', 'c', 'c', 'h']

Test case:
input: ['d', 'd', 'd', '.', '.', '.', 'h']

###########################################################
Sample Outputs:
output: ['d', 'd', 'd', 'd', 'd', 'd', 'h']
*/

public class Solution {
    public String replace(String str, char oldChar, char newChar) {
        // Write your solution here
        if (str == null || str.length() <= 0) return "";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i)!= oldChar) {
                sb.append(str.charAt(i));
            } else {
                sb.append(newChar);
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['d', 'd', 'd', 'd', 'd', 'd', 'h']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2135706340378198

cat_success_cnt: 23

cat_success_rate: 0.46938775510204084

