
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'e', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'e', '.']

Example_2:
input: ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'e']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'e']

Example_3:
input: ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', 'e']
output: ['.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'e']

Test case:
input: ['f', 'f', 'f', 'f', '.', '.', '.', '.', 'e', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'e', '.', '.']
*/

// Solution 1:
/*
function moveElementToEnd(array, toMove) {
    let left = 0;
    let right = array.length - 1;

    while (left < right) {
        if (array[right] === toMove && array[left]!== toMove) {
            // swap elements at indexes left and right
            const temp = array[left];
            array[left] = array[right];
            array[right] = temp;
            left++;
            right--;
        } else if (array[right]!== toMove) {
            right--;
        } else if (array[left] === toMove) {
            left++;
        }
    }

    return array;
}
*/

// Solution 2:
const moveElementToEnd = (array, toMove) => {
    let left = 0;
    for (let right = 0; right < array.length; right++) {
        if (array[right]!== toMove) {
            [array[left], array[right]] = [array[right], array[left]];
            left++;
        }
    }

    return array;
};

console.log(moveElementToEnd(['.','b','b','b','b','b','.','.','e','.'], 'b'));
console.log(moveElementToEnd(['d','d','d','d','d','d','.','.','.','e'], 'd'));
console.log(moveElementToEnd(['h','h','h','h','.','.','.','.','.'], 'h'));
console.log(moveElementToEnd(['f','f','f','f','.','.','.','.','e','.'], 'f'));


###########################################################
Result:
solution: ['.', '.', '.', '.', 'f', 'f', 'f', 'f', 'e', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.23135755258126195

cat_success_cnt: 0

cat_success_rate: 0.0

