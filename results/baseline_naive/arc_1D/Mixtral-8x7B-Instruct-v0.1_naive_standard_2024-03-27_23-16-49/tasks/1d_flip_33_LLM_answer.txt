
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'b', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'b', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'a', 'f', 'f', 'f', 'f', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'a', '.', '.', '.']

Example_3:
input: ['.', 'a', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'a', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'a', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] rearrange(String[] input) {
        if (input == null || input.length <= 1) return input;

        int left = -1, right = -1;
        for (int i = 0; i < input.length; ++i) {
            if (input[i].equals(".")) {
                if (left == -1) left = i;
                else right = i;
            }
        }

        // no need to swap
        if (right == -1) return input;

        // find the first non-dot char from left and right side
        while (++left < input.length && input[left].equals("."));
        while (--right >= 0 && input[right].equals("."));

        // all dots are on one side of array
        if (left > right + 1) {
            reverse(input, 0, right);
            return input;
        }

        // move chars between left and right to their final position
        for (int i = left; i <= right; ++i) {
            if (!input[i].equals(".") &&!input[i].equals(input[left])) {
                swap(input, i, left);
                ++left;
            }
        }

        // now we have a subarray with only dots in it
        // let's put them into correct place
        int l = 0, r = left - 1;
        while (l < left && r < right) {
            if (input[l].equals(".")) {
                swap(input, l, r);
                ++r;
            }
            ++l;
        }

        return input;
    }

    private void swap(String[] arr, int x, int y) {
        String tmp = arr[x];
        arr[x] = arr[y];
        arr[y] = tmp;
    }

    private void reverse(String[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            ++start; --end;
        }
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'a', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.34831460674157305

cat_success_cnt: 20

cat_success_rate: 0.7142857142857143

