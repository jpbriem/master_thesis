
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', 'i', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'i', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'i']
output: ['.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'i']

Example_3:
input: ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'i', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'i', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'i', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'l') {
                arr[i] = '.';
            } else {
                arr[i] = dominoes.charAt(i);
            }
        }
        // System.out.println(Arrays.toString(arr));
        boolean isLeftPush = false;
        for (int i = 0; i < len - 1; ++i) {
            if (arr[i] == '.' && arr[i + 1]!= '.') {
                if (arr[i + 1] == 'l') {
                    continue;
                }
                if (!isLeftPush) {
                    isLeftPush = true;
                }
                int j = i;
                while (j >= 0 && arr[j] == '.') {
                    arr[j--] = 'l';
                }
                if (j >= 0 && arr[j] == 'r') {
                    int k = j;
                    while (k <= i) {
                        arr[k++] = 'r';
                    }
                }
            }
        }
        isLeftPush = false;
        for (int i = len - 1; i > 0; --i) {
            if (arr[i] == '.' && arr[i - 1]!= '.') {
                if (arr[i - 1] == 'r') {
                    continue;
                }
                if (!isLeftPush) {
                    isLeftPush = true;
                }
                int j = i;
                while (j < len && arr[j] == '.') {
                    arr[j++] = 'r';
                }
                if (j < len && arr[j] == 'l') {
                    int k = j;
                    while (k >= i) {
                        arr[k--] = 'l';
                    }
                }
            }
        }
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '.') {
                arr[i] = 'f';
            }
        }
        return Arrays.copyOf(arr, len);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'i', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.22889305816135083

cat_success_cnt: 1

cat_success_rate: 0.030303030303030304

