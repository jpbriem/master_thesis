
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', '.', '.', 'g', '.', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'g', '.', '.', '.', '.', '.']

Example_2:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', 'g', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'g', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', 'g', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'g', '.', '.']

Test case:
input: ['d', 'd', 'd', 'd', 'd', '.', '.', 'g', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'g', '.', '.']
*/

// Solution 1:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == 'R') {
                while (i < len && dominoes.charAt(i)!= 'L') {
                    arr[i] = 'R';
                    ++i;
                }
                if (i < len && dominoes.charAt(i) == 'L') {
                    int j = i - 1;
                    while (j >= 0 && arr[j] == '\u0000') {
                        arr[j--] = 'R';
                    }
                    --i;
                }
            } else if (dominoes.charAt(i) == 'L') {
                while (i < len && dominoes.charAt(i)!= 'R') {
                    arr[i] = 'L';
                    ++i;
                }
                if (i < len && dominoes.charAt(i) == 'R') {
                    int j = i - 1;
                    while (j >= 0 && arr[j] == '\u0000') {
                        arr[j--] = 'L';
                    }
                    --i;
                }
            } else {
                arr[i] = '.';
            }
        }
        return new String(arr);
    }
}

// Solution 2:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length(), left = 0, right = len - 1;
        StringBuilder sb = new StringBuilder();
        while (left <= right) {
            // find the first non-zero element from left to right
            while (left <= right && dominoes.charAt(left) == '0') {
                ++left;
            }
            // find the first non-zero element from right to left
            while (right >= left && dominoes.charAt(right) == '0') {
                --right;
            }
            // all elements between left and right are zero
            if (left > right) break;
            // there is a R in the middle of L and. or no L on its left side
            if (dominoes.charAt(left) == 'R' || dominoes.charAt(right) == 'L') {
                sb.append('R');
                // fill the gap with.
                for (int i = left + 1; i < right; ++i) {
                    sb.append('.');
                }
                // add the last one
                sb.append('L');
            } else {
                // both sides have Ls
                int dist = right - left + 1;
                // half distance
                int mid = dist / 2;
                // fill the gap with L
                for (int i = 0; i < mid; ++i) {
                    sb.append('L');
                }
                // add the rest dots
                for (int i = mid; i < dist; ++i) {
                    sb.append('.');
                }
            }
            // move forward
            left += 2;
            right -= 2;
        }
        // remaining part
        while (left <= right) {
            sb.append('0');
            ++left;
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'g', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26715686274509803

cat_success_cnt: 0

cat_success_rate: 0.0

