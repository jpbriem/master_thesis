
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.']

Example_2:
input: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']

Example_3:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']

Test case:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' && i + 1 < len && dominoes.charAt(i + 1)!= '.') {
                arr[i] = dominoes.charAt(i + 1);
            } else {
                arr[i] = dominoes.charAt(i);
            }
        }

        boolean leftToRight = true;
        for (int i = 0; i < len; ) {
            if (arr[i] == 'R' || arr[i] == '.') {
                int j = i;
                while (j < len && arr[j] == 'R') {
                    ++j;
                }
                if (j < len && arr[j] == 'L') {
                    int k = j - 1;
                    while (k >= i) {
                        arr[k--] = '0';
                    }
                    j += 2;
                    i = j;
                } else {
                    i = j;
                }
            } else { // arr[i] == 'L'
                int j = i;
                while (j < len && arr[j] == 'L') {
                    ++j;
                }
                if (j < len && arr[j] == 'R') {
                    int k = j - 1;
                    while (k > i) {
                        arr[k--] = '0';
                    }
                    j += 2;
                    i = j;
                } else {
                    i = j;
                }
            }
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '0') {
                sb.append('.');
            } else {
                sb.append(arr[i]);
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.29411764705882354

cat_success_cnt: 1

cat_success_rate: 0.14285714285714285

