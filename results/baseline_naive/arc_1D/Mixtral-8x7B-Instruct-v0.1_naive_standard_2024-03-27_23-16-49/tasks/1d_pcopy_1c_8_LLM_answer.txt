
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'h', 'h', 'h', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'g', 'g', 'g', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'e', 'e', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', '.', '.', '.', '.', 'e', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String longestSemiRepetitiveSubstring(String s) {
        int n = s.length();
        if (n <= 1) return s;

        // sliding window approach
        int left = 0, right = -1;
        int maxLen = Integer.MIN_VALUE;
        StringBuilder sb = new StringBuilder();

        while (right < n-1 && left < n-1) {
            // expand the window to the right as long as it's valid
            while (right + 1 < n && isValid(s, left, right+1)) {
                right++;
            }

            // update the answer and shrink the window from the left side
            int len = right - left + 1;
            if (len > maxLen) {
                maxLen = len;
                sb = new StringBuilder(s.substring(left, right+1));
            }

            // move the left pointer forward by one position
            left++;

            // reset the right pointer back to the last valid index
            while (left < right &&!isValid(s, left, right)) {
                right--;
            }
        }

        return sb.toString();
    }

    private boolean isValid(String s, int start, int end) {
        char c = s.charAt(start);
        for (int i=start+1; i<=end; i++) {
            if (s.charAt(i) == c) return false;
        }
        return true;
    }
}


###########################################################
Result:
solution: ['.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2049306625577812

cat_success_cnt: 7

cat_success_rate: 0.14285714285714285

