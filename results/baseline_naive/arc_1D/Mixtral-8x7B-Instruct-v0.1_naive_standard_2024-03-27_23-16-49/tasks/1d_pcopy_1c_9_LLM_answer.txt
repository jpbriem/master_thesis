
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'f', 'f', 'f', '.', '.', '.', '.', 'f', '.', '.', '.', 'f', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'f', 'f', 'f', '.', '.', '.', 'f', 'f', 'f', '.', 'f', 'f', 'f', '.', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'd', 'd', 'd', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'a', 'a', 'a', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        if (n == 0) return "";
        Integer[] dp = new Integer[n];
        Arrays.fill(dp, 1);
        int maxLen = 1;
        for (int i = 0; i < n; ++i) {
            // binary search to find the largest j such that obstacles[j] <= obstacles[i].
            int left = 0, right = maxLen - 1;
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (obstacles[dp[mid]] > obstacles[i]) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            dp[left] = i;
            if (left == maxLen) {
                maxLen++;
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < maxLen; ++i) {
            sb.append('.');
            sb.append((char)(obstacles[dp[i]] + 'a' - 1));
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.20615384615384616

cat_success_cnt: 8

cat_success_rate: 0.16

