
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'd', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', 'c', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', 'a', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
*/

public class Solution {
    public String[] expand(String S) {
        List<String> list = new ArrayList<>();
        int index = 0;
        while (index < S.length()) {
            if (S.charAt(index) == '.') {
                index++;
            } else {
                char c = S.charAt(index);
                int count = 0;
                while (index + 1 < S.length() && Character.isDigit(S.charAt(index + 1))) {
                    count += S.charAt(++index) - '0';
                }
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i <= count; i++) {
                    sb.append(c);
                }
                list.add(sb.toString());
                index++;
            }
        }
        String[] res = new String[list.size()];
        for (int i = 0; i < list.size(); i++) {
            res[i] = list.get(i);
        }
        return multiply(res);
    }

    private String[] multiply(String[] nums) {
        int len = nums.length;
        int m = nums[0].length(), n = nums[len - 1].length();
        String[] result = new String[len];
        Arrays.fill(result, ".");
        for (int i = 0; i < len; i++) {
            result[i] = repeatChar(nums[i], m + n - 1);
        }
        for (int j = 1; j < len; j++) {
            for (int k = m - 1; k >= 0; k--) {
                for (int l = n - 1; l > 0; l--) {
                    if (result[j].charAt(k + l)!= '.' && result[j - 1].charAt(l)!= '.') {
                        result[j - 1] = replace(result[j - 1], l, result[j].charAt(k + l));
                    }
                }
            }
        }
        return result;
    }

    private String replace(String s, int start, char c) {
        StringBuilder sb = new StringBuilder(s);
        for (int i = start; i < s.length(); i++) {
            if (sb.charAt(i)!= '.') {
                sb.setCharAt(i, c);
            }
        }
        return sb.toString();
    }

    private String repeatChar(String str, int times) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < times; i++) {
            sb.append(str);
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.28448275862068967

cat_success_cnt: 5

cat_success_rate: 0.3125

