
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'f', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'b', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] fill(String[] input) {
        if (input == null || input.length < 2) return input;

        int len = input.length, idx = -1;
        for (int i = 0; i < len; ++i) {
            if ("bf".indexOf(input[i])!= -1) {
                idx = i;
                break;
            }
        }

        if (idx == -1) return input;

        while (++idx < len && ".".equals(input[idx]));

        char c = input[idx].charAt(0);
        boolean isB = c == 'b';

        while (--idx >= 0) {
            if (!"bf".contains("" + input[idx])) continue;
            input[idx] = "" + c;
        }

        idx = 0;
        while (++idx < len && ".".equals(input[idx]));

        while (idx < len) {
            if (!"bf".contains("" + input[idx])) {
                ++idx;
                continue;
            }
            input[idx] = "" + c;
            while (++idx < len && ".".equals(input[idx]));
        }

        return input;
    }
}


###########################################################
Result:
solution: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2764227642276423

cat_success_cnt: 6

cat_success_rate: 0.2608695652173913

