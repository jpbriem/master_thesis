
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'a', 'a', 'a', '.', 'a', '.', '.', '.', 'a', 'a', '.', '.', '.', 'a', '.', 'a', 'a', '.']
output: ['.', 'e', 'e', 'e', '.', 'b', '.', '.', '.', 'i', 'i', '.', '.', '.', 'b', '.', 'i', 'i', '.']

Example_2:
input: ['.', 'a', 'a', 'a', '.', 'a', 'a', '.', 'a', '.', '.', '.', 'a', 'a', '.', 'a', '.', '.', '.']
output: ['.', 'e', 'e', 'e', '.', 'i', 'i', '.', 'b', '.', '.', '.', 'i', 'i', '.', 'b', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'a', '.', 'a', 'a', '.', '.', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', '.', 'a']
output: ['.', '.', '.', 'b', '.', 'i', 'i', '.', '.', 'e', 'e', 'e', '.', '.', '.', 'i', 'i', '.', 'b']

Test case:
input: ['.', '.', 'a', '.', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', '.', '.', '.', 'a', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'b', '.', 'i', 'i', 'i', '.', '.', '.', 'e', 'e', '.', '.', '.', 'i', '.', '.', '.']
*/

public class Solution {
    public String findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        StringBuilder sb = new StringBuilder();
        List<Integer> list = new ArrayList<>();
        for (int i : indexes){
            if (!S.substring(i).contains(sources[0])){
                continue;
            }
            else{
                list.add(i);
            }
        }
        Collections.sort(list);
        for (int i = 0 ; i < list.size() ; i++){
            int start = list.get(i);
            boolean flag = true;
            for (int j = 0 ; j < sources.length ; j ++){
                if (start + sources[j].length() > S.length()){
                    break;
                }
                if (S.substring(start, start + sources[j].length()).equals(sources[j])){
                    sb.append(targets[j]);
                    flag = false;
                    start += sources[j].length();
                    break;
                }
            }
            if (flag){
                sb.append(S.charAt(start));
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', 'b', '.', 'e', 'e', 'e', '.', '.', '.', 'i', 'i', '.', '.', '.', 'b', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.19845360824742267

cat_success_cnt: 0

cat_success_rate: 0.0

