
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'c', 'c', 'c', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'd', 'd', 'd', '.', '.', 'i', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', '.', 'i', 'i', 'i', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'i', 'i', 'i', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'i', 'i', 'i', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', '.', '.', '.', 'd', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'g', 'g', 'g', '.', '.', 'd', 'd', 'd', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] replace(String[] arr) {
        if (arr == null || arr.length <= 0) return new String[0];
        int len = arr.length;
        for (int i = 0; i < len - 1; i++) {
            if (arr[i].equals(".") &&!arr[i + 1].equals(".")) {
                char c = arr[i + 1].charAt(0);
                int j = i + 1;
                while (j < len && arr[j].equals(".")) {
                    j++;
                }
                // j is the index of first non-dot character after i+1
                if (j < len && arr[j].charAt(0)!= c) {
                    // there are different characters between i and j, so we need to insert all these characters into result array
                    StringBuilder sb = new StringBuilder();
                    for (int k = i + 1; k < j; k++) {
                        sb.append(arr[k]);
                    }
                    String str = sb.toString();
                    String[] res = new String[len + str.length() - j + 1];
                    System.arraycopy(arr, 0, res, 0, i + 1);
                    for (int m = 0; m < str.length(); m++) {
                        res[i + 1 + m] = Character.toString(str.charAt(m));
                    }
                    System.arraycopy(arr, j, res, i + 1 + str.length(), len - j);
                    arr = res;
                    len += str.length() - j + 1;
                } else {
                    // no different characters between i and j, just change the dot to the same character as arr[i+1]
                    for (int k = i + 1; k < j; k++) {
                        arr[k] = Character.toString(c);
                    }
                }
            }
        }
        return arr;
    }
}


###########################################################
Result:
solution: ['.', '.', 'g', 'g', 'g', '.', '.', 'd', 'd', 'd', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20600858369098712

cat_success_cnt: 10

cat_success_rate: 0.20408163265306123

