
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'e', '.', 'e', '.', '.', '.']
output: ['.', '.', '.', 'e', 'e', 'e', '.', '.', '.']

Example_2:
input: ['c', '.', '.', 'c', '.', '.', '.', '.', '.']
output: ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'f', '.', '.', '.', 'f', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.']

Test case:
input: ['g', '.', '.', '.', 'g', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.']
*/

public class Solution {
    public String[] findWords(String[] words) {
        if (words == null || words.length == 0) return new String[0];

        List<String> result = new ArrayList<>();
        for (String word : words) {
            boolean isValid = true;
            int row = -1;
            char firstChar = Character.toLowerCase(word.charAt(0));
            if (firstChar >= 'a' && firstChar <= 'z') {
                row = firstChar / 3;
            } else {
                continue;
            }

            for (int i = 1; i < word.length(); i++) {
                char c = Character.toLowerCase(word.charAt(i));
                if ((row == 0 && (c < 'a' || c > 'c')) ||
                    (row == 1 && (c < 'd' || c > 'f')) ||
                    (row == 2 && (c < 'g' || c > 'i'))) {
                    isValid = false;
                    break;
                }
            }

            if (isValid) {
                result.add(word);
            }
        }

        return result.toArray(new String[result.size()]);
    }
}


###########################################################
Result:
solution: ['g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27049180327868855

cat_success_cnt: 5

cat_success_rate: 0.22727272727272727

