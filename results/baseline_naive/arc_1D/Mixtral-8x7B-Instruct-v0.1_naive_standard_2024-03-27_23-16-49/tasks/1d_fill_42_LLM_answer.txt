
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'e', '.', '.', '.', 'e', '.', '.', '.', '.']
output: ['.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Example_2:
input: ['.', 'd', '.', '.', 'd', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.']

Example_3:
input: ['e', '.', '.', '.', '.', 'e', '.', '.', '.', '.']
output: ['e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Test case:
input: ['.', 'd', '.', '.', '.', '.', 'd', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'd', 'd', 'd', '.', '.', 'd', '.', '.', '.']
*/

public class Solution {
    public String[] reformat(String[] input) {
        int len = input.length;
        if (len == 0 || len % 2!= 0) return new String[0];

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; i++) {
            if (i % 2 == 0 &&!input[i].equals(".")) {
                while (!input[i + 1].equals(".") && i + 1 < len) {
                    sb.append(input[++i]);
                }
                sb.append(input[i]);
            } else if (i % 2!= 0 &&!input[i].equals(".")) {
                sb.insert(0, input[i]);
            }
        }

        String[] res = new String[len];
        for (int j = 0; j < len; j++) {
            res[j] = sb.toString().substring(j * 2, j * 2 + 2);
        }

        return res;
    }
}


###########################################################
Result:
solution: ['.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26811594202898553

cat_success_cnt: 9

cat_success_rate: 0.23684210526315788

