
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'b', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'b', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' && i + 1 < len && dominoes.charAt(i + 1)!= '.') {
                arr[i] = dominoes.charAt(i + 1);
            } else {
                arr[i] = dominoes.charAt(i);
            }
        }

        // left to right
        boolean isLeftPush = false;
        for (int i = 0; i < len - 1; ++i) {
            if (arr[i] == 'R' || arr[i] == 'B') {
                isLeftPush = true;
            } else if (isLeftPush) {
                int j = i;
                while (j >= 0 && arr[j] == '.') {
                    arr[j--] = 'L';
                }
                if (j >= 0 && arr[j] == 'L') {
                    --i;
                }
                isLeftPush = false;
            }
        }

        // right to left
        boolean isRightPush = false;
        for (int i = len - 1; i > 0; --i) {
            if (arr[i] == 'L' || arr[i] == 'B') {
                isRightPush = true;
            } else if (isRightPush) {
                int j = i;
                while (j < len && arr[j] == '.') {
                    arr[j++] = 'R';
                }
                if (j < len && arr[j] == 'R') {
                    --i;
                }
                isRightPush = false;
            }
        }

        return Arrays.toString(arr).replaceAll("[\\[\\],]", "").split(", ");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2639225181598063

cat_success_cnt: 0

cat_success_rate: 0.0

