
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['d', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
output: ['g', 'g', 'g', 'g', 'd', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'd', 'a', 'a', '.', '.', '.']
output: ['.', '.', '.', '.', 'a', 'a', 'd', '.', '.', '.']

Example_3:
input: ['g', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']
output: ['f', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'f', 'd', 'd', 'd', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'd', 'd', 'd', 'f', '.', '.', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String[] shuffle(String[] nums, int n) {
        if (nums == null || nums.length < 2 || n <= 0) return nums;

        for (int i = 0; i < n; ++i) {
            // swap the elements at index i and n + i
            String temp = nums[n + i];
            nums[n + i] = nums[i];
            nums[i] = temp;
        }

        return nums;
    }
}

// Solution 2:
class Solution {
    public String[] shuffle(String[] nums, int n) {
        if (nums == null || nums.length < 2 || n <= 0) return nums;

        String[] result = new String[nums.length];
        for (int i = 0; i < n; ++i) {
            result[2 * i] = nums[i];
            result[2 * i + 1] = nums[n + i];
        }

        return result;
    }
}


###########################################################
Result:
solution: ['.', 'd', 'd', 'd', 'f', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.310126582278481

cat_success_cnt: 7

cat_success_rate: 0.875

