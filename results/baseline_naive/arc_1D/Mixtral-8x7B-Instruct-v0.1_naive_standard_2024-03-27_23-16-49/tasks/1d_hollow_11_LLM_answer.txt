
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', 'a', '.', '.']

Example_2:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['e', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.']
output: ['.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.']
*/

public class Solution {
    public String compress(String S) {
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (int i = 0; i < S.length(); ++i) {
            if (i == S.length() - 1 || S.charAt(i)!= S.charAt(i + 1)) {
                sb.append(S.charAt(i));
                sb.append(count);
                count = 0;
            } else {
                count++;
            }
        }
        return sb.toString().length() >= S.length()? S : sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', 'a', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3627450980392157

cat_success_cnt: 1

cat_success_rate: 0.25

