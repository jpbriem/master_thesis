
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']

Example_3:
input: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']

Test case:
input: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.']
*/

public class Solution {
    public String[] move(String[] board) {
        // Write your solution here
        if (board == null || board.length < 2 || board[0].length()!= 21) return board;
        int n = board.length, m = board[0].length();
        for (int i = 0; i < n; ++i) {
            boolean hasDirt = false;
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < m; ++j) {
                if (j > 0 && board[i].charAt(j - 1) == '.' && board[i].charAt(j) == 'd') {
                    --j;
                    hasDirt = true;
                } else if (board[i].charAt(j) == 'd') {
                    sb.append('d');
                    hasDirt = true;
                } else {
                    sb.append('.');
                }
            }
            if (!hasDirt) continue;
            int k = 0;
            while (k < m && sb.charAt(k) == '.') ++k;
            if (k >= m) continue;
            int idx = k;
            while (idx + 1 < m && sb.charAt(idx + 1) == 'd') ++idx;
            if (idx + 1 < m && sb.charAt(idx + 1) == '.') {
                sb.setCharAt(idx + 1, 'd');
                sb.deleteCharAt(k);
            }
            board[i] = sb.toString();
        }
        return board;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.25

cat_success_cnt: 0

cat_success_rate: 0.0

