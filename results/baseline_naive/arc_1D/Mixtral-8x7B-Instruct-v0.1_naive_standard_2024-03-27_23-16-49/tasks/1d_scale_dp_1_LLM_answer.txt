
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', 'b', '.', '.', '.']
output: ['.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'b', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'b']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'b', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b', '.', '.', '.', '.']

Test case:
input: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'b']

###########################################################
Sample Outputs:
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'b']
*/

// Solution 1:
class Solution {
    public String[] replaceSpaces(String[] strArr, int trueLength) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < trueLength; i++) {
            if (strArr[i].equals(" ")) {
                sb.append("%20");
            } else {
                sb.append(strArr[i]);
            }
        }
        String s = sb.toString();
        String[] result = new String[trueLength + ((s.length() - trueLength) / 3)];
        int index = 0;
        for (int i = 0; i < s.length(); i += 3) {
            if (s.charAt(i) == '%') {
                result[index] = "%";
                result[++index] = "" + s.charAt(i+1);
                result[++index] = "" + s.charAt(i+2);
            } else {
                result[index] = "" + s.charAt(i);
            }
            index++;
        }
        return result;
    }
}

// Solution 2:
class Solution {
    public String[] replaceSpaces(String[] strArr, int trueLength) {
        // count the number of spaces in original string
        int spaceCount = 0;
        for (int i = 0; i < trueLength; i++) {
            if (strArr[i].equals(" ")) {
                spaceCount++;
            }
        }
        // calculate the length of final array
        int len = trueLength + spaceCount * 2;
        // create a new array with calculated length
        String[] res = new String[len];
        // copy elements from old to new array and replace spaces
        for (int i = 0, j = 0; i < trueLength; i++) {
            if (strArr[i].equals(" ")) {
                res[j++] = "%";
                res[j++] = "2";
                res[j++] = "0";
            } else {
                res[j++] = strArr[i];
            }
        }
        return res;
    }
}


###########################################################
Result:
solution: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'b']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.19953051643192488

cat_success_cnt: 1

cat_success_rate: 0.5

