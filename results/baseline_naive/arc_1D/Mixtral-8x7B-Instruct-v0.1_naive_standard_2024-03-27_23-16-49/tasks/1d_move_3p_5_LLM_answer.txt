
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] pushDominoes(String[] dominoes) {
        int n = dominoes.length;
        char[] arr = new char[n];
        for (int i = 0; i < n; ++i) {
            if (dominoes[i].charAt(0)!= '.') {
                arr[i] = dominoes[i].charAt(0);
            } else {
                break;
            }
        }
        for (int i = n - 1; i >= 0 && arr[n - 1] == '.'; --i) {
            if (dominoes[i].charAt(1)!= '.') {
                arr[i] = dominoes[i].charAt(1);
            } else {
                break;
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0; i < n; ++i) {
            if (arr[i] == '.') continue;
            if (arr[i] == 'l' && i > 0 && arr[i - 1] == '.') {
                int j = i - 1;
                while (j >= 0 && arr[j] == '.') {
                    arr[j--] = 'l';
                }
            } else if (arr[i] == 'r' && i + 1 < n && arr[i + 1] == '.') {
                int j = i + 1;
                while (j < n && arr[j] == '.') {
                    arr[j++] = 'r';
                }
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0; i < n; ++i) {
            if (arr[i] == '.') {
                if (i > 0 && arr[i - 1] == 'l') {
                    arr[i] = 'l';
                } else if (i + 1 < n && arr[i + 1] == 'r') {
                    arr[i] = 'r';
                }
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0; i < n; ++i) {
            if (arr[i] == 'l') {
                int j = i - 1;
                while (j >= 0 && arr[j] == 'l') {
                    --i;
                    --j;
                }
                if (j >= 0 && arr[j] == '.') {
                    arr[j] = 'l';
                }
            } else if (arr[i] == 'r') {
                int j = i + 1;
                while (j < n && arr[j] == 'r') {
                    ++i;
                    ++j;
                }
                if (j < n && arr[j] == '.') {
                    arr[j] = 'r';
                }
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0; i < n; ++i) {
            if (arr[i] == '.') {
                arr[i] = '0';
            }
        }
        return Arrays.copyOf(arr, n);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.24193548387096775

cat_success_cnt: 6

cat_success_rate: 0.13043478260869565

