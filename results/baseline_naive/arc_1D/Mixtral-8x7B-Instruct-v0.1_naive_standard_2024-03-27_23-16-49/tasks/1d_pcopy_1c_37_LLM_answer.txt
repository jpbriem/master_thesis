
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'd', 'd', 'd', '.', '.', '.', 'd', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'i', 'i', 'i', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'i', 'i', 'i', '.', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'e', 'e', 'e', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'a', 'a', 'a', '.', '.', 'a', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] expand(String S) {
        List<String> res = new ArrayList<>();
        int n = S.length();
        for (int i = 0; i < n; ) {
            char c = S.charAt(i);
            if (c == '.') break;
            int j = i + 1;
            while (j < n && S.charAt(j)!= c) ++j;
            StringBuilder sb = new StringBuilder();
            for (int k = i; k <= j; ++k) sb.append(S.charAt(k));
            if (res.isEmpty()) {
                res.addAll(expandAux(sb.toString()));
            } else {
                List<String> tmp = new ArrayList<>();
                for (String str : res) {
                    tmp.addAll(expandAux(str + sb.toString()));
                }
                res = tmp;
            }
            i = j + 1;
        }
        if (i < n) {
            res.add("");
            for (int j = i; j < n; ++j) {
                res = expandOneChar(res, S.charAt(j));
            }
        }
        return res.toArray(new String[res.size()]);
    }

    private List<String> expandAux(String s) {
        List<String> res = new ArrayList<>();
        res.add(s);
        int len = s.length();
        for (int i = 0; i < len / 2; ++i) {
            char c = s.charAt(i);
            res.add(c + s.substring(i + 1, len - i) + c);
        }
        return res;
    }

    private List<String> expandOneChar(List<String> list, char c) {
        List<String> res = new ArrayList<>();
        for (String s : list) {
            res.add(s + c);
        }
        return res;
    }
}


###########################################################
Result:
solution: ['.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20727848101265822

cat_success_cnt: 5

cat_success_rate: 0.15625

