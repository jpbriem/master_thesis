
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', '.', 'e', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'd', 'd', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', 'i', '.', 'i', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'e', 'e', 'e', '.', 'e', 'e', '.', '.', '.', 'e', '.', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', '.', 'd', 'd', '.', '.', '.', 'i', '.', 'd', 'd', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'e', 'e', '.', 'e', 'e', 'e', '.', '.', '.', 'e', '.', 'e', 'e', '.', '.', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'd', 'd', '.', 'a', 'a', 'a', '.', '.', '.', 'i', '.', 'd', 'd', '.', '.', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'e', 'e', '.', '.', '.', 'e', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'd', 'd', '.', 'a', 'a', 'a', '.', '.', '.', 'i', '.', 'd', 'd', '.', '.', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < S.length(); ++i) {
            if (i == indexes[0] && sources[0].equals(S.substring(i, Math.min(indexes[1], S.length())))) {
                sb.append(targets[0]);
                i += sources[0].length() - 1;
            } else {
                sb.append(S.charAt(i));
            }
            for (int j = 1; j < indexes.length; ++j) {
                if (indexes[j] <= i + sources[j-1].length()) continue;
                if (i == indexes[j] && sources[j].equals(S.substring(i, Math.min(indexes[j+1], S.length())))) {
                    sb.append(targets[j]);
                    i += sources[j].length() - 1;
                    break;
                }
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', 'd', 'd', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', '.', '.', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2010443864229765

cat_success_cnt: 0

cat_success_rate: 0.0

