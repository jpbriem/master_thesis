{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']\noutput: ['.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']\n\nExample_2:\ninput: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.']\noutput: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']\n\nExample_3:\ninput: ['.', '.', '.', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']\noutput: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', '.', '.']\n\nTest case:\ninput: ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']\n\n###########################################################\nSample Outputs:\noutput: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']\n*/\n\n// Solution 1:\n/*\nfunction moveElementToEnd(array, toMove) {\n    let left = 0;\n    let right = array.length - 1;\n\n    while (left < right) {\n        if (array[right] === toMove && array[left]!== toMove) {\n            // swap elements at indexes left and right\n            const temp = array[left];\n            array[left] = array[right];\n            array[right] = temp;\n            left++;\n            right--;\n        } else if (array[right]!== toMove) {\n            right--;\n        } else if (array[left] === toMove) {\n            left++;\n        }\n    }\n\n    return array;\n}\n*/\n\n// Solution 2:\nconst moveElementToEnd = (array, toMove) => {\n    let writeIdx = 0;\n\n    for (let readIdx = 0; readIdx < array.length; readIdx++) {\n        if (array[readIdx]!== toMove) {\n            array[writeIdx++] = array[readIdx];\n        }\n    }\n\n    while (writeIdx < array.length) {\n        array[writeIdx++] = toMove;\n    }\n\n    return array;\n};\n\nconsole.log(moveElementToEnd(['a', 'a', 'a', 'a', '.', '.', '.', '.', '.'], '.'));\nconsole.log(moveElementToEnd(['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], '.'));\nconsole.log(moveElementToEnd(['.', '.', '.', 'e', 'e', 'e', 'e', '.'], '.'));\nconsole.log(moveElementToEnd(['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], '.'));"
        }
    ],
    "idx": 457,
    "task": "1d_move_3p_15",
    "category": "1d_move_3p",
    "ys": [
        "1d_move_3p_15.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.25109170305676853,
        "cat_success_cnt": 1,
        "cat_success_rate": 0.125
    },
    "usage_so_far": {
        "completion_tokens": 240789,
        "prompt_tokens": 202259,
        "cost": null
    }
}