
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'h', '.', 'h', 'h', 'h', '.', '.', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.']
output: ['.', '.', 'f', '.', 'a', 'a', 'a', '.', '.', 'b', 'b', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.']

Example_2:
input: ['.', 'h', '.', '.', '.', 'h', 'h', 'h', '.', 'h', 'h', '.', 'h', 'h', 'h', '.', '.', 'h', 'h', 'h']
output: ['.', 'f', '.', '.', '.', 'a', 'a', 'a', '.', 'b', 'b', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a']

Example_3:
input: ['.', '.', '.', 'h', 'h', 'h', '.', 'h', 'h', '.', '.', 'h', '.', '.', 'h', 'h', 'h', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', '.', 'b', 'b', '.', '.', 'f', '.', '.', 'a', 'a', 'a', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'h', 'h', 'h', '.', 'h', '.', 'h', 'h', '.', '.', 'h', 'h', 'h', '.', 'h', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'a', 'a', 'a', '.', 'b', '.', 'b', 'b', '.', '.', 'f', 'a', 'a', 'a', '.', 'b', '.']
*/

public class Solution {
    public String[] findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        List<Integer> list = new ArrayList<>();
        for (int i : indexes) {
            if (S.substring(i, i + sources[0].length()).equals(sources[0])) {
                list.add(i);
            }
        }
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        int j = 0;
        for (int i = 0; i < S.length(); ) {
            if (j < list.size() && i == list.get(j)) {
                sb.append(targets[j]);
                i += sources[0].length();
                j++;
            } else {
                sb.append(S.charAt(i));
                i++;
            }
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'a', 'a', 'a', '.', 'f', '.', 'b', 'b', '.', '.', 'a', 'a', 'a', '.', 'f', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20157068062827224

cat_success_cnt: 0

cat_success_rate: 0.0

