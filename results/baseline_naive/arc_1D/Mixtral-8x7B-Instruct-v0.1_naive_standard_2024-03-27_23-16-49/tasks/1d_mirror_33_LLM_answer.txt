
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.']

Example_3:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.']
*/

public class MoveMaxFrequencyToEnd {
    public static void main(String[] args) {
        char[] input = {'.','.','.','.','f','f','f','f','f','f','f','.','.','i','.','.','.','.','.','.','.','.'};
        System.out.println("Input : " + Arrays.toString(input));
        moveMaxFreqToEnd(input);
        System.out.println("Output : " + Arrays.toString(input));
    }

    private static void moveMaxFreqToEnd(char[] arr){
        int maxCount = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == arr[i+1]){
                int count = 1;
                while (i<arr.length-1 && arr[i]==arr[++i]){
                    count++;
                }
                maxCount = Math.max(count, maxCount);
            }
        }

        //System.out.println("Max Count is : "+maxCount);

        int left = 0, right = 0;
        while (right < arr.length){
            if (arr[left]!= arr[right]){
                left++;
                arr[left] = arr[right];
            }
            else if (right - left + 1 > maxCount){
                int temp = arr[--left];
                arr[left] = arr[right];
                arr[right] = temp;
            }
            right++;
        }
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.302158273381295

cat_success_cnt: 3

cat_success_rate: 0.10714285714285714

