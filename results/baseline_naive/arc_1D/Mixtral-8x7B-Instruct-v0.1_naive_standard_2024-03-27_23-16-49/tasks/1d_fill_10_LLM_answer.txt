
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.']
output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', 'd', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.']
*/

public class Solution {
    public String[] fill(String[] board) {
        if (board == null || board.length == 0) return new String[0];
        int m = board.length, n = board[0].length();
        for (int i = 0; i < m; ++i) {
            if (board[i].charAt(0)!= '.' && checkBoundary(board, i, 0)) {
                dfs(board, i, 0);
            }
            if (board[i].charAt(n - 1)!= '.' && checkBoundary(board, i, n - 1)) {
                dfs(board, i, n - 1);
            }
        }
        for (int j = 0; j < n; ++j) {
            if (board[0].charAt(j)!= '.' && checkBoundary(board, 0, j)) {
                dfs(board, 0, j);
            }
            if (board[m - 1].charAt(j)!= '.' && checkBoundary(board, m - 1, j)) {
                dfs(board, m - 1, j);
            }
        }
        return board;
    }

    private void dfs(String[] board, int x, int y) {
        if (!checkBoundary(board, x, y)) return;
        char c = board[x].charAt(y);
        board[x] = board[x].substring(0, y) + c + board[x].substring(y + 1);
        dfs(board, x - 1, y);
        dfs(board, x + 1, y);
        dfs(board, x, y - 1);
        dfs(board, x, y + 1);
    }

    private boolean checkBoundary(String[] board, int x, int y) {
        return x >= 0 && x < board.length && y >= 0 && y < board[0].length() && board[x].charAt(y)!= '.';
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2912621359223301

cat_success_cnt: 2

cat_success_rate: 0.6666666666666666

