
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', 'e']
output: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e']

Example_2:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', '.', 'e', '.', '.']
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', '.', '.']

Example_3:
input: ['.', 'd', 'd', 'd', 'd', 'd', '.', '.', 'e', '.', '.']
output: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'e', '.', '.']

Test case:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', 'e', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', '.', 'e', '.']
*/

public class Solution {
    public String compress(String s) {
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i == s.length() - 1 || s.charAt(i)!= s.charAt(i + 1)) {
                sb.append(s.charAt(i));
                sb.append(count > 0? Integer.toString(count) : "");
                count = 0;
            } else {
                count++;
            }
        }
        return sb.toString().length() >= s.length()? s : sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20184544405997693

cat_success_cnt: 6

cat_success_rate: 0.35294117647058826

