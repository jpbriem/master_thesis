
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'b', 'i', 'i', 'i', 'f', 'i', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'f', 'b', 'e', 'e', 'e', 'h', 'e', 'e', 'e', 'h', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'h', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'd', 'a', 'a', 'a', 'g', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']
*/

// Solution 1:
class Solution {
    public String[] findLongestChain(String[] words) {
        if (words == null || words.length == 0) return new String[0];
        Arrays.sort(words, (w1, w2) -> Integer.compare(w1.length(), w2.length()));
        List<String> res = new ArrayList<>();
        Map<Integer, Set<Character>> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            int len = words[i].length();
            char c = words[i].charAt(len - 1);
            if (!map.containsKey(len)) map.put(len, new HashSet<>());
            if (!map.get(len).contains(c)) {
                map.get(len).add(c);
                res.add(words[i]);
            }
        }
        return res.toArray(new String[res.size()]);
    }
}

// Solution 2:
class Solution {
    public String[] findLongestChain(String[] words) {
        if (words == null || words.length == 0) return new String[0];
        Arrays.sort(words, (w1, w2) -> Integer.compare(w1.length(), w2.length()));
        List<String> res = new ArrayList<>();
        Set<Character> set = new HashSet<>();
        for (int i = 0; i < words.length; i++) {
            char c = words[i].charAt(words[i].length() - 1);
            if (!set.contains(c)) {
                set.add(c);
                res.add(words[i]);
            }
        }
        return res.toArray(new String[res.size()]);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.19718309859154928

cat_success_cnt: 10

cat_success_rate: 0.47619047619047616

