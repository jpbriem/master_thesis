
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', 'a', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', 'g', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (String word : words) {
            if (isValidWord(word)) {
                result.add(word);
            }
        }
        return result.toArray(new String[result.size()]);
    }

    private boolean isValidWord(String word) {
        int firstRow = getRow('q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p');
        int secondRow = getRow('a','s', 'd', 'f', 'g', 'h', 'j', 'k', 'l');
        int thirdRow = getRow('z', 'x', 'c', 'v', 'b', 'n','m');

        int row = -1;
        for (char c : word.toLowerCase().toCharArray()) {
            if (row == -1) {
                row = getRow(c);
            } else if (getRow(c)!= row) {
                return false;
            }
        }
        return true;
    }

    private int getRow(char c) {
        switch (c) {
            case 'q':
            case 'w':
            case 'e':
            case 'r':
            case 't':
            case 'y':
            case 'u':
            case 'i':
            case 'o':
            case 'p':
                return 0;
            case 'a':
            case's':
            case 'd':
            case 'f':
            case 'g':
            case 'h':
            case 'j':
            case 'k':
            case 'l':
                return 1;
            case 'z':
            case 'x':
            case 'c':
            case 'v':
            case 'b':
            case 'n':
            case'm':
                return 2;
            default:
                throw new IllegalArgumentException("Invalid character");
        }
    }

    private int getRow(int index, char... chars) {
        return getRow(chars[index]);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3438914027149321

cat_success_cnt: 3

cat_success_rate: 0.14285714285714285

