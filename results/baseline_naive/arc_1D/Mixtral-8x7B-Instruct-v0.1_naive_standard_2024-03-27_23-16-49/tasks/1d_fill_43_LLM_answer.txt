
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'b', '.', '.', '.', '.', 'b', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.']

Example_3:
input: ['b', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

Test case:
input: ['e', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
*/

// Solution 1:
/*
function fill(arr) {
    let start = arr.findIndex(el => el === "b" || el === "c");
    if (start < 0) return;
    for (let i = start; i < arr.length && arr[i]!== undefined; i++) {
        arr[i] = arr[start];
    }
}

function solution(arr) {
    fill(arr);
    fill(arr.slice().reverse());
    return arr;
}
*/

// Solution 2:
const solution = arr => [...new Set(arr)]
                           .filter(el => el!== ".")
                           .reduce((p, c) => p.map(x => x === "."? c : x), arr);


###########################################################
Result:
solution: ['e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26618705035971224

cat_success_cnt: 9

cat_success_rate: 0.23076923076923078

