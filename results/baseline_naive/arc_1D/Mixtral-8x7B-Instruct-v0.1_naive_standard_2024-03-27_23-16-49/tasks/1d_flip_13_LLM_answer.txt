
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'g', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'e', '.', '.', '.', '.', '.']
*/

// Solution 1:
/*
function flip(arr) {
    let left = 0;
    let right = arr.length - 1;
    while (left < right) {
        if (arr[left] === ".") {
            left++;
        } else if (arr[right] === ".") {
            right--;
        } else {
            // swap
            let temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
            left++;
            right--;
        }
    }
}

function moveGToEnd(arr) {
    flip(arr);
    let gIndex = 0;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i]!== "g") continue;
        gIndex = i;
        break;
    }
    let eIndex = 0;
    for (let j = gIndex + 1; j < arr.length; j++) {
        if (arr[j] === "e") {
            eIndex = j;
            break;
        }
    }
    if (gIndex > eIndex) return arr;
    let temp = arr[gIndex];
    arr[gIndex] = arr[eIndex];
    arr[eIndex] = temp;
    return arr;
}
*/

// Solution 2:
const flip = (arr, start, end) => {
    while (start < end) {
        const tmp = arr[start];
        arr[start++] = arr[end];
        arr[end--] = tmp;
    }
};

const moveGToEnd = arr => {
    let start = 0;
    let end = arr.length - 1;
    while (start <= end) {
        if (arr[start] === "." && arr[end] === ".") {
            start++;
            end--;
        } else if (arr[start] === ".") {
            start++;
        } else if (arr[end] === ".") {
            end--;
        } else if (arr[start] === "g" && arr[end] === "e") {
            start++;
            end--;
        } else if (arr[start] === "g") {
            flip(arr, start, end);
            start++;
            end--;
        } else if (arr[end] === "e") {
            flip(arr, start, end);
            start++;
            end--;
        }
    }
    return arr;
};

console.log(moveGToEnd(['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']));


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'e', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.3076923076923077

cat_success_cnt: 6

cat_success_rate: 1.0

