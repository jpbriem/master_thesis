
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'c', 'c', 'c', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'e', 'e', 'e', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'c', 'c', 'c', '.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'c', 'c', 'c', '.', '.', 'c', 'c', 'c', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'b', 'b', 'b', '.', '.', 'b', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'b', 'b', 'b', '.', '.', 'b', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] findLongestChain(String[] input) {
        if (input == null || input.length <= 0) return new String[0];

        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < input.length; i++) {
            int index = -1, count = 0;
            char c = input[i].charAt(0);
            for (int j = i + 1; j < input.length; j++) {
                if (input[j].charAt(0)!= c) break;
                count++;
            }
            if (count > 0) {
                index = i;
                while (count-- > 0) {
                    list.add(Arrays.asList(index++));
                }
            } else {
                list.add(Arrays.asList(i));
            }
        }

        // System.out.println("list=" + list);

        int len = list.size();
        int maxLen = Integer.MIN_VALUE;
        List<Integer> result = null;
        for (int i = 0; i < len; i++) {
            List<Integer> cur = list.get(i);
            int size = cur.size();
            if (size > maxLen) {
                maxLen = size;
                result = cur;
            }
        }

        String[] output = new String[maxLen];
        for (int i = 0; i < maxLen; i++) {
            output[i] = input[result.get(i).intValue()];
        }

        return output;
    }
}


###########################################################
Result:
solution: ['.', '.', 'b', 'b', 'b', '.', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20695102685624012

cat_success_cnt: 5

cat_success_rate: 0.15151515151515152

