
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'c', 'c', 'c', 'c', '.', '.']
output: ['.', '.', '.', 'c', '.', '.', 'c', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']
output: ['.', '.', '.', '.', 'c', '.', '.', 'c', '.']

Example_3:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.']
output: ['.', '.', 'h', '.', '.', '.', 'h', '.', '.']

Test case:
input: ['.', '.', '.', 'e', 'e', 'e', 'e', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'e', '.', '.', 'e', '.', '.']
*/

public class Solution {
    public String[] solve(String[] input) {
        if (input == null || input.length < 4) return input;
        for (int i = 0; i < input.length - 3; i++) {
            int count = 0;
            while (i + count < input.length && input[i + count].equals(".")) {
                count++;
            }
            if (count >= 2 && isSame(input, i, i + count)) {
                replace(input, i, i + count);
                i += count / 2 * 2;
            }
        }
        return input;
    }

    private boolean isSame(String[] arr, int start, int end) {
        char c = arr[start].charAt(0);
        for (int i = start + 1; i < end; i++) {
            if (arr[i].charAt(0)!= c) return false;
        }
        return true;
    }

    private void replace(String[] arr, int start, int end) {
        for (int i = start; i <= end; i++) {
            arr[i] = ".";
        }
        arr[start] = "" + ((char)(arr[start].charAt(0) + 1));
        arr[end] = "" + ((char)(arr[end].charAt(0) + 1));
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'e', '.', '.', 'e', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.32510288065843623

cat_success_cnt: 6

cat_success_rate: 0.13953488372093023

