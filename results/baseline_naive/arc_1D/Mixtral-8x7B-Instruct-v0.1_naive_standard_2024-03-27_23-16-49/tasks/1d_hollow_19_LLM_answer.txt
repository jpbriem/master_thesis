
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['c', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.']
output: ['.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.']

Example_3:
input: ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']
output: ['c', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['a', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] merge(String[] arr) {
        if (arr == null || arr.length <= 1) return arr;

        int len = arr.length, i = 0, j = 0;
        while (i < len && j < len - 1) {
            if (arr[j].equals(".") || arr[j + 1].equals(".")) {
                swap(arr, j, ++i);
            } else {
                j += 2;
            }
        }

        return arr;
    }

    private void swap(String[] arr, int a, int b) {
        String tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}


###########################################################
Result:
solution: ['a', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.35377358490566035

cat_success_cnt: 2

cat_success_rate: 0.16666666666666666

