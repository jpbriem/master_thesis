
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'c', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] freqQuery(String[] queries) {
        Map<Integer, Integer> countMap = new HashMap<>(); // <value, frequency>
        Map<Integer, Integer> freqMap = new HashMap<>(); // <frequency, number of values with this frequency>
        List<String> result = new ArrayList<>();

        for (String query : queries) {
            int operation = Integer.parseInt(query.split(" ")[0]);
            int value = Integer.parseInt(query.split(" ")[1]);

            if (operation == 1) {
                int oldFrequency = countMap.getOrDefault(value, 0);
                countMap.put(value, oldFrequency + 1);

                int newFrequency = oldFrequency + 1;
                freqMap.put(newFrequency, freqMap.getOrDefault(newFrequency, 0) + 1);
            } else {
                int frequency = countMap.get(value);
                if (frequency > 0) {
                    freqMap.put(frequency, freqMap.get(frequency) - 1);

                    int newFrequency = frequency - 1;
                    freqMap.put(newFrequency, freqMap.getOrDefault(newFrequency, 0) + 1);

                    countMap.put(value, frequency - 1);
                }
            }

            boolean isExist = false;
            for (int key : freqMap.keySet()) {
                if (freqMap.get(key) > 0 && key == countMap.size()) {
                    isExist = true;
                    break;
                }
            }

            result.add((isExist? "Yes" : "No"));
        }

        return result.toArray(new String[result.size()]);
    }
}


###########################################################
Result:
solution: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2897196261682243

cat_success_cnt: 3

cat_success_rate: 0.42857142857142855

