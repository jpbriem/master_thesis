
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'f', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'f', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['b', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['e', 'e', 'e', 'e', 'e', 'e', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'a', 'a', 'a', 'a', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'e', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'f', 'f', 'f', 'f', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'g', '.', '.']
*/

public class Solution {
    public String reverseString(String s) {
        char[] arr = new char[s.length()];
        int index = 0;
        for (char c : s.toCharArray()) {
            if (c == '.') {
                arr[index++] = c;
            } else {
                while (arr[index - 1]!= '.') {
                    index--;
                }
                arr[index++] = c;
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'g', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.3253012048192771

cat_success_cnt: 12

cat_success_rate: 0.75

