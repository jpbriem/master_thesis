
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'h', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'h']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'h']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'h', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        // check left side of each dot
        for (int i = 0; i < len - 1; ++i) {
            if (arr[i] == '.' && arr[i + 1]!= '.') {
                if (arr[i + 1] == 'l') {
                    int j = i;
                    while (j >= 0 && arr[j] == '.') {
                        arr[j--] = 'L';
                    }
                } else {
                    int j = i;
                    while (j >= 0 && arr[j] == '.') {
                        arr[j--] = 'R';
                    }
                }
            }
        }
        // check right side of each dot
        for (int i = len - 1; i > 0; --i) {
            if (arr[i] == '.' && arr[i - 1]!= '.') {
                if (arr[i - 1] == 'r') {
                    int j = i;
                    while (j < len && arr[j] == '.') {
                        arr[j++] = 'R';
                    }
                } else {
                    int j = i;
                    while (j < len && arr[j] == '.') {
                        arr[j++] = 'L';
                    }
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            if (arr[i] == 'L' || arr[i] == 'R') {
                sb.append('.');
            } else {
                sb.append(arr[i]);
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'h', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.22344322344322345

cat_success_cnt: 1

cat_success_rate: 0.021739130434782608

