
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']
output: ['.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']

Example_2:
input: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.']
output: ['.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.']

Example_3:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['b', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.']

Test case:
input: ['g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            if (isValid(words[i])) {
                result.add(words[i]);
            }
        }
        return result.toArray(new String[result.size()]);
    }

    private boolean isValid(String word) {
        int firstRow = -1, secondRow = -1;
        for (char c : word.toLowerCase().toCharArray()) {
            switch (c) {
                case 'a':
                case 'd':
                case 'g':
                    if (firstRow == -1) {
                        firstRow = 0;
                    } else if (secondRow!= -1 && firstRow!= secondRow) {
                        return false;
                    }
                    break;
                case 'j':
                case'm':
                case 'p':
                    if (firstRow == -1) {
                        firstRow = 1;
                    } else if (secondRow!= -1 && firstRow!= secondRow) {
                        return false;
                    }
                    break;
                case 'q':
                case's':
                case 'w':
                    if (secondRow == -1) {
                        secondRow = 0;
                    } else if (firstRow!= -1 && firstRow!= secondRow) {
                        return false;
                    }
                    break;
                case 'u':
                case 'x':
                case 'z':
                    if (secondRow == -1) {
                        secondRow = 1;
                    } else if (firstRow!= -1 && firstRow!= secondRow) {
                        return false;
                    }
                    break;
                default:
                    return false;
            }
        }
        return true;
    }
}


###########################################################
Result:
solution: ['g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3318777292576419

cat_success_cnt: 3

cat_success_rate: 0.10344827586206896

