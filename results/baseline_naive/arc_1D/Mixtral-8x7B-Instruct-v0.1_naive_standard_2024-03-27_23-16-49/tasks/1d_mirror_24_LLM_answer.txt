
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']

Test case:
input: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.']
*/

public class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < list1.length; i++) {
            if (!map.containsKey(list1[i].length())) {
                map.put(list1[i].length(), new ArrayList<>());
            }
            map.get(list1[i].length()).add(list1[i]);
        }

        int minLenSum = Integer.MAX_VALUE;
        List<String> resultList = new ArrayList<>();
        for (int j = 0; j < list2.length; j++) {
            if (map.containsKey(list2[j].length()) && Math.abs(list2[j].length() - minLenSum) <= 1) {
                List<String> tempList = map.get(list2[j].length());
                for (String str : tempList) {
                    if (str.equals(list2[j])) continue;
                    resultList.add(str);
                    resultList.add(list2[j]);
                    minLenSum = str.length() + list2[j].length();
                }
            }
        }

        return resultList.stream().distinct().toArray(String[]::new);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'i', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.31343283582089554

cat_success_cnt: 3

cat_success_rate: 0.16666666666666666

