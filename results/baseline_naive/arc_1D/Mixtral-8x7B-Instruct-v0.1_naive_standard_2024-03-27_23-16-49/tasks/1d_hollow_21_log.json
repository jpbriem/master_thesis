{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']\noutput: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.', '.']\n\nExample_2:\ninput: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', '.']\noutput: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', 'c', '.']\n\nExample_3:\ninput: ['.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\noutput: ['.', '.', 'g', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n\nTest case:\ninput: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']\n\n###########################################################\nSample Outputs:\noutput: ['g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n*/\n\npublic class Solution {\n    public String[] solution(String[] strArr) {\n        int len = strArr.length;\n        for (int i = 0; i < len - 1; i++) {\n            if (strArr[i].equals(\".\") &&!strArr[i + 1].equals(\".\")) {\n                // \uc67c\ucabd\uc5d0.\uc774\uba74\uc11c, \uc624\ub978\ucabd\uc5d0.\uac00 \uc544\ub2cc \uacbd\uc6b0\n                if (!isLeftDot(strArr, i)) {\n                    swap(strArr, i, findFirstEmptyIndex(strArr));\n                }\n            } else if (strArr[i].equals(\".\") && strArr[i + 1].equals(\".\")) {\n                continue;\n            } else if (!strArr[i].equals(\".\") && strArr[i + 1].equals(\".\")) {\n                // \uc67c\ucabd\uc5d0.\uac00 \uc544\ub2c8\uace0, \uc624\ub978\ucabd\uc5d0.\uc778 \uacbd\uc6b0\n                if (isRightDot(strArr, i)) {\n                    swap(strArr, i, findLastEmptyIndex(strArr));\n                }\n            }\n        }\n        return strArr;\n    }\n\n    private boolean isLeftDot(String[] arr, int index) {\n        while (index > 0 && arr[--index].equals(\".\")) {}\n        return arr[index].equals(\".\");\n    }\n\n    private boolean isRightDot(String[] arr, int index) {\n        while (index < arr.length - 1 && arr[++index].equals(\".\")) {}\n        return arr[index].equals(\".\");\n    }\n\n    private void swap(String[] arr, int a, int b) {\n        String temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n    }\n\n    private int findFirstEmptyIndex(String[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\".\")) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private int findLastEmptyIndex(String[] arr) {\n        for (int i = arr.length - 1; i >= 0; i--) {\n            if (arr[i].equals(\".\")) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"
        }
    ],
    "idx": 214,
    "task": "1d_hollow_21",
    "category": "1d_hollow",
    "ys": [
        "1d_hollow_21.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['g', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.']",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.3488372093023256,
        "cat_success_cnt": 2,
        "cat_success_rate": 0.13333333333333333
    },
    "usage_so_far": {
        "completion_tokens": 138283,
        "prompt_tokens": 107422,
        "cost": null
    }
}