
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', '.', '.', '.', 'b', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'd', 'd', 'd', '.', '.', '.', '.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'e', 'e', 'e', '.', '.', 'e', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String[] expand(String S) {
        List<String> res = new ArrayList<>();
        int n = S.length();
        for (int i = 0; i < n; ) {
            char c = S.charAt(i);
            if (c == '.') break;
            int j = i + 1, count = 0;
            while (j < n && Character.isDigit(S.charAt(j))) {
                count = count * 10 + (S.charAt(j++) - '0');
            }
            StringBuilder sb = new StringBuilder();
            for (int k = 0; k < count; ++k) {
                sb.append(c);
            }
            res.add(sb.toString());
            i = j;
        }
        if (i >= n) return res.toArray(new String[res.size()]);
        List<String> tmp = new ArrayList<>();
        for (String s : res) {
            tmp.addAll(Arrays.asList(s.split("")));
        }
        res.clear();
        for (int i = 0; i < tmp.size(); ++i) {
            res.add(tmp.get(i));
            if (i < tmp.size() - 1) {
                res.add(".");
            }
        }
        for (int i = 0; i < res.size(); ++i) {
            if (Character.isLetter(res.get(i).charAt(0))) continue;
            int j = i + 1;
            while (j < res.size() && ".".equals(res.get(j))) {
                ++j;
            }
            if (j >= res.size()) break;
            char c = res.get(j).charAt(0);
            int count = 1;
            while (++j < res.size() && res.get(j).equals(".") && Character.isLetter(res.get(j+1).charAt(0)));
            --j;
            StringBuilder sb = new StringBuilder();
            for (int k = 0; k < count; ++k) {
                sb.append(c);
            }
            res.subList(i, j+1).clear();
            res.add(i, sb.toString());
        }
        return res.toArray(new String[res.size()]);
    }
}


###########################################################
Result:
solution: ['.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2098360655737705

cat_success_cnt: 2

cat_success_rate: 0.2

