
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'b', 'b', 'b', 'b', 'b', '.', '.', 'c', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', '.']

Example_2:
input: ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'c']
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'c']

Example_3:
input: ['h', 'h', 'h', 'h', '.', '.', '.', '.', 'c', '.']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'c', '.']

Test case:
input: ['f', 'f', 'f', 'f', '.', '.', '.', '.', 'c', '.']

###########################################################
Sample Outputs:
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'c', '.']
*/

// Solution 1:
class Solution {
    public String[] expand(String s) {
        List<String> list = new ArrayList<>();
        for (int i = 0; i < s.length(); ) {
            char c = s.charAt(i);
            if (Character.isLetter(c)) {
                int j = i + 1;
                while (j < s.length() && Character.isDigit(s.charAt(j))) {
                    j++;
                }
                int num = Integer.parseInt(s.substring(i+1, j));
                StringBuilder sb = new StringBuilder();
                for (int k = 0; k < num; k++) {
                    sb.append(c);
                }
                list.addAll(Collections.nCopies(num, String.valueOf(c)));
                i += j - i;
            } else {
                list.add("" + c);
                i++;
            }
        }
        return list.toArray(new String[list.size()]);
    }
}

// Solution 2:
class Solution {
    public String[] expand(String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (Character.isLetter(c)) {
                sb.append(c);
            } else if (Character.isDigit(c)) {
                int count = 0;
                while (sb.length() > 0 && Character.isDigit(sb.charAt(sb.length()-1))) {
                    count *= 10;
                    count += (sb.charAt(sb.length()-1) - '0');
                    sb.deleteCharAt(sb.length()-1);
                }
                sb.append(String.valueOf(c).repeat(count));
            }
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'c', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2016036655211913

cat_success_cnt: 7

cat_success_rate: 0.30434782608695654

