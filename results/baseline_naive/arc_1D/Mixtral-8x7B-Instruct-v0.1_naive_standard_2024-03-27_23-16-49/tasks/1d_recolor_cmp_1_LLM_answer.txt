
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', 'd', 'd', 'd', 'd', '.']
output: ['.', '.', '.', 'd', 'd', 'd', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', '.', 'd', 'd', 'd', 'd', '.']

Example_2:
input: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.']
output: ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.']

Example_3:
input: ['.', '.', '.', 'd', 'd', 'd', 'd', '.', '.', '.', 'd', 'd', '.', '.', '.', 'd', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', '.', '.', '.', 'd', 'd', '.', '.', '.', 'd', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.']
*/

public class Solution {
    public String[] farthestBuildings(String[] heights, int bricks, int ladders) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < heights.length - 1; ++i) {
            if (heights[i] >= heights[i + 1]) continue;
            int diff = heights[i + 1] - heights[i];
            pq.offer(diff);
            if (pq.size() > ladders) {
                bricks -= pq.poll();
                if (bricks < 0) return Arrays.copyOfRange(heights, 0, i);
            }
        }
        return heights;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', '.', 'd', 'd', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2094017094017094

cat_success_cnt: 2

cat_success_rate: 1.0

