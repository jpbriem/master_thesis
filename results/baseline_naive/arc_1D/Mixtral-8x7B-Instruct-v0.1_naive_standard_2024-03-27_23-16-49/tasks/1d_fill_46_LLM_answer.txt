
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.']
*/

public class Solution {
    public String[] replace(String[] arr) {
        if (arr == null || arr.length < 2) return arr;

        int len = arr.length, start = -1, end = -1;
        for (int i = 0; i < len; i++) {
            if (arr[i].equals(".")) {
                if (start!= -1 && end == -1) end = i;
            } else {
                if (start == -1) start = i;
                end = i;
            }

            // when meet the first non-dot char or reach the last index of array
            if ((start!= -1 &&!arr[i].equals(".")) || i == len - 1) {
                int gap = end == -1? 0 : end - start + 1;
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j <= gap / 2; j++) {
                    sb.append(arr[start + j]);
                }
                String str = sb.toString();
                for (int j = 0; j <= gap / 2; j++) {
                    arr[start + j] = str;
                }
                start = -1;
                end = -1;
            }
        }

        return arr;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2676056338028169

cat_success_cnt: 10

cat_success_rate: 0.23809523809523808

