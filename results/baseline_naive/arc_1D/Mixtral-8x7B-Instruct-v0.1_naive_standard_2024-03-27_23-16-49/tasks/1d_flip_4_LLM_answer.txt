
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'f', 'd', 'd', '.', '.', '.']
output: ['.', '.', '.', '.', 'd', 'd', 'f', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'g', 'h', 'h', 'h', 'h', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'g', '.', '.']

Example_3:
input: ['.', '.', 'c', 'd', 'd', '.', '.', '.', '.', '.']
output: ['.', '.', 'd', 'd', 'c', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', 'e', 'g', 'g', 'g', 'g', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'e', '.', '.']
*/

public class Solution {
    public String reverseLeftWords(String s, int n) {
        if (s == null || s.length() <= 1 || n < 0 || n >= s.length()) return s;
        StringBuilder sb = new StringBuilder();
        for (int i = n; i < s.length(); i++) {
            sb.append(s.charAt(i));
        }
        for (int j = 0; j < n; j++) {
            sb.append(s.charAt(j));
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'e', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3567567567567568

cat_success_cnt: 24

cat_success_rate: 0.6857142857142857

