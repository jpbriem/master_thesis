
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']
output: ['.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.']

Example_2:
input: ['.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', '.', 'f', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', '.', 'c', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String compress(String S) {
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (int i = 0; i < S.length(); ++i) {
            if (i == S.length() - 1 || S.charAt(i)!= S.charAt(i + 1)) {
                sb.append(S.charAt(i));
                sb.append(count);
                count = 0;
            } else {
                ++count;
            }
        }
        return sb.toString().length() >= S.length()? S : sb.toString();
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', 'c', '.', '.', 'c', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.352112676056338

cat_success_cnt: 2

cat_success_rate: 0.15384615384615385

