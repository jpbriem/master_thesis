
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', 'h', '.', 'h', 'h', 'h', '.', 'h', 'h', 'h', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'e', '.', 'e', 'e', 'e', '.', 'e', 'e', 'e', '.']

Example_2:
input: ['.', '.', 'h', 'h', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', 'h', '.', '.']
output: ['.', '.', 'a', 'a', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.']

Example_3:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'h', 'h', 'h', 'h', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'h', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'a', 'a', 'a', 'a', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'a', '.', '.']
*/

public class Solution {
    public String[] replace(String[] arr) {
        if (arr == null || arr.length <= 0) return new String[0];

        int hIndex = -1;
        for (int i = 0; i < arr.length; i++) {
            if ("h".equals(arr[i])) {
                hIndex = i;
            } else if (".".equals(arr[i]) && hIndex!= -1) {
                char c = "ae".charAt((hIndex + 1) % 2);
                arr[i] = "" + c;
            }
        }

        // move the last a to first.
        int indexA = -1, indexE = -1;
        for (int i = 0; i < arr.length; i++) {
            if (!".".equals(arr[i])) {
                if (indexA == -1) {
                    indexA = i;
                } else {
                    indexE = i;
                }
            }
        }

        if (indexA!= -1 && indexE!= -1) {
            String tmp = arr[indexA];
            arr[indexA] = arr[indexE];
            arr[indexE] = tmp;
        }

        return arr;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'a', 'a', 'a', 'a', '.', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', 'e', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.19784172661870503

cat_success_cnt: 9

cat_success_rate: 0.2647058823529412

