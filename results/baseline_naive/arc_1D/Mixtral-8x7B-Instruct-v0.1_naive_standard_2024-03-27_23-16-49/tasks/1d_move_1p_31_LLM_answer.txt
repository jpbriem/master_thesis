
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

Example_2:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        // left and right are the index of last non-dot character to the left and right of current position respectively
        int left = -1, right = -1;
        boolean isLeftPush = false;
        for (int i = 0; i < len; ++i) {
            if (arr[i] == '.') continue;
            if (left == -1 && arr[i] == 'L') {
                left = i;
            } else if (left >= 0 && arr[i] == 'R' && arr[left] == 'L') {
                int j = left + 1;
                while (j < i) {
                    arr[j++] = 'L';
                }
                left = -1;
            } else if (left >= 0 && arr[i] == 'R') {
                right = i;
                isLeftPush = true;
            } else if (right >= 0 && arr[i] == 'L' && arr[right] == 'R') {
                int j = right + 1;
                while (j <= i) {
                    arr[j++] = 'R';
                }
                right = -1;
                if (isLeftPush) {
                    int k = left + 1;
                    while (k < i) {
                        arr[k++] = 'L';
                    }
                    left = -1;
                    isLeftPush = false;
                }
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.29754601226993865

cat_success_cnt: 10

cat_success_rate: 0.38461538461538464

