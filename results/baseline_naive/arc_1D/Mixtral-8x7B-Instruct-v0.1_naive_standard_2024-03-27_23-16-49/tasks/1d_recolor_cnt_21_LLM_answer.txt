
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'd', 'd', '.', '.', 'd', 'd', 'd', '.', '.', 'd', '.', 'd', 'd', '.', '.', '.']
output: ['.', 'g', 'g', '.', '.', 'a', 'a', 'a', '.', '.', 'c', '.', 'g', 'g', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'd', 'd', '.', 'd', '.', '.', 'd', 'd', 'd', '.', '.', 'd', '.', '.']
output: ['.', '.', '.', 'g', 'g', '.', 'c', '.', '.', 'a', 'a', 'a', '.', '.', 'c', '.', '.']

Example_3:
input: ['.', '.', '.', 'd', '.', '.', 'd', 'd', '.', 'd', 'd', 'd', '.', 'd', 'd', '.', '.']
output: ['.', '.', '.', 'c', '.', '.', 'g', 'g', '.', 'a', 'a', 'a', '.', 'g', 'g', '.', '.']

Test case:
input: ['.', '.', '.', 'd', 'd', '.', '.', 'd', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'c', 'g', '.', '.', 'c', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.']
*/

public class Solution {
    public String[] solution(String[] park) {
        int len = park.length;
        for (int i = 0; i < len; i++) {
            if (park[i].equals(".")) continue;
            char c = park[i].charAt(0);
            int j = i + 1;
            while (j < len &&!park[j].equals(".")) {
                if (park[j].charAt(0) == c) break;
                j++;
            }
            int k = i - 1;
            while (k >= 0 &&!park[k].equals(".")) {
                if (park[k].charAt(0) == c) break;
                k--;
            }
            // System.out.println(i + " " + j + " " + k);
            if (j - i > i - k) {
                for (int l = i; l <= j; l++) {
                    park[l] = park[k];
                    park[k] = ".";
                    k++;
                }
            } else {
                for (int l = i; l >= k; l--) {
                    park[l] = park[j];
                    park[j] = ".";
                    j--;
                }
            }
        }
        return park;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'g', 'g', '.', '.', 'c', '.', '.', 'a', 'a', 'a', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20130718954248367

cat_success_cnt: 0

cat_success_rate: 0.0

