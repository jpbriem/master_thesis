
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', 'g', '.', '.', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', 'g', 'g']
output: ['.', 'g', '.', '.', 'g', 'g', 'g', 'g', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', 'g', 'g']

Example_2:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', 'g', '.', '.', 'g', '.', '.', 'g', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', 'g', '.', '.', 'g', '.']

Test case:
input: ['.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', '.']

###########################################################
Sample Outputs:
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', '.']
*/

public class Solution {
    public String[] solution(String[] input) {
        int len = input.length;
        for (int i = 0; i < len; i++) {
            if (".".equals(input[i])) continue;
            else if (!"g".equals(input[i])) throw new IllegalArgumentException("Invalid Input");
            // find the first g in left side and right side of current position
            int lIndex = -1, rIndex = -1;
            for (int j = i - 1; j >= 0; j--) {
                if (!".".equals(input[j])) {
                    lIndex = j;
                    break;
                }
            }
            for (int j = i + 1; j < len; j++) {
                if (!".".equals(input[j])) {
                    rIndex = j;
                    break;
                }
            }
            // replace all elements between two gs with a
            if (lIndex!= -1 && rIndex!= -1) {
                for (int j = lIndex + 1; j <= rIndex - 1; j++) {
                    input[j] = "a";
                }
            }
        }
        return input;
    }
}


###########################################################
Result:
solution: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.20943134535367544

cat_success_cnt: 6

cat_success_rate: 0.2857142857142857

