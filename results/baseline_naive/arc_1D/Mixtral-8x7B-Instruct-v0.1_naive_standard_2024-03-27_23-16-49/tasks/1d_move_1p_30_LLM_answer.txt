
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

Test case:
input: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        boolean leftToRight = true;
        for (int i = 0; i < len; ) {
            // find the first non-dot from left to right
            while (i < len && arr[i] == '.') {
                ++i;
            }
            if (i >= len) break;
            char c = arr[i];
            int j = i + 1;
            // find the first dot or end of string from right to left
            while (j < len && arr[j]!= c && arr[j]!= '.') {
                ++j;
            }
            if (j >= len || arr[j] == '.') {
                // no opposite force found
                continue;
            }
            if (leftToRight) {
                // move forward
                for (int k = i; k <= j; ++k) {
                    arr[k] = c;
                }
                i = j + 1;
            } else {
                // move backward
                for (int k = j - 1; k >= i; --k) {
                    arr[k] = c;
                }
                i = j + 1;
            }
            leftToRight =!leftToRight;
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.29846153846153844

cat_success_cnt: 10

cat_success_rate: 0.4

