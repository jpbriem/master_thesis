{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['g', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']\noutput: ['a', 'a', 'a', 'a', 'a', 'g', '.', '.', '.', '.', '.', '.', '.']\n\nExample_2:\ninput: ['.', '.', '.', 'd', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']\noutput: ['.', '.', '.', 'h', 'h', 'h', 'h', 'd', '.', '.', '.', '.', '.']\n\nExample_3:\ninput: ['.', '.', '.', '.', 'd', 'e', 'e', 'e', 'e', '.', '.', '.', '.']\noutput: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'd', '.', '.', '.', '.']\n\nTest case:\ninput: ['.', '.', '.', 'g', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']\n\n###########################################################\nSample Outputs:\noutput: ['.', '.', '.', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.', '.']\n*/\n\n// Solution 1:\nclass Solution {\n    public String[] rearrange(String[] input) {\n        if (input == null || input.length < 2) return input;\n\n        int len = input.length, maxIndex = -1, count = 0;\n        for (int i = 0; i < len; ++i) {\n            if (input[i].equals(\".\")) continue;\n            if (count > 0 && maxIndex!= i) break;\n            maxIndex = i;\n            count++;\n        }\n\n        // no need to swap\n        if (maxIndex == len-1) return input;\n\n        int start = maxIndex + 1;\n        while (start < len &&!input[start].equals(\".\")) start++;\n\n        // all elements are the same\n        if (start >= len) return input;\n\n        boolean flag = true;\n        for (int i = start+1; i < len; ++i) {\n            if (!input[i].equals(\".\") && flag) {\n                char tmp = input[i].charAt(0);\n                int j = i;\n                while (j > start && input[j-1].equals(\".\")) {\n                    input[j] = input[j-1];\n                    --j;\n                }\n                input[j] = Character.toString(tmp);\n                flag = false;\n            } else if (!input[i].equals(\".\")) {\n                char tmp = input[i].charAt(0);\n                int j = i;\n                while (j > start && input[j-1].charAt(0)!= tmp) {\n                    input[j] = input[j-1];\n                    --j;\n                }\n                input[j] = Character.toString(tmp);\n            }\n        }\n\n        return input;\n    }\n}\n\n// Solution 2:\nclass Solution {\n    public String[] rearrange(String[] input) {\n        if (input == null || input.length < 2) return input;\n\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < input.length; ++i) {\n            if (!input[i].equals(\".\")) list.add(i);\n        }\n\n        if (list.size() <= 1) return input;\n\n        Collections.sort(list, (x, y) -> Integer.compare(y, x));\n\n        for (int i = 0; i < list.size(); ++i) {\n            if (list.get(i) == 0) continue;\n            int j = list.get(i);\n            while (--j > 0 && input[j].equals(\".\")) {}\n            if (input[j].equals(\".\")) continue;\n            char tmp = input[j].charAt(0);\n            int k = j;\n            while (k > 0 && input[k-1].equals(\".\")) {\n                input[k] = input[k-1];\n                --k;\n            }\n            input[k] = Character.toString(tmp);\n        }\n\n        return input;\n    }\n}"
        }
    ],
    "idx": 164,
    "task": "1d_flip_21",
    "category": "1d_flip",
    "ys": [
        "1d_flip_21.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['.', '.', '.', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.', '.']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.3212121212121212,
        "cat_success_cnt": 11,
        "cat_success_rate": 0.7333333333333333
    },
    "usage_so_far": {
        "completion_tokens": 116970,
        "prompt_tokens": 87140,
        "cost": null
    }
}