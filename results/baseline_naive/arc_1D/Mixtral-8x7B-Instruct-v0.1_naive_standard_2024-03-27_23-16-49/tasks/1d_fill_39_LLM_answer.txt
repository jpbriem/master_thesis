
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', '.', '.', 'h', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h', '.', '.']

Example_2:
input: ['.', 'd', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', '.', '.']
output: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', 'e', '.', '.', '.', '.', 'e', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.']

Test case:
input: ['.', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'b', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.']
*/

public class Solution {
    public String[] replace(String[] arr) {
        if (arr == null || arr.length < 2) return arr;
        int len = arr.length, idx = -1;
        for (int i = 0; i < len; i++) {
            if (".".equals(arr[i])) continue;
            else if (idx == -1) idx = i;
            else arr[idx] = append(arr[idx], arr[i]);
        }
        if (idx!= -1 && idx + 1 < len) {
            while (++idx < len) {
                if (!".$".contains(arr[idx])) break;
                arr[idx-1] = append(arr[idx-1], arr[idx]);
            }
        }
        return arr;
    }

    private String append(String s1, String s2) {
        StringBuilder sb = new StringBuilder();
        sb.append(s1);
        while (s2!= null &&!"".equals(s2)) {
            sb.append(s2.charAt(0));
            s2 = s2.substring(1);
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26865671641791045

cat_success_cnt: 8

cat_success_rate: 0.23529411764705882

