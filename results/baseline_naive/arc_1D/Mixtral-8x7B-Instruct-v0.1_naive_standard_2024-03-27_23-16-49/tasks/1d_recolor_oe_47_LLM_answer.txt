
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'a', 'a', 'a', '.', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', 'b', 'b', '.', '.', 'b', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'a', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'g', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', 'a', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', 'b', 'b', 'b', 'b', '.', 'g', 'g', 'g', '.', 'g', '.', 'b', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'a', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'b', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', '.', 'g', 'g', 'g', 'g', 'g']
*/

public class Solution {
    public String[] findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        List<Integer> list = new ArrayList<>();
        for (int i : indexes) {
            if (S.substring(i).startsWith(sources[0])) {
                list.add(i);
            }
        }
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        int j = 0;
        for (int i = 0; i < S.length() && j < list.size(); ) {
            if (i == list.get(j)) {
                boolean flag = true;
                for (int k = 0; k < sources[0].length(); k++) {
                    if (S.charAt(i + k)!= sources[0].charAt(k)) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    sb.append(targets[j]);
                    i += sources[0].length();
                    j++;
                } else {
                    sb.append(S.charAt(i));
                    i++;
                }
            } else {
                sb.append(S.charAt(i));
                i++;
            }
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'g', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', 'g']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.199288256227758

cat_success_cnt: 12

cat_success_rate: 0.27906976744186046

