
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'c', 'c', 'c', '.', '.', '.', '.']

Example_2:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.']

Test case:
input: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.']
*/

public class Solution {
    public String[] move(String[] board) {
        // Write your solution here
        if (board == null || board.length < 3 || board[0].length()!= board.length){
            return new String[]{};
        }
        int len = board.length;
        for (int i = 0; i < len / 2; i++){
            boolean flag = false;
            for (int j = 0; j < len - 1 - i; j++){
                if (board[i][j]!= '.' && board[i][j + 1] == '.'){
                    char temp = board[i][j];
                    board[i][j] = board[i][j + 1];
                    board[i][j + 1] = temp;
                    flag = true;
                }
            }
            if (!flag){
                break;
            }
        }
        for (int i = len - 1; i > len / 2; i--){
            boolean flag = false;
            for (int j = 0; j < len - 1 - i; j++){
                if (board[i][j]!= '.' && board[i][j + 1] == '.'){
                    char temp = board[i][j];
                    board[i][j] = board[i][j + 1];
                    board[i][j + 1] = temp;
                    flag = true;
                }
            }
            if (!flag){
                break;
            }
        }
        for (int i = 0; i < len; i++){
            boolean flag = false;
            for (int j = 0; j < len - 1; j++){
                if (board[j][i]!= '.' && board[j + 1][i] == '.'){
                    char temp = board[j][i];
                    board[j][i] = board[j + 1][i];
                    board[j + 1][i] = temp;
                    flag = true;
                }
            }
            if (!flag){
                break;
            }
        }
        for (int i = len - 1; i >= 0; i--){
            boolean flag = false;
            for (int j = 0; j < len - 1; j++){
                if (board[i][j]!= '.' && board[i][j + 1] == '.'){
                    char temp = board[i][j];
                    board[i][j] = board[i][j + 1];
                    board[i][j + 1] = temp;
                    flag = true;
                }
            }
            if (!flag){
                break;
            }
        }
        return board;
    }
}


###########################################################
Result:
solution: ['.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2463157894736842

cat_success_cnt: 3

cat_success_rate: 0.12

