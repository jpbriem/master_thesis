
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'h', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.']

Example_2:
input: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', 'h', '.']
output: ['.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'h', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'h', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', '.', '.', 'h', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'h', '.', '.', '.', '.']
*/

public class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        Arrays.fill(arr, '.');
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i)!= '.') {
                arr[i] = dominoes.charAt(i);
            }
        }
        // check left side of each point
        for (int i = 0; i + 1 < len && arr[i] == 'L'; ++i) {
            int j = i + 1;
            while (j < len && arr[j] == '.') {
                ++j;
            }
            if (j < len && arr[j] == 'R') {
                int k = j - 1;
                while (k > i) {
                    arr[k--] = '.' ;
                }
            } else {
                int k = i + 1;
                while (k < j) {
                    arr[k++] = 'L' ;
                }
            }
        }
        // check right side of each point
        for (int i = len - 1; i >= 0 && arr[i] == 'R'; --i) {
            int j = i - 1;
            while (j >= 0 && arr[j] == '.') {
                --j;
            }
            if (j >= 0 && arr[j] == 'L') {
                int k = j + 1;
                while (k < i) {
                    arr[k++] = '.' ;
                }
            } else {
                int k = i - 1;
                while (k > j) {
                    arr[k--] = 'R' ;
                }
            }
        }
        return new String(arr);
    }
}


###########################################################
Result:
solution: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'e', 'e', 'h', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2528216704288939

cat_success_cnt: 3

cat_success_rate: 0.06976744186046512

