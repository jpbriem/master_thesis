
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', 'i', 'i', 'i', '.', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'i', 'i', 'i', '.', '.', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'e', 'e', 'e', '.', '.', '.', '.', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'e', 'e', 'e', '.', '.', '.', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'g', 'g', 'g', '.', '.', 'g', '.', '.', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'f', 'f', 'f', '.', '.', '.', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

###########################################################
Sample Outputs:
output: ['.', 'f', 'f', 'f', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
*/

public class Solution {
    public String longestDiverseString(int a, int b, int c) {
        StringBuilder sb = new StringBuilder();
        while (a > 0 || b > 0 || c > 0) {
            if (a == 0) {
                sb.append('b');
                b--;
            } else if (b == 0) {
                sb.append('c');
                c--;
            } else if (c == 0) {
                sb.append('a');
                a--;
            } else if (a >= b && a >= c) {
                if (sb.length() < 2 || sb.charAt(sb.length() - 1)!= 'a' || sb.charAt(sb.length() - 2)!= 'a') {
                    sb.append("aa");
                    a -= 2;
                } else {
                    sb.append('a');
                    a--;
                }
            } else if (b >= a && b >= c) {
                if (sb.length() < 2 || sb.charAt(sb.length() - 1)!= 'b' || sb.charAt(sb.length() - 2)!= 'b') {
                    sb.append("bb");
                    b -= 2;
                } else {
                    sb.append('b');
                    b--;
                }
            } else {
                if (sb.length() < 2 || sb.charAt(sb.length() - 1)!= 'c' || sb.charAt(sb.length() - 2)!= 'c') {
                    sb.append("cc");
                    c -= 2;
                } else {
                    sb.append('c');
                    c--;
                }
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['.', 'f', 'f', 'f', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.21096345514950166

cat_success_cnt: 1

cat_success_rate: 0.5

