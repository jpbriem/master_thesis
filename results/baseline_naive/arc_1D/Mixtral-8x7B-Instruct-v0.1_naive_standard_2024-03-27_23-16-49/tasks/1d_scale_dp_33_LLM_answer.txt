
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.', 'g', '.']
output: ['.', '.', '.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'g', '.']

Example_2:
input: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', 'g']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'g']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', 'g', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'g', '.']

Test case:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'g', '.', '.']

###########################################################
Sample Outputs:
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'g', '.', '.']
*/

// Solution 1:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length();
        char[] arr = new char[len];
        for (int i = 0; i < len; ++i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'R') {
                arr[i] = 'R';
            } else {
                break;
            }
        }
        for (int i = len - 1; i >= 0 && arr[len - 1]!= '.'; --i) {
            if (dominoes.charAt(i) == '.' || dominoes.charAt(i) == 'L') {
                arr[i] = 'L';
            } else {
                break;
            }
        }
        // System.out.println(Arrays.toString(arr));
        for (int i = 0, j = 0; i < len; ++i) {
            while (j < len && arr[j] == '.') {
                ++j;
            }
            if (j == len) {
                break;
            }
            if (arr[i] == 'L' && arr[j] == 'R') {
                for (int k = i + 1; k < j; ++k) {
                    arr[k] = '.');
                }
            } else if (arr[i] == 'L' && arr[j] == 'L') {
                int idx = i;
                while (idx < j) {
                    arr[idx++] = 'L';
                }
            } else if (arr[i] == 'R' && arr[j] == 'R') {
                int idx = j;
                while (idx > i) {
                    arr[--idx] = 'R';
                }
            }
            ++j;
        }
        return new String(arr);
    }
}

// Solution 2:
class Solution {
    public String pushDominoes(String dominoes) {
        int len = dominoes.length(), left = 0;
        StringBuilder sb = new StringBuilder();
        for (int right = 0; right < len; ++right) {
            if (dominoes.charAt(right) == 'R') {
                while (left < right) {
                    sb.append('R');
                    left += 2;
                }
                left = right + 1;
            } else if (dominoes.charAt(right) == 'L') {
                if (left > 0 && dominoes.charAt(left - 1)!= 'R') {
                    int dist = 1;
                    while (left + dist < right && dominoes.charAt(left + dist) == '.') {
                        ++dist;
                    }
                    if (left + dist < right && dominoes.charAt(left + dist) == 'L') {
                        dist = Math.max(0, dist - 2);
                    }
                    for (int i = 0; i <= dist / 2; ++i) {
                        sb.append("LL");
                    }
                    left += dist + 1;
                } else {
                    left = right + 1;
                }
            }
        }
        if (left < len) {
            sb.append(dominoes.substring(left));
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'g', '.', '.']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.20387243735763097

cat_success_cnt: 10

cat_success_rate: 0.35714285714285715

