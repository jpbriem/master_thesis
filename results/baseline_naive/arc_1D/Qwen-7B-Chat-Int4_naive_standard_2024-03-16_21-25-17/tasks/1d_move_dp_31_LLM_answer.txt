
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 5, 0]
output: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 0]

Example_2:
input: [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 0, 0, 0, 0]

Example_3:
input: [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 0]
output: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 0]

Test case:
input: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5]



###########################################################
Sample Outputs:
```python
class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        if not arr:
            return 0
        
        prefix_sum = [arr[0]]
        for i in range(1, len(arr)):
            prefix_sum.append(prefix_sum[-1] + arr[i])
        
        left, right = 0, len(prefix_sum) - 1
        ans = 0
        while left <= right:
            mid = (left + right) // 2
            count = 0
            j = mid
            while j >= left and prefix_sum[j] < prefix_sum[mid]:
                j -= 1
                count += 1
            
            if count == len(arr):
                break
            
            # If the current chunk is sorted
            if j < left or prefix_sum[mid] < prefix_sum[j]:
                continue
            
            # If the next chunk is also sorted, then we can merge them into one
            k = mid + 1
            while k <= right and prefix_sum[k] <= prefix_sum[mid]:
                k += 1
                count += 1
            
            if count != len(arr):
                ans += 1
                left = mid + 1
            else:
                right = k - 1
                
        return ans
```


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0038022813688212928

cat_success_cnt: 0

cat_success_rate: 0.0

