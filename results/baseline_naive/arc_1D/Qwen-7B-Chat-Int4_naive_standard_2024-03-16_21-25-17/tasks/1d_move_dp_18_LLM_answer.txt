
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 8, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 8, 0]

Example_2:
input: [6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 8, 0, 0, 0, 0, 0, 0]

Example_3:
input: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 8, 0]
output: [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 8]



###########################################################
Sample Outputs:
```python
class Solution:
    def findLargestRegion(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        
        n = len(nums)
        
        left = [-1] * (n+1)
        right = [-1] * (n+1)
        top = [-1] * (n+1)
        bottom = [-1] * (n+1)
        
        for i in range(n):
            if nums[i] == 0:
                left[i+1], right[i-1] = -1, -1
            else:
                left[i+1] = max(left[i+1], i)
                right[i-1] = min(right[i-1], i)
                
        for j in range(n):
            if nums[j] == 0:
                top[j+1], bottom[j-1] = -1, -1
            else:
                top[j+1] = max(top[j+1], j)
                bottom[j-1] = min(bottom[j-1], j)
                
        res = 1
        l, r, t, b = left[0], right[-1], top[0], bottom[-1]
        
        while l < r and t < b:
            midx = (l+r)//2
            midy = (t+b)//2
            
            if nums[midx] > nums[midy]:
                r = midx
            else:
                l = midx + 1
                
            if nums[midy] > nums[midx]:
                b = midy
            else:
                t = midy + 1
                
            res += 1
        
        return res
```


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 8]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.003913894324853229

cat_success_cnt: 0

cat_success_rate: 0.0

