
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0]

Example_2:
input: [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0]
output: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]

Example_3:
input: [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]



###########################################################
Sample Outputs:
```python
class Solution:
    def majorityElement(self, nums):
        if not nums or len(nums) < 2:
            return None
        
        count = {}
        
        for num in nums:
            if num in count:
                count[num] += 1
            else:
                count[num] = 1
                
        max_count = max(count.values())
        
        result = []
        for num, c in count.items():
            if c == max_count:
                result.append(num)
                
        return result
```

This solution uses a dictionary to keep track of the frequency of each number in the input list. It iterates over the list and updates the counts in the dictionary accordingly. Then it finds the maximum count among all numbers and adds all numbers with that count to the result list. Finally, it returns the result list containing the majority element(s).


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.004140786749482402

cat_success_cnt: 0

cat_success_rate: 0.0

