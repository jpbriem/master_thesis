
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 3, 3, 0, 3, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0]
output: [0, 0, 0, 4, 4, 0, 8, 8, 8, 0, 0, 0, 6, 0, 0, 6, 0, 0]

Example_2:
input: [0, 0, 3, 3, 0, 3, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0]
output: [0, 0, 4, 4, 0, 6, 0, 0, 8, 8, 8, 0, 0, 0, 4, 4, 0, 0]

Example_3:
input: [0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 3, 0, 0]
output: [0, 0, 8, 8, 8, 0, 0, 0, 4, 4, 0, 0, 0, 6, 0, 6, 0, 0]

Test case:
input: [0, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 0, 3, 3, 0, 0]



###########################################################
Sample Outputs:
```python
class Solution:
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        if not arr:
            return 0
        
        result = []
        
        i = 0
        while i < len(arr):
            j = i + 1
            count = 0
            
            while j < len(arr) and arr[j] <= arr[i]:
                j += 1
                count += 1
                
            if count == len(arr) - i:
                result.append([arr[i]])
            else:
                result.append([arr[i:i+count]])
            
            i = j
            
        return len(result)
```


###########################################################
Result:
solution: [0, 0, 0, 6, 0, 0, 4, 4, 0, 0, 8, 8, 8, 0, 4, 4, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0025

cat_success_cnt: 0

cat_success_rate: 0.0

