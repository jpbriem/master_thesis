
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 2, 0]
output: [0, 0, 0, 4, 4, 4, 0, 0, 0, 1, 1, 0, 0, 0, 9, 0, 1, 1, 0]

Example_2:
input: [0, 0, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2]
output: [0, 0, 0, 9, 0, 0, 4, 4, 4, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1]

Example_3:
input: [0, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0]
output: [0, 4, 4, 4, 0, 1, 1, 0, 9, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0]

Test case:
input: [0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 2]



###########################################################
Sample Outputs:
```python
class Solution:
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        
        stack = []
        for i in range(len(arr)):
            while stack and arr[i] >= stack[-1][0]:
                stack.pop()
            if not stack or arr[i] < stack[-1][0]:
                stack.append([arr[i],i])
                
        res = len(stack)
        
        left = 0
        right = -1
        
        while left < len(arr) and right < len(arr)-1:
            while left < len(arr) and arr[left] <= stack[right][0]:
                left += 1
                
            while right < len(arr)-1 and arr[right+1] >= stack[left-1][0]:
                right += 1
                
            if left == right:
                return res
            else:
                res -= 1
            
        return res
```


###########################################################
Result:
solution: [0, 0, 0, 1, 1, 0, 0, 0, 4, 4, 4, 0, 0, 0, 9, 0, 9, 0, 9]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.00258732212160414

cat_success_cnt: 0

cat_success_rate: 0.0

