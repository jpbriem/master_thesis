
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 1, 1, 1, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 1, 1, 1, 1, 0, 0]

Example_2:
input: [0, 7, 7, 7, 7, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 7, 7, 7, 7, 0, 0, 0]

Example_3:
input: [1, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]

Test case:
input: [4, 4, 4, 4, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]



###########################################################
Sample Outputs:
```python
class Solution:
    def getRow(self, matrix: List[List[int]]) -> List[int]:
        if not matrix or len(matrix) == 0:
            return []
        
        row = [0] * len(matrix[0])
        
        for i in range(len(matrix)):
            row[i] = self.helper(matrix, i)
            
        return row
    
    def helper(self, matrix, index):
        if index >= len(matrix):
            return 0
        
        if matrix[index][index] == 1 and index > 0 and matrix[index-1][index] == 1:
            return 0
        
        return 1 + self.helper(matrix, index+1)
```


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 9, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

