
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3]
output: [0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 6, 6, 6, 6]

Example_2:
input: [0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0]
output: [0, 0, 0, 6, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0]
output: [0, 0, 6, 6, 6, 6, 0, 8, 8, 8, 0, 0, 0, 0]

Test case:
input: [0, 0, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0]



###########################################################
Sample Outputs:
```python
class Solution:
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        
        left = []
        right = []
        for i in range(len(arr)):
            if arr[i] == 0:
                left.append(i)
            else:
                right.append(i)

        n = len(left) + len(right)
        res = []

        # find the number of chunks that can be formed by taking elements from the left side and adding them to the current chunk
        count = 0
        for l in left:
            while True:
                r = min(l+count, right[0])
                res.append(arr[l:r])
                count += 1
                if r >= right[0]:
                    break

        # add the remaining elements to the last chunk
        res.append(arr[left[-1]:])

        return len(res)
```


###########################################################
Result:
solution: [0, 0, 6, 6, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0024271844660194173

cat_success_cnt: 0

cat_success_rate: 0.0

