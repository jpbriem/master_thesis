
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 6, 6, 6, 6, 6, 0, 0]

Example_2:
input: [0, 0, 7, 7, 7, 7, 7, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0]

Example_3:
input: [0, 0, 0, 5, 5, 5, 5, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0]



###########################################################
Sample Outputs:
```python
class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        if not arr or len(arr) <= 1:
            return 0
        
        i = 0
        while i < len(arr):
            j = i + 1
            while j < len(arr) and arr[j] >= arr[i]:
                j += 1
            
            # If the maximum index of sorted elements is less than the current chunk size,
            # then it means that the remaining array can be merged with this chunk.
            # So we increase the chunk size by one.
            if j - i < len(arr) // 2:
                i = j
                
            else:
                break
        
        return i
```


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 2, 2, 2, 2, 2, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

