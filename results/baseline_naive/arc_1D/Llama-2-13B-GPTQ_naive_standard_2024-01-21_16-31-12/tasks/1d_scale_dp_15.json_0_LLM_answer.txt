Input token: 313
Output token: 540
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [1, 1, 1, 1, 0, 0, 7, 0, 0, 0, 0, 0]
output: [1, 1, 1, 1, 1, 1, 7, 0, 0, 0, 0, 0]

Example_2:
input: [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 7, 0]
output: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 0]

Example_3:
input: [0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 7]
output: [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 7]

Test case:
input: [4, 4, 4, 4, 4, 0, 0, 7, 0, 0, 0, 0]
################################################################

LLM answer:

output: [4, 4, 4, 4, 4, 4, 7, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        if len(nums) == 0: return 0
        max_count = 0
        for i in range(len(nums)):
            if nums[i]!= 0:
                max_count += 1
        return max_count

class TestSolution(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual([1, 1, 1, 1, 1, 1, 7, 0, 0, 0, 0, 0], Solution().findMaxConsecutiveOnes([1, 1, 1, 1, 0, 0, 7, 0, 0, 0, 0, 0]))
    
    def test_example_2(self):
        self.assertEqual([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 0], Solution().findMaxConsecutiveOnes([8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 7, 0]))
    
    def test_example_3(self):
        self.assertEqual([0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 7], Solution().findMaxConsecutiveOnes([0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 7]))
    
    def test_solution(self):
        self.assertEqual(4, Solution().findMaxConsecutiveOnes([4, 4, 4, 4, 4, 0, 0, 7, 0, 0, 0, 0]))
        
if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[4, 4, 4, 4, 4, 4, 4, 7, 0, 0, 0, 0]

