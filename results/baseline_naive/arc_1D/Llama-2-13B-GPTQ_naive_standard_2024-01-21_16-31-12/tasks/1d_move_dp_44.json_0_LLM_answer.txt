Input token: 208
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [7, 7, 7, 0, 0, 0, 9]
output: [0, 0, 0, 7, 7, 7, 9]

Example_2:
input: [3, 3, 3, 0, 0, 9, 0]
output: [0, 0, 3, 3, 3, 9, 0]

Example_3:
input: [8, 8, 8, 0, 0, 0, 9]
output: [0, 0, 0, 8, 8, 8, 9]

Test case:
input: [5, 5, 5, 0, 0, 9, 0]
################################################################

LLM answer:

output: [0, 0, 5, 5, 5, 9, 0]
"""

import unittest
from typing import List

class Solution:
    def reverse(self, nums: List[int]) -> None:
        """
        Do not modify the input list. Instead, return a new list with reversed elements ordered lexicographically.
        """
        if len(nums) == 0:
            return []
        
        n = len(nums)
        for i in range(n):
            j = n - 1 - i
            while True:
                if nums[i] > nums[j]:
                    break
                else:
                    nums[i], nums[j] = nums[j], nums[i]
                    break
        return nums

class TestSolution(unittest.TestCase):
    def test_solution(self):
        solution = Solution()
        self.assertEqual([0, 0, 5, 5, 5, 9, 0], solution.reverse([5, 5, 5, 0, 0, 9, 0]))
        self.assertEqual([0, 0, 0, 8, 8, 8, 9], solution.reverse([8, 8, 8, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 7, 7, 0, 0, 0, 9]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 9], solution.reverse([7, 
################################################################

Solution:
[0, 0, 5, 5, 5, 9, 0]

