Input token: 355
Output token: 714
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 7, 7, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 9, 0, 7, 7, 7, 0, 0, 0, 0]

Example_2:
input: [0, 0, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 0, 0, 0]

Example_3:
input: [0, 4, 4, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 0, 0, 0, 0]

Test case:
input: [0, 0, 3, 3, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 9, 0, 3, 3, 3, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def findMaxForm(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 0: return []
        ans = [[0 for _ in range(len(nums))] for _ in range(len(nums))]
        for i in range(len(ans)):
            for j in range(len(ans[i])):
                ans[i][j] = max(ans[i][j], self._findMaxForm(nums, i, j))
        return ans
    
    def _findMaxForm(self, nums: List[int], start: int, end: int):
        if start > end or start < 0 or end >= len(nums): return 0
        
        left = self._findMaxForm(nums, start, end - 1)
        right = self._findMaxForm(nums, end + 1, end)
        return max(left, right)

class TestCase(unittest.TestCase):
    def test_main(self):
        s = Solution()
        tc = [
            ([0, 7, 7, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 0, 7, 7, 7, 0, 0, 0, 0]),
            ([0, 0, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 0, 0, 0]),
            ([0, 4, 4, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 0, 0, 0, 0]),
            ([0, 0, 3, 3, 3, 0, 9, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 0, 3, 3, 3, 0, 0, 0]),
        ]
        for t, a in tc:
            self.assertEqual(a, s.findMaxForm(t))

if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 9, 0, 3, 3, 3, 0, 0, 0]

