Input token: 733
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0]
output: [0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0]

Example_2:
input: [0, 0, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0]
output: [0, 0, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 2, 0, 0]

Example_3:
input: [0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0]
output: [0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0]

Test case:
input: [0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def findMaxForm(self, nums: List[int]) -> int:
        if len(nums) < 4: return -1
        
        # 1. Find all possible patterns of length 4
        # 2. For each pattern, check whether it is a valid pattern
        # 3. If yes, then count how many times this pattern appears in the given list
        # 4. Return the max number among them
        # 5. If no, then return -1
        
        # Step 1
        patterns = []
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] == nums[j]:
                    patterns.append([nums[i], nums[j]])
        
        # Step 2
        result = [-1]*len(patterns)
        for p in patterns:
            if not self._isValidPattern(p): continue
            
            cnt = 0
            for n in nums:
                if n == p[0]: cnt += 1
                elif n == p[1]: cnt -= 1
            result[cnt] += 1
        
        # Step 3
        ans = -1
        for i in range(len(result)):
            if result[i] > ans: ans = result[i]
        
        return ans
    
    def _isValidPattern(self, p: List[int]) -> bool:
        if len(p)!= 4: return False
        if p[0] + p[1]!= 0: return False
        if p[0] + p[2]!= 0: return False
        if p[1] + p[2]!= 0: return False
        if p[0] + p[3]!= 0: return False
        if p[1] + p[3]!= 0: return False
        if p[2] + p[3]!= 0: return False
        return True

class TestCase(unittest.TestCase):
    def test_findMaxForm(self):
        tc = TestCase()
        tc.test_example_1()
        tc.test_example_2()
        tc.test_example_3()
        tc.test_case()

    def test_example_1(self):
        nums = [0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0]
        expected = [0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0]
        actual = Solution().findMaxForm(nums)
        self.assertEqual(expected, actual)

    def test_example_2(self):
        nums = [0, 0, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0]
        expected = [0, 0, 2
################################################################

Solution:
[0, 0, 0, 3, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0]

