Input token: 250
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [1, 1, 1, 1, 1, 0, 0, 0, 0]
output: [0, 0, 0, 1, 1, 1, 1, 1, 0]

Example_2:
input: [7, 7, 7, 7, 0, 0, 0, 0, 0]
output: [0, 0, 0, 7, 7, 7, 7, 0, 0]

Example_3:
input: [2, 2, 2, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 2, 2, 2, 0, 0, 0]

Test case:
input: [0, 7, 7, 7, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 7, 7, 7, 7, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def flipAndInvertImage(self, image: List[int]) -> None:
        """
        Do not read input, do not print anything, assume output is already given
        :param image:
        :return:
        """
        for i in range(len(image)):
            if image[i] == 0:
                continue
            else:
                image[i], image[-1] = image[-1], image[i]
                image[-1], image[i] = image[i], image[-1]


class TestSolution(unittest.TestCase):
    def test_solution(self):
        solution = Solution()
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 7, 7, 7, 0, 0], solution.flipAndInvertImage([0, 7, 7, 7, 0, 0, 0, 0, 0]))
        self.assertEqual([0
################################################################

Solution:
[0, 0, 0, 0, 7, 7, 7, 0, 0]

