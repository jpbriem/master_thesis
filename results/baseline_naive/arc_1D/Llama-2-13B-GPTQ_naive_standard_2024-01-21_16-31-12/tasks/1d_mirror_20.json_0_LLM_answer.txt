Input token: 397
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [6, 6, 6, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 9, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 5, 5, 5, 5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 9, 0, 5, 5, 5, 5, 0, 0, 0]

Example_3:
input: [0, 6, 6, 6, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 9, 0, 6, 6, 6, 6, 0, 0, 0, 0]

Test case:
input: [0, 0, 7, 7, 7, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 7, 7, 7, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def transform(self, nums: List[int]) -> None:
        """
        Do not read beyond this line.
        :param nums:
        :return:
        """
        if len(nums) == 0: return
        n = len(nums)
        for i in range(n):
            if nums[i]!= 0:
                j = i + 1
                while j < n and nums[j] == 0:
                    j += 1
                if j >= n or nums[j]!= 9:
                    raise ValueError("Invalid input")
                nums[i], nums[j] = nums[j], nums[i]
                break
        return

class TestSolution(unittest.TestCase):
    def test_solution(self):
        solution = Solution()
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], solution.transform([0, 0, 7, 7, 7, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], solution.transform([0, 0, 8, 8, 8, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], solution.transform([0, 0, 9, 9, 9, 9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], solution.transform([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], solution.transform([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], solution.transform([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], solution.transform([0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0,
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 0, 9, 0, 7, 7, 7, 7, 0, 0, 0]

