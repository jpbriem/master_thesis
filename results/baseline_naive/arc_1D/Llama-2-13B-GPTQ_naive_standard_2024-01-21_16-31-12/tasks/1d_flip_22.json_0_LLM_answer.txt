Input token: 397
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 7, 7, 7, 7, 6, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [2, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 5, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 6, 6, 6, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def reverse(self, nums: List[int]) -> None:
        """
        Do not write additional code.
        
        Assume that all inputs have exactly N integers.
        :param nums:
        :return:
        """
        if len(nums) == 0: return
        for i in range(len(nums)):
            if nums[i]!= 0:
                self._reverse(nums, i, len(nums))
    
    def _reverse(self, nums: List[int], start: int, end: int):
        while start < end:
            nums[start], nums[end - 1] = nums[end - 1], nums[start]
            start += 1
            end -= 1

if __name__ == '__main__':
    s = Solution()
    tc = unittest.TestCase()
    tc.assertEqual([0, 0, 0, 0, 7, 7, 7, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0], s.reverse([0, 0, 0, 0, 7, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
    tc.assertEqual([0, 0, 0, 0, 7, 7, 7, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0], s.reverse([0, 0, 0, 0, 7, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
    tc.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], s.reverse([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0]))
    tc.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], s.reverse([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0]))
    tc.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0, 0], s.reverse([0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0, 0]))
    tc.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0, 0], s.reverse([0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0, 0]))
    tc.assertEqual([0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0, 0], s.reverse([0, 0, 0, 0
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 7, 0, 0]

