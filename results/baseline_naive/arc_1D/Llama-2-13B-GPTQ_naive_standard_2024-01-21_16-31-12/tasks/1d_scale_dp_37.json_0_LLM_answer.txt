Input token: 250
Output token: 364
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 3, 3, 3, 3, 0, 0, 2, 0]
output: [0, 3, 3, 3, 3, 3, 3, 2, 0]

Example_2:
input: [6, 6, 6, 6, 6, 0, 0, 0, 2]
output: [6, 6, 6, 6, 6, 6, 6, 6, 2]

Example_3:
input: [0, 1, 1, 1, 1, 0, 0, 0, 2]
output: [0, 1, 1, 1, 1, 1, 1, 1, 2]

Test case:
input: [7, 7, 7, 7, 0, 0, 0, 0, 2]
################################################################

LLM answer:

output: [7, 7, 7, 7, 7, 7, 7, 7, 2]
"""

import unittest
from typing import List

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        if len(nums) == 0: return 0
        max_count = 0
        for i in range(len(nums)):
            if nums[i]!= 0:
                max_count += 1
        return max_count

class TestSolution(unittest.TestCase):
    def test_solution(self):
        self.assertEqual(Solution().findMaxConsecutiveOnes([0, 3, 3, 3, 3, 0, 0, 2, 0]), 4)
        self.assertEqual(Solution().findMaxConsecutiveOnes([6, 6, 6, 6, 6, 0, 0, 0, 2]), 5)
        self.assertEqual(Solution().findMaxConsecutiveOnes([0, 1, 1, 1, 1, 0, 0, 0, 2]), 4)
        self.assertEqual(Solution().findMaxConsecutiveOnes([7, 7, 7, 7, 0, 0, 0, 0, 2]), 5)

if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[7, 7, 7, 7, 7, 7, 7, 7, 2]

