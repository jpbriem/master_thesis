Input token: 523
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
output: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]

Example_2:
input: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0]
output: [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0]

Example_3:
input: [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def flipAndInvert(self, nums: List[int]) -> None:
        """
        Do not read beyond this line.

        :param nums:
        :return:
        """
        
        if len(nums) == 0: return
        for i in range(len(nums)):
            if nums[i]!= 0:
                nums[i], nums[-1] = nums[-1], nums[i]
                nums[-1], nums[i] = nums[i], nums[-1]
                
# Your Codec object will be instantiated and called as such:
# my_codec = Codec()
# my_codec.flipAndInvert([1,2,3,4,5])

class TestCodec(unittest.TestCase):
    def test_solution(self):
        s = Solution()
        self.assertEqual(s.flipAndInvert([1,2,3,4,5]), None)
        self.assertEqual(s.flipAndInvert([0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s.flipAndInvert([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]), None)
        self.assertEqual(s
################################################################

Solution:
[0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0]

