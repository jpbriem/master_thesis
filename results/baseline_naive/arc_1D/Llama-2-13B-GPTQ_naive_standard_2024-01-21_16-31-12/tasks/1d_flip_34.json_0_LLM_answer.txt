Input token: 376
Output token: 712
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 2, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 6, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0]
output: [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0]

Example_3:
input: [0, 0, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def reverse(self, nums: List[int]) -> None:
        """
        Do not write additional code.
        
        Assume that all inputs have exactly N integers.
        :param nums:
        :return:
        """
        if len(nums) == 0: return
        for i in range(len(nums)):
            if nums[i]!= 0:
                nums[i], nums[-1] = nums[-1], nums[i]
                break
        else:
            nums[::-1]

class TestCase(unittest.TestCase):
    def test_example_1(self):
        s = Solution()
        self.assertEqual([0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 2, 0, 0, 0, 0], s.reverse([0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 0, 0, 0]))
    
    def test_example_2(self):
        s = Solution()
        self.assertEqual([0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0], s.reverse([0, 0, 0, 0, 6, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0]))
    
    def test_example_3(self):
        s = Solution()
        self.assertEqual([0, 0, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], s.reverse([0, 0, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
    
    def test_solution(self):
        s = Solution()
        self.assertEqual([0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], s.reverse([0, 0, 0, 0, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]))

if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[0, 0, 0, 0, 8, 8, 8, 7, 0, 0, 0, 0, 0, 0, 0]

