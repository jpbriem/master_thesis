Input token: 355
Output token: 278
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0]
output: [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0]

Example_2:
input: [0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0]
output: [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0]

Example_3:
input: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0]
output: [2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]

Test case:
input: [7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def flipAndInvert(self, nums: List[int]) -> None:
        """
        Do not read beyond this line.

        :param nums:
        :return:
        """
        
        if len(nums) == 0: return
        n = len(nums)
        for i in range(n):
            if nums[i]!= 0:
                nums[i], nums[-1] = nums[-1], nums[i]
                nums[-1], nums[n - 1] = nums[n - 1], nums[-1]
                
# Your Codec object will be instantiated and called as such:
# my_codec = Solution()
# my_codec.flipAndInvert([7,7,7,7,7,0,0,0,0,0,0,0,0,0])
################################################################

Solution:
[7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

