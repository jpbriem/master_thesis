Input token: 733
Output token: 588
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 7, 7, 7, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 7, 7, 7, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 7, 7, 7, 0, 0, 2, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 7, 7, 7, 0, 2, 2, 2, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 8, 8, 8, 0, 0, 0, 0, 7, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 8, 8, 8, 0, 0, 0, 7, 7, 7, 0, 0, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 5, 5, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 5, 5, 5, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def findMaxForm(self, nums: List[int]) -> List[List[int]]:
        if not nums or len(nums) == 1: return []
        
        # 1. sort the array by value
        nums = sorted(nums)
        
        # 2. create a list of all possible combinations
        combos = []
        for i in range(len(nums)):
            combos.append([nums[i]])
            
        # 3. iterate over each combination
        for combo in combos:
            # 4. check if this is a valid max form
            if self._isValidMaxForm(combo):
                yield combo
                    
    def _isValidMaxForm(self, combo: List[int]) -> bool:
        """
        Checks whether the given combination can be transformed into a max form.
        :param combo: A combination to check.
        :return: True if it can be transformed; otherwise False.
        """
        if len(combo) < 3: return False
        
        # 1. get the first three elements
        firstThreeElements = combo[:3]
        
        # 2. check if they're equal
        if firstThreeElements!= [firstThreeElements[0], firstThreeElements[1], firstThreeElements[2]]: return False
        
        # 3. remove them from the original combination
        combo = combo[3:]
        
        # 4. repeat step 2 until there's nothing left
        while len(combo) > 0:
            # 5. get the next element
            currentElement = combo[0]
            
            # 6. remove it from the original combination
            combo = combo[1:]
            
            # 7. add it to the end of the previous result
            yield combo + [currentElement]
            
# ---------------------------------------------------
if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[0, 0, 5, 5, 5, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

