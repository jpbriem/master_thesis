Input token: 397
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0]
output: [0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 6, 6, 6, 6, 6, 0]

Example_2:
input: [0, 7, 7, 7, 7, 0, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0]
output: [0, 9, 9, 9, 9, 0, 0, 6, 6, 6, 0, 6, 6, 6, 0, 0]

Example_3:
input: [0, 7, 7, 7, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0]
output: [0, 6, 6, 6, 0, 9, 9, 0, 0, 6, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 6, 6, 6, 0, 0, 0]
"""

import unittest
from typing import List

class Solution:
    def toBits(self, nums: List[int]) -> List[List[int]]:
        if not nums or len(nums) == 0: return []
        res = [[0 for _ in range(8)] for _ in range(len(nums))]
        for i in range(len(nums)):
            res[i][nums[i]] += 1
        while True:
            for i in range(len(res)-1,-1,-1):
                if res[i][0] > 0:
                    res[i][0] -= 1
                    res[i+1].append(1)
                else:
                    break
            else:
                break
        return res

class TestCase(unittest.TestCase):
    def test_main(self):
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 7, 7, 7, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0]])
        self._test([[0, 7, 7, 7, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0]])
        self._test([[0, 0, 0, 7, 7, 7
################################################################

Solution:
[0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 6, 6, 6, 0, 0, 0]

