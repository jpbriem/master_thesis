{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'e', 'a']\noutput: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a']\n\nExample_2:\ninput: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a', 'a']\noutput: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a', 'a']\n\nExample_3:\ninput: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'e', 'a']\noutput: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'e', 'a']\n\nTest case:\ninput: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'e', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a', 'a']\n*/\n\n// Solution 1:\nclass Solution {\n    public String[] rearrangeString(String[] strs) {\n        int len = strs.length;\n        if (len == 0 || len == 1) return strs;\n\n        // count the number of each char in input array\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < len; i++) {\n            char c = strs[i].charAt(0);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n\n        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());\n        pq.addAll(map.entrySet());\n\n        List<String> list = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            Map.Entry<Character, Integer> entry = pq.poll();\n            char key = entry.getKey();\n            int value = entry.getValue();\n\n            // add chars to output array until we meet one with more than half frequency\n            for (int j = 0; j < Math.min(value, len / 2); j++) {\n                list.add(\"\" + key);\n                len--;\n            }\n\n            // put back into priority queue if there are still left\n            if (value > len / 2) {\n                pq.add(new AbstractMap.SimpleEntry<>(key, value));\n            }\n        }\n\n        // fill rest of the array with remaining characters\n        for (String s : strs) {\n            if (!list.contains(s)) {\n                list.add(s);\n            }\n        }\n\n        return list.toArray(new String[0]);\n    }\n}\n\n// Solution 2:\nclass Solution {\n    public String[] rearrangeString(String[] strs) {\n        int len = strs.length;\n        if (len == 0 || len == 1) return strs;\n\n        // count the number of each char in input array\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < len; i++) {\n            char c = strs[i].charAt(0);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n\n        // sort by freq and then alphabetical order\n        List<Map.Entry<Character, Integer>> list = new ArrayList<>(map.entrySet());\n        Collections.sort(list, (a, b) -> a.getValue().compareTo(b.getValue()));\n        Collections.sort(list, (a, b) -> a.getKey().compareTo(b.getKey()));\n\n        StringBuilder sb = new StringBuilder();\n        boolean flag = false;\n        while (!list.isEmpty()) {\n            Map.Entry<Character, Integer> entry = list.remove(list.size() - 1);\n            char key = entry.getKey();\n            int value = entry.getValue();\n\n            // add chars to output string builder until we meet one with more than half frequency\n            for (int j = 0; j < Math.min(value, len / 2); j++) {\n                sb.append(key);\n                len--;\n            }\n\n            // put back into list if there are still left\n            if (value > len / 2) {\n                list.add(new AbstractMap.SimpleEntry<>(key, value));\n            } else {\n                flag = true;\n            }\n        }\n\n        // check whether all elements have been added or not\n        if (flag && len!= 0) {\n            throw new IllegalArgumentException(\"Input is invalid\");\n        }\n\n        // convert string builder to array\n        String[] res = new String[strs.length];\n        for (int i = 0; i < res.length; i++) {\n            res[i] = \"\" + sb.charAt(i);\n        }\n\n        return res;\n    }\n}"
        }
    ],
    "idx": 886,
    "task": "1d_scale_dp_41",
    "category": "1d_scale_dp",
    "ys": [
        "1d_scale_dp_41.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a', 'a']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.25591882750845546,
        "cat_success_cnt": 19,
        "cat_success_rate": 0.5135135135135135
    },
    "usage_so_far": {
        "completion_tokens": 551178,
        "prompt_tokens": 517891,
        "cost": null
    }
}