
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'd', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'd', 'a']

Example_2:
input: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'd', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'c', 'c', 'c', 'd', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'd', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'd', 'a']

Test case:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'd', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'd', 'a', 'a', 'a']
*/

// Solution 1:
/*
function reorder(arr) {
    let left = [];
    let right = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === 'a') {
            left.push(arr[i]);
        } else {
            right.unshift(arr[i]);
        }
    }
    return [...left,...right];
}
*/

// Solution 2:
const reorder = arr => {
    const aIndexes = [];
    const newArr = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i]!== 'a') {
            newArr.unshift(arr[i]);
        } else {
            aIndexes.push(i);
        }
    }
    for (let j = 0; j < aIndexes.length; j++) {
        newArr.splice(aIndexes[j], 0, 'a');
    }
    return newArr;
};


###########################################################
Result:
solution: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'd', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3135011441647597

cat_success_cnt: 3

cat_success_rate: 0.08108108108108109

