{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a']\n\nExample_2:\ninput: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']\n\nExample_3:\ninput: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n\nTest case:\ninput: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a']\n*/\n\n// Solution 1:\nfunction firstNonRepeatingCharacter(string) {\n    let charMap = {};\n    for (let i = 0; i < string.length; i++) {\n        if (!charMap[string[i]]) {\n            charMap[string[i]] = 1;\n        } else {\n            charMap[string[i]]++;\n        }\n    }\n\n    for (let j = 0; j < string.length; j++) {\n        if (charMap[string[j]] === 1) {\n            return string[j];\n        }\n    }\n}\n\nconsole.log(firstNonRepeatingCharacter('abcd')); // a\nconsole.log(firstNonRepeatingCharacter('abcdd')); // c\nconsole.log(firstNonRepeatingCharacter('aaacccbbb')); // b\nconsole.log(firstNonRepeatingCharacter('b')); // b\nconsole.log(firstNonRepeatingCharacter('')); // undefined\n\n// Solution 2:\nconst firstNonRepeatingCharacter2 = str => [...str].find((e, i, s) => s.indexOf(e) === s.lastIndexOf(e));\n\nconsole.log(firstNonRepeatingCharacter2('abcd')); // a\nconsole.log(firstNonRepeatingCharacter2('abcdd')); // c\nconsole.log(firstNonRepeatingCharacter2('aaacccbbb')); // b\nconsole.log(firstNonRepeatingCharacter2('b')); // b\nconsole.log(firstNonRepeatingCharacter2('')); // undefined"
        }
    ],
    "idx": 385,
    "task": "1d_move_2p_40",
    "category": "1d_move_2p",
    "ys": [
        "1d_move_2p_40.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a']",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.3393782383419689,
        "cat_success_cnt": 2,
        "cat_success_rate": 0.05555555555555555
    },
    "usage_so_far": {
        "completion_tokens": 234112,
        "prompt_tokens": 207118,
        "cost": null
    }
}