
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'i', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'a']

Test case:
input: ['a', 'a', 'c', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] findLongestChain(String[] words) {
        if (words == null || words.length == 0) return new String[0];
        Arrays.sort(words, (w1, w2) -> Integer.compare(w1.length(), w2.length()));
        List<String> res = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            int j = binarySearch(res, words[i]);
            if (j == -1) res.add(words[i]);
            else res.set(j, words[i]);
        }
        return res.toArray(new String[0]);
    }

    private int binarySearch(List<String> list, String target) {
        int left = 0, right = list.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (list.get(mid).equals(target)) return mid;
            if (list.get(mid).compareTo(target) > 0) right = mid - 1;
            else left = mid + 1;
        }
        return -1;
    }
}

// Solution 2:
class Solution {
    public String[] findLongestChain(String[] words) {
        if (words == null || words.length == 0) return new String[0];
        Map<Integer, List<String>> map = new HashMap<>();
        for (String word : words) {
            int len = word.length();
            List<String> cur = map.computeIfAbsent(len, k -> new ArrayList<>());
            cur.add(word);
        }
        StringBuilder sb = new StringBuilder();
        for (int len = words.length; len >= 1; len--) {
            List<String> cur = map.getOrDefault(len, Collections.emptyList());
            for (String s : cur) {
                if (!sb.toString().contains(s)) {
                    sb.append(s);
                    break;
                }
            }
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.3893129770992366

cat_success_cnt: 12

cat_success_rate: 0.3870967741935484

