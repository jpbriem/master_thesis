
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['a', 'f', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'e', 'a', 'a', 'e', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['f', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
const freqAlphabets = (s) => {
  const result = [];
  for (let i = s.length - 1; i >= 0; i--) {
    if (i > 9 && s[i - 2] === '#') {
      let num = parseInt(s.slice(i - 2, i));
      result.unshift(String.fromCharCode('a'.charCodeAt() + num - 1));
      i -= 2;
    } else {
      let num = parseInt(s[i]);
      result.unshift(String.fromCharCode('a'.charCodeAt() + num - 1));
    }
  }
  return result.join("");
};

// Solution 2:
const freqAlphabets = (s) => {
  const arr = [...s];
  while (arr.includes("#")) {
    const index = arr.lastIndexOf("#");
    const num = parseInt(arr.slice(index - 2, index)) * 10 + parseInt(arr[index - 1]);
    arr.splice(index - 2, 3, String.fromCharCode("a".charCodeAt() + num - 1));
  }
  return arr.map((el) => el.toUpperCase()).reverse().join("");
};


###########################################################
Result:
solution: ['a', 'e', 'a', 'a', 'a', 'a', 'e', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.4327731092436975

cat_success_cnt: 8

cat_success_rate: 0.21052631578947367

