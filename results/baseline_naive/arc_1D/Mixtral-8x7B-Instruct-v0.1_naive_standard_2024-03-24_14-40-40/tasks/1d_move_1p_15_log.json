{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n\nExample_2:\ninput: ['i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a']\n\nExample_3:\ninput: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']\n\nTest case:\ninput: ['e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']\n*/\n\n// Solution 1:\nclass Solution {\n    public String[] sortPeople(String[] names, int[] heights) {\n        // Create a new array of Person objects. Each object has two fields - name and height.\n        Person[] people = new Person[names.length];\n        for (int i = 0; i < names.length; i++) {\n            people[i] = new Person(names[i], heights[i]);\n        }\n\n        // Sort the array using Comparator interface.\n        Arrays.sort(people, new Comparator<Person>() {\n            @Override\n            public int compare(Person p1, Person p2) {\n                if (p1.height == p2.height) return p1.name.compareTo(p2.name);\n                else return Integer.compare(p2.height, p1.height);\n            }\n        });\n\n        // Convert back to string array.\n        String[] result = new String[names.length];\n        for (int i = 0; i < names.length; i++) {\n            result[i] = people[i].name;\n        }\n\n        return result;\n    }\n}\n\nclass Person {\n    String name;\n    int height;\n\n    public Person(String n, int h) {\n        this.name = n;\n        this.height = h;\n    }\n}\n\n// Solution 2:\nclass Solution {\n    class Pair implements Comparable<Pair> {\n        String s;\n        int num;\n\n        Pair(String ss, int nn) {\n            s = ss;\n            num = nn;\n        }\n\n        public int compareTo(Pair other) {\n            if (this.num!= other.num) return Integer.compare(other.num, this.num);\n            else return this.s.compareTo(other.s);\n        }\n    }\n\n    public String[] sortPeople(String[] names, int[] heights) {\n        Pair[] pairs = new Pair[heights.length];\n        for (int i = 0; i < heights.length; i++) {\n            pairs[i] = new Pair(names[i], heights[i]);\n        }\n\n        Arrays.sort(pairs);\n\n        String[] res = new String[names.length];\n        for (int i = 0; i < names.length; i++) {\n            res[i] = pairs[i].s;\n        }\n\n        return res;\n    }\n}"
        }
    ],
    "idx": 307,
    "task": "1d_move_1p_15",
    "category": "1d_move_1p",
    "ys": [
        "1d_move_1p_15.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.38636363636363635,
        "cat_success_cnt": 3,
        "cat_success_rate": 0.375
    },
    "usage_so_far": {
        "completion_tokens": 188140,
        "prompt_tokens": 171997,
        "cost": null
    }
}