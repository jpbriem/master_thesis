
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'g', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'g', 'a']

Example_2:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'g', 'a', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'h', 'g', 'a', 'a']

Example_3:
input: ['c', 'c', 'c', 'a', 'a', 'g', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'g', 'a', 'a', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'a', 'g', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'h', 'h', 'h', 'a', 'a', 'g', 'a', 'a']
*/

// Solution 1:
const sortByHeight = (arr) => {
    let tree = arr.filter(el => el!== "g").sort((a, b) => a - b);
    let ground = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === "g") {
            ground.push(tree.shift());
        } else {
            continue;
        }
    }
    return [...ground,...tree];
}

console.log(sortByHeight(['b', 'b', 'b', 'b', 'b', 'a', 'a', 'g', 'a'])) // ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'g', 'a']
console.log(sortByHeight(['h', 'h', 'h', 'h', 'a', 'a', 'g', 'a', 'a'])) // ['a', 'a', 'h', 'h', 'h', 'h', 'g', 'a', 'a']
console.log(sortByHeight(['c', 'c', 'c', 'a', 'a', 'g', 'a', 'a', 'a'])) // ['a', 'a', 'c', 'c', 'c', 'g', 'a', 'a', 'a']
console.log(sortByHeight(['a', 'h', 'h', 'h', 'a', 'a', 'g', 'a', 'a'])) // ['a', 'h', 'h', 'h', 'a', 'a', 'g', 'a', 'a']


###########################################################
Result:
solution: ['a', 'a', 'a', 'h', 'h', 'h', 'g', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.32066508313539194

cat_success_cnt: 1

cat_success_rate: 0.047619047619047616

