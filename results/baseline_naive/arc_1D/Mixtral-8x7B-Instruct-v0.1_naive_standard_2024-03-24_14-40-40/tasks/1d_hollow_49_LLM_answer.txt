
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'f', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'd', 'a', 'a', 'd', 'a', 'a', 'a', 'a']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['h', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
const freqAlphabets = (s) => {
  const result = [];
  for (let i = s.length - 1; i >= 0; i--) {
    if (i > 9 && s[i - 2] === '#') {
      let num = parseInt(s.slice(i - 2, i));
      result.unshift(String.fromCharCode(num + 96));
      i -= 2;
    } else {
      let num = parseInt(s[i]);
      result.unshift(String.fromCharCode(num + 96));
    }
  }
  return result.join('');
};

// Solution 2:
const freqAlphabets = (s) => {
  const arr = s.split('');
  for (let i = arr.length - 1; i >= 0; i--) {
    if (arr[i]!== '#' || i < arr.length - 2) continue;
    let num = parseInt(`${arr[i - 2]}${arr[i - 1]}`);
    arr[i] = String.fromCharCode(num + 96);
    arr.splice(i - 2, 2);
  }
  return arr.reverse().join('');
};


###########################################################
Result:
solution: ['a', 'e', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.42448979591836733

cat_success_cnt: 9

cat_success_rate: 0.2

