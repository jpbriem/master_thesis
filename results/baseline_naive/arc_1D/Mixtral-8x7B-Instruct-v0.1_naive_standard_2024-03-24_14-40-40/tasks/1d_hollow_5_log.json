{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a']\noutput: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a', 'e', 'a']\n\nExample_2:\ninput: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'a', 'a', 'a', 'a', 'a', 'a']\n\nExample_3:\ninput: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a']\noutput: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'i', 'a']\n\nTest case:\ninput: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['a', 'a', 'a', 'h', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n*/\n\n// Solution 1:\nconst swap = (arr, i, j) => {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nconst moveElementToEnd = (arr, toMove) => {\n    if (!Array.isArray(arr)) return \"Not an array\";\n    if (!toMove || typeof toMove!== \"string\") return \"Invalid input\";\n\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] === toMove && arr[i + 1]!== toMove) {\n            swap(arr, i, findNextIndex(arr, toMove, i));\n        }\n    }\n    return arr;\n};\n\nconst findNextIndex = (arr, target, currentIndex) => {\n    for (let i = currentIndex + 1; i < arr.length; i++) {\n        if (arr[i] === target) return i;\n    }\n    return -1;\n}\n\nconsole.log(moveElementToEnd(['a', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], 'h')); // [ 'a', 'a', 'a', 'h', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a' ]\n\n/*\nSolution 2:\nconst moveElementToEnd = (array, toMove) => {\n    const left = [];\n    const right = [];\n\n    for (const item of array) {\n      if (item === toMove) {\n        right.push(item);\n      } else {\n        left.push(item);\n      }\n    }\n\n    return [...left,...right];\n  };\n*/"
        }
    ],
    "idx": 245,
    "task": "1d_hollow_5",
    "category": "1d_hollow",
    "ys": [
        "1d_hollow_5.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['a', 'a', 'a', 'h', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.42276422764227645,
        "cat_success_cnt": 9,
        "cat_success_rate": 0.1956521739130435
    },
    "usage_so_far": {
        "completion_tokens": 160295,
        "prompt_tokens": 140310,
        "cost": null
    }
}