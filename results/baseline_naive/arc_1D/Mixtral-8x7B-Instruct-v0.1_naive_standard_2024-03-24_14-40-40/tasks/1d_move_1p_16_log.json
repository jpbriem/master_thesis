{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n\nExample_2:\ninput: ['a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']\n\nExample_3:\ninput: ['a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']\n\nTest case:\ninput: ['a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a']\n*/\n\n// Solution 1:\nconst firstNonRepeatingChar = (str) => {\n    let obj = {};\n    for(let i=0;i<str.length;i++){\n        if(!obj[str[i]]){\n            obj[str[i]] = 1;\n        } else {\n            obj[str[i]]++;\n        }\n    }\n    for(let j=0;j<str.length;j++){\n        if(obj[str[j]] === 1){\n            return str[j];\n        }\n    }\n}\n\nconsole.log(firstNonRepeatingChar(['a','a','a','a','e','e','e','e','e','e','e','e','e','e','e','e','e','e','a','a','a','a'])) // a\n\n// Solution 2:\nconst firstNonRepeatingCharV2 = (str) => {\n    let arr = [];\n    for(let i=0;i<str.length;i++){\n        if(arr.indexOf(str[i]) === -1 && str.lastIndexOf(str[i]) === str.indexOf(str[i])){\n            arr.push(str[i]);\n        }\n    }\n    return arr[0] || null;\n}\n\nconsole.log(firstNonRepeatingCharV2(['a','a','a','a','e','e','e','e','e','e','e','e','e','e','e','e','e','e','a','a','a','a'])) // a"
        }
    ],
    "idx": 308,
    "task": "1d_move_1p_16",
    "category": "1d_move_1p",
    "ys": [
        "1d_move_1p_16.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.3883495145631068,
        "cat_success_cnt": 4,
        "cat_success_rate": 0.4444444444444444
    },
    "usage_so_far": {
        "completion_tokens": 188574,
        "prompt_tokens": 172503,
        "cost": null
    }
}