
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'h', 'h', 'h']
output: ['a', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'd', 'd', 'd']

Example_2:
input: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'a', 'a', 'a']
output: ['a', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'd', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a']
output: ['a', 'a', 'd', 'd', 'd', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'h', 'h']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'c', 'c']
*/

// Solution 1:
class Solution {
public:
    vector<char> findReplaceString(vector<char>& s, vector<int>& indices, vector<string>& sources, vector<string>& targets) {
        int n = s.size();
        vector<pair<int, pair<int, string>>> v; // <index of source in s, <start index of source in s, target>>
        for (int i = 0; i < indices.size(); ++i) {
            if (s.substr(indices[i], sources[i].length()) == sources[i])
                v.push_back({i, {indices[i], targets[i]}});
        }
        sort(v.begin(), v.end());
        vector<char> res;
        for (int i = 0; i < n; ++i) {
            bool found = false;
            for (auto &p : v) {
                if (p.first > -1 && p.second.first == i) {
                    res.push_back(p.second.second[i-p.second.first]);
                    p.first--;
                    found = true;
                    break;
                }
            }
            if (!found) res.push_back(s[i]);
        }
        return res;
    }
};

// Solution 2:
class Solution {
public:
    vector<char> findReplaceString(vector<char>& s, vector<int>& indices, vector<string>& sources, vector<string>& targets) {
        vector<tuple<int, int, string>> v;
        for (int i = 0; i < indices.size(); ++i) {
            if (s.substr(indices[i], sources[i].length())!= sources[i]) continue;
            v.emplace_back(indices[i], sources[i].length(), targets[i]);
        }
        sort(v.begin(), v.end());
        vector<char> res;
        auto it = v.rbegin();
        for (char c : s) {
            while (it!= v.rend() && get<0>(*it) == res.size()) {
                for (char cc : get<2>(*it)) res.push_back(cc);
                it++;
            }
            res.push_back(c);
        }
        return res;
    }
};


###########################################################
Result:
solution: ['a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'f', 'f']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.24452554744525548

cat_success_cnt: 5

cat_success_rate: 0.22727272727272727

