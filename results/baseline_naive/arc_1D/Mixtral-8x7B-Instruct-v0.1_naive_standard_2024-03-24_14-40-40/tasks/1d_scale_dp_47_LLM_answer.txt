
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'g', 'a']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'g', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'g']
output: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'g']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'g', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'g', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'a', 'a', 'g', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'g', 'a', 'a', 'a', 'a']
*/

// Solution 1:
function longestHappyString(str) {
    let count = {};
    for (let i of str) {
        if (!count[i]) count[i] = 0;
        count[i]++;
    }

    const keys = Object.keys(count);
    let maxCount = Math.max(...Object.values(count));

    while (maxCount > 0) {
        if (count['a'] && count['b']) {
            count['a']--;
            count['b']--;
            count['c']++;
            maxCount -= 2;
        } else if (count['a'] &&!count['b']) {
            count['a']--;
            count['c']++;
            maxCount--;
        } else if (!count['a'] && count['b']) {
            count['b']--;
            count['c']++;
            maxCount--;
        } else break;
    }

    return Array(str.length).fill('').map((_, idx) => {
        if (idx < str.indexOf(keys[0])) return keys[0];
        if (idx >= str.lastIndexOf(keys[0]) + maxCount) return keys[2];
        return keys[1];
    }).join('');
}

console.log(longestHappyString(['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'g', 'a'])) // "hhhhhhhhhhhaaaag"
console.log(longestHappyString(['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'g'])) // "addddddddddddddgg"
console.log(longestHappyString(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'g', 'a', 'a', 'a'])) // "aaaaaaaaaaaaeeeeeaaga"
console.log(longestHappyString(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'a', 'a', 'g', 'a', 'a', 'a', 'a'])) // "aaaaaaaaaaaaafffg"


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'g', 'a', 'a', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.25867861142217247

cat_success_cnt: 23

cat_success_rate: 0.5348837209302325

