
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'e', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a']

Example_2:
input: ['a', 'a', 'i', 'i', 'i', 'a', 'a', 'e', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'e', 'a']

Example_3:
input: ['i', 'i', 'i', 'i', 'i', 'a', 'a', 'e', 'a']
output: ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'e', 'a']

Test case:
input: ['d', 'd', 'd', 'd', 'd', 'a', 'a', 'e', 'a']

###########################################################
Sample Outputs:
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'a']
*/

// Solution 1:
const longestCommonSubsequence = (str) => {
    if (!str.length) return '';

    const [first,...rest] = str;
    let result = first;

    for (let i = 0; i < rest.length; i++) {
        if (rest[i] === first) continue;

        result += rest[i];
    }

    return longestCommonSubsequence(result);
};

console.log(longestCommonSubsequence(['a', 'c', 'c', 'c', 'c', 'a', 'a', 'e', 'a'])) // a c c c c c c e a
console.log(longestCommonSubsequence(['a', 'a', 'i', 'i', 'i', 'a', 'a', 'e', 'a'])) // a a i i i i e a
console.log(longestCommonSubsequence(['i', 'i', 'i', 'i', 'i', 'a', 'a', 'e', 'a'])) // i i i i i i e a
console.log(longestCommonSubsequence(['d', 'd', 'd', 'd', 'd', 'a', 'a', 'e', 'a'])) // d d d d d d d d e a


###########################################################
Result:
solution: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2611111111111111

cat_success_cnt: 27

cat_success_rate: 0.54

