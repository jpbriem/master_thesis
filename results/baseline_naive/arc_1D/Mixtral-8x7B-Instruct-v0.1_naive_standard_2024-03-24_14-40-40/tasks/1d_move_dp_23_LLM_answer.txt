
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'c']
output: ['a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'c']

Example_2:
input: ['d', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'c']
output: ['a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'c']

Example_3:
input: ['a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'c', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'c', 'a']

Test case:
input: ['a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'c']

###########################################################
Sample Outputs:
output: ['a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'c', 'a']
*/

// Solution 1:
class Solution {
    public String sortString(String s) {
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        StringBuilder sb = new StringBuilder();
        while (sb.length() < s.length()) {
            for (int i = 0; i < 26; ++i) {
                if (count[i] > 0) {
                    sb.append((char)(i + 'a'));
                    count[i]--;
                }
            }
            for (int i = 25; i >= 0; --i) {
                if (count[i] > 0) {
                    sb.append((char)(i + 'a'));
                    count[i]--;
                }
            }
        }
        return sb.toString();
    }
}

// Solution 2:
class Solution {
    public String sortString(String s) {
        char[] arr = s.toCharArray();
        Arrays.sort(arr);
        Deque<Character> queue = new LinkedList<>();
        Collections.addAll(queue, arr);
        StringBuilder sb = new StringBuilder();
        while (!queue.isEmpty()) {
            sb.append(queue.pollFirst());
            if (queue.size() > 0 && queue.peekLast() == sb.charAt(sb.length()-1)) {
                Character temp = queue.removeLast();
                queue.offerFirst(temp);
            }
        }
        return sb.toString();
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'c']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.28433268858800775

cat_success_cnt: 0

cat_success_rate: 0.0

