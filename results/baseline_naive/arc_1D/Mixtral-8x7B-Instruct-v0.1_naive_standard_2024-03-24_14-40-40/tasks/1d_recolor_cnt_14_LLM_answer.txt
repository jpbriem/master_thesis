
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'a', 'a', 'i', 'i', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'j', 'a', 'a', 'd', 'd', 'a', 'c', 'c', 'c', 'a', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'i', 'i', 'a', 'a', 'i', 'a', 'i', 'i', 'i', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'd', 'd', 'a', 'a', 'j', 'a', 'c', 'c', 'c', 'a', 'd', 'd', 'a', 'a', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'i', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'j', 'a', 'c', 'c', 'c', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'i', 'i', 'a', 'a', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'd', 'd', 'a', 'a', 'c', 'a', 'a', 'a', 'd', 'd', 'd', 'a', 'a', 'c', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        List<Integer> list = new ArrayList<>();
        for (int i : indexes) {
            if (S.substring(i, i + sources[0].length()).equals(sources[0])) {
                list.add(i);
            }
        }
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        int idx = 0;
        for (int i = 0; i < list.size(); i++) {
            while (idx < list.get(i)) {
                sb.append(S.charAt(idx++));
            }
            sb.append(targets[i]);
            idx += sources[0].length();
        }
        while (idx < S.length()) {
            sb.append(S.charAt(idx++));
        }
        return sb.toString().split("");
    }
}

// Solution 2:
class Solution {
    public String[] findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        List<Integer> list = new ArrayList<>();
        for (int i : indexes) {
            if (S.substring(i, i + sources[0].length()).equals(sources[0])) {
                list.add(i);
            }
        }
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        int idx = 0;
        for (int i = 0; i < list.size(); i++) {
            if (idx == list.get(i)) {
                sb.append(targets[i]);
                idx += sources[0].length();
            } else {
                sb.append(S.charAt(idx++));
            }
        }
        while (idx < S.length()) {
            sb.append(S.charAt(idx++));
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['a', 'd', 'd', 'a', 'a', 'j', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'j', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2562747688243065

cat_success_cnt: 0

cat_success_rate: 0.0

