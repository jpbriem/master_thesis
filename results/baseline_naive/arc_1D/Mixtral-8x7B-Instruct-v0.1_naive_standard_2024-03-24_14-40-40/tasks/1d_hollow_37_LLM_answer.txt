
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['f', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['a', 'f', 'a', 'a', 'f', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a']
*/

// Solution 1:
/*
function fixBrackets(arr) {
    let left = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === 'a') {
            left.push('a');
        } else {
            while (left.length > 0 && left[left.length - 1]!== 'a') {
                left.pop();
            }
            if (left.length > 0) {
                left.pop();
            }
            left.push('h');
        }
    }
    return [...left];
}
*/

// Solution 2:
const fixBrackets = arr => {
    const stack = [];
    for (const char of arr) {
        if (char === 'a' ||!stack.length) {
            stack.push(char);
        } else if (char === 'h' && stack[stack.length - 1] === 'a') {
            stack.pop();
        } else {
            stack.push(char);
        }
    }
    return stack;
};


###########################################################
Result:
solution: ['a', 'a', 'a', 'h', 'a', 'a', 'a', 'h', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.4353448275862069

cat_success_cnt: 6

cat_success_rate: 0.1875

