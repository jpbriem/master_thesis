
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'f', 'f', 'f', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'f', 'a', 'f', 'a', 'a', 'a']

Example_2:
input: ['d', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a']
output: ['d', 'a', 'a', 'd', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a']
output: ['a', 'a', 'g', 'a', 'a', 'a', 'g', 'a', 'a']

Test case:
input: ['h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
const freqAlphabets = (s) => {
  let result = '';
  for (let i = s.length - 1; i >= 0; i--) {
    if (i > 9 && s[i - 2] === '#') {
      const num = parseInt(s.slice(i - 2, i));
      result += String.fromCharCode(num + 96);
      i -= 2;
    } else {
      const num = parseInt(s[i]);
      result += String.fromCharCode(num + 96);
    }
  }
  return result;
};

// Solution 2:
const freqAlphabets = (s) => {
  let result = '';
  while (s.length!== 0) {
    if (s.length > 2 && s.slice(-2) === '#') {
      const num = parseInt(s.slice(-3, -2)) * 10 + parseInt(s.slice(-1));
      result += String.fromCharCode(num + 96);
      s = s.slice(0, -3);
    } else {
      const num = parseInt(s.slice(-1));
      result += String.fromCharCode(num + 96);
      s = s.slice(0, -1);
    }
  }
  return result;
};


###########################################################
Result:
solution: ['h', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.45495495495495497

cat_success_cnt: 6

cat_success_rate: 0.2727272727272727

