{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'e', 'a', 'a', 'e', 'a', 'a', 'e', 'e', 'a', 'a', 'a']\noutput: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'g', 'g', 'a', 'a', 'j', 'a', 'a', 'g', 'g', 'a', 'a', 'a']\n\nExample_2:\ninput: ['a', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'a']\noutput: ['a', 'j', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'a', 'a']\n\nExample_3:\ninput: ['a', 'a', 'e', 'e', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e']\noutput: ['a', 'a', 'g', 'g', 'a', 'c', 'c', 'c', 'a', 'a', 'j', 'a', 'g', 'g', 'a', 'a', 'a', 'g', 'g']\n\nTest case:\ninput: ['a', 'a', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'e', 'a', 'a', 'e', 'a', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'j', 'j', 'j', 'a', 'g', 'a', 'a', 'g', 'a', 'a', 'a']\n*/\n\n// Solution 1:\nconst replaceAll = (str, mapObj) => {\n    return str.replace(/[a-z]/gi, char => mapObj[char] || char);\n}\n\nconst findReplacePattern = (list, pattern) => {\n    const mapObj = {};\n    let count = 0;\n    for(let i=0;i<pattern.length;i++) {\n        if(!mapObj[pattern[i]]) {\n            mapObj[pattern[i]] = String.fromCharCode('a'.charCodeAt() + count);\n            count++;\n        }\n    }\n    // console.log(mapObj);\n    return list.filter(item => replaceAll(item, mapObj) === replaceAll(pattern, mapObj));\n};\n\n// Solution 2:\nconst findReplacePattern_v2 = (list, pattern) => {\n    const mapObj = {};\n    let count = 0;\n    for(let i=0;i<pattern.length;i++) {\n        if(!mapObj[pattern[i]]) {\n            mapObj[pattern[i]] = String.fromCharCode('a'.charCodeAt() + count);\n            count++;\n        }\n    }\n    // console.log(mapObj);\n    return list.filter(item => [...new Set(item)].length === Object.keys(mapObj).length && item.split('').every((val, idx) => val===item[idx] || mapObj[val]===item[idx]));\n};\n\nconsole.log(findReplacePattern(['a','a','e','e','e','a','a','e','e','a','a','e','a','a','e','e','a','a','a'], \"abcb\"));\nconsole.log(findReplacePattern(['a','e','a','a','e','e','e','a','a','a','e','e','a','a','a','e','e','a','a'], \"abcdeeeabcabb\"));\nconsole.log(findReplacePattern(['a','a','e','e','a','e','e','e','a','a','e','a','e','e','a','a','a','e','e'], \"aaeaeaeeeaee\");\nconsole.log(findReplacePattern(['a','a','a','e','e','a','a','a','e','e','e','a','e','a','a','e','a','a','a'], \"aaaaeejaabaia\"));"
        }
    ],
    "idx": 770,
    "task": "1d_recolor_cnt_27",
    "category": "1d_recolor_cnt",
    "ys": [
        "1d_recolor_cnt_27.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'j', 'a', 'a', 'j', 'a', 'a', 'a']",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.2529182879377432,
        "cat_success_cnt": 1,
        "cat_success_rate": 0.047619047619047616
    },
    "usage_so_far": {
        "completion_tokens": 493761,
        "prompt_tokens": 458355,
        "cost": null
    }
}