
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['d', 'd', 'd', 'd', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'i', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'i', 'a']
output: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'i', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'i', 'a']
output: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'i', 'a']

Test case:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'i', 'a']

###########################################################
Sample Outputs:
output: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'i', 'a']
*/

// Solution 1:
class Solution {
    public String[] findLongestChain(String[] pairs) {
        if (pairs == null || pairs.length == 0) return new String[0];
        Arrays.sort(pairs, (a, b) -> a.charAt(0) - b.charAt(0)); // sort by first char of each string
        List<String> res = new ArrayList<>();
        for (int i = 0; i < pairs.length; i++) {
            int j = binarySearch(res, pairs[i].charAt(1));
            if (j == res.size()) {
                res.add(pairs[i]);
            } else {
                res.set(j, pairs[i]);
            }
        }
        return res.toArray(new String[res.size()]);
    }

    private int binarySearch(List<String> list, char target) {
        int left = 0, right = list.size();
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (list.get(mid).charAt(0) <= target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}

// Solution 2:
class Solution {
    public String[] findLongestChain(String[] pairs) {
        if (pairs == null || pairs.length == 0) return new String[0];
        Map<Character, Integer> map = new HashMap<>();
        for (String pair : pairs) {
            map.put(pair.charAt(1), Math.max(map.getOrDefault(pair.charAt(1), 0), map.get(pair.charAt(0)) + 1));
        }
        List<String> res = new ArrayList<>();
        int maxLen = 0;
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxLen) {
                maxLen = entry.getValue();
                res.clear();
                res.add("" + entry.getKey());
            } else if (entry.getValue() == maxLen) {
                res.add("" + entry.getKey());
            }
        }
        Collections.sort(res);
        return res.toArray(new String[res.size()]);
    }
}


###########################################################
Result:
solution: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'i', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.24595842956120093

cat_success_cnt: 5

cat_success_rate: 0.3125

