
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'g', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['c', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['f', 'f', 'f', 'f', 'f', 'f', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'b', 'b', 'b', 'b', 'b', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'f', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'g', 'g', 'g', 'g', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'h', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] reorderSpaces(String text) {
        int count = 0;
        for (int i = 0; i < text.length(); ++i) {
            if (text.charAt(i) =='') {
                ++count;
            }
        }

        List<String> words = new ArrayList<>();
        StringBuilder word = new StringBuilder();
        for (int i = 0; i < text.length(); ++i) {
            char c = text.charAt(i);
            if (c!='') {
                word.append(c);
            } else if (!word.toString().isEmpty()) {
                words.add(word.toString());
                word = new StringBuilder();
            }
        }
        if (!word.toString().isEmpty()) {
            words.add(word.toString());
        }

        int spaceCount = count - (words.size() - 1);
        int gapSize = spaceCount / (words.size() - 1);
        int extraSpace = spaceCount % (words.size() - 1);

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < words.size() - 1; ++i) {
            sb.append(words.get(i));
            for (int j = 0; j < gapSize; ++j) {
                sb.append(' ');
            }
        }
        sb.append(words.get(words.size() - 1));
        while (extraSpace-- > 0) {
            sb.append(' ');
        }

        return sb.toString().split("");
    }
}

// Solution 2:
class Solution {
    public String[] reorderSpaces(String text) {
        int n = text.length(), wc = 0, sc = 0;
        for (int i = 0; i < n; ++i) {
            if (text.charAt(i) =='') {
                ++sc;
            } else {
                ++wc;
            }
        }
        int avg = sc / wc;
        List<String> words = new ArrayList<>();
        StringBuilder curWord = new StringBuilder();
        for (int i = 0; i < n; ++i) {
            if (text.charAt(i) =='') {
                if (!curWord.toString().isEmpty()) {
                    words.add(curWord.toString());
                    curWord = new StringBuilder();
                }
                if (sc > avg * wc) {
                    --sc;
                }
            } else {
                curWord.append(text.charAt(i));
            }
        }
        if (!curWord.toString().isEmpty()) {
            words.add(curWord.toString());
        }
        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < words.size() - 1; ++i) {
            ans.append(words.get(i)).append(String.valueOf(" ".repeat(avg)));
        }
        ans.append(words.get(words.size() - 1));
        if (sc > 0) {
            ans.append(String.valueOf(" ".repeat(sc)));
        }
        return ans.toString().split("");
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'h', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.4457831325301205

cat_success_cnt: 11

cat_success_rate: 0.6875

