
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['c', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
*/

// Solution 1:
const swap = (arr, i, j) => {
    let temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

const firstNonRepeatingCharacter = (str) => {
    if (!str || str.length < 2) return str;

    const charMap = {};
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    // find the first non-repeated character
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]] === 1) {
            return str[i];
        }
    }

    return null;
}

const optimizedFirstNonRepeatingCharacter = (str) => {
    if (!str || str.length < 2) return str;

    const charMap = {};
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    // find the first non-repeated character
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]] === 1) {
            return str[i];
        }
    }

    return null;
}

const reorganizeString = (str) => {
    if (!str || str.length < 2) return str;

    const result = [];
    const charMap = {};
    let maxCount = -Infinity;
    let maxChar = '';

    // build a map of characters and their counts
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    // find the most frequent character
    for (let key in charMap) {
        if (charMap[key] > maxCount) {
            maxCount = charMap[key];
            maxChar = key;
        }
    }

    // check if there is only one character with maximum count
    if (maxCount > Math.floor(str.length / 2)) {
        return '';
    }

    // fill the array with alternating characters
    while (result.length < str.length) {
        if (charMap[maxChar]) {
            result.push(maxChar);
            charMap[maxChar]--;
        }

        let minChar = null;
        let minCount = Infinity;
        for (let key in charMap) {
            if (charMap[key] && charMap[key] < minCount) {
                minChar = key;
                minCount = charMap[key];
            }
        }

        if (minChar!== null) {
            result.push(minChar);
            charMap[minChar]--;
        }
    }

    return result.join('');
}

console.log(firstNonRepeatingCharacter(['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']))
console.log(optimizedFirstNonRepeatingCharacter(['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']))
console.log(reorganizeString(['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']))


###########################################################
Result:
solution: ['a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.4262295081967213

cat_success_cnt: 9

cat_success_rate: 0.20454545454545456

