
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'g', 'e', 'e', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'e', 'g', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'h', 'i', 'i', 'i', 'i', 'a', 'a']
output: ['a', 'a', 'a', 'i', 'i', 'i', 'i', 'h', 'a', 'a']

Example_3:
input: ['a', 'a', 'd', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'e', 'e', 'd', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'f', 'h', 'h', 'h', 'h', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'f', 'a']
*/

// Solution 1:
class Solution {
    public String[] rearrangeString(String[] strs) {
        if (strs == null || strs.length < 2) return strs;

        int len = strs.length, maxCount = 0, count = 0;
        Map<String, Integer> map = new HashMap<>();
        for (String s : strs) {
            map.put(s, map.getOrDefault(s, 0) + 1);
            maxCount = Math.max(maxCount, map.get(s));
        }

        // If the number of strings with maximum frequency is greater than half of the length of the array, then it's impossible to arrange them in a way that no two same strings are adjacent.
        if ((len - 1) / 2 >= maxCount) return new String[0];

        PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue()!= b.getValue()? b.getValue() - a.getValue() : a.getKey().compareTo(b.getKey()));
        pq.addAll(map.entrySet());

        List<String> list = new ArrayList<>();
        while (!pq.isEmpty()) {
            Map.Entry<String, Integer> entry = pq.poll();
            String key = entry.getKey(), val = entry.getValue().toString();
            list.add(key);
            --count;
            if (--val > 0) pq.offer(new AbstractMap.SimpleEntry<>(key, val));
            if (count == 0) {
                count = maxCount;
                if (!list.isEmpty()) list.remove(list.size() - 1);
            }
        }

        String[] res = new String[len];
        for (int i = 0; i < len; ++i) {
            if (i % 2 == 0) res[i] = list.get(i / 2);
            else res[i] = strs[i];
        }
        return res;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'f', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.4648648648648649

cat_success_cnt: 23

cat_success_rate: 0.6571428571428571

