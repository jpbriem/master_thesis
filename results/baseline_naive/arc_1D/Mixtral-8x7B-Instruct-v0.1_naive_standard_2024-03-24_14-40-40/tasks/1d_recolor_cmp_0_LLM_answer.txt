
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'c', 'a', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'c', 'a', 'c', 'a']
output: ['a', 'c', 'a', 'c', 'c', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'c', 'c', 'c', 'a', 'c', 'a']

Example_2:
input: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'a', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c']
output: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'a', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b']

Example_3:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] replace(String[] input) {
        if (input == null || input.length <= 0) return new String[0];

        int aCount = 0;
        for (int i = 0; i < input.length; i++) {
            if ("a".equals(input[i])) {
                aCount++;
            } else {
                break;
            }
        }

        int bCount = 0;
        for (int i = input.length - 1; i >= 0; i--) {
            if ("c".equals(input[i])) {
                bCount++;
            } else {
                break;
            }
        }

        String[] output = new String[input.length];
        System.arraycopy(input, 0, output, 0, aCount);
        for (int i = aCount; i < output.length - bCount; i++) {
            output[i] = "b";
        }
        System.arraycopy(input, input.length - bCount, output, output.length - bCount, bCount);

        return output;
    }
}

// Solution 2:
class Solution {
    public String[] replace(String[] input) {
        if (input == null || input.length <= 0) return new String[0];

        int left = 0;
        while (left < input.length && "a".equals(input[left])) {
            left++;
        }

        int right = input.length - 1;
        while (right > left && "c".equals(input[right])) {
            right--;
        }

        String[] output = new String[input.length];
        System.arraycopy(input, 0, output, 0, left);
        for (int i = left; i < output.length - right + left; i++) {
            output[i] = "b";
        }
        System.arraycopy(input, right, output, output.length - right + left, right - left + 1);

        return output;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2738944365192582

cat_success_cnt: 1

cat_success_rate: 1.0

