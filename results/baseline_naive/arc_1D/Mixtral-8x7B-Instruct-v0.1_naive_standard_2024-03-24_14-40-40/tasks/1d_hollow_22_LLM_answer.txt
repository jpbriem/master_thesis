
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'e', 'a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'a', 'a', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a']
*/

// Solution 1:
const swap = (arr, i, j) => {
    let temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

const firstNonRepeatingCharacter = (str) => {
    if (!str || str.length === 0) return null;

    const charMap = {};
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]] === 1) {
            return str[i];
        }
    }

    return null;
}

const optimizedFirstNonRepeatingCharacter = (str) => {
    if (!str || str.length === 0) return null;

    const charMap = {};
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]] === 1) {
            return str[i];
        }
    }

    return null;
}

const replaceWithFirstNonRepeatingCharacter = (str) => {
    if (!str || str.length === 0) return null;

    const charMap = {};
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    for (let i = 0; i < str.length - 1; i++) {
        if (charMap[str[i]] === 1) {
            swap(str, i, findIndexOfCharInString(str, str[i]));
        }
    }

    return str;
}

const findIndexOfCharInString = (str, char) => {
    for (let i = 0; i < str.length; i++) {
        if (str[i] === char) {
            return i;
        }
    }

    return -1;
}

console.log('Solution 1');
console.log(replaceWithFirstNonRepeatingCharacter(['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])) // aaaaeaaaaeaeeeeaaaaaaa
console.log(replaceWithFirstNonRepeatingCharacter(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])) // addaaaaaaaaaaaaaa
console.log(replaceWithFirstNonRepeatingCharacter(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a'])) // adadadadadadaddddddddda
console.log(replaceWithFirstNonRepeatingCharacter(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a'])) // abababbbbaaaaaaaa
console.log();

// Solution 2:
const firstNonRepeatingCharacterII = (str) => {
    if (!str || str.length === 0) return null;

    const charMap = {};
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]] === 1) {
            return i + 1;
        }
    }

    return null;
}

console.log('Solution 2');
console.log(firstNonRepeatingCharacterII(['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])) // 6
console.log(firstNonRepeatingCharacterII(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])) // 11
console.log(firstNonRepeatingCharacterII(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a'])) // 19
console.log(firstNonRepeatingCharacterII(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a'])) // 14
console.log();

// Solution 3:
const firstNonRepeatingCharacterIII = (str) => {
    if (!str || str.length === 0) return null;

    const charMap = {};
    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]]) {
            charMap[str[i]]++;
        } else {
            charMap[str[i]] = 1;
        }
    }

    for (let i = 0; i < str.length; i++) {
        if (charMap[str[i]] === 1) {
            return str[i];
        }
    }

    return null;
}

console.log('Solution 3');
console.log(firstNonRepeatingCharacterIII(['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])) // e
console.log(firstNonRepeatingCharacterIII(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])) // d
console.log(firstNonRepeatingCharacterIII(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a'])) // d
console.log(firstNonRepeatingCharacterIII(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a'])) // b
console.log();


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.4675925925925926

cat_success_cnt: 6

cat_success_rate: 0.375

