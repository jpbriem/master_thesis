{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'a', 'a', 'a', 'g', 'e', 'e', 'a', 'a', 'a']\noutput: ['a', 'a', 'a', 'a', 'e', 'e', 'g', 'a', 'a', 'a']\n\nExample_2:\ninput: ['a', 'a', 'a', 'h', 'i', 'i', 'i', 'i', 'a', 'a']\noutput: ['a', 'a', 'a', 'i', 'i', 'i', 'i', 'h', 'a', 'a']\n\nExample_3:\ninput: ['a', 'a', 'd', 'e', 'e', 'a', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'e', 'e', 'd', 'a', 'a', 'a', 'a', 'a']\n\nTest case:\ninput: ['a', 'a', 'a', 'a', 'f', 'h', 'h', 'h', 'h', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'f', 'a']\n*/\n\n// Solution 1:\nclass Solution {\n    public String[] rearrangeString(String[] strs) {\n        if (strs == null || strs.length < 2) return strs;\n\n        int len = strs.length, maxCount = 0, count = 0;\n        Map<String, Integer> map = new HashMap<>();\n        for (String s : strs) {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n            maxCount = Math.max(maxCount, map.get(s));\n        }\n\n        // If the number of strings with maximum frequency is greater than half of the length of the array, then it's impossible to arrange them in a way that no two same strings are adjacent.\n        if ((len - 1) / 2 >= maxCount) return new String[0];\n\n        PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue()!= b.getValue()? b.getValue() - a.getValue() : a.getKey().compareTo(b.getKey()));\n        pq.addAll(map.entrySet());\n\n        List<String> list = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            Map.Entry<String, Integer> entry = pq.poll();\n            String key = entry.getKey(), val = entry.getValue().toString();\n            list.add(key);\n            --count;\n            if (--val > 0) pq.offer(new AbstractMap.SimpleEntry<>(key, val));\n            if (count == 0) {\n                count = maxCount;\n                if (!list.isEmpty()) list.remove(list.size() - 1);\n            }\n        }\n\n        String[] res = new String[len];\n        for (int i = 0; i < len; ++i) {\n            if (i % 2 == 0) res[i] = list.get(i / 2);\n            else res[i] = strs[i];\n        }\n        return res;\n    }\n}"
        }
    ],
    "idx": 184,
    "task": "1d_flip_4",
    "category": "1d_flip",
    "ys": [
        "1d_flip_4.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'f', 'a']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.4648648648648649,
        "cat_success_cnt": 23,
        "cat_success_rate": 0.6571428571428571
    },
    "usage_so_far": {
        "completion_tokens": 125893,
        "prompt_tokens": 112573,
        "cost": null
    }
}