
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'b', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b', 'a']

Example_2:
input: ['a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'b', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'b', 'a', 'a']

Example_3:
input: ['a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'b', 'a']
output: ['a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'b', 'a']

Test case:
input: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'b', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'b', 'a', 'a', 'a', 'a']
*/

// Solution 1:
const removeDuplicateLetters = (s) => {
  const stack = [];
  const countMap = {};
  for (let i = 0; i < s.length; i++) {
    countMap[s[i]] = (countMap[s[i]] || 0) + 1;
  }
  for (let char of s) {
    if (!stack.includes(char)) {
      while (
        stack.length &&
        stack[stack.length - 1] > char &&
        countMap[stack[stack.length - 1]]--
      ) {
        stack.pop();
      }
      stack.push(char);
    } else {
      countMap[char]--;
    }
  }
  return stack.join("");
};

// Solution 2:
/*
  We can use a hashmap to keep track of the last index of each character in the string, and then iterate through the string again from left to right. For each character, we check whether there exists an earlier character that is larger than it but has not been included yet. If such a character exists, we update its position in the hashmap to be the current position of the character being processed. After processing all characters, we construct the final result by including only those characters whose positions are equal to their first occurrences.

  Time Complexity: O(n), where n is the length of the input string.
  Space Complexity: O(1), assuming the size of the alphabet is constant.
*/
const removeDuplicateLetters = (s) => {
  let lastIndex = new Array(26).fill(-1); // Initialize with -1 as default value
  for (let i = 0; i < s.length; i++) {
    lastIndex[s[i].charCodeAt() - "a".charCodeAt()] = i;
  }
  let res = "";
  for (let i = 0; i < s.length; i++) {
    const c = s[i];
    if (lastIndex[c.charCodeAt() - "a".charCodeAt()] === i) continue;
    while (res.length && res[res.length - 1] > c) {
      const prevLastIndex = lastIndex[res[res.length - 1].charCodeAt() - "a".charCodeAt()];
      if (prevLastIndex === res.length - 1) break;
      res = res.slice(0, res.length - 1);
    }
    res += c;
  }
  return res;
};


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'b', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.32923832923832924

cat_success_cnt: 0

cat_success_rate: 0.0

