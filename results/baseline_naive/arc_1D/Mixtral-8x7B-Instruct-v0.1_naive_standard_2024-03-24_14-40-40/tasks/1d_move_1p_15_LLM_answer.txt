
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']

Test case:
input: ['e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        // Create a new array of Person objects. Each object has two fields - name and height.
        Person[] people = new Person[names.length];
        for (int i = 0; i < names.length; i++) {
            people[i] = new Person(names[i], heights[i]);
        }

        // Sort the array using Comparator interface.
        Arrays.sort(people, new Comparator<Person>() {
            @Override
            public int compare(Person p1, Person p2) {
                if (p1.height == p2.height) return p1.name.compareTo(p2.name);
                else return Integer.compare(p2.height, p1.height);
            }
        });

        // Convert back to string array.
        String[] result = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            result[i] = people[i].name;
        }

        return result;
    }
}

class Person {
    String name;
    int height;

    public Person(String n, int h) {
        this.name = n;
        this.height = h;
    }
}

// Solution 2:
class Solution {
    class Pair implements Comparable<Pair> {
        String s;
        int num;

        Pair(String ss, int nn) {
            s = ss;
            num = nn;
        }

        public int compareTo(Pair other) {
            if (this.num!= other.num) return Integer.compare(other.num, this.num);
            else return this.s.compareTo(other.s);
        }
    }

    public String[] sortPeople(String[] names, int[] heights) {
        Pair[] pairs = new Pair[heights.length];
        for (int i = 0; i < heights.length; i++) {
            pairs[i] = new Pair(names[i], heights[i]);
        }

        Arrays.sort(pairs);

        String[] res = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            res[i] = pairs[i].s;
        }

        return res;
    }
}


###########################################################
Result:
solution: ['a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.38636363636363635

cat_success_cnt: 3

cat_success_rate: 0.375

