
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['d', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        // Create a new array of Person objects with name and height attributes.
        Person[] people = new Person[names.length];
        for (int i = 0; i < names.length; i++) {
            people[i] = new Person(names[i], heights[i]);
        }

        // Sort the array using Comparator to compare by height in descending order.
        Arrays.sort(people, new Comparator<Person>() {
            @Override
            public int compare(Person p1, Person p2) {
                return Integer.compare(p2.height, p1.height);
            }
        });

        // Copy sorted names into output array.
        String[] result = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            result[i] = people[i].name;
        }

        return result;
    }
}

class Person {
    String name;
    int height;

    public Person(String n, int h) {
        this.name = n;
        this.height = h;
    }
}

/*
Solution 2:
Use an ArrayList instead of an array so that we can use Collections.sort() method which is easier than implementing our own comparator.
*/

class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        List<Person> list = new ArrayList<>();
        for (int i = 0; i < names.length; i++) {
            list.add(new Person(names[i], heights[i]));
        }

        Collections.sort(list, new Comparator<Person>() {
            @Override
            public int compare(Person p1, Person p2) {
                return Integer.compare(p2.height, p1.height);
            }
        });

        String[] result = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            result[i] = list.get(i).name;
        }

        return result;
    }
}

class Person {
    String name;
    int height;

    public Person(String n, int h) {
        this.name = n;
        this.height = h;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.38924050632911394

cat_success_cnt: 7

cat_success_rate: 0.4375

