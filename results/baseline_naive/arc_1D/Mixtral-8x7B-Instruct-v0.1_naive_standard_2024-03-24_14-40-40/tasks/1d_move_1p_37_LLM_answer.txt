
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a']

Example_2:
input: ['g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']
output: ['a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a']

Example_3:
input: ['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a']

Test case:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
const swap = (arr, i, j) => {
    let temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

const moveElementToEnd = (arr, toMove) => {
    if (!Array.isArray(arr)) return "Not an array";
    if (!toMove || typeof toMove!=='string') return "Invalid input";

    let leftIdx = 0;
    for (let rightIdx = 0; rightIdx < arr.length; rightIdx++) {
        if (arr[rightIdx] === toMove) continue;
        else if (leftIdx!== rightIdx) swap(arr, leftIdx, rightIdx);
        leftIdx++;
    }
    return arr;
};

console.log(moveElementToEnd(['a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a'], 'd')); // [ 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a' ]
console.log(moveElementToEnd(['g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a'], 'g')); // [ 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a' ]
console.log(moveElementToEnd(['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a'], 'b')); // [ 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a' ]
console.log(moveElementToEnd(['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a'], 'h')); // [ 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a' ]


###########################################################
Result:
solution: ['a', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.37650602409638556

cat_success_cnt: 9

cat_success_rate: 0.28125

