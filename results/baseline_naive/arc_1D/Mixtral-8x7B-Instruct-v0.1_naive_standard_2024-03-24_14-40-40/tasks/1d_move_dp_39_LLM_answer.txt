
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'd', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'd', 'a']

Example_2:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'd', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'd', 'a', 'a', 'a']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'd', 'a']
output: ['a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'd', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'd', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'd', 'a', 'a']
*/

// Solution 1:
function sortByHeight(arr) {
    let sorted = [];
    let trees = arr.reduce((acc, val, i) => {
        if (val!== -1) acc.push([i, val]);
        return acc;
    }, []);

    trees.sort((a, b) => a[1] - b[1]);

    for (let tree of trees) {
        while (tree[0] > sorted.length) {
            sorted.push(-1);
        }
        sorted[tree[0]] = tree[1];
    }

    return sorted;
}

// Solution 2:
const sortByHeight = arr => {
    const idxs = [...arr].map((v, i) => v === -1? null : i).filter(x => x!== null);
    idxs.sort((a, b) => arr[b] - arr[a]);

    for (let i = 0; i < idxs.length; i++) {
        while (idxs[i] < arr.length && arr[idxs[i]] === -1) idxs[i]++;
    }

    return arr.map((v, i) => idxs[i] === undefined? v : v === -1? -1 : idxs[i]);
};


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'd', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27902621722846443

cat_success_cnt: 2

cat_success_rate: 0.058823529411764705

