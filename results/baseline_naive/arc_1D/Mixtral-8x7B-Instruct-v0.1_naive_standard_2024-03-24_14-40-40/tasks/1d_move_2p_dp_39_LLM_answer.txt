
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'b', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b', 'a']

Example_2:
input: ['c', 'c', 'c', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'b', 'a', 'a', 'a']
output: ['a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'b', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'b', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'b', 'a']
*/

// Solution 1:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        // Create a new array of Person objects.
        Person[] people = new Person[names.length];
        for (int i = 0; i < names.length; i++) {
            people[i] = new Person(names[i], heights[i]);
        }

        // Sort the array using Comparator.comparing().reversed() to compare by height first and then name.
        Arrays.sort(people, Comparator.comparing((Person p) -> p.height).reversed().thenComparing(p -> p.name));

        // Convert back into an array of strings.
        String[] sortedNames = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            sortedNames[i] = people[i].name;
        }
        return sortedNames;
    }
}

class Person {
    String name;
    int height;

    public Person(String n, int h) {
        this.name = n;
        this.height = h;
    }
}

// Solution 2:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        // Create a list of tuples containing both the name and height.
        List<Tuple> tupleList = new ArrayList<>();
        for (int i = 0; i < names.length; i++) {
            Tuple t = new Tuple();
            t.name = names[i];
            t.height = heights[i];
            tupleList.add(t);
        }

        // Sort the list using Collections.sort with a custom comparator.
        Collections.sort(tupleList, new Comparator<Tuple>() {
            @Override
            public int compare(Tuple o1, Tuple o2) {
                if (o1.height == o2.height) {
                    return o1.name.compareTo(o2.name);
                } else {
                    return Integer.compare(o2.height, o1.height);
                }
            }
        });

        // Convert back into an array of strings.
        String[] sortedNames = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            sortedNames[i] = tupleList.get(i).name;
        }
        return sortedNames;
    }
}

class Tuple {
    String name;
    int height;
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'b', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.315668202764977

cat_success_cnt: 3

cat_success_rate: 0.08823529411764706

