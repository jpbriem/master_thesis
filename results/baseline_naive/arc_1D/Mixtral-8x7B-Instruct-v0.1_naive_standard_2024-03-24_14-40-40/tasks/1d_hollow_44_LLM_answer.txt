
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['e', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'h', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'd', 'a', 'd', 'd', 'd', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] rearrangeString(String[] strs) {
        int len = strs.length;
        if (len == 0 || len == 1) return strs;

        // sort the array first
        Arrays.sort(strs, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return Integer.compare(s1.length(), s2.length());
            }
        });

        List<String> resList = new ArrayList<>();
        while (!resList.isEmpty() || strs[0].length() > 0) {
            boolean found = false;
            for (int i = 0; i < len; ++i) {
                if (strs[i].length() <= 0) continue;
                resList.add(strs[i]);
                strs[i] = strs[i].substring(1);
                found = true;
                break;
            }
            if (!found) {
                for (int j = 0; j < len - 1; ++j) {
                    if (strs[j].length() > 0 && strs[j + 1].length() <= 0) {
                        strs[j] = strs[j].substring(1);
                        resList.add(strs[j + 1]);
                        strs[j + 1] = "";
                        break;
                    }
                }
            }
        }

        String[] result = new String[len];
        Iterator<String> it = resList.iterator();
        for (int k = 0; k < len; ++k) {
            result[k] = it.next();
        }

        return result;
    }
}

// Solution 2:
class Solution {
    public String[] rearrangeString(String[] strs) {
        int len = strs.length;
        if (len == 0 || len == 1) return strs;

        // sort the array first
        Arrays.sort(strs, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return Integer.compare(s1.length(), s2.length());
            }
        });

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            if (strs[i].length() == 0) continue;
            sb.append(strs[i], 0, 1);
            for (int j = 0; j < len; ++j) {
                if (strs[j].length() == 0) continue;
                if (strs[j].charAt(0)!= sb.charAt(sb.length() - 1)) {
                    strs[j] = strs[j].substring(1);
                    sb.append(strs[j], 0, 1);
                    strs[j] = "";
                    break;
                } else {
                    strs[j] = strs[j].substring(1);
                }
            }
        }

        String[] result = new String[len];
        int idx = 0;
        for (int i = 0; i < len; ++i) {
            if (strs[i].length() > 0) {
                result[idx++] = strs[i];
            }
        }

        return result;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'd', 'a', 'a', 'd', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.42916666666666664

cat_success_cnt: 8

cat_success_rate: 0.2

