
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'c', 'c', 'a', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'a']
output: ['a', 'c', 'c', 'a', 'c', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'c', 'c', 'a']

Example_2:
input: ['a', 'a', 'c', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a']

Test case:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'c', 'c', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] replace(String[] arr) {
        if (arr == null || arr.length <= 0) return new String[0];

        int aCount = 0, bCount = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].equals("a")) aCount++;
            else if (arr[i].equals("c") && i + 1 < arr.length && arr[i+1].equals("c")) bCount++;
        }

        String[] res = new String[arr.length];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].equals("a")) res[i] = "a";
            else if (arr[i].equals("c") && i + 1 < arr.length && arr[i+1].equals("c")) {
                res[i] = "b";
                i++;
            }
            else res[i] = "c";
        }

        // fill the rest of array with 'b's
        while (bCount > 0) {
            for (int i = 0; i < res.length; i++) {
                if (res[i].equals("c")) {
                    res[i] = "b";
                    bCount--;
                    break;
                }
            }
        }

        // fill the rest of array with 'a's
        while (aCount > 0) {
            for (int i = 0; i < res.length; i++) {
                if (res[i].equals("c")) {
                    res[i] = "a";
                    aCount--;
                    break;
                }
            }
        }

        return res;
    }
}

// Solution 2:
class Solution {
    public String[] replace(String[] arr) {
        if (arr == null || arr.length <= 0) return new String[0];

        int aCount = 0, bCount = 0, cCount = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].equals("a")) aCount++;
            else if (arr[i].equals("c")) cCount++;
        }

        String[] res = new String[arr.length];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].equals("a")) res[i] = "a";
            else if (arr[i].equals("c") && i + 1 < arr.length && arr[i+1].equals("c")) {
                res[i] = "b";
                i++;
            }
            else res[i] = "c";
        }

        // fill the rest of array with 'b's
        while (bCount < cCount - aCount) {
            for (int i = 0; i < res.length; i++) {
                if (res[i].equals("c")) {
                    res[i] = "b";
                    bCount++;
                    break;
                }
            }
        }

        // fill the rest of array with 'a's
        while (aCount > 0) {
            for (int i = 0; i < res.length; i++) {
                if (res[i].equals("c")) {
                    res[i] = "a";
                    aCount--;
                    break;
                }
            }
        }

        return res;
    }
}


###########################################################
Result:
solution: ['a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'c', 'c', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2594086021505376

cat_success_cnt: 2

cat_success_rate: 0.045454545454545456

