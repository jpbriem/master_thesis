
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'g', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'g', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'd', 'e', 'e', 'e', 'e', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'd', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'g', 'g', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'f', 'a']

Test case:
input: ['a', 'a', 'a', 'f', 'e', 'e', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'e', 'e', 'f', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        // Create a new array of Person objects with name and height attributes.
        Person[] people = new Person[names.length];
        for (int i = 0; i < names.length; i++) {
            people[i] = new Person(names[i], heights[i]);
        }

        // Sort the array using Comparator to compare by height in descending order.
        Arrays.sort(people, new Comparator<Person>() {
            @Override
            public int compare(Person p1, Person p2) {
                return Integer.compare(p2.height, p1.height);
            }
        });

        // Copy sorted names into output array.
        String[] result = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            result[i] = people[i].name;
        }

        return result;
    }
}

class Person {
    String name;
    int height;

    public Person(String n, int h) {
        this.name = n;
        this.height = h;
    }
}

// Solution 2:
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        // Create an array of tuples containing both name and height.
        Tuple[] arr = new Tuple[heights.length];
        for (int i = 0; i < heights.length; i++) {
            arr[i] = new Tuple(names[i], heights[i]);
        }

        // Sort the array based on height in descending order.
        Arrays.sort(arr, new Comparator<Tuple>() {
            @Override
            public int compare(Tuple t1, Tuple t2) {
                return Integer.compare(t2.h, t1.h);
            }
        });

        // Extract names from sorted tuple array.
        String[] res = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            res[i] = arr[i].s;
        }

        return res;
    }
}

class Tuple {
    String s;
    int h;

    public Tuple(String str, int num) {
        this.s = str;
        this.h = num;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'e', 'e', 'f', 'a', 'a', 'a', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.46774193548387094

cat_success_cnt: 24

cat_success_rate: 0.6666666666666666

