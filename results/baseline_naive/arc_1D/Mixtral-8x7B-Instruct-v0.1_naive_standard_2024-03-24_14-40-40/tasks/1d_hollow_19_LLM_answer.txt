
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['d', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['d', 'a', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'a']
output: ['a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'f', 'a']

Example_3:
input: ['d', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['d', 'a', 'a', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] rearrangeString(String[] strs, int k) {
        if (strs == null || strs.length <= 0 || k < 1) return strs;

        Map<Character, Integer> map = new HashMap<>();
        for (String s : strs) {
            char c = s.charAt(0);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((e1, e2) -> e1.getValue() - e2.getValue());
        pq.addAll(map.entrySet());

        List<String> list = new ArrayList<>();
        while (!pq.isEmpty()) {
            List<Map.Entry<Character, Integer>> group = new ArrayList<>();
            // add first element to the group
            Map.Entry<Character, Integer> cur = pq.poll();
            group.add(cur);
            int count = cur.getValue();
            StringBuilder sb = new StringBuilder();
            sb.append(cur.getKey());
            --count;
            while (!pq.isEmpty() && cur.getKey().equals(pq.peek().getKey())) {
                cur = pq.poll();
                group.add(cur);
                sb.append(cur.getKey());
                --count;
            }

            // check whether we can put this group into result
            if (group.size() > k) {
                // cannot put it in one time, so need to split them
                for (int i = 0; i < group.size(); ++i) {
                    Map.Entry<Character, Integer> entry = group.get(i);
                    for (int j = 0; j < entry.getValue(); ++j) {
                        list.add(sb.toString());
                    }
                }
            } else {
                // can put all elements of this group into result at once
                for (int i = 0; i < k - group.size() + 1; ++i) {
                    list.add("");
                }
                for (Map.Entry<Character, Integer> entry : group) {
                    for (int j = 0; j < entry.getValue(); ++j) {
                        list.set(list.size() - 1 - j, sb.toString());
                    }
                }
            }
        }

        String[] res = new String[list.size()];
        for (int i = 0; i < list.size(); ++i) {
            res[i] = list.get(i);
        }
        return res;
    }
}

// Solution 2:
class Solution {
    public String[] rearrangeString(String[] strs, int k) {
        if (strs == null || strs.length <= 0 || k < 1) return strs;

        Map<Character, Integer> map = new HashMap<>();
        for (String s : strs) {
            char c = s.charAt(0);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((e1, e2) -> e1.getValue() - e2.getValue());
        pq.addAll(map.entrySet());

        List<String> list = new ArrayList<>();
        while (!pq.isEmpty()) {
            List<Map.Entry<Character, Integer>> group = new ArrayList<>();
            // add first element to the group
            Map.Entry<Character, Integer> cur = pq.poll();
            group.add(cur);
            int count = cur.getValue();
            StringBuilder sb = new StringBuilder();
            sb.append(cur.getKey());
            --count;
            while (!pq.isEmpty() && cur.getKey().equals(pq.peek().getKey())) {
                cur = pq.poll();
                group.add(cur);
                sb.append(cur.getKey());
                --count;
            }

            // check whether we can put this group into result
            if (group.size() > k) {
                // cannot put it in one time, so need to split them
                for (Map.Entry<Character, Integer> entry : group) {
                    for (int j = 0; j < entry.getValue(); ++j) {
                        list.add(sb.toString());
                    }
                }
            } else {
                // can put all elements of this group into result at once
                for (int i = 0; i < k - group.size() + 1; ++i) {
                    list.add("");
                }
                for (Map.Entry<Character, Integer> entry : group) {
                    for (int j = 0; j < entry.getValue(); ++j) {
                        list.set(list.size() - 1 - j, sb.toString());
                    }
                }
            }
        }

        String[] res = new String[list.size()];
        for (int i = 0; i < list.size(); ++i) {
            res[i] = list.get(i);
        }
        return res;
    }
}


###########################################################
Result:
solution: ['b', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.4669811320754717

cat_success_cnt: 4

cat_success_rate: 0.3333333333333333

