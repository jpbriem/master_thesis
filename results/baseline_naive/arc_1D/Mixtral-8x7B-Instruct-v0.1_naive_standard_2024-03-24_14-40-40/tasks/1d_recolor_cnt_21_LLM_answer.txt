
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'e', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'a', 'e', 'e', 'a', 'a', 'a']
output: ['a', 'h', 'h', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'd', 'a', 'h', 'h', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'e', 'e', 'a', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'a', 'a']
output: ['a', 'a', 'a', 'h', 'h', 'a', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'd', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'e', 'a', 'a', 'e', 'e', 'a', 'e', 'e', 'e', 'a', 'e', 'e', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'a', 'a', 'h', 'h', 'a', 'b', 'b', 'b', 'a', 'h', 'h', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'e', 'e', 'a', 'a', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'd', 'h', 'a', 'a', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
*/

// Solution 1:
class Solution {
    public String[] findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        List<Integer> list = new ArrayList<>();
        for (int i : indexes) {
            if (S.substring(i, i + sources[0].length()).equals(sources[0])) {
                list.add(i);
            }
        }
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        int idx = 0;
        for (int i = 0; i < S.length(); i++) {
            if (idx < list.size() && i == list.get(idx)) {
                sb.append(targets[idx]);
                i += sources[0].length() - 1;
                idx++;
            } else {
                sb.append(S.charAt(i));
            }
        }
        return sb.toString().split("");
    }
}

// Solution 2:
class Solution {
    public String[] findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < indexes.length; i++) {
            if (!S.substring(indexes[i], indexes[i] + sources[i].length()).equals(sources[i])) continue;
            map.put(indexes[i], i);
        }
        List<Integer> keys = new ArrayList<>(map.keySet());
        Collections.sort(keys);
        StringBuilder sb = new StringBuilder();
        int idx = 0;
        for (int i = 0; i < S.length(); i++) {
            if (idx < keys.size() && i == keys.get(idx)) {
                sb.append(targets[map.get(keys.get(idx++))]);
                i += sources[map.get(keys.get(idx-1))].length() - 1;
            } else {
                sb.append(S.charAt(i));
            }
        }
        return sb.toString().split("");
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'h', 'h', 'a', 'a', 'd', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2549019607843137

cat_success_cnt: 1

cat_success_rate: 0.06666666666666667

