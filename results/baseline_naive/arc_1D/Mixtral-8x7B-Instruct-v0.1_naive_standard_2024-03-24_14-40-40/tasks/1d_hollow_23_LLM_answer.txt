
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']
output: ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'e', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'c', 'a', 'c', 'c', 'c', 'c', 'a']
*/

public class Solution {
    public String[] rearrange(String[] input) {
        if (input == null || input.length < 2) return input;

        int len = input.length, aCount = 0, cCount = 0;
        for (int i = 0; i < len; i++) {
            if (input[i].equals("a")) aCount++;
            else cCount++;
        }

        // no need to swap
        if (aCount > len / 2) return input;

        char[] res = new char[len];
        int idxA = 0, idxC = 0;
        for (int i = 0; i < len; i += 2) {
            while (idxA < aCount &&!isValid(res, idxA)) idxA++;
            if (idxA >= aCount) break;
            res[i] = 'a';
            idxA++;

            while (idxC < cCount &&!isValid(res, idxC)) idxC++;
            if (idxC >= cCount) break;
            res[i + 1] = 'c';
            idxC++;
        }

        if (idxA < aCount || idxC < cCount) return new String[]{};

        for (int i = 0; i < len; i++) {
            input[i] = "" + res[i];
        }

        return input;
    }

    private boolean isValid(char[] arr, int index) {
        if (index == 0) return true;
        if (index % 2!= 0) return false;
        if (index - 2 >= 0 && arr[index - 2] == 'c') return true;
        return false;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a', 'c', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.46543778801843316

cat_success_cnt: 6

cat_success_rate: 0.35294117647058826

