
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'f', 'a', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a']
*/

// Solution 1:
class Solution {
    public String[] rearrange(String[] input) {
        int len = input.length;
        if (len < 4) return input;

        List<Character> listA = new ArrayList<>();
        List<Character> listB = new ArrayList<>();

        for (int i = 0; i < len; i++) {
            char c = input[i].charAt(0);
            if (c == 'a') {
                listA.add(c);
            } else {
                listB.add(c);
            }
        }

        Collections.sort(listB);

        StringBuilder sb = new StringBuilder();
        while (!listA.isEmpty() &&!listB.isEmpty()) {
            sb.append('a');
            sb.append(listB.remove(0));
            sb.append('a');
            sb.append(listA.remove(0));
        }

        // append remaining elements to the string builder
        while (!listA.isEmpty()) {
            sb.append(listA.remove(0));
        }

        while (!listB.isEmpty()) {
            sb.append(listB.remove(0));
        }

        String s = sb.toString();
        String[] output = new String[len];
        for (int i = 0; i < len; i += 2) {
            output[i] = "" + s.charAt(i / 2);
            if (i + 1 < len) {
                output[i+1] = "" + s.charAt(len - (i/2) - 1);
            }
        }

        return output;
    }
}

// Solution 2:
class Solution {
    public String[] rearrange(String[] input) {
        int len = input.length;
        if (len < 4) return input;

        List<Integer> indexList = new ArrayList<>();
        for (int i = 0; i < len; i++) {
            indexList.add(i);
        }

        List<Character> listA = new ArrayList<>();
        List<Character> listB = new ArrayList<>();

        for (int i = 0; i < len; i++) {
            char c = input[indexList.get(i)].charAt(0);
            if (c == 'a') {
                listA.add(c);
            } else {
                listB.add(c);
            }
        }

        Collections.sort(listB);

        StringBuilder sb = new StringBuilder();
        while (!listA.isEmpty() &&!listB.isEmpty()) {
            sb.append(input[indexList.remove(listA.size()-1)]);
            sb.append(input[indexList.remove(listB.size()-1)]);
        }

        // append remaining elements to the string builder
        while (!listA.isEmpty()) {
            sb.append(input[indexList.remove(listA.size()-1)]);
        }

        while (!listB.isEmpty()) {
            sb.append(input[indexList.remove(listB.size()-1)]);
        }

        String s = sb.toString();
        String[] output = new String[len];
        for (int i = 0; i < len; i += 2) {
            output[i] = "" + s.charAt(i / 2);
            if (i + 1 < len) {
                output[i+1] = "" + s.charAt(len - (i/2) - 1);
            }
        }

        return output;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.47761194029850745

cat_success_cnt: 1

cat_success_rate: 1.0

