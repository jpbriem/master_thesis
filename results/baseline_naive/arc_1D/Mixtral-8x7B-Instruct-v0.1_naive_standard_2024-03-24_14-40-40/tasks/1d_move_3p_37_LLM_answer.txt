
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a']

Example_2:
input: ['g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a']

Example_3:
input: ['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'a']

Test case:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'a']
*/

// Solution 1: Two pointers, O(n) time and space.
const sortArray = (arr) => {
  let left = 0;
  let right = arr.length - 1;

  while (left < right) {
    if (arr[left] === "a") {
      [arr[left], arr[right]] = [arr[right], arr[left]];
      right--;
    } else {
      left++;
    }
  }

  return arr;
};

// Do not edit the line below.
exports.sortArray = sortArray;


###########################################################
Result:
solution: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2987551867219917

cat_success_cnt: 4

cat_success_rate: 0.125

