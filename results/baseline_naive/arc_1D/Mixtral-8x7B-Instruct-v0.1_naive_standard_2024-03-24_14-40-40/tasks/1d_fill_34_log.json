{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'a', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'a', 'a']\noutput: ['a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a']\n\nExample_2:\ninput: ['a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'a']\noutput: ['a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a']\n\nExample_3:\ninput: ['c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'a', 'a', 'a']\noutput: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a']\n\nTest case:\ninput: ['h', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\n*/\n\n// Solution 1:\nconst replaceAll = (str, find, replace) => {\n    return str.replace(new RegExp(find, \"g\"), replace);\n}\n\nconst freqQuery = arr => {\n    let countMap = {}; // map of counts to their frequency\n    let result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const [op, num] = arr[i];\n\n        if (op === 1) {\n            const currentCount = countMap[num] || 0;\n            countMap[num] = currentCount + 1;\n        } else if (op === 2) {\n            const currentCount = countMap[num] || 0;\n            if (currentCount > 0) {\n                countMap[num] = currentCount - 1;\n            }\n        } else {\n            const queryNum = Object.keys(countMap).filter(key => countMap[key] === num)[0];\n            if (queryNum!== undefined) {\n                result.push(1);\n            } else {\n                result.push(0);\n            }\n        }\n    }\n\n    return result;\n};\n\n/*\nTime Complexity: O(n)\nSpace Complexity: O(n)\n*/\n\n// Solution 2:\nconst freqQuery = arr => {\n    let countMap = new Map(); // map of numbers to their frequencies\n    let freqMap = new Map(); // map of frequencies to their number of occurrences\n    let result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const [op, num] = arr[i];\n\n        if (op === 1) {\n            const currentFreq = countMap.get(num) || 0;\n            countMap.set(num, currentFreq + 1);\n\n            const currentFreqCount = freqMap.get(currentFreq) || 0;\n            freqMap.set(currentFreq, currentFreqCount - 1);\n\n            const newFreqCount = freqMap.get(currentFreq + 1) || 0;\n            freqMap.set(currentFreq + 1, newFreqCount + 1);\n        } else if (op === 2) {\n            const currentFreq = countMap.get(num) || 0;\n            if (currentFreq > 0) {\n                countMap.set(num, currentFreq - 1);\n\n                const currentFreqCount = freqMap.get(currentFreq) || 0;\n                freqMap.set(currentFreq, currentFreqCount - 1);\n\n                const newFreqCount = freqMap.get(currentFreq - 1) || 0;\n                freqMap.set(currentFreq - 1, newFreqCount + 1);\n            }\n        } else {\n            const queryNum = Array.from(freqMap.entries()).filter(([k, v]) => k === num)[0][0];\n            if (queryNum!== undefined) {\n                result.push(1);\n            } else {\n                result.push(0);\n            }\n        }\n    }\n\n    return result;\n};\n\n/*\nTime Complexity: O(n)\nSpace Complexity: O(n)\n*/"
        }
    ],
    "idx": 128,
    "task": "1d_fill_34",
    "category": "1d_fill",
    "ys": [
        "1d_fill_34.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.3875968992248062,
        "cat_success_cnt": 11,
        "cat_success_rate": 0.3793103448275862
    },
    "usage_so_far": {
        "completion_tokens": 97790,
        "prompt_tokens": 86169,
        "cost": null
    }
}