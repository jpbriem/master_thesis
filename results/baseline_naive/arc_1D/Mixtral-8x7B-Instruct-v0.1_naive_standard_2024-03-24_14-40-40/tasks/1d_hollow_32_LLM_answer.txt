
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
*/

public class Solution {
    public String[] findWords(String[] words) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            if (isMatch(words[i])) {
                result.add(words[i]);
            }
        }
        return result.toArray(new String[result.size()]);
    }

    private boolean isMatch(String word) {
        int firstRow = getValue('q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p');
        int secondRow = getValue('a','s', 'd', 'f', 'g', 'h', 'j', 'k', 'l');
        int thirdRow = getValue('z', 'x', 'c', 'v', 'b', 'n','m');

        int row = -1;
        char c = Character.toLowerCase(word.charAt(0));
        if ((row = firstRow & (1 << (c - 'a')))!= 0) {
            for (int j = 1; j < word.length(); j++) {
                c = Character.toLowerCase(word.charAt(j));
                if ((row & (1 << (c - 'a'))) == 0) {
                    return false;
                }
            }
            return true;
        } else if ((row = secondRow & (1 << (c - 'a')))!= 0) {
            for (int j = 1; j < word.length(); j++) {
                c = Character.toLowerCase(word.charAt(j));
                if ((row & (1 << (c - 'a'))) == 0) {
                    return false;
                }
            }
            return true;
        } else if ((row = thirdRow & (1 << (c - 'a')))!= 0) {
            for (int j = 1; j < word.length(); j++) {
                c = Character.toLowerCase(word.charAt(j));
                if ((row & (1 << (c - 'a'))) == 0) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    private int getValue(char... chars) {
        int value = 0;
        for (char c : chars) {
            value |= (1 << (c - 'a'));
        }
        return value;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.44493392070484583

cat_success_cnt: 6

cat_success_rate: 0.2222222222222222

