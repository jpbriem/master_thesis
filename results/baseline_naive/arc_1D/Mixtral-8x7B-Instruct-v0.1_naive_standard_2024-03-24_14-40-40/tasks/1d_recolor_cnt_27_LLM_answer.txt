
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'e', 'a', 'a', 'e', 'a', 'a', 'e', 'e', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'g', 'g', 'a', 'a', 'j', 'a', 'a', 'g', 'g', 'a', 'a', 'a']

Example_2:
input: ['a', 'e', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'a']
output: ['a', 'j', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'a', 'a']

Example_3:
input: ['a', 'a', 'e', 'e', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e']
output: ['a', 'a', 'g', 'g', 'a', 'c', 'c', 'c', 'a', 'a', 'j', 'a', 'g', 'g', 'a', 'a', 'a', 'g', 'g']

Test case:
input: ['a', 'a', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'e', 'a', 'a', 'e', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'j', 'j', 'j', 'a', 'g', 'a', 'a', 'g', 'a', 'a', 'a']
*/

// Solution 1:
const replaceAll = (str, mapObj) => {
    return str.replace(/[a-z]/gi, char => mapObj[char] || char);
}

const findReplacePattern = (list, pattern) => {
    const mapObj = {};
    let count = 0;
    for(let i=0;i<pattern.length;i++) {
        if(!mapObj[pattern[i]]) {
            mapObj[pattern[i]] = String.fromCharCode('a'.charCodeAt() + count);
            count++;
        }
    }
    // console.log(mapObj);
    return list.filter(item => replaceAll(item, mapObj) === replaceAll(pattern, mapObj));
};

// Solution 2:
const findReplacePattern_v2 = (list, pattern) => {
    const mapObj = {};
    let count = 0;
    for(let i=0;i<pattern.length;i++) {
        if(!mapObj[pattern[i]]) {
            mapObj[pattern[i]] = String.fromCharCode('a'.charCodeAt() + count);
            count++;
        }
    }
    // console.log(mapObj);
    return list.filter(item => [...new Set(item)].length === Object.keys(mapObj).length && item.split('').every((val, idx) => val===item[idx] || mapObj[val]===item[idx]));
};

console.log(findReplacePattern(['a','a','e','e','e','a','a','e','e','a','a','e','a','a','e','e','a','a','a'], "abcb"));
console.log(findReplacePattern(['a','e','a','a','e','e','e','a','a','a','e','e','a','a','a','e','e','a','a'], "abcdeeeabcabb"));
console.log(findReplacePattern(['a','a','e','e','a','e','e','e','a','a','e','a','e','e','a','a','a','e','e'], "aaeaeaeeeaee");
console.log(findReplacePattern(['a','a','a','e','e','a','a','a','e','e','e','a','e','a','a','e','a','a','a'], "aaaaeejaabaia"));


###########################################################
Result:
solution: ['a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'j', 'a', 'a', 'j', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2529182879377432

cat_success_cnt: 1

cat_success_rate: 0.047619047619047616

