{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: ['a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a']\n\nExample_2:\ninput: ['g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a']\n\nExample_3:\ninput: ['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']\noutput: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a']\n\nTest case:\ninput: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']\n\n###########################################################\nSample Outputs:\noutput: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']\n*/\n\n// Solution 1:\nconst swap = (arr, i, j) => {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nconst moveElementToEnd = (arr, toMove) => {\n    if (!Array.isArray(arr)) return \"Not an array\";\n    if (!toMove || typeof toMove!=='string') return \"Invalid input\";\n\n    let leftIdx = 0;\n    for (let rightIdx = 0; rightIdx < arr.length; rightIdx++) {\n        if (arr[rightIdx] === toMove) continue;\n        else if (leftIdx!== rightIdx) swap(arr, leftIdx, rightIdx);\n        leftIdx++;\n    }\n    return arr;\n};\n\nconsole.log(moveElementToEnd(['a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a'], 'd')); // [ 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a' ]\nconsole.log(moveElementToEnd(['g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a'], 'g')); // [ 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a' ]\nconsole.log(moveElementToEnd(['a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a'], 'b')); // [ 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a' ]\nconsole.log(moveElementToEnd(['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a'], 'h')); // [ 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a' ]"
        }
    ],
    "idx": 381,
    "task": "1d_move_2p_37",
    "category": "1d_move_2p",
    "ys": [
        "1d_move_2p_37.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "['a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a']",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.34293193717277487,
        "cat_success_cnt": 2,
        "cat_success_rate": 0.0625
    },
    "usage_so_far": {
        "completion_tokens": 231698,
        "prompt_tokens": 205388,
        "cost": null
    }
}