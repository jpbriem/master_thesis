
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a']

Test case:
input: ['e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a']
*/

// Solution 1: Two pointers, O(n) time and space.
class Solution {
    public String[] reorderSpaces(String text) {
        int count = 0; // number of spaces between words
        for (int i = 0; i < text.length(); ++i) {
            if (text.charAt(i) =='') {
                ++count;
            }
        }

        List<String> list = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); ++i) {
            char c = text.charAt(i);
            if (c!='') {
                sb.append(c);
            } else if (!sb.isEmpty()) {
                list.add(sb.toString());
                sb.setLength(0);
            }
        }
        if (!sb.isEmpty()) {
            list.add(sb.toString());
        }

        int numWords = list.size();
        if (numWords == 0) return new String[0];

        if (count > numWords - 1) {
            int avg = count / (numWords - 1);
            int rem = count % (numWords - 1);
            for (int i = 0; i < list.size() - 1; ++i) {
                list.set(i, list.get(i) + " ".repeat(avg));
            }
            list.set(list.size() - 1, list.get(list.size() - 1) + " ".repeat(rem));
        } else {
            list.set(list.size() - 1, list.get(list.size() - 1) + " ".repeat(count));
        }

        return list.toArray(new String[0]);
    }
}


###########################################################
Result:
solution: ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.36033519553072624

cat_success_cnt: 0

cat_success_rate: 0.0

