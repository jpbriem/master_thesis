
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: ['h', 'h', 'h', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'a', 'a']

Example_2:
input: ['d', 'd', 'd', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'd', 'd', 'd', 'a', 'a']

Example_3:
input: ['i', 'i', 'i', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'a', 'a']

Test case:
input: ['f', 'f', 'f', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
output: ['a', 'a', 'f', 'f', 'f', 'a', 'a']
*/

// Solution 1: Two Pointers
/*
Time Complexity: O(n)
Space Complexity: O(1)
*/
class Solution {
    public String[] reorderSpaces(String text) {
        int count = 0; // number of spaces between words
        for (int i = 0; i < text.length(); ++i) {
            if (text.charAt(i) =='') {
                ++count;
            }
        }

        List<String> list = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); ++i) {
            char c = text.charAt(i);
            if (c!='') {
                sb.append(c);
            } else if (sb.length() > 0) {
                list.add(sb.toString());
                sb = new StringBuilder();
                --count;
            }
        }
        if (sb.length() > 0) {
            list.add(sb.toString());
        }

        int numOfWords = list.size();
        if (numOfWords == 0) return new String[0];

        String[] result = new String[list.size() + count];
        if (count == 0) {
            for (int i = 0; i < numOfWords; ++i) {
                result[i] = list.get(i);
            }
        } else {
            int j = 0;
            for (int i = 0; i < numOfWords - 1; ++i, j += list.get(i).length() + 1) {
                result[j] = list.get(i);
            }
            result[j++] = list.get(numOfWords - 1);
            while (j < result.length) {
                result[j++] = " ";
            }
        }

        return result;
    }
}


###########################################################
Result:
solution: ['a', 'a', 'f', 'f', 'f', 'a', 'a']

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.3384615384615385

cat_success_cnt: 3

cat_success_rate: 0.075

