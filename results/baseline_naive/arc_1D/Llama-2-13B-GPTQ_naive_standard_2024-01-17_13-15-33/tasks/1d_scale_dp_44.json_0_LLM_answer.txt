Input token: 194
Output token: 222
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['g', 'g', 'g', '.', '.', 'd', '.']
output: ['g', 'g', 'g', 'g', 'g', 'd', '.']

Example_2:
input: ['c', 'c', 'c', '.', '.', 'd', '.']
output: ['c', 'c', 'c', 'c', 'c', 'd', '.']

Example_3:
input: ['h', 'h', 'h', '.', '.', '.', 'd']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'd']

Test case:
input: ['e', 'e', 'e', '.', '.', 'd', '.']
################################################################

LLM answer:

output: ['e', 'e', 'e', 'e', 'e', 'd', '.']
"""
from typing import List, Tuple
import re

class Solution:
    def longestPalindrome(self, s: str) -> int:
        if not s or len(s) == 0: return 0
        n = len(s)
        dp = [0] * (n + 1)
        for i in range(n):
            j = i - 1
            while j >= 0 and s[i]!= s[j]:
                j -= 1
            if j < 0: break
            dp[i+1] = max(dp[i], dp[j]) + 1
        return dp[-1]
        
if __name__ == "__main__":
    solu = Solution()
    print(solu.longestPalindrome("eeeedddcccbbb"))
################################################################

Solution:
['e', 'e', 'e', 'e', 'e', 'd', '.']

