Input token: 225
Output token: 316
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', '.', '.', '.', 'i']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'i']

Example_2:
input: ['g', 'g', 'g', 'g', '.', '.', 'i', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', 'i', '.', '.']

Example_3:
input: ['b', 'b', 'b', '.', '.', '.', 'i', '.', '.']
output: ['.', '.', '.', 'b', 'b', 'b', 'i', '.', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', '.', '.', '.', 'i']
################################################################

LLM answer:

output: ['.', '.', '.', 'g', 'g', 'g', 'i', '.', '.']
"""

import unittest
from typing import List, Tuple

class Solution:
    def removeDuplicates(self, s: str) -> None:
        """
        :type s: str
        :rtype: None Do not return anything, modify s in-place instead.
        """
        if len(s) == 0:
            return
        
        # find first non-empty char
        i = 0
        while i < len(s) and s[i] == '.':
            i += 1
        if i >= len(s):
            return
        
        # find last non-empty char
        j = len(s)-1
        while j > 0 and s[j] == '.':
            j -= 1
        if j <= 0:
            return
        
        # swap chars at index i and j
        temp = s[i]
        s[i] = s[j]
        s[j] = temp

# Your Solution object will be instantiated and called as such:
# obj = Solution()
# obj.removeDuplicates(s)

if __name__ == "__main__":
    test = unittest.TestCase()
    test.runTests()
################################################################

Solution:
['.', '.', '.', '.', '.', 'g', 'g', 'g', 'i']

