Input token: 312
Output token: 226
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['c', 'c', 'c', 'c', '.', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', 'i', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'i', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'i', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', '.', '.', 'i', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c', 'c', 'i', '.', '.']

Test case:
input: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'i', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', '.', '.']
'''

def solution(S):
    # Write your code here
    S = list(map(str, S))
    if len(S) == 0: return []
    if len(S) == 1: return S[0]
    
    i = 0
    while True:
        j = 0
        while True:
            if S[j].isalpha():
                break
            else:
                j += 1
        
        if j >= len(S)-1:
            break
        
        if S[j].islower() or S[j].isspace():
            S[i], S[j] = S[j], S[i]
            i += 1
            
        j += 1
    return S[:i+1]

################################################################

Solution:
['.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', '.', '.']

