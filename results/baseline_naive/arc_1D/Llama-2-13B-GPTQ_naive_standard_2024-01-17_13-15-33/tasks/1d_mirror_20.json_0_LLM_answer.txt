Input token: 326
Output token: 211
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['f', 'f', 'f', 'f', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'e', 'e', 'e', 'e', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'e', 'e', 'e', 'e', '.', '.', '.']

Example_3:
input: ['.', 'f', 'f', 'f', 'f', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'i', '.', 'f', 'f', 'f', 'f', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', 'g', '.', '.', '.']
'''

def solution(S):
    # Write your code here
    S = list(map(str, S))
    if len(S) == 0: return []
    if len(S) == 1: return S[0]
    
    i = 0
    while True:
        j = 0
        while True:
            if S[j].isalpha():
                break
            else:
                j += 1
        
        if j >= len(S)-1 or not S[j].islower() : break
        S[i], S[j] = S[j], S[i]
        i += 1
        j += 1
    return S[:i+1]

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', 'g', '.', '.', '.']

