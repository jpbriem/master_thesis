Input token: 365
Output token: 295
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', 'c', '.', '.', '.', 'i', 'i', 'i', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', 'g', '.', '.', '.', 'g', '.', '.']
output: ['.', 'c', 'c', '.', 'i', 'i', 'i', '.', '.', '.', 'i', '.', '.', '.', 'i', '.', '.']

Example_3:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.']
output: ['.', '.', '.', 'i', 'i', 'i', 'i', 'i', '.', '.', 'c', 'c', 'c', 'c', 'c', 'c', '.']

Test case:
input: ['.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', '.']
################################################################

LLM answer:

output: ['.', '.', 'c', 'c', 'c', 'c', '.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i', '.']
"""

import sys
from collections import deque, defaultdict
from functools import reduce
from itertools import islice
from operator import itemgetter
from random import shuffle

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        
        if not s or len(s) == 0: return []
        
        words = list()
        for word in s.split():
            if word!= "":
                words.append(word)
                
        return self._reverseWords(words)
    
    def _reverseWords(self, words):
        # sort by length of each word
        sorted_words = sorted(list(map(itemgetter(len), words)), key=lambda x:x[0])
        reversed_words = reversed(sorted_words)
        return ["".join([w[::-1][i:] for i in range(len(w))]) for w in reversed_words]

################################################################

Solution:
['.', '.', 'i', 'i', 'i', '.', '.', '.', 'c', 'c', '.', '.', 'c', 'c', 'c', 'c', '.']

