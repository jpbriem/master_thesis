Input token: 236
Output token: 1027
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'c', 'c', 'c', 'c', '.', '.', 'b', '.']
output: ['.', 'c', 'c', 'c', 'c', 'c', 'c', 'b', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', '.', '.', '.', 'b']
output: ['f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'b']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', '.', 'b']
output: ['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b']

Test case:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', 'b']
################################################################

LLM answer:

output: ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b']
"""
import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> int:
    """Returns next state based on current state."""
    if len(current_state) == 0:
        return 0
    elif current_state[0] in "bc":
        return 1
    else:
        return -1


class StateMachine:
    def __init__(self):
        self._states = ["", "."] * 4 + ["b"]
        self._transitions = []
        self._current_state = ""
        self._prev_state = None

    @property
    def states(self) -> List[str]:
        return self._states

    @property
    def transitions(self) -> List[Tuple[int, str]]:
        return self._transitions

    @property
    def current_state(self) -> str:
        return self._current_state

    @current_state.setter
    def current_state(self, new_value: str) -> None:
        self._current_state = new_value

    def add_transition(self, from_state: str, to_state: str, action: int) -> None:
        self._transitions.append((action, to_state))

    def set_previous_state(self, previous_state: str) -> None:
        self._prev_state = previous_state

    def is_valid(self, input_string: str) -> bool:
        if not (len(input_string) > 0 or input_string[-1] == "b") \
                or self._current_state!= input_string[:-1]:
            return False
        for transition in reversed(self._transitions):
            if transition[0] <= 0:
                continue
            if transition[0] >= len(input_string):
                break
            if input_string[transition[0]:] == transition[1]:
                self._current_state = transition[1]
                return True
        return False

    def run(self, input_strings: List[str]) -> List[str]:
        result = []
        while any([self.is_valid(input_string) for input_string in input_strings]):
            for i, input_string in enumerate(reversed(input_strings)):
                if self.is_valid(input_string):
                    break
            else:
                raise ValueError("No valid string found.")
            result += input_string
        return result


if __name__ == "__main__":
    sm = StateMachine()
    sm.add_transition(".", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c", 1)
    sm.add_transition("c", "c
################################################################

Solution:
['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b']

