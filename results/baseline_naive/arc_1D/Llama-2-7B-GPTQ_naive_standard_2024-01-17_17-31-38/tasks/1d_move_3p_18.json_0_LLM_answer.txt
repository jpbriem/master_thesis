Input token: 359
Output token: 395
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.']
"""

import sys
from collections import deque, namedtuple

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str) or len(s) == 0: return ''
        words = []
        for c in s:
            if c.isalpha():
                words.append(c)
            
        # 把字符串分割成多个单词，并且每个单词的前面都是一个空格
        for i in range(len(words)):
            if words[i].isspace() and (not words[i+1].isspace()) and (not words[i] == "."):
                words.insert(i,' ')
                
        # 遍历所有单词，将其中间连接起来
        for i in range(len(words)-1):
            if words[i].isspace() and words[i+1].isspace():
                words[i]+=' '+words[i+1]
                del words[i+1:]
                
        # 最后一个单词不需要连接
        for i in reversed(range(len(words))):
            if words[i].isspace():
                break
            
        return ''.join([w for w in words])

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.']

