Input token: 183
Output token: 278
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['g', 'g', 'g', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', '.', '.']

Example_2:
input: ['c', 'c', 'c', '.', '.', '.', '.']
output: ['.', '.', 'c', 'c', 'c', '.', '.']

Example_3:
input: ['h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', 'h', 'h', 'h', '.', '.']

Test case:
input: ['e', 'e', 'e', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'e', 'e', 'e', '.', '.']
"""
import collections
from typing import List, Optional


class Solution(object):
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        :rtype: None
        """
        if not isinstance(s, str):
            return
        words = []
        for char in s:
            if char == " ":
                words.append(" ")
            else:
                words.append(char)
        reversed_words = ""
        for word in sorted(set(words), key=lambda x: len(x)):
            reversed_word = ""
            for i in range(len(word)-1,-1,-1):
                reversed_word += word[i]
            reversed_words += reversed_word + " "
        print(reversed_words)


if __name__ == "__main__":
    solution = Solution()
    test_case = ["e", "e", "e", ".", ".", ".", "."]
    result = solution.reverseWords(test_case)

################################################################

Solution:
['.', '.', 'e', 'e', 'e', '.', '.']

