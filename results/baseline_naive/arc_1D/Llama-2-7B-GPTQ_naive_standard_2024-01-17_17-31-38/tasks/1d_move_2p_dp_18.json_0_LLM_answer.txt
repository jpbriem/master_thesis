Input token: 366
Output token: 257
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'a', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'a', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', 'a', '.']
output: ['.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', 'a', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.']
"""

import sys
from collections import deque, namedtuple

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not isinstance(s,str) or len(s) == 0: return ''
        
        words = []
        for char in s:
            if char.isalpha():
                words.append(char)
                
        # sort by length of word
        sorted_words = sorted(deque([len(word) for word in words]), key=lambda x:x[0])
        reversed_words = list(reversed(sorted_words))
        result = ""
        for i in range(len(reversed_words)):
            result += "".join(reversed_words[i][::-1]) + " "
            
        return result[:-1]

################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', 'a', '.']

