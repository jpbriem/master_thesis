Input token: 229
Output token: 192
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'c', 'c', 'c', 'c', '.', '.', 'h', '.']
output: ['.', '.', '.', 'c', 'c', 'c', 'c', 'h', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', '.', '.', 'h', '.']
output: ['.', '.', 'f', 'f', 'f', 'f', 'f', 'h', '.']

Example_3:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', 'h', '.']
output: ['.', '.', '.', 'a', 'a', 'a', 'a', 'h', '.']

Test case:
input: ['g', 'g', 'g', 'g', '.', '.', 'h', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'h', '.']
"""
import sys
from typing import List, Optional

def solution(s: str) -> int:
    if len(s) == 0 or s[0]!= ".": return -1
    
    stack = []
    for i in range(len(s)):
        if s[i] == ".":
            while not stack[-1].endswith("."):
                stack.pop()
            
            if stack[-1][:-1] == "."*4 + "h":
                return 0
        
        elif s[i] == "h":
            stack.append(".")
        else:
            stack.append(s[i])
    
    return len(stack)-1
################################################################

Solution:
['.', '.', 'g', 'g', 'g', 'g', 'h', '.', '.']

