Input token: 191
Output token: 246
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'c', 'c', 'c', '.', '.', 'i']
output: ['.', '.', '.', 'c', 'c', 'c', 'i']

Example_2:
input: ['b', 'b', 'b', '.', '.', 'i', '.']
output: ['.', '.', 'b', 'b', 'b', 'i', '.']

Example_3:
input: ['c', 'c', 'c', '.', '.', 'i', '.']
output: ['.', '.', 'c', 'c', 'c', 'i', '.']

Test case:
input: ['d', 'd', 'd', '.', '.', 'i', '.']
################################################################

LLM answer:

output: ['.', '.', 'd', 'd', 'd', 'i', '.']
"""
import sys
from collections import deque, namedtuple


class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        if not isinstance(s, list) or len(s) == 0:
            return []

        words = deque([])
        for char in s:
            if char.isalpha():
                words.appendleft(char)
        while words:
            word = words.pop()
            if word[-1].isdigit():
                break
            else:
                yield word


if __name__ == "__main__":
    testcases = int(sys.stdin.readline())
    for _ in range(testcases):
        s = sys.stdin.readline().split(' ')
        result = Solution().reverseWords(s)
        print("".join(result))
################################################################

Solution:
['.', '.', 'd', 'd', 'd', 'i', '.']

