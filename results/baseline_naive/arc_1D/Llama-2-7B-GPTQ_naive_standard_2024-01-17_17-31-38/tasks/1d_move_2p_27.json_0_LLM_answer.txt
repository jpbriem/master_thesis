Input token: 218
Output token: 343
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.']

Example_2:
input: ['g', 'g', 'g', 'g', '.', '.', '.', '.', '.']
output: ['.', '.', 'g', 'g', 'g', 'g', '.', '.', '.']

Example_3:
input: ['b', 'b', 'b', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', '.', '.', '.', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'g', 'g', 'g', 'g', '.', '.', '.']
"""
import sys
from typing import List, Optional

class Solution(object):
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        :rtype: None
        """
        
        if not isinstance(s,str):
            return 0
            
        # 暴力解法，时间复杂度为O(n^2),空间复权为O(n)。
        # 将字符串分割成多个单词，然后遍历每一个单词，对其进行反转，最终再次合并所有的单词。
        words = s.split()
        for word in words:
            self._reverseWord(word)
        return
    
    def _reverseWord(self, word: str) -> None:
        """
        :type word: str
        :rtype: None
        """
        if len(word) == 0:
            return
        
        i = 0
        j = len(word)-1
        while i < j:
            tmp = word[i]
            word[i] = word[j]
            word[j] = tmp
            i += 1
            j -= 1

################################################################

Solution:
['.', '.', '.', 'g', 'g', 'g', '.', '.', '.']

