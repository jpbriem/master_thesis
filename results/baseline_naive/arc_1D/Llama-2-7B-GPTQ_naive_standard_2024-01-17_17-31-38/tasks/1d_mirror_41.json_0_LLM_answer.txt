Input token: 292
Output token: 171
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'g', 'g', 'g', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'g', 'g', 'g', '.', '.', '.', '.']

Example_2:
input: ['.', '.', 'a', 'a', 'a', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', 'i', '.', 'a', 'a', 'a', '.', '.', '.']

Example_3:
input: ['.', 'd', 'd', 'd', '.', 'i', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', 'i', '.', 'd', 'd', 'd', '.', '.', '.', '.']

Test case:
input: ['.', '.', 'c', 'c', 'c', '.', 'i', '.', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'i', '.', 'c', 'c', 'c', '.', '.', '.', '.']
"""
from typing import List, Optional
import collections


class Solution(object):
    def reverseWords(self, s: str) -> None:
        """
        :type s: str
        :rtype: None
        """
        if not isinstance(s, str):
            return
        words = []
        for char in s:
            if char == " ":
                words.append(" ".join(words))
                words = [""]
            else:
                words[-1] += char
        for word in words:
            print(word)

################################################################

Solution:
['.', '.', '.', '.', '.', '.', 'i', '.', 'c', 'c', 'c', '.', '.', '.']

