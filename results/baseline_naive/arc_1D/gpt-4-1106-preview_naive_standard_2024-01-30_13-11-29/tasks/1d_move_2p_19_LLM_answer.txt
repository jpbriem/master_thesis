
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
#####
user:
#####

Example_1:
input: ['a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a']

Example_3:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
The examples provided seem to follow a pattern where the largest group of consecutive identical elements is moved towards the end of the list, while the second-largest group is moved to the beginning. Other elements seem to retain their relative order. 

Given this pattern, let's apply it to the provided test case:

Test case input: ['a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a']

Here, the largest group is 'a' with six occurrences, and the second-largest group is 'g' with four occurrences. According to the pattern, we should move the largest group 'a' towards the end and the second-largest group 'g' towards the beginning, while preserving the order of the groups.

Test case output: ['g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

This output follows the pattern observed in the given examples.


###########################################################
Result:
solution: ['a', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']


success: 0

tries: 1

success_rate: 0.3149171270718232

cat_success_cnt: 1

cat_success_rate: 0.08333333333333333

