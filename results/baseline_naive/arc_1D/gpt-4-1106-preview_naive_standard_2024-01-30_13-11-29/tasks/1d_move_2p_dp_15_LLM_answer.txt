
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
#####
user:
#####

Example_1:
input: ['b', 'b', 'b', 'b', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'h', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['i', 'i', 'i', 'i', 'i', 'a', 'a', 'h', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'h', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'h', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'h', 'a', 'a']

Test case:
input: ['e', 'e', 'e', 'e', 'e', 'a', 'a', 'h', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
The examples provided seem to indicate a pattern of sorting a list of single-character strings where 'a' is given the highest priority and is moved to the front of the list, maintaining the order of other elements. Following this pattern, we can write a Python function to achieve this result:

```python
def prioritize_a(input_list):
    a_list = [char for char in input_list if char == 'a']
    other_list = [char for char in input_list if char != 'a']
    return a_list + other_list

# Test case
input_list = ['e', 'e', 'e', 'e', 'e', 'a', 'a', 'h', 'a', 'a', 'a', 'a']
output = prioritize_a(input_list)
print(output)
```

For the test case you've provided, the output would be:

```
['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'h', 'a']
```

The 'a' characters are moved to the front while the order of the remaining characters is preserved.


###########################################################
Result:
solution: ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'h', 'a', 'a', 'a', 'a']


success: 0

tries: 1

success_rate: 0.3014705882352941

cat_success_cnt: 1

cat_success_rate: 0.125

