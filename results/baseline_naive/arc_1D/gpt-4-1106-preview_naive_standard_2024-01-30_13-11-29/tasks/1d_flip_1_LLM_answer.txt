
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
#####
user:
#####

Example_1:
input: ['g', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['h', 'h', 'h', 'g', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'b', 'i', 'i', 'i', 'i', 'a', 'a', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'i', 'b', 'a', 'a', 'a']

Example_3:
input: ['h', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']
output: ['c', 'c', 'c', 'c', 'h', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'g', 'e', 'e', 'e', 'e', 'a', 'a', 'a']

###########################################################
Sample Outputs:
The pattern in the examples given involves moving a group of four identical characters to the front of the list while maintaining the order of the other characters. The group that is moved to the front appears to be the first group of four identical characters encountered when iterating through the list from left to right.

Using this pattern, let's apply the same logic to the provided test case:

Input: ['a', 'a', 'g', 'e', 'e', 'e', 'e', 'a', 'a', 'a']

Step 1: Iterate through the list to find the first group of four identical characters.
Step 2: Once found, move that group to the front of the list.
Step 3: Maintain the order of all other characters.

In the provided test case, the first group of four identical characters is 'e', occurring at indices 3, 4, 5, and 6.

Therefore, the output would be:

Output: ['e', 'e', 'e', 'e', 'a', 'a', 'g', 'a', 'a', 'a']

The 'e's have been moved to the front, and the order of 'a', 'a', 'g', 'a', 'a', 'a' stays the same.


###########################################################
Result:
solution: ['a', 'a', 'e', 'e', 'e', 'e', 'g', 'a', 'a', 'a']


success: 0

tries: 1

success_rate: 0.42105263157894735

cat_success_cnt: 1

cat_success_rate: 0.5

