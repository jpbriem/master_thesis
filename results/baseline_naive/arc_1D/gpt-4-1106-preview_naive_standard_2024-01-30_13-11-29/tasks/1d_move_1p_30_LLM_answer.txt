
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
#####
user:
#####

Example_1:
input: ['a', 'a', 'a', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a']

Test case:
input: ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
Based on the examples provided, it seems the task is to move the character with the highest frequency to the front of the list, while maintaining the relative order of the other characters. If we apply this rule to the test case provided, we should first count the occurrences of each character and then rearrange the list accordingly.

Let's apply this logic to the test case:

input: ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']

Step 1: Count occurrences of each character
- 'i' occurs 9 times
- 'a' occurs 4 times

Step 2: Since 'i' has the highest frequency, we move all 'i' characters to the front, while keeping the 'a' characters in their relative position.

output: ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a']

The output is the same as the input in this case because 'i' is already at the front of the list, and it has the highest frequency.


###########################################################
Result:
solution: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a']


success: 0

tries: 1

success_rate: 0.3230769230769231

cat_success_cnt: 2

cat_success_rate: 0.08

