
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
#####
user:
#####

Example_1:
input: ['e', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['h', 'h', 'h', 'h', 'e', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'a', 'e', 'b', 'b', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'b', 'b', 'e', 'a', 'a', 'a']

Example_3:
input: ['h', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']
output: ['g', 'g', 'g', 'g', 'h', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'g', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']

###########################################################
Sample Outputs:
It looks like the task involves rearranging the given list of characters based on certain criteria. In the examples provided, it seems that the most frequent character is moved to the front of the list, followed by the second most frequent character, and so on. If there's a tie in frequency, the character that appears earlier in the list takes precedence.

Based on the pattern observed in the examples, here's what the output should look like for the test case:

Test case:
input: ['a', 'g', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'g']

Explanation:
- 'a' is the most frequent character (5 times).
- 'e' is the next most frequent character (3 times).
- 'g' is the least frequent character (1 time).

Thus, the characters are ordered by frequency, with the most frequent characters at the front of the list. If the task is to write a function to perform this operation, here's a sample Python function that accomplishes this:

```python
from collections import Counter

def rearrange_characters(input_list):
    # Count the frequency of each character
    freq_counter = Counter(input_list)
    
    # Sort the characters by frequency and then by their order in the input list
    sorted_chars = sorted(input_list, key=lambda x: (-freq_counter[x], input_list.index(x)))
    
    return sorted_chars

# Test case
test_input = ['a', 'g', 'e', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
test_output = rearrange_characters(test_input)
print(test_output)
```

This would give us the desired output for the test case:

```
['a', 'a', 'a', 'a', 'a', 'e', 'e', 'e', 'g']
```


###########################################################
Result:
solution: ['a', 'e', 'e', 'e', 'g', 'a', 'a', 'a', 'a', 'a']


success: 0

tries: 1

success_rate: 0.41139240506329117

cat_success_cnt: 2

cat_success_rate: 0.25

