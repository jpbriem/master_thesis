
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
#####
user:
#####

Example_1:
input: ['d', 'd', 'd', 'd', 'a', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'd', 'd', 'd', 'd', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'j', 'a', 'a']
output: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'j', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'j', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'j', 'a', 'a']

Test case:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'j', 'a', 'a']

###########################################################
Sample Outputs:
To solve the problem as described in the examples, we need to move the longest contiguous substring of a single character to the front. Here's a Python function that implements this behavior:

```python
def move_largest_group_to_front(lst):
    max_len = 0
    max_char = ''
    current_len = 0
    current_char = ''
    
    # Find the longest contiguous substring
    for i, char in enumerate(lst):
        if char == current_char:
            current_len += 1
        else:
            if current_len > max_len:
                max_len = current_len
                max_char = current_char
            current_char = char
            current_len = 1
            
        # Check the last group in the list
        if i == len(lst) - 1 and current_len > max_len:
            max_len = current_len
            max_char = current_char
    
    # Move the longest contiguous substring to the front
    new_lst = [max_char] * max_len
    i = 0
    while i < len(lst):
        if lst[i] == max_char:
            i += max_len
        else:
            new_lst.append(lst[i])
            i += 1
    return new_lst

# Test case
input_lst = ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'j', 'a', 'a']
output_lst = move_largest_group_to_front(input_lst)
print(output_lst)
```

If we run the given test case, the function should output the list with the longest contiguous substring of 'b' moved to the front:

```python
['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'j', 'a', 'a']
```

Please note that if there are two or more longest contiguous substrings with the same length, this function moves the first encountered one to the front. If you need a different behavior, the function would need to be modified accordingly.


###########################################################
Result:
solution: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'j', 'a', 'a']


success: 0

tries: 1

success_rate: 0.3004807692307692

cat_success_cnt: 3

cat_success_rate: 0.1875

