Input token: 221
Output token: 644
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'b', 'b', 'b', 'b', '.', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', 'b', '.', '.', '.']

Example_2:
input: ['.', '.', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', '.', '.', '.']

Example_3:
input: ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']
output: ['.', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']

Test case:
input: ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.']
*/
public class Solution {
    public String[] updateBoard(String[] board, int[] click) {
        if (board == null || board.length < 0) return new String[0];
        int m = board.length;
        int n = board[0].length();
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{click[0], click[1]});
        visited[click[0]][click[1]] = true;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            char c = board[cur[0]].charAt(cur[1]);
            if (c!= 'M') {
                int count = getCount(board, cur[0], cur[1], visited);
                if (count > 0) {
                    board[cur[0]].replace(cur[1], cur[1]+1, Integer.toString(count));
                } else {
                    board[cur[0]].setCharAt(cur[1], 'B');
                }
            }
            for (int i = -1; i <= 1; ++i) {
                for (int j = -1; j <= 1; ++j) {
                    if (i == 0 && j == 0) continue;
                    int x = cur[0] + i;
                    int y = cur[1] + j;
                    if (x >= 0 && x < m && y >= 0 && y < n &&!visited[x][y]) {
                        queue.add(new int[]{x, y});
                        visited[x][y] = true;
                    }
                }
            }
        }
        return board;
    }

    private int getCount(String[] board, int x, int y, boolean[][] visited) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                int xx = x + i;
                int yy = y + j;
                if (xx >= 0 && xx < board.length && yy >= 0 && yy < board[0].length() &&!visited[xx][yy] && board[xx].charAt(yy) == 'M') {
                    ++count;
                }
            }
        }
        return count;
    }
}
################################################################

Solution:
['.', 'c', 'c', 'c', 'c', 'c', '.', '.', '.']

