Input token: 449
Output token: 515
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'b', 'b', '.', '.', '.', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'b', 'b', '.', '.', '.']
output: ['.', '.', '.', 'c', 'c', '.', '.', '.', 'g', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', 'c', 'c', '.', '.', '.']

Example_2:
input: ['.', 'b', '.', '.', '.', 'b', 'b', 'b', '.', 'b', 'b', '.', 'b', '.', 'b', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', 'g', '.', '.', '.', 'a', 'a', 'a', '.', 'c', 'c', '.', 'g', '.', 'g', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'b', 'b', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'b', '.', '.', 'b', '.', '.', '.', 'b', '.', '.']
output: ['.', '.', 'c', 'c', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', 'g', '.', '.']

Test case:
input: ['.', '.', 'b', 'b', '.', 'b', 'b', 'b', '.', '.', 'b', '.', '.', 'b', 'b', '.', '.', 'b', 'b', 'b', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'c', 'c', '.', 'a', 'a', 'a', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.']
*/
public class Solution {
    public String[] updateBoard(String[] board, int[] click) {
        if (board == null || board.length < 0) return new String[0];
        char[][] chars = new char[board.length][board[0].length()];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length(); j++) {
                chars[i][j] = board[i].charAt(j);
            }
        }
        dfs(chars, click[0], click[1]);
        StringBuilder sb = new StringBuilder();
        for (char[] c : chars) {
            for (char cc : c) {
                sb.append(cc);
            }
        }
        return sb.toString().split("");
    }

    private void dfs(char[][] chars, int x, int y) {
        if (x >= 0 && x < chars.length && y >= 0 && y < chars[0].length) {
            if (chars[x][y]!= 'M') {
                switch (chars[x][y]) {
                    case 'E':
                        chars[x][y] = 'B';
                        break;
                    case 'B':
                        chars[x][y] = 'X';
                        break;
                    default:
                        chars[x][y] = '*';
                        break;
                }
                dfs(chars, x - 1, y);
                dfs(chars, x + 1, y);
                dfs(chars, x, y - 1);
                dfs(chars, x, y + 1);
            } else {
                chars[x][y] = 'X';
            }
        }
    }
}
################################################################

Solution:
['.', '.', 'c', 'c', '.', 'a', 'a', 'a', '.', '.', 'g', '.', '.', 'c', 'c', '.', '.', 'a', 'a', 'a', '.', '.', '.']

