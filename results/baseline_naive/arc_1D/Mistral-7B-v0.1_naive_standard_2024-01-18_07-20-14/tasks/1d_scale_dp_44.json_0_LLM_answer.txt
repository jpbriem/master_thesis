Input token: 194
Output token: 495
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['g', 'g', 'g', '.', '.', 'd', '.']
output: ['g', 'g', 'g', 'g', 'g', 'd', '.']

Example_2:
input: ['c', 'c', 'c', '.', '.', 'd', '.']
output: ['c', 'c', 'c', 'c', 'c', 'd', '.']

Example_3:
input: ['h', 'h', 'h', '.', '.', '.', 'd']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'd']

Test case:
input: ['e', 'e', 'e', '.', '.', 'd', '.']
################################################################

LLM answer:

output: ['e', 'e', 'e', 'e', 'e', 'd', '.']
*/
public class Solution {
    public String[] updateBoard(String[] board, int[] click) {
        if (board == null || board.length == 0) return new String[0];
        int m = board.length;
        int n = board[0].length();
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{click[0], click[1]});
        visited[click[0]][click[1]] = true;
        int count = 0;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0];
            int y = cur[1];
            char c = board[x].charAt(y);
            if (c!= 'M') {
                count++;
                if (count > 8) {
                    for (int i = -1; i <= 1; ++i) {
                        for (int j = -1; j <= 1; ++j) {
                            if (i == 0 && j == 0) continue;
                            int nextX = x + i;
                            int nextY = y + j;
                            if (nextX >= 0 && nextX < m && nextY >= 0 && nextY < n &&!visited[nextX][nextY]) {
                                queue.add(new int[]{nextX, nextY});
                                visited[nextX][nextY] = true;
                            }
                        }
                    }
                } else {
                    board[x] = board[x].substring(0, y) + "E" + board[x].substring(y + 1);
                }
            }
        }
        if (count == 0) {
            board[click[0]] = board[click[0]].replaceAll(".", "B");
        }
        return board;
    }
}
################################################################

Solution:
['e', 'e', 'e', 'e', 'e', 'd', '.']

