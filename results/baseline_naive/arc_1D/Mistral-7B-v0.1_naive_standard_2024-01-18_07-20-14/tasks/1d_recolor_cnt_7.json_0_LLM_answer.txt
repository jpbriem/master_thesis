Input token: 288
Output token: 325
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'i', 'i', 'i', '.', '.', 'i', '.', 'i', 'i', '.', 'i', '.']
output: ['.', 'd', 'd', 'd', '.', '.', 'a', '.', 'g', 'g', '.', 'a', '.']

Example_2:
input: ['.', '.', '.', 'i', '.', '.', 'i', 'i', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'a', '.', '.', 'g', 'g', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', 'i', 'i', 'i', '.', 'i', '.', '.', 'i', 'i', '.']
output: ['.', '.', '.', 'd', 'd', 'd', '.', 'a', '.', '.', 'g', 'g', '.']

Test case:
input: ['.', '.', '.', 'i', 'i', 'i', '.', '.', 'i', '.', '.', 'i', 'i']
################################################################

LLM answer:

output: ['.', '.', '.', 'd', 'd', 'd', '.', '.', 'a', '.', '.', 'g', 'g']
*/
public class Solution {
    public String[] findReplaceString(String[] words, String[] patterns) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < patterns.length; i++) {
            char c = patterns[i].charAt(0);
            if (!map.containsKey(c)) {
                map.put(c, patterns[i].charAt(patterns[i].length() - 1));
            } else {
                return null;
            }
        }
        List<String> result = new ArrayList<>();
        for (String word : words) {
            StringBuilder sb = new StringBuilder();
            boolean flag = true;
            int index = 0;
            while (index < word.length()) {
                char c = word.charAt(index++);
                if (flag && map.getOrDefault(c, c) == c) {
                    continue;
                }
                flag = false;
                sb.append(map.getOrDefault(c, c));
            }
            result.add(sb.toString());
        }
        return result.toArray(new String[result.size()]);
    }
}
################################################################

Solution:
['.', '.', '.', 'd', 'd', 'd', '.', '.', 'a', '.', '.', 'g', 'g']

