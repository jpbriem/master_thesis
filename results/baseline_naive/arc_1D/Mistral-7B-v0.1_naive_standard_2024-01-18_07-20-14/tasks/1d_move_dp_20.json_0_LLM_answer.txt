Input token: 423
Output token: 179
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'a', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', '.']

Example_2:
input: ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', 'a', '.']
output: ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', '.']

Example_3:
input: ['.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'a', '.']

Test case:
input: ['.', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.', 'a', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', '.']

Constraints:
0 <= len(s) <= 5 * 10^4
s[i] is either '.' or lowercase English letter.
*/
class Solution {
public:
    string replaceSpace(string s, int length) {
        if (length == 0 || s.empty()) return "";
        string res;
        for (int i = 0; i < length; ++i) {
            if (s[i]!='') res += s[i];
            else res += "%20";
        }
        return res;
    }
};
################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'a', '.', '.', '.', '.', '.', '.']

