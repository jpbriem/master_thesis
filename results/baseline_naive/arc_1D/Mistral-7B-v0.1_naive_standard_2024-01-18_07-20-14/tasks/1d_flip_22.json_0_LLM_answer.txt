Input token: 331
Output token: 398
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', 'f', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'f', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['b', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['e', 'e', 'e', 'e', 'e', 'e', 'b', '.', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'e', 'a', 'a', 'a', 'a', 'a', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'e', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'f', 'f', 'f', 'f', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'g', '.', '.']

Constraints:
0 <= s.length <= 5 * 10^4
s consists of only lowercase English letters.
 */
public class ReorderDataInLogFiles {
    public static void main(String[] args) {
        String[] logs = {"dig1 8 1 5 1", "let1 art can", "dig2 3 6", "let2 own kit dig", "let3 art zero"};
        System.out.println(Arrays.toString(reorderLogFiles(logs)));
    }

    private static String[] reorderLogFiles(String[] logs) {
        List<String> list = new ArrayList<>();
        for (int i = 0; i < logs.length; i++) {
            if (!isDigit(logs[i])) {
                list.add(logs[i]);
            } else {
                list.add("0");
            }
        }
        Collections.sort(list, Comparator.comparingInt((o) -> o.split(" ")[1].equals("0")? -1 : 1));
        return list.toArray(new String[0]);
    }

    private static boolean isDigit(String log) {
        char[] chars = log.toCharArray();
        int count = 0;
        for (char c : chars) {
            if (Character.isDigit(c)) {
                count++;
            }
        }
        return count > 0 && count == chars.length;
    }
}
################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', 'f', 'f', 'f', 'f', 'g', '.', '.']

