Input token: 359
Output token: 199
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.']
output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.']

Example_2:
input: ['f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'f', 'f', 'f', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', '.']

Test case:
input: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.']

Constraints:
0 <= s.length <= 5 * 10^4
s[i] is either '.' or lowercase English letter.
 */
public class ReplaceSpaces {
    public String replaceSpace(String S) {
        StringBuilder sb = new StringBuilder();
        for (int i=0; i<S.length(); i++) {
            if (S.charAt(i) == '.') {
                sb.append('.');
            } else {
                sb.append("%");
                sb.append((char)(S.charAt(i)+'0'));
            }
        }
        return sb.toString();
    }
}
################################################################

Solution:
['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'd', 'd', '.']

