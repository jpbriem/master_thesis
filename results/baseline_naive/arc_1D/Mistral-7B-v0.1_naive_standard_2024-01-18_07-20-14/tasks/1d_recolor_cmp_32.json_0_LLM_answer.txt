Input token: 442
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'h', 'h', 'h', '.', '.', 'h', 'h', 'h', 'h', 'h', '.', '.', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', 'h', '.', '.', '.', '.', '.']

Example_2:
input: ['.', 'h', '.', '.', '.', 'h', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.', 'h', 'h', 'h', 'h', '.', '.']
output: ['.', 'h', '.', '.', '.', 'h', '.', '.', '.', 'h', 'h', 'h', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.']

Example_3:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', 'h', 'h', 'h', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', 'h']
output: ['.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', 'h', 'h', 'h', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', 'h', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', 'h', 'h', 'h', 'h', 'h', '.', 'h', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']
*/
public class Solution {
    public String[] updateBoard(String[] board, int[] click) {
        if (board == null || board.length == 0) return new String[0];
        int m = board.length;
        int n = board[0].length();
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{click[0], click[1]});
        visited[click[0]][click[1]] = true;
        int count = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                int[] cur = queue.poll();
                int x = cur[0];
                int y = cur[1];
                char c = board[x].charAt(y);
                if (c!= 'M') continue;
                --count;
                board[x] = board[x].substring(0, y) + "X" + board[x].substring(y + 1);
                if (x > 0 &&!visited[x - 1][y]) {
                    queue.offer(new int[]{x - 1, y});
                    visited[x - 1][y] = true;
                }
                if (x < m - 1 &&!visited[x + 1][y]) {
                    queue.offer(new int[]{x + 1, y});
                    visited[x + 1][y] = true;
                }
                if (y > 0 &&!visited[x][y - 1]) {
                    queue.offer(new int[]{x, y - 1});
                    visited[x][y - 1] = true;
                }
                if (y < n - 1 &&!visited[x][y + 1]) {
                    queue.offer(new int[]{x, y + 1});
                    visited[x][y + 1] = true;
                }
            }
        }
        if (count > 0) {
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (board[i].charAt(j) == 'E' &&!visited[i][j]) {
                        queue.offer(new int[]{i, j});
                        visited[i][j] = true;
                    }
                }
            }
            while (!queue.isEmpty()) {
                int[] cur = queue.poll();
                int x = cur[0];
                int y = cur[1];
                char c = board[x].charAt(y);
                if (c!= 'M') continue;
                --count;
                board[x] = board[x].substring(0, y) + "X" + board[x].substring(y + 1);
                if (x > 0 &&!visited[x - 1][y]) {
                    queue.offer(new int[]{x - 1, y});
                    visited[x - 1][y] = true;
                }
                if (x < m - 1 &&!visited[x + 1][y]) {
                    queue.offer(new int[]{x + 1, y});
                    visited[x + 1][y] = true;
                }
                if (y > 0 &&!visited[x][y - 1]) {
                    queue.offer(new int[]{x, y - 1});
                    visited[x][y - 1] = true;
                }
                if (y < n - 1 &&!visited[x][y + 1]) {
                    queue.offer(new int[]{x, y + 1});
                    visited[x][y +
################################################################

Solution:
['.', '.', 'h', 'h', 'h', 'h', 'h', '.', 'h', '.', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', '.']

