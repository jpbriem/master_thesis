Input token: 355
Output token: 364
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', 'g', '.']
output: ['.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i', '.', 'f', 'f', 'f', 'f', 'f', '.']

Example_2:
input: ['.', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.']
output: ['.', 'i', 'i', 'i', 'i', '.', '.', 'f', 'f', 'f', '.', 'f', 'f', 'f', '.', '.']

Example_3:
input: ['.', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.']
output: ['.', 'f', 'f', 'f', '.', 'i', 'i', '.', '.', 'f', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i', '.', 'f', 'f', 'f', '.', '.', '.']

Constraints:
0 <= s.length <= 5 * 10^4
s[i] is either '.' or lowercase English letter.
 */
public class Solution {
    public String[] findReplaceString(String[] words, String[] patterns) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < patterns.length; ++i) {
            char c = patterns[i].charAt(0);
            if (!map.containsKey(c)) {
                map.put(c, patterns[i].charAt(patterns[i].length() - 1));
            } else {
                return null;
            }
        }
        int n = words.length;
        String[] res = new String[n];
        for (int i = 0; i < n; ++i) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < words[i].length(); ++j) {
                char ch = words[i].charAt(j);
                if (ch == '.') {
                    sb.append('.');
                } else {
                    sb.append(map.getOrDefault(ch, ch));
                }
            }
            res[i] = sb.toString();
        }
        return res;
    }
}
################################################################

Solution:
['.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i', '.', 'f', 'f', 'f', '.', '.', '.']

