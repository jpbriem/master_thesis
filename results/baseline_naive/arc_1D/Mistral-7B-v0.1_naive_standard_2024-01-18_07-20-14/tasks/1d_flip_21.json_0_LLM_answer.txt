Input token: 284
Output token: 428
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['g', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']
output: ['a', 'a', 'a', 'a', 'a', 'g', '.', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'd', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'h', 'h', 'h', 'h', 'd', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'd', 'e', 'e', 'e', 'e', '.', '.', '.', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'e', 'd', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', 'g', 'f', 'f', 'f', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.', '.']
*/
public class ReorderDataInLogFiles {
    public String[] reorderLogFiles(String[] logs) {
        List<String> letterList = new ArrayList<>();
        List<String> digitList = new ArrayList<>();
        for (int i=0;i<logs.length;i++) {
            if (isLetter(logs[i])) {
                letterList.add(logs[i]);
            } else {
                digitList.add(logs[i]);
            }
        }
        Collections.sort(letterList, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                String[] split1 = o1.split(" ");
                String[] split2 = o2.split(" ");
                // sort by letters first
                if (!o1.equals(o2)) {
                    return split1[1].compareTo(split2[1]);
                }
                // then sort by digits
                return Integer.parseInt(split1[0]) - Integer.parseInt(split2[0]);
            }
        });
        Collections.sort(digitList);
        String[] result = new String[logs.length];
        int index = 0;
        for (String s : letterList) {
            result[index++] = s;
        }
        for (String s : digitList) {
            result[index++] = s;
        }
        return result;
    }

    private boolean isLetter(String log) {
        String[] splited = log.split(" ");
        return!splited[0].matches("[0-9]+");
    }
}
################################################################

Solution:
['.', '.', '.', 'f', 'f', 'f', 'g', '.', '.', '.', '.', '.', '.']

