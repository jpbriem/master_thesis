Input token: 568
Output token: 356
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'a', '.', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.']
output: ['.', '.', 'a', '.', 'g', 'g', 'g', 'g', '.', 'g', 'g', 'g', 'g', '.', '.', 'g', 'g', 'g', 'g', '.', '.', '.', 'a', 'a', 'a', '.', '.', '.']

Example_2:
input: ['.', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']
output: ['.', '.', '.', 'g', 'g', 'g', 'g', 'g', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', 'a', 'a', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']
output: ['.', '.', 'a', 'a', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', 'a', '.', '.', '.', '.', '.']

Test case:
input: ['.', 'a', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'g', 'g', 'g', 'g', '.', '.', 'a', 'a', 'a', 'a', 'a', 'a', '.', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']

Constraints:
0 <= s.length <= 5 * 10^4
s consists of only lowercase English letters.
 */
public class Solution {
    public String reverseWords(String s) {
        if (s == null || s.isEmpty()) return "";
        StringBuilder sb = new StringBuilder();
        int start = 0;
        for (int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            if (c!='') {
                sb.append(c);
            } else {
                reverse(sb, start, i - 1);
                sb.append(' ');
                start = i + 1;
            }
        }
        reverse(sb, start, s.length() - 1);
        return sb.toString().trim();
    }

    private void reverse(StringBuilder sb, int start, int end) {
        while (start < end) {
            char tmp = sb.charAt(start);
            sb.setCharAt(start++, sb.charAt(end));
            sb.setCharAt(end--, tmp);
        }
    }
}
################################################################

Solution:
['.', 'a', 'a', 'a', 'a', '.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', 'a', 'a', 'a', '.', 'a', 'a', 'a', '.', '.', '.', '.', '.', '.']

