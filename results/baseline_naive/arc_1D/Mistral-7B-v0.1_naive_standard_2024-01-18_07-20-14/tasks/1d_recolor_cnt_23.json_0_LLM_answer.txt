Input token: 445
Output token: 292
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'g', 'g', '.', 'g', 'g', 'g', '.', '.', '.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', 'g', 'g']
output: ['.', '.', 'e', 'e', '.', 'b', 'b', 'b', '.', '.', '.', 'a', '.', '.', '.', 'b', 'b', 'b', '.', '.', 'e', 'e']

Example_2:
input: ['.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.', 'g', 'g', '.', '.', '.', 'g', 'g', '.', 'g', '.', '.']
output: ['.', 'a', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.', 'e', 'e', '.', '.', '.', 'e', 'e', '.', 'a', '.', '.']

Example_3:
input: ['.', '.', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', 'g', '.', 'g', '.', '.', '.', 'g', 'g', 'g', '.', '.', '.']
output: ['.', '.', 'b', 'b', 'b', '.', 'e', 'e', '.', '.', 'a', '.', 'a', '.', '.', '.', 'b', 'b', 'b', '.', '.', '.']

Test case:
input: ['.', 'g', 'g', 'g', '.', 'g', 'g', '.', '.', '.', 'g', '.', '.', '.', 'g', 'g', '.', 'g', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'a', 'a', 'a', '.', 'b', 'b', '.', '.', '.', 'e', '.', '.', '.', 'e', '.', '.', 'b', 'b', '.', 'a', '.', '.']

Constraints:
0 <= len(s) <= 5 * 10^4
s consists of only lowercase English letters.
 */
public class Solution {
    public String[] findReplacement(String s, int[] indices) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < indices.length; ++i) {
            char c = s.charAt(indices[i]);
            if (!map.containsKey(c)) {
                map.put(c, 'a' + (char)(c - 'a'));
            } else {
                map.put(c, (char)((map.get(c) - 'a') + 1));
            }
        }
        return map.keySet().stream()
                  .sorted((o1, o2) -> Integer.compare(map.get(o2), map.get(o1)))
                  .toArray(String[]::new);
    }
}
################################################################

Solution:
['.', 'b', 'b', 'b', '.', 'e', 'e', '.', '.', '.', 'a', '.', '.', '.', 'e', 'e', '.', 'a', '.', '.', '.', '.']

