Input token: 245
Output token: 303
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', 'a', 'f', 'f', '.', '.', '.', '.', '.', '.']
output: ['.', '.', 'f', 'f', 'a', '.', '.', '.', '.', '.', '.']

Example_2:
input: ['.', '.', '.', '.', 'c', 'g', 'g', 'g', 'g', '.', '.']
output: ['.', '.', '.', '.', 'g', 'g', 'g', 'g', 'c', '.', '.']

Example_3:
input: ['e', 'f', 'f', '.', '.', '.', '.', '.', '.', '.', '.']
output: ['f', 'f', 'e', '.', '.', '.', '.', '.', '.', '.', '.']

Test case:
input: ['.', '.', '.', '.', '.', 'd', 'e', 'e', '.', '.', '.']
################################################################

LLM answer:

output: ['.', '.', '.', '.', '.', 'e', 'e', 'd', '.', '.', '.']
*/
class Solution {
public:
    vector<int> findOrder(int n, vector<vector<int>>& prerequisites) {
        // 邻接表
        unordered_map<int, set<int>> graph;
        for (auto &p : prerequisites) {
            graph[p[0]].insert(p[1]);
        }
        queue<int> q;
        vector<bool> visited(n);
        vector<int> res;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (!graph[i].empty()) continue;
            q.push(i);
            visited[i] = true;
            while (!q.empty()) {
                auto cur = q.front();
                q.pop();
                for (auto next : graph[cur]) {
                    if (visited[next]) continue;
                    visited[next] = true;
                    q.push(next);
                }
            }
            res.push_back(cnt++);
        }
        return res;
    }
};
################################################################

Solution:
['.', '.', '.', '.', '.', 'e', 'e', 'd', '.', '.', '.']

