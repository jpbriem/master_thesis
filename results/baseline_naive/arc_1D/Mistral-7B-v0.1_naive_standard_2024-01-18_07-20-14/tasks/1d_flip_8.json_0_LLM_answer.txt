Input token: 218
Output token: 275
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['.', '.', '.', '.', 'b', 'c', 'c', '.', '.']
output: ['.', '.', '.', '.', 'c', 'c', 'b', '.', '.']

Example_2:
input: ['c', 'd', 'd', 'd', '.', '.', '.', '.', '.']
output: ['d', 'd', 'd', 'c', '.', '.', '.', '.', '.']

Example_3:
input: ['.', '.', '.', '.', 'c', 'e', 'e', 'e', '.']
output: ['.', '.', '.', '.', 'e', 'e', 'e', 'c', '.']

Test case:
input: ['.', 'd', 'e', 'e', 'e', '.', '.', '.', '.']
################################################################

LLM answer:

output: ['.', 'e', 'e', 'e', 'd', '.', '.', '.', '.']
*/
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        unordered_map<int, int> m;
        for (auto i : nums2) {
            if (m[i] == 0 || m[i] < i) {
                m[i] = -1;
            } else {
                while (nums2[m[i]] <= i && m[i]) {
                    m[i] = m[m[i]];
                }
                if (m[i]!= 0) {
                    m[i] = nums2[m[i]];
                }
            }
        }
        vector<int> res(n);
        for (int i = 0; i < n; ++i) {
            res[i] = m[nums1[i]];
        }
        return res;
    }
};
################################################################

Solution:
['.', 'e', 'e', 'e', 'd', '.', '.', '.', '.']

