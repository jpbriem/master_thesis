Input token: 544
Output token: 256
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0]

Example_3:
input: [0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0]

Test case:
input: [0, 7, 7, 7, 7, 7, 7, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0]

Constraints:
1 <= arr.length <= 5 * 10^4
0 <= arr[i] <= 9
*/
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        int n = A.size();
        if (n == 0 || n == 1) return A;
        int i = 0, j = 1;
        while (j < n && i < n) {
            while (A[i] % 2!= 0 && i < n - 1) ++i;
            while (A[j] % 2 == 0 && j < n) ++j;
            swap(A[i], A[j]);
        }
        return A;
    }
};
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0]

