Input token: 481
Output token: 446
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 6, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 5, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0]
*/
class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        int n = nums.size();
        if (n == 0 || n == 1) return nums;
        // 奇数个元素，最后一个元素不能移动
        bool odd = n % 2!= 0;
        // 偶数个元素，最后两个元素不能移动
        bool even = n % 2 == 0;
        for (int i = 0; i < n - 1; ++i) {
            if (nums[i] > nums[i + 1]) swap(nums[i], nums[i + 1]);
        }
        // 将所有的负数放到前面
        int j = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] >= 0) continue;
            swap(nums[j++], nums[i]);
        }
        // 如果是奇数个元素，则最后一个元素不能移动
        if (!odd && j < n - 1) {
            swap(nums[j], nums[n - 1]);
        }
        // 如果是偶数个元素，则最后两个元素不能移动
        if (!even && j < n - 2) {
            swap(nums[j], nums[n - 2]);
        }
        return nums;
    }
};
################################################################

Solution:
[0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0]

