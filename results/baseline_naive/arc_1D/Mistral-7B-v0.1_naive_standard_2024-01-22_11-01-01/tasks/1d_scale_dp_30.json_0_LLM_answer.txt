Input token: 334
Output token: 303
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 4, 0]
output: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0]

Example_2:
input: [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4]

Example_3:
input: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 4, 0]
output: [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0]

Test case:
input: [8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 4, 0]
################################################################

LLM answer:

output: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0]

Constraints:
1 <= arr.length <= 5 * 10^4
arr[i] is either 0 or 4.
 */
public class ReplaceElementsWithGreatestElementOnRightSide {
    public static void main(String[] args) {
        int[] arr = new int[]{8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 4, 0};
        System.out.println("Input array : " + Arrays.toString(arr));
        replaceElements(arr);
        System.out.println("Output array : " + Arrays.toString(arr));
    }

    private static void replaceElements(int[] arr) {
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] == 4) {
                arr[i] = Integer.MAX_VALUE;
            } else {
                arr[i] = Math.max(arr[i], arr[i + 1]);
            }
        }
    }
}
################################################################

Solution:
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0]

