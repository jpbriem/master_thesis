Input token: 376
Output token: 426
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 2, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 6, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0]
output: [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0]

Example_3:
input: [0, 0, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 8, 8, 8, 7, 0, 0, 0, 0, 0, 0, 0]

Constraints:
1 <= arr.length <= 10^5
0 <= arr[i] <= 9
 */
public class ReorderDataInArray {
    public static void main(String[] args) {
        int[] arr = new int[]{0, 0, 0, 0, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0};
        reOrderArray(arr);
        for (int i : arr) {
            System.out.print(i + " ");
        }
    }

    private static void reOrderArray(int[] arr) {
        if (arr == null || arr.length < 2) return;
        int left = 0;
        int right = arr.length - 1;
        while (left < right) {
            // 从左往右找到第一个不是0的数字，并记录下标
            while (left < right && arr[left]!= 0) {
                left++;
            }
            // 从右往左找到第一个不是0的数字，并记录下标
            while (right > left && arr[right]!= 0) {
                right--;
            }
            // 交换两个数字
            swap(arr, left, right);
        }
    }

    private static void swap(int[] arr, int left, int right) {
        int temp = arr[left];
        arr[left] = arr[right];
        arr[right] = temp;
    }
}
################################################################

Solution:
[0, 0, 0, 0, 8, 8, 8, 7, 0, 0, 0, 0, 0, 0, 0]

