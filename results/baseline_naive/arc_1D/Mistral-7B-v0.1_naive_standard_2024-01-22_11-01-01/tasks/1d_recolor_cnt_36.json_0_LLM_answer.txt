Input token: 670
Output token: 527
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 7, 0, 0, 0, 7, 7, 7, 0, 7, 7, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 3, 0, 0, 0, 6, 6, 6, 0, 2, 2, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 7, 0, 0, 7, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0]
output: [0, 0, 3, 0, 0, 6, 6, 6, 0, 0, 0, 2, 2, 0, 0, 0, 6, 6, 6, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 7, 7, 0, 7, 7, 7, 0, 7, 0, 0, 0, 7, 7, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 2, 2, 0, 6, 6, 6, 0, 3, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 7, 0, 0, 7, 7, 7, 0, 0, 0, 7, 7, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 2, 0, 0, 6, 6, 6, 0, 0, 0, 2, 2, 0, 0, 6, 6, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0]

Constraints:
1 <= arr.length <= 5 * 10^4
arr[i] is either 0 or 7.
 */
public class Solution {
    public int[] sortTransformedArray(int[] nums) {
        if (nums == null || nums.length < 2) return nums;
        int n = nums.length;
        int left = 0, right = n - 1;
        int a = nums[left], b = nums[right];
        while (a!= b) {
            if (a > b) {
                for (int i = left + 1; i < right; ++i) {
                    if (nums[i] >= a && nums[i] <= b) {
                        swap(nums, i, left);
                        break;
                    } else if (nums[i] > b) {
                        swap(nums, i, right);
                        --right;
                    }
                }
            } else {
                for (int i = right - 1; i > left; --i) {
                    if (nums[i] >= a && nums[i] <= b) {
                        swap(nums, i, right);
                        break;
                    } else if (nums[i] < a) {
                        swap(nums, i, left);
                        ++left;
                    }
                }
            }
            a = nums[left];
            b = nums[right];
        }
        return nums;
    }

    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
################################################################

Solution:
[0, 3, 0, 0, 6, 6, 6, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0]

