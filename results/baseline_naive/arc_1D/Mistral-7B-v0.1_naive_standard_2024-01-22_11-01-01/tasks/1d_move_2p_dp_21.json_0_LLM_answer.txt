Input token: 397
Output token: 337
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 2, 0]
output: [0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 2, 0]

Example_2:
input: [0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 2, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0]

Example_3:
input: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 2, 0]
output: [0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 0]

Test case:
input: [1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]
 */
public class MoveZeroes {
    public static void main(String[] args) {
        int[] nums = new int[]{1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0};
        moveZeroes(nums);
        for (int i : nums) {
            System.out.print(i + " ");
        }
    }

    private static void moveZeroes(int[] nums) {
        if (nums == null || nums.length < 2) return;
        int left = 0;
        int right = 0;
        while (right < nums.length) {
            if (nums[right]!= 0) {
                swap(nums, left++, right++);
            } else {
                right++;
            }
        }
    }

    private static void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}
################################################################

Solution:
[0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0]

