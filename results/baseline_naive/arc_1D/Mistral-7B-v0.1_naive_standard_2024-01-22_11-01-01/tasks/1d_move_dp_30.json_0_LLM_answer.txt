Input token: 334
Output token: 366
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 3, 3, 3, 0, 0, 5, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 3, 3, 3, 5, 0, 0, 0, 0]

Example_2:
input: [2, 2, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 5]
output: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 5]

Test case:
input: [8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 5, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 8]

Constraints:
1 <= arr.length <= 10^4
0 <= arr[i] <= 9
 */
public class ReorderDataInArray {
    public static void main(String[] args) {
        int[] arr = new int[]{8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 5, 0};
        System.out.println("Input array : " + Arrays.toString(arr));
        reOrderArray(arr);
        System.out.println("Output array : " + Arrays.toString(arr));
    }

    private static void reOrderArray(int[] arr) {
        // Write your code here
        if (arr == null || arr.length < 2) return;
        int left = 0;
        int right = arr.length - 1;
        while (left < right) {
            while (left < right && arr[right]!= 0) right--;
            while (left < right && arr[left] == 0) left++;
            swap(arr, left++, right--);
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
################################################################

Solution:
[0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 0]

