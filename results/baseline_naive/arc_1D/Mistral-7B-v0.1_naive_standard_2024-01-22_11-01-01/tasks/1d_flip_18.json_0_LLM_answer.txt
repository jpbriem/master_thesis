Input token: 418
Output token: 212
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 0, 4, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 4, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 5, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 3, 3, 3, 3, 3, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 1, 1, 1, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 7, 0]
*/
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        int n = A.size();
        if (n == 0 || n == 1) return A;
        for (int i = 0; i < n - 1; ++i) {
            while ((A[i] & 1) && i % 2!= 0) ++i;
            while (!(A[i] & 1) && i % 2!= 1) ++i;
            swap(A[i], A[(i + 1) / 2]);
        }
        return A;
    }
};
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 7, 0]

