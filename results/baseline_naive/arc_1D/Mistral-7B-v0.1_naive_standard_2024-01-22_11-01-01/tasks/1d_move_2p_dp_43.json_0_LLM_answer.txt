Input token: 376
Output token: 356
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 1, 0, 0, 0]
output: [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0]

Example_2:
input: [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 0]
output: [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 0]

Example_3:
input: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 1, 0]
output: [0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0]

Test case:
input: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 0]
################################################################

LLM answer:

output: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0]

Constraints:
1 <= arr.length <= 5 * 10^4
arr[i] is either 0 or 1.
There will be at most one 1 in arr.
 */
public class ReplaceElementsWithGreatestElementOnRightSide {
    public static void main(String[] args) {
        int[] arr = new int[]{0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 0};
        System.out.println("Input array : " + Arrays.toString(arr));
        replaceElementsWithGreatestElementOnRightSide(arr);
        System.out.println("Output array : " + Arrays.toString(arr));
    }

    private static void replaceElementsWithGreatestElementOnRightSide(int[] arr) {
        if (arr == null || arr.length < 2) return;
        int max = Integer.MIN_VALUE;
        for (int i = arr.length - 1; i >= 0; --i) {
            if (max > arr[i]) {
                arr[i] = max;
            } else {
                max = Math.max(max, arr[i]);
            }
        }
    }
}
################################################################

Solution:
[0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0]

