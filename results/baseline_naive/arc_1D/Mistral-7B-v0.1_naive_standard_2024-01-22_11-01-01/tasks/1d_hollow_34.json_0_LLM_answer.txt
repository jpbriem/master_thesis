Input token: 355
Output token: 277
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0]
output: [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0]

Example_2:
input: [0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0]
output: [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0]

Example_3:
input: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0]
output: [2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]

Test case:
input: [7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 */
public class ReplaceElementsWithGreatestElementOnRightSide {
    public static void main(String[] args) {
        int[] arr = new int[]{7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        replaceElements(arr);
        for (int i : arr) {
            System.out.print(i + " ");
        }
    }

    private static void replaceElements(int[] arr) {
        if (arr == null || arr.length < 2) return;
        int max = Integer.MIN_VALUE;
        for (int i = arr.length - 1; i >= 0; --i) {
            if (max > arr[i]) {
                arr[i] = max;
            } else {
                max = Math.max(max, arr[i]);
            }
        }
    }
}
################################################################

Solution:
[7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

