Input token: 355
Output token: 213
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 7, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
output: [0, 0, 0, 1, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0]

Example_3:
input: [7, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 5, 5, 5, 4, 0, 0, 0, 0, 0, 0, 0]

Constraints:
1 <= arr.length <= 10^5
0 <= arr[i] <= 9
 */
public class Solution {
    public int[] sortArrayByParityII(int[] A) {
        if (A == null || A.length < 2) return A;
        List<Integer> list = new ArrayList<>();
        for (int i : A) {
            if ((i & 1)!= 0) list.add(i);
        }
        for (int i : A) {
            if ((i & 1) == 0) list.add(i);
        }
        return list.stream().mapToInt(x -> x).toArray();
    }
}
################################################################

Solution:
[0, 0, 0, 5, 5, 5, 4, 0, 0, 0, 0, 0, 0, 0]

