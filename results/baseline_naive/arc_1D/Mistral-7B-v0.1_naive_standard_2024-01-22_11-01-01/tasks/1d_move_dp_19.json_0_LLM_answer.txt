Input token: 313
Output token: 544
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 1, 1, 1, 0, 0, 3, 0, 0, 0]
output: [0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 0, 0]

Example_2:
input: [0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 3, 0]
output: [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 3, 0]

Example_3:
input: [4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 3]
output: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 3]

Test case:
input: [0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 3, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 3, 0]
 */
public class Solution {
    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
        if (nums == null || nums.length == 0) return new int[0];
        int n = nums.length;
        int left = 0, right = n - 1;
        int i = 0, j = n - 1;
        while (i <= j) {
            // 如果是负数，则交换位置
            if (a < 0 && nums[i] > 0) swap(nums, i++, j--);
            else if (a >= 0 && nums[j] < 0) swap(nums, i++, j--);
            else {
                double x = Math.sqrt((double)(b * b + 4 * a * c));
                if (x == 0) {
                    if (nums[i]!= nums[j]) swap(nums, i++, j--);
                    else ++i;
                } else {
                    double y = (-b + x) / (2 * a);
                    if (y > nums[left]) {
                        if (nums[right] > nums[left]) swap(nums, left++, right--);
                        else --right;
                    } else if (y < nums[right]) {
                        if (nums[left] < nums[right]) swap(nums, left++, right--);
                        else ++left;
                    } else {
                        if (nums[left] > nums[right]) swap(nums, left++, right--);
                        else {
                            ++left;
                            --right;
                        }
                    }
                }
            }
        }
        return nums;
    }

    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 3, 0]

