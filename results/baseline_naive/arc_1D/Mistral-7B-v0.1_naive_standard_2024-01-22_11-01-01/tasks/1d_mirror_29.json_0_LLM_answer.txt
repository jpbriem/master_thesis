Input token: 418
Output token: 203
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 1, 1, 1, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 1, 1, 1, 1, 0, 0]

Example_2:
input: [0, 7, 7, 7, 7, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 7, 7, 7, 7, 0, 0, 0]

Example_3:
input: [1, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]

Test case:
input: [4, 4, 4, 4, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 4]

Constraints:
1 <= A.length <= 5 * 10^4
0 <= A[i] <= 9
*/
class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        int n = nums.size();
        for (int i=0; i < n/2; ++i){
            if ((nums[i]+nums[n-i-1])%2 == 0){
                swap(nums[i], nums[n-i-1]);
            }
        }
        return nums;
    }
};
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 9, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0]

