Input token: 670
Output token: 306
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0]
output: [0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 0, 7, 7, 7, 0]

Example_2:
input: [0, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 7, 7]
output: [0, 0, 7, 0, 0, 9, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 7, 7]

Example_3:
input: [0, 0, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0, 7, 7, 0, 0, 0, 7, 0, 0, 7, 0, 7, 7, 7, 0, 7, 7, 0]
output: [0, 0, 7, 7, 7, 0, 0, 9, 9, 9, 9, 0, 7, 7, 0, 0, 0, 7, 0, 0, 7, 0, 7, 7, 7, 0, 7, 7, 0]

Test case:
input: [0, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7]
################################################################

LLM answer:

output: [0, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7]

Constraints:
1 <= arr.length <= 5 * 10^4
arr[i] == 0 or arr[i] == 7
 */
public class Solution {
    public int[] replaceZeroes(int[] arr) {
        if (arr == null || arr.length < 2) return arr;
        int n = arr.length;
        for (int i = 0; i < n - 1; ++i) {
            if (arr[i]!= 0 && arr[i + 1] == 0) {
                swap(arr, i, i + 1);
                --i;
            }
        }
        return arr;
    }

    private void swap(int[] arr, int a, int b) {
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}
################################################################

Solution:
[0, 9, 9, 9, 9, 9, 9, 0, 0, 7, 7, 0, 0, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 7, 7]

