Input token: 376
Output token: 364
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 3, 0, 0]
output: [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 3, 0, 0]

Example_2:
input: [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 0]
output: [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 0]

Example_3:
input: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 3, 0]
output: [0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 0]

Test case:
input: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]

Constraints:
1 <= arr.length <= 5 * 10^4
0 <= arr[i] <= 9
arr has at most one zero in it.
 */
public class ReorderDataInArray {
    public static void main(String[] args) {
        int[] arr = new int[]{0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3};
        System.out.println("Input array is : " + Arrays.toString(arr));
        reOrderArray(arr);
        System.out.println("Output array is : " + Arrays.toString(arr));
    }

    private static void reOrderArray(int[] arr) {
        if (arr == null || arr.length < 2) return;
        int i = 0;
        for (int j = 0; j < arr.length; j++) {
            if (arr[j]!= 0) {
                swap(arr, i++, j);
            }
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
################################################################

Solution:
[0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]

