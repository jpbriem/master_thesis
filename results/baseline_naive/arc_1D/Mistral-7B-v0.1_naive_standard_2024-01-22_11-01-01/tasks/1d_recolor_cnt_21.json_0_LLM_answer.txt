Input token: 418
Output token: 372
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 4, 0, 4, 4, 0, 0, 0]
output: [0, 7, 7, 0, 0, 1, 1, 1, 0, 0, 3, 0, 7, 7, 0, 0, 0]

Example_2:
input: [0, 0, 0, 4, 4, 0, 4, 0, 0, 4, 4, 4, 0, 0, 4, 0, 0]
output: [0, 0, 0, 7, 7, 0, 3, 0, 0, 1, 1, 1, 0, 0, 3, 0, 0]

Example_3:
input: [0, 0, 0, 4, 0, 0, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 0]
output: [0, 0, 0, 3, 0, 0, 7, 7, 0, 1, 1, 1, 0, 7, 7, 0, 0]

Test case:
input: [0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 3, 3, 0, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0, 0]

Constraints:
1 <= arr.length <= 5 * 10^4
arr[i] is either 0 or 4.
 */
public class Solution {
    public int[] reorganizeString(int[] arr) {
        if (arr == null || arr.length < 2) return arr;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());
        pq.addAll(map.entrySet());
        List<Integer> list = new ArrayList<>();
        while (!pq.isEmpty()) {
            Map.Entry<Integer, Integer> entry = pq.poll();
            if (list.size() % 2!= 0 && list.contains(entry.getKey())) {
                return new int[]{};
            } else {
                list.add(entry.getKey());
                if (--entry.getValue() > 0) {
                    pq.offer(entry);
                }
            }
        }
        return list.stream().mapToInt(i -> i).toArray();
    }
}
################################################################

Solution:
[0, 0, 0, 7, 7, 0, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0, 0]

