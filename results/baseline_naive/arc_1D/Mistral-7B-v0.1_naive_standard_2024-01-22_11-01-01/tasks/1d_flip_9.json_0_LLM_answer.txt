Input token: 481
Output token: 284
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 2, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 6, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 4, 0, 0, 0, 0, 0]

Test case:
input: [0, 1, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
*/
class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        int n = nums.size();
        if (n == 0 || n == 1) return nums;
        // 奇数个元素，最后一个元素不能移动
        bool odd = n % 2!= 0;
        for (int i = 0; i < n - 1; ++i) {
            int j = i + 1;
            while (j < n && nums[j] > nums[i]) ++j;
            swap(nums[i], nums[j]);
        }
        if (!odd) return nums;
        // 偶数个元素，最后两个元素交换
        swap(nums[n - 1], nums[n - 2]);
        return nums;
    }
};
################################################################

Solution:
[0, 4, 4, 4, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

