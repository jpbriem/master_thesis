Input token: 460
Output token: 271
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0]
output: [0, 5, 5, 5, 0, 2, 0, 0, 0, 9, 9, 0, 0, 0, 2, 0, 9, 9, 0]

Example_2:
input: [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0]
output: [0, 5, 5, 5, 0, 9, 9, 0, 2, 0, 0, 0, 9, 9, 0, 2, 0, 0, 0]

Example_3:
input: [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1]
output: [0, 0, 0, 2, 0, 9, 9, 0, 0, 5, 5, 5, 0, 0, 0, 9, 9, 0, 2]

Test case:
input: [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 2, 0, 9, 9, 9, 0, 0, 0, 5, 5, 5, 0, 0, 9, 9, 0, 0]

Constraints:
1 <= arr.length <= 10^4
arr[i] is either 0 or 1.
 */
public class Solution {
    public int[] solution(int[] arr) {
        int[] answer = new int[arr.length];
        for (int i=0; i<arr.length; i++) {
            if (arr[i] == 0) {
                answer[i] = 0;
            } else {
                answer[i] = countOnes(arr, i);
            }
        }
        return answer;
    }

    private int countOnes(int[] arr, int index) {
        int onesCount = 0;
        while (index < arr.length && arr[index]!= 0) {
            onesCount++;
            index += onesCount;
        }
        return onesCount;
    }
}
################################################################

Solution:
[0, 0, 2, 0, 5, 5, 5, 0, 0, 0, 9, 9, 0, 0, 0, 2, 0, 0, 0]

