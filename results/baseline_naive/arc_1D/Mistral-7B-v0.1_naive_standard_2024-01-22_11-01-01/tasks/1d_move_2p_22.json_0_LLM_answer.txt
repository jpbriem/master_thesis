Input token: 355
Output token: 361
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0]
output: [0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0]

Test case:
input: [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Constraints:
1 <= nums.length <= 5 * 10^4
nums[i] is either 0 or 1.
 */
public class Solution {
    public int[] sortByBits(int[] arr) {
        List<Integer> list = new ArrayList<>();
        for (int i : arr) {
            list.add(i);
        }
        Collections.sort(list, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                if ((o1 & 1) == 0 && (o2 & 1)!= 0) return -1;
                else if ((o1 & 1)!= 0 && (o2 & 1) == 0) return 1;
                else if (((o1 >> 1) ^ (o2 >> 1)) > 0) return -1;
                else if (((o1 >> 1) ^ (o2 >> 1)) < 0) return 1;
                else return o1 - o2;
            }
        });
        int[] res = new int[arr.length];
        for (int i = 0; i < arr.length; ++i) {
            res[i] = list.get(i);
        }
        return res;
    }
}
################################################################

Solution:
[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]

