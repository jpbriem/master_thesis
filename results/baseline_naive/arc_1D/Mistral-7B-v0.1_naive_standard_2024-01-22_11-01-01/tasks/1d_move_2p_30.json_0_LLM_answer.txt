Input token: 334
Output token: 288
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0]

Example_2:
input: [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0]

Test case:
input: [8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 */
public class ReplaceElementsWithGreatestElementOnRightSide {
    public static void main(String[] args) {
        int[] arr = new int[]{8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0};
        System.out.println("Input array is : " + Arrays.toString(arr));
        replaceElementsWithGreatestElementOnRightSide(arr);
        System.out.println("Output array is : " + Arrays.toString(arr));
    }

    private static void replaceElementsWithGreatestElementOnRightSide(int[] arr) {
        for (int i = arr.length - 1; i >= 0; i--) {
            if (i == arr.length - 1) {
                arr[i] = Integer.MIN_VALUE;
            } else {
                arr[i] = Math.max(arr[i], arr[i + 1]);
            }
        }
    }
}
################################################################

Solution:
[0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0]

