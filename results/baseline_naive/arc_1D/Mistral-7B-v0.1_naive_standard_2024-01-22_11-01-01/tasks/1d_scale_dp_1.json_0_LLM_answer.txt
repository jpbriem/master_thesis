Input token: 691
Output token: 599
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 2, 0, 0, 0]
output: [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 2]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 2, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 0, 0, 0, 0]

Test case:
input: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2]
################################################################

LLM answer:

output: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2]

Constraints:
1 <= arr.length <= 10^5
0 <= arr[i] <= 9
arr has at most one zero in it.
 */
public class ReplaceZeroesWithMaximumNumber {
    public static void main(String[] args) {
        int[] arr = new int[]{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2};
        System.out.println("Input array is " + Arrays.toString(arr));
        replaceZerosWithMaximumNumber(arr);
        System.out.println("Output array is " + Arrays.toString(arr));
    }

    private static void replaceZerosWithMaximumNumber(int[] arr) {
        // Find maximum number from given array
        int max = Integer.MIN_VALUE;
        for (int i : arr) {
            if (max < i) {
                max = i;
            }
        }

        // Iterate through the array to find index of first zero
        int indexOfFirstZero = -1;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0 && indexOfFirstZero == -1) {
                indexOfFirstZero = i;
            } else if (arr[i]!= 0 && indexOfFirstZero!= -1) {
                break;
            }
        }

        // If there is no zero in the array then return the original array itself
        if (indexOfFirstZero == -1) {
            return;
        }

        // Iterate through the array starting from the index of first zero
        for (int i = indexOfFirstZero; i < arr.length; i++) {
            if (arr[i] == 0) {
                arr[i] = max;
            }
        }
    }
}
################################################################

Solution:
[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2]

