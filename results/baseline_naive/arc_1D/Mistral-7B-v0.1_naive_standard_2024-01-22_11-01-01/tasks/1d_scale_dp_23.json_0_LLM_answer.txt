Input token: 292
Output token: 365
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 5]
output: [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5]

Example_2:
input: [3, 3, 3, 3, 3, 0, 0, 0, 5, 0, 0]
output: [3, 3, 3, 3, 3, 3, 3, 3, 5, 0, 0]

Example_3:
input: [0, 4, 4, 4, 4, 4, 0, 0, 5, 0, 0]
output: [0, 4, 4, 4, 4, 4, 4, 4, 5, 0, 0]

Test case:
input: [0, 0, 3, 3, 3, 3, 3, 0, 0, 5, 0]
################################################################

LLM answer:

output: [0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 0]

Constraints:
1 <= arr.length <= 10^5
0 <= arr[i] <= 9
 */
public class ReplaceZeroesWithIncreasing {
    public static void main(String[] args) {
        int[] arr = new int[]{0, 0, 3, 3, 3, 3, 3, 0, 0, 5, 0};
        System.out.println("Input array : " + Arrays.toString(arr));
        replaceZerosWithIncreasing(arr);
        System.out.println("Output array : " + Arrays.toString(arr));
    }

    private static void replaceZerosWithIncreasing(int[] arr) {
        if (arr == null || arr.length < 2) return;
        int i = 0;
        while (i < arr.length && arr[i]!= 0) i++;
        for (int j = i - 1; j >= 0; j--) {
            if (arr[j] == 0) {
                int k = j;
                while (k < arr.length && arr[k] == 0) k++;
                if (k < arr.length) {
                    arr[j] = arr[k];
                    arr[k] = 0;
                } else break;
            }
        }
    }
}
################################################################

Solution:
[0, 0, 3, 3, 3, 3, 3, 3, 3, 5, 0]

