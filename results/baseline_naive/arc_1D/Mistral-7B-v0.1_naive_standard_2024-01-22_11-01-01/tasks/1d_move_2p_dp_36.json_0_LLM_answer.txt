Input token: 376
Output token: 308
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 6, 0]
output: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 6, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 6, 0]

Example_3:
input: [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 6, 0, 0]
output: [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 0, 0]

Test case:
input: [2, 2, 2, 2, 2, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0]
 */
public class Solution {
    public int[] rearrangeArray(int[] nums) {
        if (nums == null || nums.length < 2) return nums;
        // 记录偶数和奇数的个数
        int even = 0, odd = 0;
        for (int i : nums) {
            if ((i & 1) == 0) even++;
            else odd++;
        }
        // 如果偶数和奇数的个数相等，则直接返回原数组即可
        if (even == odd) return nums;
        // 否则，将偶数放在前面，奇数放在后面
        int index = 0;
        while (index < nums.length && even > 0) {
            nums[index++] = nums[--even];
        }
        while (index < nums.length && odd > 0) {
            nums[index++] = nums[--odd];
        }
        return nums;
    }
}
################################################################

Solution:
[0, 0, 2, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0]

