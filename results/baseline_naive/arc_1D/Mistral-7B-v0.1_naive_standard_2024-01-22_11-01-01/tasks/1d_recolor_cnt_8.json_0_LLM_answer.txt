Input token: 313
Output token: 366
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 5, 5, 5, 0, 0, 0, 5, 0, 5, 5]
output: [0, 0, 1, 1, 1, 0, 0, 0, 9, 0, 3, 3]

Example_2:
input: [0, 5, 5, 0, 5, 0, 0, 5, 5, 5, 0, 0]
output: [0, 3, 3, 0, 9, 0, 0, 1, 1, 1, 0, 0]

Example_3:
input: [0, 0, 0, 5, 5, 5, 0, 0, 5, 0, 0, 0]
output: [0, 0, 0, 1, 1, 1, 0, 0, 9, 0, 0, 0]

Test case:
input: [0, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 0]
################################################################

LLM answer:

output: [0, 0, 0, 1, 0, 3, 3, 3, 0, 9, 9, 0]

Constraints:
1 <= nums.length <= 10^4
nums[i] is either 0 or 5.
 */
public class Solution {
    public int[] transformArray(int[] nums) {
        if (nums == null || nums.length < 2) return nums;
        int n = nums.length;
        for (int i = 0; i < n - 1; ++i) {
            if (nums[i]!= 0 && nums[i + 1]!= 0) continue;
            int j = i + 1;
            while (j < n && nums[j] == 0) ++j;
            if (j >= n) break;
            int k = j;
            while (k > i + 1 && nums[k - 1] == 0) --k;
            if (k <= i + 1) continue;
            int tmp = nums[i];
            nums[i] = nums[k - 1];
            nums[k - 1] = tmp;
            int cnt = k - i - 1;
            for (int l = i + 1; l < k; ++l) {
                nums[l] += cnt;
            }
            i = k - 1;
        }
        return nums;
    }
}
################################################################

Solution:
[0, 0, 0, 9, 0, 1, 1, 1, 0, 3, 3, 0]

