Input token: 523
Output token: 451
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 9, 9, 9, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0]
output: [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 9, 9, 0, 0, 9, 0, 0, 9, 9, 9, 0, 0, 9, 0, 9, 9, 9, 9, 0, 0, 0]
output: [0, 9, 9, 0, 0, 9, 0, 0, 9, 9, 9, 0, 0, 9, 0, 2, 2, 2, 2, 0, 0, 0]

Example_3:
input: [0, 9, 9, 9, 0, 9, 9, 0, 0, 9, 9, 0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9]
output: [0, 9, 9, 9, 0, 9, 9, 0, 0, 9, 9, 0, 0, 2, 2, 2, 2, 2, 0, 9, 9, 9]

Test case:
input: [0, 9, 9, 9, 9, 0, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9]
################################################################

LLM answer:

output: [0, 9, 9, 9, 9, 0, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9]

Constraints:
1 <= arr.length <= 5 * 10^4
arr[i] is either 0 or 9.
 */
public class ReplaceZeroesWith2s {
    public static void main(String[] args) {
        int[] arr = new int[]{0, 9, 9, 9, 9, 0, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9};
        System.out.println("Input array : " + Arrays.toString(arr));
        replaceZerosWith2s(arr);
        System.out.println("Output array : " + Arrays.toString(arr));
    }

    private static void replaceZerosWith2s(int[] arr) {
        if (arr == null || arr.length < 2) return;
        int left = 0;
        int right = arr.length - 1;
        while (left < right) {
            if (arr[left]!= 0 && arr[right]!= 0) {
                left++;
                right--;
            } else if (arr[left] == 0 && arr[right] == 0) {
                arr[left++] = 2;
                arr[right--] = 2;
            } else if (arr[left] == 0) {
                arr[left++] = 2;
            } else {
                arr[right--] = 2;
            }
        }
    }
}
################################################################

Solution:
[0, 9, 9, 9, 9, 0, 9, 9, 9, 0, 0, 2, 2, 2, 2, 2, 0, 9, 9, 9, 0, 9]

