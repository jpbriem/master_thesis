Input token: 313
Output token: 216
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'h', 'a', 'a', 'a', 'a', 'a']

Example_2:
input: ['i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'h', 'a']
output: ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'h', 'a']

Example_3:
input: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'h']
output: ['a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'h']

Test case:
input: ['e', 'e', 'e', 'e', 'e', 'a', 'a', 'h', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'h']
'''

class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        if not S or len(S) < 2: return S
        count = collections.Counter(S)
        max_count = max(count.values())
        if max_count > (len(S)+1)/2: return ''
        res = []
        for i in range(max_count+1):
            while count[chr(ord('a') + i)] > 0:
                res.append(chr(ord('a') + i))
                count[chr(ord('a') + i)] -= 1
        return ''.join(res)
################################################################

Solution:
['e', 'e', 'e', 'e', 'e', 'e', 'e', 'h', 'a', 'a', 'a', 'a']

