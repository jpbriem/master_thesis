Input token: 607
Output token: 254
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'a', 'h', 'h']
output: ['a', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'a', 'h', 'h']

Example_2:
input: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'h', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'a', 'a', 'h', 'a']
output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'h', 'a', 'a', 'h', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a']
################################################################

LLM answer:

output: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a']

Constraints:
0 <= len(s) <= 10^5
s[i] is either 'a' or 'h'.
*/
class Solution {
public:
    string modifyString(string s) {
        int n = s.size();
        for (int i=0; i<n; ++i){
            if (s[i] == '?'){
                char c = 'a';
                if (i>0 && s[i-1]=='a') c='b';
                else if (i<n-1 && s[i+1]=='a') c='b';
                s[i]=c;
            }
        }
        return s;
    }
};
################################################################

Solution:
['a', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a']

