Input token: 523
Output token: 348
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'a', 'a', 'a']
output: ['a', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'i', 'i', 'a', 'a', 'a']

Example_2:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'a']
output: ['a', 'e', 'e', 'e', 'e', 'e', 'a', 'i', 'i', 'i', 'i', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'i', 'i', 'a']

Example_3:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a']
output: ['a', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'i', 'i', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a']

Test case:
input: ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'i', 'a']
################################################################

LLM answer:

output: ['a', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'i', 'i', 'i', 'i', 'i', 'a', 'i', 'a']
*/
public class Solution {
    public String transform(String s) {
        if (s == null || s.length() < 4) return s;
        char[] chars = s.toCharArray();
        int i = 0, j = chars.length - 1;
        while (i <= j && chars[i]!= 'a') i++;
        while (j >= i && chars[j]!= 'a') j--;
        for (int k = i + 1; k < j; k++) {
            if (chars[k] == 'i' && chars[k - 1] == 'i' && chars[k + 1] == 'i') {
                chars[k] = 'e';
            } else if (chars[k] == 'i' && chars[k - 1] == 'i' && chars[k + 1] == 'a') {
                chars[k] = 'i';
                chars[k - 1] = 'e';
                chars[k + 1] = 'e';
            }
        }
        return new String(chars);
    }
}
################################################################

Solution:
['a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'i', 'a']

