Input token: 250
Output token: 286
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'i', 'a']
output: ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'i', 'a']

Example_2:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'i']
output: ['h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'i']

Example_3:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'i', 'a']
output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'i', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'a', 'i', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'h', 'h', 'h', 'h', 'h', 'h', 'i', 'a']
'''

class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        if not S or len(S) == 0: return ''
        count = {}
        for c in S:
            if c in count:
                count[c] += 1
            else:
                count[c] = 1
        maxCount = max(count.values())
        if maxCount > (len(S)+1)/2:
            return ""
        res = []
        while True:
            minCount = float('inf')
            minChar = None
            for k, v in count.items():
                if v < minCount:
                    minCount = v
                    minChar = k
            if minCount == 0: break
            res.append(minChar)
            count[minChar] -= 1
        for i in range(len(res)):
            res.insert((i+1)*2, res[i])
        return "".join(res)
################################################################

Solution:
['a', 'h', 'h', 'h', 'h', 'h', 'i', 'a', 'a']

