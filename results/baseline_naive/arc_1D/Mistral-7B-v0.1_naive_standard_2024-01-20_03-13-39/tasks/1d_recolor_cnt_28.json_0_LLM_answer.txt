Input token: 460
Output token: 336
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b']
output: ['a', 'a', 'a', 'i', 'i', 'a', 'j', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e']

Example_2:
input: ['a', 'b', 'b', 'b', 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b']
output: ['a', 'e', 'e', 'e', 'a', 'j', 'a', 'a', 'i', 'i', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'e', 'e']

Example_3:
input: ['a', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'b', 'a', 'b', 'b', 'b', 'a']
output: ['a', 'j', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'i', 'i', 'a', 'j', 'a', 'e', 'e', 'e', 'a']

Test case:
input: ['a', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'i', 'i', 'b', 'b', 'b', 'a', 'a', 'a', 'j', 'j', 'a', 'a', 'e', 'e', 'a', 'a', 'a']

Constraints:
0 <= len(s) <= 5 * 10^4
s consists of lowercase English letters.
 */
public class Solution {
    public String[] findReplaceString(String s, int[] indexes, String[] sources, String[] targets) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < indexes.length; ++i) {
            map.put(indexes[i], i);
        }
        List<String> res = new ArrayList<>(s.length());
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (!map.containsKey(sb.length())) {
                sb.append(c);
                continue;
            }
            int idx = map.get(sb.length());
            if (sources[idx].equals(sb.toString())) {
                sb.delete(0, sb.length());
                sb.append(targets[idx]);
            } else {
                sb.append(c);
            }
        }
        return res.toArray(new String[res.size()]);
    }
}
################################################################

Solution:
['a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'i', 'i', 'a', 'j', 'a', 'a', 'i', 'i', 'a', 'a', 'a']

