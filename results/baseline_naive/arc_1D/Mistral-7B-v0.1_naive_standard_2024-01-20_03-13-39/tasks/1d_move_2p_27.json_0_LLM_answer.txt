Input token: 250
Output token: 245
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a']

Example_2:
input: ['h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a']

Example_3:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'h', 'h', 'h', 'a', 'a', 'a', 'a']
'''

class Solution(object):
    def rearrangeBarcodes(self, barcodes):
        """
        :type barcodes: List[int]
        :rtype: List[int]
        """
        if not barcodes or len(barcodes) < 2: return barcodes
        d = {}
        for i in range(len(barcodes)):
            if barcodes[i] in d:
                d[barcodes[i]] += [i]
            else:
                d[barcodes[i]] = [i]
        res = []
        while True:
            flag = False
            for k, v in sorted(d.items()):
                if len(v) > 0:
                    res.append(k)
                    del d[k][0]
                    flag = True
                    break
            if not flag:
                break
        return res
################################################################

Solution:
['a', 'a', 'a', 'h', 'h', 'h', 'a', 'a', 'a']

