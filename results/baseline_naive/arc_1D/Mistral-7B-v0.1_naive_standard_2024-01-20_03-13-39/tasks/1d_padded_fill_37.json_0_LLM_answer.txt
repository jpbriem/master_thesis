Input token: 628
Output token: 457
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a']
output: ['b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']

Example_2:
input: ['f', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'f', 'a', 'a', 'a', 'a']
output: ['f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'f', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'f', 'a', 'a', 'a', 'a', 'a', 'f', 'a', 'a', 'f', 'a', 'a', 'a', 'a']
output: ['a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'h', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'h', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h']

Constraints:
0 <= len(arr) <= 10^5
arr[i] is either 'a' or 'h'.
 */
public class Solution {
    public String[] reorganizeString(String[] arr) {
        int n = arr.length;
        if (n == 0 || n % 2!= 0) return arr;
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            char c = arr[i].charAt(0);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((e1, e2) -> e2.getValue() - e1.getValue());
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            pq.offer(entry);
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            Map.Entry<Character, Integer> top = pq.poll();
            if (sb.length() > 0 && sb.charAt(sb.length() - 1) == top.getKey()) continue;
            for (int i = 0; i < Math.min(top.getValue(), n / 2); ++i) {
                sb.append(top.getKey());
            }
            if (top.getValue() > n / 2) return null;
        }
        return sb.toString().split("");
    }
}
################################################################

Solution:
['a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a']

