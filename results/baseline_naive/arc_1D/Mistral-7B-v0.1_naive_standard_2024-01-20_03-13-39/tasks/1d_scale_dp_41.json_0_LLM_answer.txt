Input token: 355
Output token: 426
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'e', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a']

Example_2:
input: ['a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'e', 'a', 'a']
output: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'e', 'a']
output: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'e', 'a']

Test case:
input: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'e', 'a', 'a']
################################################################

LLM answer:

output: ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a']
'''

class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        if not S or len(S) == 0: return ''
        # count each char in string
        counts = {}
        for c in S:
            if c not in counts:
                counts[c] = 1
            else:
                counts[c] += 1
        # sort by value
        sorted_counts = sorted(counts.items(), key=lambda x:x[1], reverse=True)
        # check if there is any char with more than half of total length
        max_value = sorted_counts[-1][1]
        if max_value > (len(S)+1)/2:
            return ""
        # build a list to store the result
        res = []
        while sorted_counts:
            # get the first element from sorted_counts
            pair = sorted_counts.pop()
            # add it into res
            res.append(pair[0])
            # update the remaining number of this character
            pair[1] -= 1
            # if the remaining number is zero, remove it from sorted_counts
            if pair[1] == 0:
                sorted_counts.remove(pair)
            # if the remaining number is still greater than zero, put it back to sorted_counts
            elif pair[1] > 0:
                sorted_counts.insert(0, pair)
        # join all elements in res together
        return "".join(res)
################################################################

Solution:
['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a', 'a']

