Input token: 334
Output token: 354
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'e', 'a', 'a', 'e', 'a']
output: ['a', 'a', 'g', 'g', 'g', 'a', 'a', 'c', 'c', 'a', 'a', 'i', 'a']

Example_2:
input: ['a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'e', 'a', 'a']
output: ['a', 'g', 'g', 'g', 'a', 'a', 'a', 'c', 'c', 'a', 'i', 'a', 'a']

Example_3:
input: ['a', 'a', 'e', 'a', 'a', 'a', 'e', 'e', 'a', 'a', 'e', 'e', 'e']
output: ['a', 'a', 'i', 'a', 'a', 'a', 'c', 'c', 'a', 'a', 'g', 'g', 'g']

Test case:
input: ['a', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'g', 'g', 'g', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a']
*/
public class TransformToChessboard {
    public static void main(String[] args) {
        String s = "aaeeea";
        System.out.println(transformToChessBoard(s));
    }

    private static String transformToChessBoard(String s) {
        if (s == null || s.length() < 4) return "";
        char[] chars = s.toCharArray();
        int n = chars.length;
        for (int i = 0, j = 0; i < n - 1 && j < n; ) {
            while (j + 1 < n && chars[j] == chars[j + 1]) ++j;
            if (chars[i]!= chars[j]) {
                chars[++i] = chars[j];
                continue;
            }
            switch (chars[j]) {
                case 'a':
                    chars[++i] = 'a';
                    break;
                case 'e':
                    chars[++i] = 'g';
                    break;
                default:
                    chars[++i] = 'c';
                    break;
            }
            ++j;
        }
        return new String(chars);
    }
}
################################################################

Solution:
['a', 'a', 'c', 'c', 'a', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'a']

