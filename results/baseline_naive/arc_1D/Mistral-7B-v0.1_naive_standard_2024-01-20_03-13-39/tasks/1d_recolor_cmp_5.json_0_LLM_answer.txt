Input token: 565
Output token: 338
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'd', 'd', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'd']
output: ['a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'd', 'd', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'c']

Example_2:
input: ['a', 'd', 'd', 'd', 'a', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'a']
output: ['a', 'd', 'd', 'd', 'a', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'd', 'd', 'a', 'a', 'd', 'd', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'a', 'd', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'd', 'a', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'd', 'd', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'd', 'd', 'd', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'd', 'd', 'a', 'd', 'd', 'd', 'd', 'd', 'd', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a']

Constraints:
0 <= len(arr) <= 5 * 10^4
arr[i] is either 'a' or 'd'.
*/
class Solution {
public:
    vector<char> reorganizeString(string s) {
        int n = s.size();
        if (n == 0 || n % 2!= 0) return {};
        unordered_map<char, int> mp;
        for (auto c : s) ++mp[c];
        priority_queue<pair<int, char>> pq;
        for (auto [ch, cnt] : mp) {
            if (cnt > n / 2) return {};
            pq.push({cnt, ch});
        }
        vector<char> ans(n);
        while (!pq.empty()) {
            auto [cnt, ch] = pq.top();
            pq.pop();
            ans[(n - 1) / 2 + cnt] = ch;
            --cnt;
            if (cnt) pq.push({cnt, ch});
        }
        return ans;
    }
};
################################################################

Solution:
['a', 'd', 'd', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'd', 'd', 'd', 'a', 'a', 'a', 'a']

