Input token: 502
Output token: 513
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'a', 'c', 'a', 'a', 'c', 'c', 'c', 'c']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'h', 'h', 'a', 'b', 'a', 'a', 'h', 'h', 'h', 'h']

Example_2:
input: ['a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'c', 'a', 'c', 'c']
output: ['a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'b', 'a', 'h', 'h']

Example_3:
input: ['a', 'c', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a']
output: ['a', 'b', 'b', 'b', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a']

Test case:
input: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'c', 'c', 'c', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'b', 'b', 'b', 'a', 'a']
'''
class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        if not S or len(S) == 0: return ''
        # count = {}
        # for c in S:
        #     count[c] = count.get(c, 0) + 1
        # maxCount = max(count.values())
        # if maxCount > (len(S)+1)/2:
        #     return ""
        # res = []
        # while True:
        #     for k, v in sorted(count.items(), key=lambda x: (-x[1], x[0])):
        #         if v > 0:
        #             res.append(k)
        #             count[k] -= 1
        #             if count[k] == 0: del count[k]
        #             break
        #     if len(res) % 2!= 0:
        #         return ""
        #     yield "".join(res)
        #     res = []
        # return "".join(next(iter(yield from self.reorganizeString(S))))
        count = collections.Counter(S)
        maxCount = max(count.values())
        if maxCount > (len(S)+1)/2:
            return ""
        res = []
        while True:
            for k, v in sorted(count.items(), key=lambda x: (-x[1], x[0])):
                if v > 0:
                    res.append(k)
                    count[k] -= 1
                    if count[k] == 0: del count[k]
                    break
            if len(res) % 2!= 0:
                return ""
            yield "".join(res)
            res = []
################################################################

Solution:
['a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a']

