Input token: 586
Output token: 366
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'e', 'e', 'e', 'a', 'a']
output: ['a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'g', 'g', 'g', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'e', 'e']
output: ['a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'g', 'g', 'g']

Example_3:
input: ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'e', 'e', 'e']
output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'g', 'g', 'g', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b']

Test case:
input: ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a', 'a', 'e', 'a', 'a', 'e', 'e', 'e']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'b', 'a', 'a', 'g', 'g', 'g', 'g']
*/
public class Solution {
    public String[] reorderLogFiles(String[] logs) {
        List<String> letterList = new ArrayList<>();
        List<String> digitList = new ArrayList<>();
        for (int i = 0; i < logs.length; i++) {
            if (logs[i].split(" ")[1].matches("[0-9]+")) {
                digitList.add(logs[i]);
            } else {
                letterList.add(logs[i]);
            }
        }
        Collections.sort(letterList, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                String[] s1 = o1.split(" ");
                String[] s2 = o2.split(" ");
                // 先比较字母，再比较数字
                return s1[1].compareTo(s2[1]) == 0? s1[0].compareTo(s2[0]) : s1[1].compareTo(s2[1]);
            }
        });
        return Stream.concat(digitList.stream(), letterList.stream()).toArray(String[]::new);
    }
}
################################################################

Solution:
['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'g', 'a', 'a', 'g', 'g', 'g']

