Input token: 334
Output token: 473
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'b', 'b', 'b', 'a', 'j', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'a']

Example_2:
input: ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'j', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'e', 'e', 'e', 'a']

Example_3:
input: ['a', 'b', 'b', 'b', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'a', 'a', 'a']

Test case:
input: ['h', 'h', 'h', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['h', 'h', 'h', 'a', 'a', 'a', 'a', 'j', 'a', 'a', 'a', 'a', 'a']

Constraints:
1 <= arr.length <= 10^5
arr[i] is a lowercase English letter.
The number of times each character appears in the array will be at most 10^4.
*/
class Solution {
    public String reorganizeString(String s) {
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(b[1], a[1]));
        for (int i = 0; i < 26; ++i) {
            if (count[i] > 0) {
                pq.offer(new int[]{i, count[i]});
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty() && pq.peek()[1]!= 0) {
            int[] top = pq.poll();
            char ch = (char)(top[0] + 'a');
            sb.append(ch);
            --top[1];
            if (top[1] == 0) {
                continue;
            } else {
                pq.offer(top);
            }
            if (!pq.isEmpty()) {
                int[] next = pq.peek();
                char nxtCh = (char)(next[0] + 'a');
                sb.append(nxtCh);
                --next[1];
                if (next[1] == 0) {
                    continue;
                } else {
                    pq.offer(next);
                }
            }
        }
        return sb.toString();
    }
}
################################################################

Solution:
['a', 'a', 'a', 'a', 'j', 'a', 'h', 'h', 'h', 'a', 'a', 'a', 'a']

