Input token: 523
Output token: 466
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'j', 'a', 'a', 'j', 'j', 'a', 'a', 'a', 'j', 'j', 'j', 'a', 'j', 'a', 'a', 'a', 'j', 'j', 'a', 'a', 'a']
output: ['a', 'h', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'f', 'f', 'f', 'a', 'h', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'j', 'j', 'j', 'a', 'a', 'j', 'j', 'a', 'a', 'a', 'j', 'a', 'a', 'j', 'j', 'j', 'a', 'j', 'j', 'a']
output: ['a', 'a', 'f', 'f', 'f', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'h', 'a', 'a', 'f', 'f', 'f', 'a', 'g', 'g', 'a']

Example_3:
input: ['a', 'j', 'j', 'j', 'a', 'a', 'j', 'a', 'a', 'a', 'j', 'j', 'a', 'a', 'j', 'j', 'a', 'j', 'j', 'j', 'a', 'a']
output: ['a', 'f', 'f', 'f', 'a', 'a', 'h', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'g', 'g', 'a', 'f', 'f', 'f', 'a', 'a']

Test case:
input: ['a', 'a', 'j', 'j', 'j', 'a', 'a', 'j', 'a', 'a', 'a', 'j', 'j', 'a', 'a', 'a', 'j', 'j', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'f', 'f', 'f', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'a']
*/
public class Solution {
    public String[] reorderLogFiles(String[] logs) {
        List<String> letterList = new ArrayList<>();
        List<String> digitList = new ArrayList<>();
        for (int i=0;i<logs.length;i++) {
            if (logs[i].split(" ")[1].charAt(0)>='A' && logs[i].split(" ")[1].charAt(0)<='Z') {
                letterList.add(logs[i]);
            } else {
                digitList.add(logs[i]);
            }
        }
        Collections.sort(letterList,new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                String s1 = o1.substring(o1.indexOf(' ') + 1);
                String s2 = o2.substring(o2.indexOf(' ') + 1);
                if (!s1.equals(s2)) {
                    return s1.compareTo(s2);
                } else {
                    return o1.compareTo(o2);
                }
            }
        });
        Collections.sort(digitList);
        String[] result = new String[logs.length];
        int index = 0;
        for (int i=0;i<result.length;i++) {
            if (index < letterList.size()) {
                result[i] = letterList.get(index++);
            } else {
                result[i] = digitList.get(i - letterList.size());
            }
        }
        return result;
    }
}
################################################################

Solution:
['a', 'a', 'f', 'f', 'f', 'a', 'a', 'h', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'g', 'g', 'a', 'a', 'a', 'a']

