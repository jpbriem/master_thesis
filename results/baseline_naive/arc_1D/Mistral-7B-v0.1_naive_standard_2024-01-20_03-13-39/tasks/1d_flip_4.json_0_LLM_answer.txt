Input token: 271
Output token: 304
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'g', 'e', 'e', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'e', 'e', 'g', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'h', 'i', 'i', 'i', 'i', 'a', 'a']
output: ['a', 'a', 'a', 'i', 'i', 'i', 'i', 'h', 'a', 'a']

Example_3:
input: ['a', 'a', 'd', 'e', 'e', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'e', 'e', 'd', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'f', 'h', 'h', 'h', 'h', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'f', 'a']
*/
public class Solution {
    public String[] rearrangeString(String s) {
        int n = s.length();
        if (n == 0 || n % 2!= 0) return new String[0];
        char[] chars = s.toCharArray();
        Map<Character, Integer> map = new HashMap<>();
        for (char c : chars) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list);
        StringBuilder sb = new StringBuilder();
        while (!list.isEmpty()) {
            int count = list.remove(list.size() - 1);
            for (int i = 0; i < count / 2; ++i) {
                sb.append(map.keySet().iterator().next());
            }
            for (int i = count / 2; i < count; ++i) {
                sb.append(map.keySet().iterator().next());
            }
        }
        return sb.toString().split("");
    }
}
################################################################

Solution:
['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'f', 'a']

