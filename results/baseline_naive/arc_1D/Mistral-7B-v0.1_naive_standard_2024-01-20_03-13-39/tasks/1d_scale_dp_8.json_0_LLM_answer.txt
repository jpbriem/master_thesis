Input token: 250
Output token: 326
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'c', 'c', 'c', 'c', 'a', 'a', 'e', 'a']
output: ['a', 'c', 'c', 'c', 'c', 'c', 'c', 'e', 'a']

Example_2:
input: ['a', 'a', 'i', 'i', 'i', 'a', 'a', 'e', 'a']
output: ['a', 'a', 'i', 'i', 'i', 'i', 'i', 'e', 'a']

Example_3:
input: ['i', 'i', 'i', 'i', 'i', 'a', 'a', 'e', 'a']
output: ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'e', 'a']

Test case:
input: ['d', 'd', 'd', 'd', 'd', 'a', 'a', 'e', 'a']
################################################################

LLM answer:

output: ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'a']
'''

class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        if len(S) <= 10:
            return S
        else:
            d = {}
            for i in range(len(S)):
                if S[i] not in d:
                    d[S[i]] = 1
                else:
                    d[S[i]] += 1
            max_count = max(d.values())
            if max_count > (len(S)+1)/2:
                return ''
            else:
                res = []
                while True:
                    for key, value in sorted(d.items(), key=lambda x:-x[1])[:max_count]:
                        if value == 0:
                            continue
                        elif value == 1:
                            res.append(key)
                            break
                        else:
                            res.extend([key]*value)
                            break
                    if len(res) >= len(S):
                        break
                    else:
                        d[res[-1]] -= 1
                return ''.join(res)
################################################################

Solution:
['d', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'a']

