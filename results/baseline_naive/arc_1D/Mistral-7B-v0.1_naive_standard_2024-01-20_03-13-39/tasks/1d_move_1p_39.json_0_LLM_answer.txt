Input token: 313
Output token: 235
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a']

Example_2:
input: ['c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a', 'a']
*/
public class Solution {
    public String[] sortArrayByParityII(String[] A) {
        int i = 0;
        int j = 1;
        while (i < A.length && j < A.length) {
            if ((A[i].charAt(0) - '0') % 2 == 0) {
                i += 2;
            } else {
                swap(A, i, j);
                i += 2;
                j += 2;
            }
        }
        return A;
    }

    private void swap(String[] A, int i, int j) {
        char temp = A[i].charAt(0);
        A[i] = A[j];
        A[j] = temp + "";
    }
}
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'c', 'c', 'c', 'a', 'a', 'a']

