Input token: 334
Output token: 387
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'h', 'h', 'h', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'j', 'a', 'h', 'h', 'h', 'a', 'a', 'a']

Example_2:
input: ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'j', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'e', 'e', 'e', 'a']

Example_3:
input: ['g', 'g', 'g', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'j', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'b', 'b', 'b', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'a', 'a', 'a']

Note:
The given array will have a length in range [0, 5 * 10^4].
Each element of the given array will be an English letter or one of the characters j or.
*/

class Solution {
public:
    vector<char> reorganizeString(string S) {
        int n = S.size();
        if (n == 0 || n % 2!= 0) return {};
        unordered_map<char, int> cnt;
        for (auto c : S) ++cnt[c];
        priority_queue<pair<int, char>> pq;
        for (auto &p : cnt) {
            if (p.first == '.') continue;
            pq.push({p.second, p.first});
        }
        vector<char> ans(n);
        while (!pq.empty()) {
            auto t = pq.top(); pq.pop();
            int freq = t.first;
            char ch = t.second;
            if (freq > (n + 1) / 2) return {};
            for (int i = 0; i < freq; ++i) {
                ans[(i << 1)] = ch;
                --freq;
                if (freq == 0) break;
                ans[(i << 1) | 1] = ch;
                --freq;
            }
        }
        return ans;
    }
};
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'a', 'a']

