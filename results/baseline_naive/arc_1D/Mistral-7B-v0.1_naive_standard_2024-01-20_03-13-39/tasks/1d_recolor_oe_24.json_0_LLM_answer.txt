Input token: 334
Output token: 259
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'b', 'b']
output: ['a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'h', 'h', 'h', 'h']

Example_2:
input: ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'b', 'b', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b', 'b', 'a']
output: ['a', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'h', 'h', 'h', 'h', 'a']

Test case:
input: ['a', 'a', 'a', 'b', 'b', 'a', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'g', 'g', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'a']

Constraints:
1 <= s.length <= 5000
s[i] is either 'a' or 'b'.
'''
class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        if len(S) == 0: return ''
        count = collections.Counter(S)
        maxCount = max(count.values())
        if maxCount > (len(S)+1)/2: return ""
        heapq.heapify(count.items())
        res = []
        while count:
            item = heapq.heappop(count.items())
            res.append(item[0])
            if item[1] > 1:
                heapq.heappush(count.items(), (item[0], item[1] - 1))
        return "".join(res)
################################################################

Solution:
['a', 'a', 'a', 'h', 'h', 'a', 'g', 'g', 'g', 'a', 'a', 'a', 'a']

