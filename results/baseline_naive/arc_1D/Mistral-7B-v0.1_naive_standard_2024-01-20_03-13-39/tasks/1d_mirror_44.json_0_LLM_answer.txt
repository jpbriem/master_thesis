Input token: 439
Output token: 444
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'h', 'h', 'h', 'h', 'h', 'a']

Example_2:
input: ['a', 'd', 'd', 'd', 'd', 'd', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'd', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'd', 'd', 'd', 'd', 'a', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'a', 'd', 'd', 'd', 'd', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'b', 'b', 'b', 'b', 'a', 'j', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a']
*/
public class Solution {
    public String reorganizeString(String S) {
        if (S == null || S.length() < 2) return S;
        Map<Character, Integer> map = new HashMap<>();
        for (char c : S.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((o1, o2) -> o2.getValue() - o1.getValue());
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            pq.offer(entry);
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            Map.Entry<Character, Integer> e1 = pq.poll();
            int count = e1.getValue();
            char ch = e1.getKey();
            if (count > (sb.length() + 1) / 2) return "";
            if (sb.length() % 2!= 0 && count >= (sb.length() + 1) / 2) return "";
            if (sb.length() == 0 || sb.charAt(sb.length() - 1)!= ch) {
                sb.append(ch);
                count--;
            } else {
                sb.insert(0, ch);
                count--;
            }
            if (count > 0) pq.offer(new AbstractMap.SimpleImmutableEntry<>(ch, count));
        }
        return sb.toString();
    }
}
################################################################

Solution:
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'j', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'a']

