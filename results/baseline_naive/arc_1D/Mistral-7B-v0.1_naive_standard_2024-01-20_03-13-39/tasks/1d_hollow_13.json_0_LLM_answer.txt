Input token: 565
Output token: 541
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a']
output: ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'h', 'a']

Example_2:
input: ['a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['i', 'a', 'a', 'a', 'a', 'a', 'i', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

Test case:
input: ['a', 'a', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
'''
class Solution(object):
    def reorganizeString(self, S):
        """
        :type S: str
        :rtype: str
        """
        if len(S) <= 10: return S
        # count = Counter(S)
        # max_count = max(count.values())
        # if max_count > (len(S)+1)/2: return ''
        # res = []
        # while count:
        #     for k in sorted(count, key=lambda x: -count[x]):
        #         res.append(k)
        #         count[k] -= 1
        #         if not count[k]: del count[k]
        #         if len(res) == len(S): break
        #         else: res.append(' ')
        # return ''.join(res)
        from collections import defaultdict
        d = defaultdict(int)
        for c in S:
            d[c]+=1
        m = max(d.values())
        if m>(len(S)+1)/2:return ""
        lst = [(v,k) for k, v in d.items()]
        lst.sort()
        ans = []
        i = 0
        while i<len(lst)-1:
            a, b = lst[i], lst[i+1]
            if a[0]<b[0]:
                ans += [a[1]]*(min(m-a[0],b[0]))
                i+=1
            elif a[0]>b[0]:
                ans += [b[1]]*(min(m-b[0],a[0]))
                i+=1
            else:
                ans += [a[1]],[b[1]]
                i+=2
        if lst[-1][0]==m:ans += [lst[-1][1]]*m
        return "".join(ans)
################################################################

Solution:
['a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'h', 'a', 'a', 'a', 'a', 'a', 'a', 'a']

