Input token: 376
Output token: 421
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: ['a', 'f', 'f', 'f', 'a', 'a', 'f', 'f', 'a', 'f', 'f', 'a', 'a', 'a', 'a']
output: ['a', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'a', 'a', 'a']

Example_2:
input: ['a', 'f', 'f', 'f', 'a', 'f', 'f', 'f', 'f', 'a', 'a', 'a', 'a', 'a', 'a']
output: ['a', 'b', 'b', 'b', 'a', 'h', 'h', 'h', 'h', 'a', 'a', 'a', 'a', 'a', 'a']

Example_3:
input: ['a', 'a', 'f', 'f', 'f', 'f', 'a', 'f', 'f', 'f', 'a', 'a', 'f', 'f', 'f']
output: ['a', 'a', 'h', 'h', 'h', 'h', 'a', 'b', 'b', 'b', 'a', 'a', 'b', 'b', 'b']

Test case:
input: ['a', 'f', 'f', 'f', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'a', 'a', 'a']
################################################################

LLM answer:

output: ['a', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a']
*/
public class Solution {
    public String[] reorganizeString(String S) {
        int n = S.length();
        if (n == 0 || n % 2!= 0) return new String[0];
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            char c = S.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((e1, e2) -> e2.getValue() - e1.getValue());
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            pq.offer(entry);
        }
        List<String> res = new ArrayList<>(n / 2);
        while (!pq.isEmpty()) {
            Map.Entry<Character, Integer> top = pq.poll();
            if (top.getValue() > (n + 1) / 2) return new String[0];
            res.add(String.valueOf(top.getKey()));
            --top.getValue();
            if (!pq.isEmpty()) {
                Map.Entry<Character, Integer> next = pq.peek();
                pq.offer(new AbstractMap.SimpleImmutableEntry<>(next.getKey(), next.getValue() - 1));
            }
        }
        return res.toArray(new String[res.size()]);
    }
}
################################################################

Solution:
['a', 'b', 'b', 'b', 'a', 'a', 'h', 'h', 'h', 'h', 'h', 'h', 'a', 'a', 'a']

