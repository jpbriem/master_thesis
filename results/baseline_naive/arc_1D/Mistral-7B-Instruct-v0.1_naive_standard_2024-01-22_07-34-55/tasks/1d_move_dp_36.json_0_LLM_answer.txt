Input token: 376
Output token: 757
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 9, 0]
output: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 9, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 9, 0]

Example_3:
input: [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 9]
output: [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9]

Test case:
input: [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0]

The output of each example is a permutation of the input array such that all elements except for one element (which is represented by 0) appear exactly twice in the permutation. In Example_1, the non-zero element is 2; in Example_2, it is 1; and in Example_3, it is 5.

Your task is to implement a function `permute` which takes an integer array as input and returns a list of permutations of the array such that all elements except for one element (which is represented by 0) appear exactly twice in the permutation. If there are no such permutations, return an empty list.

Note that you do not need to handle duplicate elements in the input array. Also note that the order of permutations does not matter.

Constraints:
- 1 <= n <= 10^4
- 0 <= nums[i] < 10^6
- nums has at most 10^4 unique elements
- There will be at most 10^4 calls to permute
- Each test call will have at most 10^4 elements in the input array
- You may assume that nums contains at least one non-zero element

Examples:
```python
Input: [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 9, 0, 0]
Output: [[0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 9, 0]]

Input: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 9, 0]
Output: [[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0]]

Input: [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 9]
Output: [[0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 9]]
```
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 9, 0, 0]

