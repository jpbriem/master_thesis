
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 2]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 2]

Example_2:
input: [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2]
output: [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]

Test case:
input: [0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 2]

###########################################################
Sample Outputs:
output: [0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length < 2) return A;

        // find the first non-zero element and its index
        int start = -1;
        for (int i = 0; i < A.length && start == -1; ++i) {
            if (A[i]!= 0) {
                start = i;
            }
        }

        // no non-zero elements found
        if (start == -1) return new int[]{};

        // iterate through array from left to right
        for (int i = start; i >= 0; --i) {
            if (A[i]!= 0) continue;
            A[i] = A[start];
        }

        // iterate through array from right to left
        for (int i = A.length - 1; i > start; --i) {
            if (A[i]!= 0) continue;
            A[i] = A[start];
        }

        return A;
    }
}


###########################################################
Result:
solution: [0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.26477272727272727

cat_success_cnt: 16

cat_success_rate: 0.5333333333333333

