
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0]
*/

public class Solution {
    public int[] fill(int[] arr) {
        if (arr == null || arr.length <= 1) return arr;
        int start = -1;
        for (int i = 0; i < arr.length; i++) {
            if (start == -1 && arr[i]!= 0) {
                start = i;
            } else if (start!= -1 && arr[i] == 0) {
                int j = i;
                while (j > start && arr[j-1]!= 0) {
                    arr[j] = arr[j-1];
                    j--;
                }
                arr[j] = 0;
            }
        }
        return arr;
    }
}


###########################################################
Result:
solution: [0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.3925233644859813

cat_success_cnt: 4

cat_success_rate: 0.5714285714285714

