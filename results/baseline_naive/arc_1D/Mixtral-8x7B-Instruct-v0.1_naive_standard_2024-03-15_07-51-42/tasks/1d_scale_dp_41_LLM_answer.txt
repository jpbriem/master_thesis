
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 0]
output: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0]

Example_2:
input: [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0]
output: [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0]

Example_3:
input: [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 4, 0]
output: [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 4, 0]

Test case:
input: [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 0, 0]

###########################################################
Sample Outputs:
output: [2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 0, 0]
*/

public class Solution {
    public int[] moveZeroes(int[] nums) {
        if (nums == null || nums.length <= 1) return nums;

        int left = 0, right = 0;
        while (right < nums.length) {
            if (nums[right]!= 0) {
                swap(nums, left++, right);
            }
            right++;
        }

        return nums;
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


###########################################################
Result:
solution: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26832018038331457

cat_success_cnt: 21

cat_success_rate: 0.5675675675675675

