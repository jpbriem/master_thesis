
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 2, 2, 2, 2, 0, 0, 0, 0, 0]
output: [0, 2, 0, 0, 2, 0, 0, 0, 0, 0]

Example_2:
input: [4, 4, 4, 0, 0, 0, 0, 0, 0, 0]
output: [4, 0, 4, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 7, 7, 7, 0]
output: [0, 0, 0, 0, 0, 0, 7, 0, 7, 0]

Test case:
input: [0, 0, 0, 0, 3, 3, 3, 3, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 3, 0, 3, 0, 0, 0]
*/

public class Solution {
    public int[] replaceZero(int[] input) {
        if (input == null || input.length <= 1) return input;

        // find the first non-zero element from left to right
        for (int i = 0; i < input.length - 1; i++) {
            if (input[i]!= 0 && input[i + 1] == 0) {
                swap(input, i, i + 1);
            }
        }

        // fill zero in between two non-zero elements
        for (int i = 0; i < input.length - 1; i++) {
            if (input[i]!= 0 && input[i + 1] == 0) {
                while (input[i + 1] == 0 && i + 1 < input.length - 1) {
                    input[++i] = 0;
                }
            }
        }

        return input;
    }

    private void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 3, 0, 0, 3, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.43333333333333335

cat_success_cnt: 15

cat_success_rate: 0.375

