
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 3, 3, 3, 3, 0, 0, 2, 0]
output: [0, 3, 3, 3, 3, 3, 3, 2, 0]

Example_2:
input: [6, 6, 6, 6, 6, 0, 0, 0, 2]
output: [6, 6, 6, 6, 6, 6, 6, 6, 2]

Example_3:
input: [0, 1, 1, 1, 1, 0, 0, 0, 2]
output: [0, 1, 1, 1, 1, 1, 1, 1, 2]

Test case:
input: [7, 7, 7, 7, 0, 0, 0, 0, 2]

###########################################################
Sample Outputs:
output: [7, 7, 7, 7, 7, 7, 7, 7, 2]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length <= 1) return A;

        // find the first zero index from left to right
        int start = -1;
        for (int i = 0; i < A.length; i++) {
            if (A[i] == 0 && start == -1) {
                start = i;
            } else if (A[i]!= 0) {
                break;
            }
        }

        // find the last non-zero index from right to left
        int end = -1;
        for (int i = A.length - 1; i >= 0; i--) {
            if (A[i]!= 0 && end == -1) {
                end = i;
            } else if (A[i] == 0) {
                break;
            }
        }

        // no need to do anything
        if (start == -1 && end == -1) return A;

        // replace all elements between start and end with 0 or 2
        for (int i = start; i <= end; i++) {
            A[i] = (i == start || i == end)? 0 : 2;
        }

        return A;
    }
}


###########################################################
Result:
solution: [7, 7, 7, 7, 7, 7, 7, 7, 2]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.26643990929705214

cat_success_cnt: 18

cat_success_rate: 0.5625

