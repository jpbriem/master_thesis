
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0]

Example_2:
input: [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0]
output: [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0]

Test case:
input: [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0]
*/

public class Solution {
    public int[] autoFill(int[] A) {
        if (A == null || A.length < 3) return A;
        // find the first non-zero number and its index
        for (int i = 0; i < A.length - 1; i++) {
            if (A[i]!= 0 && A[i + 1] == 0) {
                int num = A[i];
                int j = i + 1;
                while (j < A.length && A[j] == 0) {
                    A[j++] = num;
                }
            }
        }
        // fill in the zeroes between two same numbers
        for (int i = 0; i < A.length - 1; i++) {
            if (A[i]!= 0 && A[i] == A[i + 1]) {
                int j = i + 1;
                while (j < A.length && A[j] == A[i]) {
                    j++;
                }
                int k = i + 1;
                while (k < j) {
                    A[k++] = A[i];
                }
            }
        }
        return A;
    }
}


###########################################################
Result:
solution: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3656716417910448

cat_success_cnt: 11

cat_success_rate: 0.3235294117647059

