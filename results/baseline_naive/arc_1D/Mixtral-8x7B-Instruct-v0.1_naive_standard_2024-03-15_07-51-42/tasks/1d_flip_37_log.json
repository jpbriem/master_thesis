{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 7, 7, 7, 7, 7, 0, 0, 0]\noutput: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 8, 0, 0, 0]\n\nExample_2:\ninput: [8, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\noutput: [6, 6, 6, 6, 6, 6, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nExample_3:\ninput: [0, 0, 0, 0, 0, 0, 0, 4, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0]\noutput: [0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0]\n\nTest case:\ninput: [0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n###########################################################\nSample Outputs:\noutput: [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n*/\n\npublic class MoveMaxNumberToRight {\n    public static void main(String[] args) {\n        int[] arr = new int[]{0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        System.out.println(\"Input : \" + Arrays.toString(arr));\n        moveMaxNumbersToRight(arr);\n        System.out.println(\"Output : \" + Arrays.toString(arr));\n    }\n\n    private static void moveMaxNumbersToRight(int[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] == 0 && arr[i + 1]!= 0) {\n                swap(arr, i, findIndexOfFirstNonZeroElement(arr, i + 1));\n            } else if (arr[i] > arr[i + 1]) {\n                swap(arr, i, i + 1);\n            }\n        }\n    }\n\n    private static int findIndexOfFirstNonZeroElement(int[] arr, int startIndex) {\n        while (startIndex < arr.length && arr[startIndex] == 0) {\n            startIndex++;\n        }\n        return startIndex;\n    }\n\n    private static void swap(int[] arr, int indexOne, int indexTwo) {\n        int temp = arr[indexOne];\n        arr[indexOne] = arr[indexTwo];\n        arr[indexTwo] = temp;\n    }\n}"
        }
    ],
    "idx": 181,
    "task": "1d_flip_37",
    "category": "1d_flip",
    "ys": [
        "1d_flip_37.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.4340659340659341,
        "cat_success_cnt": 22,
        "cat_success_rate": 0.6875
    },
    "usage_so_far": {
        "completion_tokens": 72231,
        "prompt_tokens": 111286,
        "cost": null
    }
}