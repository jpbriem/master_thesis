
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 8, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0]
output: [0, 0, 6, 0, 1, 1, 1, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0]

Example_2:
input: [0, 8, 0, 0, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8]
output: [0, 6, 0, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 0, 1, 1, 1]

Example_3:
input: [0, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 0]
output: [0, 0, 0, 1, 1, 1, 0, 2, 2, 0, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0]

Test case:
input: [0, 0, 0, 8, 8, 8, 0, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 8, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 1, 1, 1, 0, 1, 0, 0]
*/

#include <iostream>
using namespace std;

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
}

// Function to find the number of islands in a grid.
void solve(int arr[], int n) {
    // Create an array to store the result.
    int res[n];

    // Initialize all elements as -1.
    fill(res, res + n, -1);

    // Traverse through the input array and update the result accordingly.
    for (int i = 0; i < n; i++) {
        if (arr[i] == 0 || res[i]!= -1) continue;

        int count = 0;
        while (i < n && arr[i] == 8) {
            count++;
            res[i++] = count;
        }

        --i;
        while (i >= 0 && arr[i] == 8) {
            res[i--] = count--;
        }
    }

    // Print the final result.
    printArray(res, n);
}

int main() {
    int arr[] = {0, 0, 0, 8, 8, 8, 0, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 8, 0, 0};
    int n = sizeof(arr) / sizeof(arr[0]);

    solve(arr, n);

    return 0;
}


###########################################################
Result:
solution: [0, 0, 0, 1, 1, 1, 0, 6, 0, 2, 2, 0, 0, 1, 1, 1, 0, 6, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2670157068062827

cat_success_cnt: 0

cat_success_rate: 0.0

