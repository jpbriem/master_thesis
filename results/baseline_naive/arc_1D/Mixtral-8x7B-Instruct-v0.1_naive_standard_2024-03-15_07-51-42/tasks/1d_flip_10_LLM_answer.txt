
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 6, 2, 2, 0]
output: [0, 0, 0, 0, 0, 0, 2, 2, 6, 0]

Example_2:
input: [0, 5, 8, 8, 8, 8, 0, 0, 0, 0]
output: [0, 8, 8, 8, 8, 5, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 3, 8, 8, 0, 0, 0]
output: [0, 0, 0, 0, 8, 8, 3, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 8, 7, 7, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 7, 7, 8, 0]
*/

public class Solution {
    public int[] Reverse(int[] array) {
        if (array == null || array.Length <= 1) return array;

        for (int i = 0; i < array.Length / 2; i++) {
            var temp = array[i];
            array[i] = array[array.Length - 1 - i];
            array[array.Length - 1 - i] = temp;
        }

        // find the first non-zero element from right side of array
        int index = array.Length - 1;
        while (index >= 0 && array[index] == 0) index--;

        // swap elements between two sides of found index
        for (int leftIndex = 0, rightIndex = index + 1; leftIndex < index; leftIndex++, rightIndex++) {
            if (array[leftIndex]!= 0 && array[rightIndex]!= 0) continue;

            var temp = array[leftIndex];
            array[leftIndex] = array[rightIndex];
            array[rightIndex] = temp;
        }

        return array;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 7, 7, 8, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.39215686274509803

cat_success_cnt: 3

cat_success_rate: 1.0

