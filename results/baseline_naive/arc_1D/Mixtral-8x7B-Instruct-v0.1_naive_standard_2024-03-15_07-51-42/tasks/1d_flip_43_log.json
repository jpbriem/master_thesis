{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [0, 0, 2, 4, 4, 4, 4, 4, 0, 0, 0, 0]\noutput: [0, 0, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0]\n\nExample_2:\ninput: [0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 0, 0]\noutput: [0, 0, 0, 0, 0, 0, 7, 7, 7, 4, 0, 0]\n\nExample_3:\ninput: [0, 0, 0, 5, 7, 7, 7, 7, 0, 0, 0, 0]\noutput: [0, 0, 0, 7, 7, 7, 7, 5, 0, 0, 0, 0]\n\nTest case:\ninput: [0, 0, 0, 0, 1, 2, 2, 2, 2, 0, 0, 0]\n\n###########################################################\nSample Outputs:\noutput: [0, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0]\n*/\n\npublic class Solution {\n    public int[] Reverse(int[] nums) {\n        if (nums == null || nums.Length <= 1) return nums;\n\n        var left = 0;\n        var right = nums.Length - 1;\n\n        while (left < right) {\n            // move the pointer to the first non-zero number from left side\n            while (left < right && nums[left] == 0) ++left;\n            // move the pointer to the last non-zero number from right side\n            while (right > left && nums[right] == 0) --right;\n\n            if (left >= right) break;\n\n            Swap(ref nums[left], ref nums[right]);\n            ++left;\n            --right;\n        }\n\n        return nums;\n    }\n\n    private void Swap<T>(ref T a, ref T b) {\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n}"
        }
    ],
    "idx": 188,
    "task": "1d_flip_43",
    "category": "1d_flip",
    "ys": [
        "1d_flip_43.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[0, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0]",
        "success": 1,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.4444444444444444,
        "cat_success_cnt": 27,
        "cat_success_rate": 0.6923076923076923
    },
    "usage_so_far": {
        "completion_tokens": 75025,
        "prompt_tokens": 114114,
        "cost": null
    }
}