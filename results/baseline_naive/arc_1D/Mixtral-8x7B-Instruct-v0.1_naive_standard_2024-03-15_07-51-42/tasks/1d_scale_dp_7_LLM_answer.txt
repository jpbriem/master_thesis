
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 3, 3, 3, 0, 0, 8]
output: [0, 3, 3, 3, 3, 3, 8]

Example_2:
input: [2, 2, 2, 0, 0, 0, 8]
output: [2, 2, 2, 2, 2, 2, 8]

Example_3:
input: [3, 3, 3, 0, 0, 0, 8]
output: [3, 3, 3, 3, 3, 3, 8]

Test case:
input: [4, 4, 4, 0, 0, 0, 8]

###########################################################
Sample Outputs:
output: [4, 4, 4, 4, 4, 4, 8]
*/

public class Solution {
    public int[] fill(int[] arr) {
        if (arr == null || arr.length <= 1) return arr;
        for (int i = arr.length - 1; i > 0 && arr[i]!= 0; --i);
        if (i < 0) return arr;
        int val = arr[i];
        for (int j = i + 1; j < arr.length; ++j) {
            if (arr[j] == 0) continue;
            if (arr[j]!= val) break;
            arr[j] = val + 1;
        }
        for (int k = i - 1; k >= 0; --k) {
            if (arr[k] == 0) continue;
            if (arr[k]!= val) break;
            arr[k] = val + 1;
        }
        return arr;
    }
}


###########################################################
Result:
solution: [4, 4, 4, 4, 4, 4, 8]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.27586206896551724

cat_success_cnt: 31

cat_success_rate: 0.6326530612244898

