
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0]
output: [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 6, 6, 6, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 1, 0, 0, 0]

Example_3:
input: [0, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0]
*/

public class Solution {
    public int[] Reverse(int[] array) {
        if (array == null || array.Length <= 1) return array;

        for (int i = 0; i < array.Length / 2; i++) {
            var temp = array[i];
            array[i] = array[array.Length - 1 - i];
            array[array.Length - 1 - i] = temp;
        }

        int start = 0;
        while (start < array.Length && array[start] == 0) start++;

        int end = array.Length - 1;
        while (end >= 0 && array[end] == 0) end--;

        while (start < end) {
            if (array[start] > array[end]) {
                var temp = array[start];
                array[start] = array[end];
                array[end] = temp;
            }
            start++;
            end--;
        }

        return array;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.43258426966292135

cat_success_cnt: 20

cat_success_rate: 0.7142857142857143

