
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length < 2) return A;
        int start = -1, end = -1;
        for (int i = 0; i < A.length; ++i) {
            if (A[i]!= 0 && start == -1) {
                start = i;
            } else if (A[i] == 0 && start!= -1) {
                end = i;
                break;
            }
        }
        if (start == -1) return A;
        while (end + 1 < A.length && A[++end] == 0);
        for (int i = start; i <= end; ++i) A[i] = 1;
        for (int i = 0, j = start; i < A.length; ++i) {
            if (j > end) j = start;
            if (A[i] == 1) continue;
            A[i] = 0;
            while (A[j] == 1) ++j;
        }
        return A;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.39655172413793105

cat_success_cnt: 8

cat_success_rate: 0.5

