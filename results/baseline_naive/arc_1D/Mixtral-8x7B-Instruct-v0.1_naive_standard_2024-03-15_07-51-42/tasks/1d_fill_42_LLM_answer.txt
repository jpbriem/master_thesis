
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 5, 0, 0, 0, 5, 0, 0, 0, 0]
output: [0, 5, 5, 5, 5, 5, 0, 0, 0, 0]

Example_2:
input: [0, 4, 0, 0, 4, 0, 0, 0, 0, 0]
output: [0, 4, 4, 4, 4, 0, 0, 0, 0, 0]

Example_3:
input: [5, 0, 0, 0, 0, 5, 0, 0, 0, 0]
output: [5, 5, 5, 5, 5, 5, 0, 0, 0, 0]

Test case:
input: [0, 4, 0, 0, 0, 0, 4, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 4, 4, 0, 0, 0, 4, 0, 0, 0]
*/

public class Solution {
    public int[] duplicateZeros(int[] arr) {
        // edge case
        if (arr == null || arr.length <= 1) return arr;

        // copy the original array to a new one
        int[] result = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            result[i] = arr[i];
        }

        // find the first zero and start duplicating zeros from there
        int index = -1;
        for (int i = 0; i < arr.length; i++) {
            if (index!= -1 && arr[i]!= 0) {
                System.arraycopy(result, index + 1, result, index + 2, arr.length - index - 1);
                break;
            } else if (arr[i] == 0) {
                index = i;
            }
        }

        // fill in the rest of the array with zeros
        for (int i = index + 1; i < arr.length; i++) {
            result[i + 1] = 0;
        }

        return result;
    }
}


###########################################################
Result:
solution: [0, 4, 4, 4, 4, 4, 4, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3695652173913043

cat_success_cnt: 13

cat_success_rate: 0.34210526315789475

