
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 4, 0]
output: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0]

Example_2:
input: [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4]

Example_3:
input: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 4, 0]
output: [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0]

Test case:
input: [8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 4, 0]

###########################################################
Sample Outputs:
output: [8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 0]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length < 2) return A;
        int start = -1, end = -1;
        for (int i = 0; i < A.length; ++i) {
            if (start == -1 && A[i]!= 0) {
                start = i;
            } else if (A[i]!= 0) {
                end = i;
            }
        }
        if (start == -1) return A;
        int val = A[start];
        while (++start <= end) A[start] = val;
        int idx = A.length - 1;
        while (--idx >= 0) {
            if (A[idx] == 0) break;
        }
        if (idx + 1 < A.length) {
            val = A[idx + 1];
            while (++idx < A.length) A[idx] = val;
        }
        return A;
    }
}


###########################################################
Result:
solution: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.264

cat_success_cnt: 14

cat_success_rate: 0.56

