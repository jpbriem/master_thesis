
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0]
output: [0, 1, 0, 0, 0, 8, 8, 0, 0, 0, 5, 5, 5, 0, 0, 0, 8, 8, 0]

Example_2:
input: [0, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0]
output: [0, 1, 0, 8, 8, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0]

Example_3:
input: [0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0]
output: [0, 0, 1, 0, 0, 5, 5, 5, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0]

Test case:
input: [0, 2, 0, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0]

###########################################################
Sample Outputs:
output: [0, 1, 0, 0, 5, 8, 0, 8, 8, 5, 0, 5, 5, 0, 0, 5, 5, 5, 0]
*/

public class Solution {
    public int[] replaceZero(int[] arr) {
        if (arr == null || arr.length <= 1) return arr;
        // first zero's left and right boundary
        int l = -1, r = -1;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i]!= 0 && l == -1) {
                l = i;
            } else if (arr[i] == 0 && l >= 0) {
                r = i;
                break;
            }
        }
        if (l >= 0 && r > l) {
            int count = 0;
            while (r < arr.length && arr[r] == 0) {
                r++;
                count++;
            }
            for (int i = l + 1; i < r; i++) {
                arr[i] = count;
            }
        }
        // second zero's left and right boundary
        l = -1;
        r = -1;
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i]!= 0 && l == -1) {
                l = i;
            } else if (arr[i] == 0 && l >= 0) {
                r = i;
                break;
            }
        }
        if (l >= 0 && r > l) {
            int count = 0;
            while (l >= 0 && arr[l] == 0) {
                l--;
                count++;
            }
            for (int i = r + 1; i <= l; i++) {
                arr[i] = count;
            }
        }
        return arr;
    }
}


###########################################################
Result:
solution: [0, 1, 0, 0, 8, 8, 0, 5, 5, 5, 0, 8, 8, 0, 0, 5, 5, 5, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27163781624500666

cat_success_cnt: 0

cat_success_rate: 0.0

