
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 5, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 6, 0, 0, 0, 0, 0]
*/

public class ReverseLeftSide {
    public static int[] reverseLeft(int[] arr) {
        if (arr == null || arr.length < 2) return arr;
        for (int i = 0; i < arr.length / 2; i++) {
            swap(arr, i, arr.length - 1 - i);
        }
        // find the first non-zero element from right side
        int index = arr.length - 1;
        while (index >= 0 && arr[index] == 0) index--;
        // move all zeroes to left side
        for (int i = index + 1; i < arr.length; i++) {
            arr[i - index - 1] = 0;
        }
        // move last non-zero element to correct position
        int temp = arr[arr.length - 1];
        for (int j = arr.length - 2; j > index; j--) {
            arr[j + 1] = arr[j];
        }
        arr[index + 1] = temp;
        return arr;
    }

    private static void swap(int[] arr, int a, int b) {
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 6, 0, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.4318181818181818

cat_success_cnt: 19

cat_success_rate: 0.7307692307692307

