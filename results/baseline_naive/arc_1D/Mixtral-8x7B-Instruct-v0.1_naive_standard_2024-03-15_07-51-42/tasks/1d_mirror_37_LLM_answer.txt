
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 2, 2, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 9, 0, 2, 2, 2, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 2, 2, 2, 0, 9, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 2, 2, 2, 0]

Example_3:
input: [0, 0, 2, 2, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 9, 0, 2, 2, 2, 0, 0, 0]

Test case:
input: [0, 0, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 0, 0, 0]
*/

public class MoveZerosToEnd {
    public static void main(String[] args) {
        int[] arr = new int[]{0, 0, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0};
        System.out.println("Original Array : ");
        printArray(arr);
        moveZeroesToEnd(arr);
        System.out.println("\nArray after moving zeros to end :");
        printArray(arr);
    }

    private static void moveZeroesToEnd(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == 0 && arr[i + 1]!= 0) {
                swap(arr, i, findFirstNonZeroIndex(arr, i));
            }
        }
    }

    private static int findFirstNonZeroIndex(int[] arr, int start) {
        for (int i = start; i < arr.length; i++) {
            if (arr[i]!= 0) return i;
        }
        return -1; // should not reach here as there is at least one non-zero element in array
    }

    private static void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }

    private static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.41134751773049644

cat_success_cnt: 6

cat_success_rate: 0.1875

