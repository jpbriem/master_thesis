
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0]
output: [0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 6, 6, 6, 6, 6, 6, 6, 0]

Example_2:
input: [0, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0]
output: [0, 4, 0, 0, 0, 6, 6, 6, 6, 6, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0]

Example_3:
input: [0, 0, 4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4]
output: [0, 0, 6, 6, 6, 6, 0, 4, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 6, 6, 6, 6]

Test case:
input: [0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 6, 6, 6, 6, 0, 0, 0, 4, 4, 4, 4, 0]
*/

public class Solution {
    public int[] solution(int []arr) {
        int len = arr.length;
        if (len < 2) return arr;

        int idx = -1; // index of the first zero in a group of zeros
        for (int i=0; i<len-1; ++i) {
            if (arr[i] == 0 && arr[i+1]!= 0) {
                idx = i;
            } else if (arr[i]!= 0 && arr[i+1] == 0) {
                if (idx >= 0) {
                    arr[idx] += 2;
                    for (int j=idx+1; j<=i; ++j) arr[j] = arr[idx];
                    idx = -1;
                }
            }
        }

        if (idx >= 0) {
            arr[idx] += 2;
            for (int j=idx+1; j<len; ++j) arr[j] = arr[idx];
        }

        return arr;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2810734463276836

cat_success_cnt: 3

cat_success_rate: 0.375

