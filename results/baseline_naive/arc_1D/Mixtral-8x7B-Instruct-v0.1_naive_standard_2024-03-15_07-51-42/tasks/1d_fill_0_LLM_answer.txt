
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0]
output: [0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
output: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]

Example_3:
input: [0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length <= 1) return A;

        // find the first non-zero element and its index
        int start = -1;
        for (int i = 0; i < A.length && A[i] == 0; ++i) {}
        if (i!= A.length) start = i;

        // fill from left to right
        for (int i = start + 1; i < A.length; ++i) {
            if (A[i]!= 0) continue;
            A[i] = A[start];
        }

        // fill from right to left
        for (int i = A.length - 1; i > start; --i) {
            if (A[i]!= 0) continue;
            A[i] = A[start];
        }

        return A;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.38613861386138615

cat_success_cnt: 1

cat_success_rate: 1.0

