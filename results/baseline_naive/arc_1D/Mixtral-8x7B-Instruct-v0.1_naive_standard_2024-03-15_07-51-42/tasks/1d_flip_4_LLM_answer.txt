
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 6, 4, 4, 0, 0, 0]
output: [0, 0, 0, 0, 4, 4, 6, 0, 0, 0]

Example_2:
input: [0, 0, 0, 7, 8, 8, 8, 8, 0, 0]
output: [0, 0, 0, 8, 8, 8, 8, 7, 0, 0]

Example_3:
input: [0, 0, 3, 4, 4, 0, 0, 0, 0, 0]
output: [0, 0, 4, 4, 3, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 5, 7, 7, 7, 7, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 7, 7, 7, 7, 5, 0]
*/

public class Solution {
    public int[] ReversePairs(int[] nums) {
        if (nums == null || nums.Length <= 1) return nums;
        var res = new int[nums.Length];
        Array.Copy(nums, res, nums.Length);
        MergeSort(res, 0, nums.Length - 1);
        return res;
    }

    private void MergeSort(int[] arr, int left, int right) {
        if (left >= right) return;
        var mid = left + (right - left) / 2;
        MergeSort(arr, left, mid);
        MergeSort(arr, mid + 1, right);
        Merge(arr, left, mid, right);
    }

    // merge two sorted subarray into one array and reverse the order of pairs whose first element is larger than second element in original array
    private void Merge(int[] arr, int left, int mid, int right) {
        var temp = new int[right - left + 1];
        var i = left;
        var j = mid + 1;
        for (var k = 0; k < temp.Length; k++) {
            if (i > mid) {
                temp[k] = arr[j++];
            } else if (j > right) {
                temp[k] = arr[i++];
            } else if (arr[i] > arr[j]) {
                temp[k] = arr[j++];
                ReversePair(arr, i, j - 1);
            } else {
                temp[k] = arr[i++];
            }
        }
        for (var k = 0; k < temp.Length; k++) {
            arr[left++] = temp[k];
        }
    }

    // reverse pair elements
    private void ReversePair(int[] arr, int start, int end) {
        while (start < end) {
            var tmp = arr[start];
            arr[start] = arr[end];
            arr[end] = tmp;
            start++;
            end--;
        }
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 7, 7, 7, 7, 5, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.43783783783783786

cat_success_cnt: 24

cat_success_rate: 0.6857142857142857

