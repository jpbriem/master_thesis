
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0]
output: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0]

Example_2:
input: [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0]
output: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0]

Test case:
input: [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length <= 1) return A;

        // find the first non-zero element from left and right side of array
        int l = -1, r = -1;
        for (int i = 0; i < A.length && l == -1; ++i) {
            if (A[i]!= 0) l = i;
        }
        for (int j = A.length - 1; j >= 0 && r == -1; --j) {
            if (A[j]!= 0) r = j;
        }

        // no non-zero elements in this array
        if (l == -1 && r == -1) return A;

        // fill all zeroes with the value of the first non-zero element
        if (l > 0) System.arraycopy(A, 0, A, 0, l);
        if (r < A.length - 1) System.arraycopy(A, r + 1, A, r + 1, A.length - r - 1);

        // set the first and last non-zero elements to their original values
        A[l] = A[0];
        A[r] = A[A.length - 1];

        // fill middle part between two non-zero elements with the value of the first one
        for (int k = l + 1; k < r; ++k) {
            A[k] = A[l];
        }

        return A;
    }
}


###########################################################
Result:
solution: [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.39090909090909093

cat_success_cnt: 5

cat_success_rate: 0.5

