
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 3, 3, 3, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 3, 3, 3, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 9, 9, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 9, 9, 9, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 5, 5, 5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 5, 5, 5, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 3, 3, 3, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 0, 6, 6, 6, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length < 2) return A;
        int start = -1, end = -1;
        for (int i = 0; i < A.length; ++i) {
            if (start == -1 && A[i]!= 0) start = i;
            else if (A[i]!= 0) end = i;
        }
        if (start == -1) return A;
        int val = A[start];
        while (start <= end) A[start++] = val;
        int idx = 0;
        while (idx < A.length && A[idx]!= 0) ++idx;
        if (idx >= A.length) return A;
        int preVal = A[idx], count = 0;
        while (++idx < A.length && A[idx] == preVal);
        --idx;
        int nextVal = A[idx + 1];
        while (idx >= 0 && A[idx] == preVal) {
            A[idx--] = nextVal;
            ++count;
        }
        if (count > 0) {
            int newStart = idx + 1;
            while (newStart <= end && A[newStart] == nextVal) ++newStart;
            --newStart;
            int newEnd = newStart + count - 1;
            while (newStart <= newEnd) A[newStart++] = preVal;
        }
        return A;
    }
}


###########################################################
Result:
solution: [0, 3, 3, 3, 0, 0, 0, 7, 7, 7, 0, 6, 6, 6, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27631578947368424

cat_success_cnt: 9

cat_success_rate: 0.2647058823529412

