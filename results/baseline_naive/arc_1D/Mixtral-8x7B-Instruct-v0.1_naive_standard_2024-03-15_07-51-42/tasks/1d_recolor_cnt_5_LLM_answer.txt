
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0]
output: [0, 0, 0, 1, 0, 0, 5, 5, 5, 0, 9, 9, 0, 0]

Example_2:
input: [0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2]
output: [0, 0, 0, 9, 9, 0, 5, 5, 5, 0, 0, 1, 0, 1]

Example_3:
input: [0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0]
output: [0, 0, 9, 9, 0, 0, 5, 5, 5, 0, 0, 0, 1, 0]

Test case:
input: [0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 1, 0, 5, 5, 5, 0, 0, 0, 9, 9, 0]
*/

public class Solution {
    public int[] replaceZero(int[] input) {
        if (input == null || input.length <= 1) return input;

        // find the first non-zero element from left to right
        for (int i = 0; i < input.length - 1 && input[i] == 0; i++);

        // start from the index of the first non-zero element
        int curNonZeroIndex = i;
        int countOfCurGroup = 1;

        // loop through the rest elements
        for (int j = curNonZeroIndex + 1; j < input.length; j++) {
            if (input[j]!= 0) {
                countOfCurGroup++;
            } else {
                // update the previous group's number
                input[curNonZeroIndex] += countOfCurGroup * 10;
                // reset the current group's counter and move on to next group
                countOfCurGroup = 1;
                curNonZeroIndex = j;
            }
        }

        // update the last group's number
        input[curNonZeroIndex] += countOfCurGroup * 10;

        return input;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 1, 0, 5, 5, 5, 0, 0, 0, 9, 9, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.25753768844221103

cat_success_cnt: 1

cat_success_rate: 0.021739130434782608

