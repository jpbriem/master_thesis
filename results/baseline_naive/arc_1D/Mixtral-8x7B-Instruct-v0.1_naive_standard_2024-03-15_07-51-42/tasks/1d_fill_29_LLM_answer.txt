
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0]
output: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0]

Test case:
input: [0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length < 2) return A;
        int start = -1, end = -1;
        for (int i = 0; i < A.length; ++i) {
            if (A[i]!= 0 && start == -1) {
                start = i;
            } else if (A[i] == 0 && start!= -1) {
                end = i;
                break;
            }
        }
        if (start == -1) return A;
        for (int i = start; i <= end; ++i) {
            A[i] = A[start];
        }
        for (int i = 0; i < start; ++i) {
            if (A[i] == A[start]) continue;
            for (int j = end + 1; j < A.length; ++j) {
                if (A[j] == A[start]) {
                    swap(A, i, j);
                    break;
                }
            }
        }
        return A;
    }

    private void swap(int[] A, int a, int b) {
        int tmp = A[a];
        A[a] = A[b];
        A[b] = tmp;
    }
}


###########################################################
Result:
solution: [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.3902439024390244

cat_success_cnt: 10

cat_success_rate: 0.43478260869565216

