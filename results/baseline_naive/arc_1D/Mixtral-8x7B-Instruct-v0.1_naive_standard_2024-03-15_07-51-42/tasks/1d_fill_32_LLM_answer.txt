
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
output: [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]
output: [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0]
*/

public class Solution {
    public int[] duplicateZeros(int[] arr) {
        // edge case
        if (arr == null || arr.length <= 1) return arr;

        // copy the original array to a new one
        int[] result = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            result[i] = arr[i];
        }

        // start from the second last element of the new array
        int index = arr.length - 1;
        while (index >= 0 && index + 1 < arr.length) {
            // when there is zero in the original array and not yet duplicated
            if (result[index] == 0 && result[index]!= arr[index]) {
                // move all elements after this position forward by two steps
                System.arraycopy(arr, index, arr, index+2, arr.length-index-2);
                // set the current position as well as next position with zero
                arr[index] = 0;
                arr[index+1] = 0;
                // decrease the index since we have moved the tail part of the array
                index -= 2;
            } else if (result[index]!= 0) {
                // no need to do anything when it's not zero or already duplicated
                index--;
            }
        }

        return arr;
    }
}


###########################################################
Result:
solution: [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3779527559055118

cat_success_cnt: 10

cat_success_rate: 0.37037037037037035

