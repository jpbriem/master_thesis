
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0]
output: [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0]

Example_2:
input: [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0]

Example_3:
input: [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]
*/

public class Solution {
    public int[] Fill(int[] nums) {
        if (nums == null || nums.Length < 2) return nums;

        for (int i = 0; i < nums.Length - 1; i++) {
            if (nums[i]!= 0 && nums[i + 1] == 0) {
                int j = i + 1;
                while (j < nums.Length && nums[j] == 0) j++;
                if (j >= nums.Length) break;
                else {
                    int k = i + 1;
                    while (k <= j) {
                        nums[k++] = nums[i];
                    }
                }
            }
        }

        return nums;
    }
}


###########################################################
Result:
solution: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.36879432624113473

cat_success_cnt: 14

cat_success_rate: 0.34146341463414637

