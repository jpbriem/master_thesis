
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0]
output: [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0]

Example_2:
input: [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0]
output: [0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0]

Example_3:
input: [2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]
output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0]

Test case:
input: [7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0]
*/

public class Solution {
    public int[] fill(int[] input) {
        if (input == null || input.length < 2) return input;
        int start = -1, end = -1;
        for (int i = 0; i < input.length; ++i) {
            if (start == -1 && input[i]!= 0) {
                start = i;
                end = i;
            } else if (input[i]!= 0) {
                end = i;
            } else if (start!= -1 && input[i] == 0) {
                while (++i <= end && input[i] == 0);
                --i;
                end = i;
            }
        }
        if (start == -1) return input;
        int val = input[start];
        for (int i = start; i <= end; ++i) input[i] = val;
        int left = start > 0? start - 1 : 0;
        int right = end + 1 < input.length? end + 1 : input.length - 1;
        while (left >= 0 && input[left--] == 0) input[left+1] = val;
        while (right < input.length && input[right++] == 0) input[right-1] = val;
        return input;
    }
}


###########################################################
Result:
solution: [7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.37209302325581395

cat_success_cnt: 10

cat_success_rate: 0.3448275862068966

