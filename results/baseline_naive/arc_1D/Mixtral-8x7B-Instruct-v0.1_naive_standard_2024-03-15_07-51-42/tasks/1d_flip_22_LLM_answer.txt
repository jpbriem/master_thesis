
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 6, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 7, 7, 7, 7, 6, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [2, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 1, 1, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 5, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 6, 6, 6, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 7, 0, 0]
*/

public class Solution {
    public int[] Reverse(int[] nums) {
        if (nums == null || nums.Length <= 1) return nums;

        for (int i = 0; i < nums.Length / 2; i++) {
            var temp = nums[i];
            nums[i] = nums[nums.Length - 1 - i];
            nums[nums.Length - 1 - i] = temp;
        }

        int start = 0;
        while (start < nums.Length && nums[start] == 0) start++;

        int end = nums.Length - 1;
        while (end > start && nums[end] == 0) end--;

        while (start < end) {
            if (nums[start]!= nums[end]) {
                var temp = nums[start];
                nums[start] = nums[end];
                nums[end] = temp;
            }

            start++;
            end--;
        }

        return nums;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 7, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.42168674698795183

cat_success_cnt: 13

cat_success_rate: 0.8125

