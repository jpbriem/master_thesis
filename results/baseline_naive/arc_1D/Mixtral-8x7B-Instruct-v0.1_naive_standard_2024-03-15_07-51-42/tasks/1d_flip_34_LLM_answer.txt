
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 2, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 6, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0]
output: [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0]

Example_3:
input: [0, 0, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 8, 8, 8, 7, 0, 0, 0, 0, 0, 0, 0]
*/

public class Solution {
    public int[] Reverse(int[] nums) {
        if (nums == null || nums.Length <= 1) return nums;

        var left = 0;
        var right = nums.Length - 1;

        while (left < right) {
            // move from the end to find first non-zero number
            while (right > left && nums[right] == 0) right--;

            // move from the start to find last zero number
            while (left < right && nums[left]!= 0) left++;

            // swap numbers
            if (left < right) {
                var temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
            }
        }

        return nums;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 8, 8, 8, 7, 0, 0, 0, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.43575418994413406

cat_success_cnt: 21

cat_success_rate: 0.7241379310344828

