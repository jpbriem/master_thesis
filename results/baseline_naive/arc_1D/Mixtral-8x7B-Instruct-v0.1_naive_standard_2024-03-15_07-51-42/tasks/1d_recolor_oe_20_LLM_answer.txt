
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 9, 9, 9, 9, 0, 0, 9, 9, 9, 0, 9, 9, 0, 0, 9, 0, 0, 0, 9, 9, 9, 9, 9, 0]
output: [0, 0, 3, 3, 3, 3, 0, 0, 6, 6, 6, 0, 3, 3, 0, 0, 6, 0, 0, 0, 6, 6, 6, 6, 6, 0]

Example_2:
input: [0, 0, 0, 9, 9, 9, 0, 9, 9, 0, 0, 0, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0]
output: [0, 0, 0, 6, 6, 6, 0, 3, 3, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0]

Example_3:
input: [0, 0, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0]
output: [0, 0, 3, 3, 0, 6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0]

Test case:
input: [0, 9, 9, 9, 9, 0, 9, 0, 0, 0, 9, 9, 9, 0, 0, 0, 9, 9, 9, 0, 0, 0, 9, 9, 9, 9]

###########################################################
Sample Outputs:
output: [0, 6, 6, 6, 6, 0, 6, 0, 0, 0, 6, 6, 6, 0, 0, 0, 6, 6, 6, 0, 0, 0, 6, 6, 6, 6]
*/

public class Solution {
    public int[] getMaxMatrix(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return new int[]{};
        int m = matrix.length;
        int n = matrix[0].length;
        int maxSum = Integer.MIN_VALUE;
        int left = -1, right = -1, top = -1, bottom = -1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] > 0) {
                    int sum = helper(matrix, i, j);
                    if (sum > maxSum) {
                        maxSum = sum;
                        left = j;
                        right = j + sum - 1;
                        top = i;
                        bottom = i + sum - 1;
                    }
                }
            }
        }
        int[] res = new int[maxSum];
        for (int i = top; i <= bottom; i++) {
            System.arraycopy(matrix[i], left, res, 0, right - left + 1);
        }
        return res;
    }

    private int helper(int[][] matrix, int x, int y) {
        int count = 0;
        while (x >= 0 && y >= 0 && x < matrix.length && y < matrix[0].length && matrix[x][y]!= 0) {
            count += matrix[x][y];
            matrix[x][y]--;
            x++;
            y++;
        }
        return count;
    }
}


###########################################################
Result:
solution: [0, 3, 3, 3, 3, 0, 6, 0, 0, 0, 6, 6, 6, 0, 0, 0, 6, 6, 6, 0, 0, 0, 3, 3, 3, 3]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2592137592137592

cat_success_cnt: 5

cat_success_rate: 0.35714285714285715

