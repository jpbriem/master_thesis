
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 2, 4, 4, 4, 4, 4, 0, 0, 0, 0]
output: [0, 0, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 0, 0]
output: [0, 0, 0, 0, 0, 0, 7, 7, 7, 4, 0, 0]

Example_3:
input: [0, 0, 0, 5, 7, 7, 7, 7, 0, 0, 0, 0]
output: [0, 0, 0, 7, 7, 7, 7, 5, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 1, 2, 2, 2, 2, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0]
*/

public class Solution {
    public int[] Reverse(int[] nums) {
        if (nums == null || nums.Length <= 1) return nums;

        var left = 0;
        var right = nums.Length - 1;

        while (left < right) {
            // move the pointer to the first non-zero number from left side
            while (left < right && nums[left] == 0) ++left;
            // move the pointer to the last non-zero number from right side
            while (right > left && nums[right] == 0) --right;

            if (left >= right) break;

            Swap(ref nums[left], ref nums[right]);
            ++left;
            --right;
        }

        return nums;
    }

    private void Swap<T>(ref T a, ref T b) {
        var temp = a;
        a = b;
        b = temp;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.4444444444444444

cat_success_cnt: 27

cat_success_rate: 0.6923076923076923

