
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 9]
output: [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 9, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0, 0]

Test case:
input: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 9, 0]

###########################################################
Sample Outputs:
output: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 0]
*/

public class Solution {
    public int[] fill(int[] A) {
        if (A == null || A.length < 3) return A;
        // find the first non-zero element from left and right side of array
        int l = -1, r = -1;
        for (int i = 0; i < A.length && A[i] == 0; ++i) {}
        l = i;
        for (int i = A.length - 1; i >= 0 && A[i] == 0; --i) {}
        r = i;
        // copy elements between two non-zero elements to new array
        int len = r - l + 1;
        int[] B = new int[len];
        System.arraycopy(A, l, B, 0, len);
        // modify original array
        if (l > 0) {
            Arrays.fill(A, 0, l, B[0]);
        }
        if (r < A.length - 1) {
            Arrays.fill(A, r + 1, A.length, B[B.length - 1]);
        }
        return A;
    }
}


###########################################################
Result:
solution: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.2576112412177986

cat_success_cnt: 3

cat_success_rate: 0.75

