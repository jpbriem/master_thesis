
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 8, 8, 2, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 0, 0, 0, 0, 0]
output: [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0]

Example_2:
input: [0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 6, 9, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0]
output: [0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 5, 2, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0]
*/

public class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        if (obstacles == null || obstacles.length == 0) return new int[0];
        List<Integer> list = new ArrayList<>();
        for (int i : obstacles) {
            // binary search to find the first index that is greater than or equal to current element
            int idx = Collections.binarySearch(list, i);
            if (idx < 0) idx = -(idx + 1);
            if (idx >= list.size()) list.add(i);
            else list.set(idx, i);
        }
        int[] res = new int[obstacles.length];
        for (int i = 0; i < list.size(); i++) res[list.get(i)] = i + 1;
        return res;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3838383838383838

cat_success_cnt: 17

cat_success_rate: 0.3469387755102041

