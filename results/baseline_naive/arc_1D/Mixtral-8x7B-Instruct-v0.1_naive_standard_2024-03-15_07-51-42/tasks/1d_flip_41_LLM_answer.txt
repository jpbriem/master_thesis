
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [1, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [5, 5, 5, 5, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 8, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 8, 8, 8, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 5, 0, 0, 0, 0, 0]
*/

public class Solution {
    public int[] Reverse(int[] arr) {
        if (arr == null || arr.Length <= 1) return arr;

        for (int i = 0; i < arr.Length / 2; i++) {
            var temp = arr[i];
            arr[i] = arr[arr.Length - 1 - i];
            arr[arr.Length - 1 - i] = temp;
        }

        int start = 0;
        while (start < arr.Length && arr[start]!= 1) start++;

        int end = arr.Length - 1;
        while (end >= 0 && arr[end]!= 1) end--;

        // no need to swap when the first and last element are both 1
        if (start > end) return arr;

        bool isFirstOneFound = false;
        for (int i = start + 1; i <= end; i++) {
            if (!isFirstOneFound && arr[i] == 1) {
                isFirstOneFound = true;
                continue;
            }

            if (isFirstOneFound && arr[i]!= 1) {
                var temp = arr[i];
                arr[i] = arr[start + 1];
                arr[start + 1] = temp;
                start++;
            }
        }

        return arr;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 5, 0, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.44385026737967914

cat_success_cnt: 26

cat_success_rate: 0.7027027027027027

