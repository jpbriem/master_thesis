
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9]
output: [0, 0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2]

Example_2:
input: [0, 0, 9, 9, 0, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 0, 0, 9]
output: [0, 0, 9, 9, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 9]

Example_3:
input: [0, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9]
output: [0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 9, 9, 9]

Test case:
input: [0, 9, 9, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 9, 9, 0, 0]

###########################################################
Sample Outputs:
output: [0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0]
*/

public class Solution {
    public int[] getMaximumXor(int num, int[] arr) {
        // write your code here
        if (num == 0 || arr == null || arr.length == 0) {
            return new int[0];
        }

        int max = Integer.MIN_VALUE;
        int res = 0;
        for (int i = num - 1; i >= 0; --i) {
            res <<= 1;
            if ((arr[i] & 1) == 1) {
                res |= 1;
            }
            max = Math.max(max, res);
        }

        int[] result = new int[num];
        for (int i = num - 1; i >= 0; --i) {
            result[i] = max ^ arr[i];
            if ((arr[i] & 1) == 1) {
                max--;
            } else {
                max++;
            }
        }

        return result;
    }
}


###########################################################
Result:
solution: [0, 9, 9, 9, 9, 9, 9, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27715877437325903

cat_success_cnt: 3

cat_success_rate: 0.16666666666666666

