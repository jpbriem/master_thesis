
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 0, 9]
output: [0, 0, 5, 5, 5, 5, 5, 0, 9, 9, 9, 0, 0, 0, 5, 5, 5, 5, 5, 0, 9]

Example_2:
input: [0, 0, 0, 9, 9, 9, 0, 0, 9, 0, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 0]
output: [0, 0, 0, 9, 9, 9, 0, 0, 9, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 0]

Example_3:
input: [0, 0, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 9, 9, 0]
output: [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 9, 9, 9, 9, 9, 9, 0, 0, 9, 9, 0]

Test case:
input: [0, 9, 0, 0, 0, 9, 9, 0, 0, 0, 9, 9, 9, 9, 0, 0, 0, 9, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 5, 0, 0, 0, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 0]
*/

public class Solution {
    public int[] duplicateZeros(int[] arr) {
        if (arr == null || arr.length < 2) return arr;

        // keep track of the number of zeros to be duplicated
        int count = 0;

        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] == 0) {
                count++;
            }
        }

        // move all elements forward by 'count' positions
        for (int i = arr.length - 1; i >= count; i--) {
            arr[i + count] = arr[i];
        }

        // fill in the new zeroes
        for (int i = 0; i < count; i++) {
            arr[i] = 0;
        }

        // copy over the last element that was moved
        if (count > 0) {
            arr[arr.length - count] = arr[arr.length - 1];
        }

        return arr;
    }
}


###########################################################
Result:
solution: [0, 9, 0, 0, 0, 9, 9, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 9, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.27309236947791166

cat_success_cnt: 8

cat_success_rate: 0.1702127659574468

