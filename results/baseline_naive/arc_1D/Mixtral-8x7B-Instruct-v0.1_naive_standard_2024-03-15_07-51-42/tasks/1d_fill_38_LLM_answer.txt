
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0]

Example_2:
input: [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0]
output: [0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0]
*/

public class Solution {
    public int[] fill(int[] input) {
        if (input == null || input.length < 2) return input;
        int start = -1, end = -1;
        for (int i = 0; i < input.length; ++i) {
            if (input[i]!= 0 && start == -1) {
                start = i;
            } else if (input[i] == 0 && start > -1) {
                end = i;
                break;
            }
        }
        if (start == -1) return input;
        while (end + 1 < input.length && input[++end] == 0);
        for (int i = start; i <= end; ++i) {
            input[i] = 1;
        }
        for (int i = 0; i < input.length; ++i) {
            if (input[i] == 1) {
                input[i] = 0;
            } else {
                input[i] = 1;
            }
        }
        return input;
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.3684210526315789

cat_success_cnt: 11

cat_success_rate: 0.3333333333333333

