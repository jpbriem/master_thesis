
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]
output: [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0]
*/

public class Solution {
    public int[] Pancake(int[] arr) {
        if (arr == null || arr.Length <= 1) return arr;

        for (int i = 0; i < arr.Length - 1; i++) {
            // find the first non-zero element from right to left
            while (i + 1 < arr.Length && arr[i + 1] == 0) i++;

            // flip all elements between index 0 and current position of non-zero element
            Flip(arr, 0, i);

            // check whether we need to flip again
            bool isNeedFlipAgain = true;
            for (int j = 0; j < i; j++) {
                if (arr[j]!= 0) {
                    isNeedFlipAgain = false;
                    break;
                }
            }
            if (!isNeedFlipAgain) continue;

            // flip all elements between index i and end of array
            Flip(arr, i, arr.Length - 1);
        }

        return arr;
    }

    private void Flip(int[] arr, int start, int end) {
        while (start < end) {
            var temp = arr[start];
            arr[start++] = arr[end];
            arr[end--] = temp;
        }
    }
}


###########################################################
Result:
solution: [0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.43478260869565216

cat_success_cnt: 11

cat_success_rate: 0.36666666666666664

