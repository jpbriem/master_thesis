
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3]
output: [0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 2, 2, 2, 2, 2]

Example_2:
input: [0, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0]
output: [0, 3, 3, 3, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0]
output: [0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0]

Test case:
input: [0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0]
*/

public class Solution {
    public int[] solution(int []arr) {
        int cnt = 0;
        for (int i=0;i<arr.length-1;i++) {
            if (arr[i] == arr[i+1]) cnt++;
            else arr[i-cnt] = arr[i];
        }
        return Arrays.copyOfRange(arr, 0, arr.length - cnt);
    }
}


###########################################################
Result:
solution: [0, 3, 3, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2734584450402145

cat_success_cnt: 8

cat_success_rate: 0.17391304347826086

