{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [0, 0, 0, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0]\noutput: [0, 0, 0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 0]\n\nExample_2:\ninput: [0, 0, 0, 4, 4, 4, 0, 9, 0, 0, 0, 0, 0]\noutput: [0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 4, 4, 0]\n\nExample_3:\ninput: [0, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0, 0]\noutput: [0, 0, 0, 0, 0, 9, 0, 1, 1, 1, 0, 0, 0]\n\nTest case:\ninput: [7, 7, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]\n\n###########################################################\nSample Outputs:\noutput: [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]\n*/\n\npublic class MoveZerosToEnd {\n    public static void main(String[] args) {\n        int[] arr = new int[]{0, 0, 0, 1, 1, 1, 0, 9, 0, 0, 0, 0, 0};\n        System.out.println(\"Original Array : \");\n        printArray(arr);\n        moveZeroesToEnd(arr);\n        System.out.println(\"\\nArray after moving zeros to end :\");\n        printArray(arr);\n    }\n\n    private static void moveZeroesToEnd(int[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] == 0 && arr[i + 1]!= 0) {\n                swap(arr, i, findFirstNonZeroIndex(arr, i));\n            }\n        }\n    }\n\n    private static int findFirstNonZeroIndex(int[] arr, int start) {\n        for (int i = start; i < arr.length; i++) {\n            if (arr[i]!= 0) return i;\n        }\n        return -1; // should not reach here as there is at least one non-zero element in array\n    }\n\n    private static void swap(int[] arr, int index1, int index2) {\n        int temp = arr[index1];\n        arr[index1] = arr[index2];\n        arr[index2] = temp;\n    }\n\n    private static void printArray(int[] arr) {\n        for (int value : arr) {\n            System.out.print(value + \" \");\n        }\n    }\n}"
        }
    ],
    "idx": 290,
    "task": "1d_mirror_45",
    "category": "1d_mirror",
    "ys": [
        "1d_mirror_45.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[0, 0, 0, 0, 9, 0, 7, 7, 7, 0, 0, 0, 0]",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.4054982817869416,
        "cat_success_cnt": 8,
        "cat_success_rate": 0.1951219512195122
    },
    "usage_so_far": {
        "completion_tokens": 118232,
        "prompt_tokens": 163374,
        "cost": null
    }
}