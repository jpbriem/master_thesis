
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 7, 7, 0, 7, 7, 7, 0, 0, 0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 7, 7]
output: [0, 0, 5, 5, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 5, 5]

Example_2:
input: [0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 7, 0, 0]
output: [0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 1, 0, 0]

Example_3:
input: [0, 0, 7, 7, 7, 0, 7, 7, 0, 0, 7, 0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0]
output: [0, 0, 2, 2, 2, 0, 5, 5, 0, 0, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0]

Test case:
input: [0, 7, 7, 7, 0, 7, 7, 0, 0, 0, 7, 0, 0, 0, 7, 7, 0, 7, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 1, 2, 2, 0, 5, 5, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0]
*/

#include <iostream>
using namespace std;

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Function to find the number of islands in a grid.
void solve(int arr[], int n) {
    // Initialize all elements as not visited.
    bool vis[n];
    fill(vis, vis + n, false);

    // Traverse through each element and mark its adjacent non-zero elements as visited.
    for (int i = 0; i < n; i++) {
        if (!vis[i]) {
            if (arr[i]!= 0) {
                int count = 0;
                while (i < n && arr[i]!= 0) {
                    vis[i] = true;
                    count++;
                    i += 1;
                }
                i -= 1;
                int j = i - 1;
                while (j >= 0 && arr[j] == 0) {
                    vis[j] = true;
                    j--;
                }
                j++;
                int k = i + 1;
                while (k < n && arr[k] == 0) {
                    vis[k] = true;
                    k++;
                }
                k--;
                int len = max(max(count, i - j), k - i);
                int mid = min((i - j) / 2, (k - i) / 2);
                int start = j + mid;
                int end = k - mid;
                for (int l = start; l <= end; l++) {
                    arr[l] = len;
                }
            } else {
                int zeroCount = 0;
                while (i < n && arr[i] == 0) {
                    zeroCount++;
                    i++;
                }
                i -= 1;
                int j = i - 1;
                while (j >= 0 && arr[j]!= 0) {
                    j--;
                }
                j++;
                int k = i + 1;
                while (k < n && arr[k]!= 0) {
                    k++;
                }
                k--;
                int leftLen = i - j;
                int rightLen = k - i;
                int totalLen = leftLen + zeroCount + rightLen;
                int mid = zeroCount / 2;
                int start = j + mid;
                int end = k - mid;
                for (int l = start; l <= end; l++) {
                    arr[l] = totalLen;
                }
            }
        }
    }
}

int main() {
    int arr[] = {0, 7, 7, 7, 0, 7, 7, 0, 0, 0, 7, 0, 0, 0, 7, 7, 0, 7, 0, 0, 0, 0};
    int n = sizeof(arr) / sizeof(arr[0]);
    solve(arr, n);
    printArray(arr, n);
    return 0;
}


###########################################################
Result:
solution: [0, 2, 2, 2, 0, 5, 5, 0, 0, 0, 1, 0, 0, 0, 5, 5, 0, 1, 0, 0, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.26597131681877445

cat_success_cnt: 0

cat_success_rate: 0.0

