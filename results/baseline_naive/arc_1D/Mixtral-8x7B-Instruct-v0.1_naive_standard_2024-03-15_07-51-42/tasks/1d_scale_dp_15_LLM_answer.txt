
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [1, 1, 1, 1, 0, 0, 7, 0, 0, 0, 0, 0]
output: [1, 1, 1, 1, 1, 1, 7, 0, 0, 0, 0, 0]

Example_2:
input: [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 7, 0]
output: [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 0]

Example_3:
input: [0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 7]
output: [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 7]

Test case:
input: [4, 4, 4, 4, 4, 0, 0, 7, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [4, 4, 4, 4, 4, 4, 4, 7, 0, 0, 0, 0]
*/

public class Solution {
    public int[] MoveZeroes(int[] nums) {
        if (nums == null || nums.Length <= 1) return nums;

        var writeIndex = 0;
        for (var i = 0; i < nums.Length; i++) {
            if (nums[i]!= 0) {
                nums[writeIndex++] = nums[i];
            }
        }

        while (writeIndex < nums.Length) {
            nums[writeIndex++] = 0;
        }

        return nums;
    }
}


###########################################################
Result:
solution: [4, 4, 4, 4, 4, 4, 4, 7, 0, 0, 0, 0]

success: 1

too_long_prompt: False

tries: 1

success_rate: 0.25874125874125875

cat_success_cnt: 5

cat_success_rate: 0.625

