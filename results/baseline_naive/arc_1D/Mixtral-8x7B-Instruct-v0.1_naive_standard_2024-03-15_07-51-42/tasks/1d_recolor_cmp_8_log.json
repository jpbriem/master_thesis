{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]\noutput: [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0]\n\nExample_2:\ninput: [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1]\noutput: [0, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1]\n\nExample_3:\ninput: [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]\noutput: [0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]\n\nTest case:\ninput: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0]\n\n###########################################################\nSample Outputs:\noutput: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 0, 3, 3, 3, 0, 0, 0, 0]\n*/\n\npublic class Solution {\n    public int[] countSmaller(int[] nums) {\n        if (nums == null || nums.length == 0) return new int[0];\n        int len = nums.length;\n        int[] res = new int[len];\n        TreeNode root = buildTree(nums);\n        for (int i = len - 1; i >= 0; i--) {\n            res[i] = getRank(root, nums[i], Integer.MIN_VALUE, Integer.MAX_VALUE);\n            update(root, nums[i]);\n        }\n        return res;\n    }\n\n    private void update(TreeNode node, int val) {\n        if (node == null) return;\n        if (val < node.val) swap(node.left, node.right);\n        if (node.val == val) {\n            node.count++;\n        } else {\n            node.lessThanLeft = update(node.lessThanLeft, val);\n            node.moreThanRight = update(node.moreThanRight, val);\n            node.val = val;\n            node.count = node.lessThanLeft.count + node.moreThanRight.count + 1;\n        }\n    }\n\n    private int getRank(TreeNode node, int target, int low, int high) {\n        if (low > target || high < target) return 0;\n        if (target <= low && high <= target) return node.lessThanLeft.count + node.count;\n        return getRank(node.lessThanLeft, target, low, Math.min(high, node.val)) +\n               getRank(node.moreThanRight, target, Math.max(low, node.val), high);\n    }\n\n    private TreeNode buildTree(int[] arr) {\n        List<Integer> list = new ArrayList<>();\n        for (int n : arr) list.add(n);\n        Collections.sort(list);\n        return buildTreeHelper(list, 0, list.size() - 1);\n    }\n\n    private TreeNode buildTreeHelper(List<Integer> list, int left, int right) {\n        if (left > right) return null;\n        int mid = left + (right - left) / 2;\n        TreeNode node = new TreeNode();\n        node.val = list.get(mid);\n        node.lessThanLeft = buildTreeHelper(list, left, mid - 1);\n        node.moreThanRight = buildTreeHelper(list, mid + 1, right);\n        return node;\n    }\n\n    private void swap(TreeNode a, TreeNode b) {\n        if (a!= null && b!= null) {\n            int tmp = a.val;\n            a.val = b.val;\n            b.val = tmp;\n        }\n    }\n}\n\nclass TreeNode {\n    int val;\n    int count;\n    TreeNode lessThanLeft;\n    TreeNode moreThanRight;\n\n    TreeNode() {}\n\n    TreeNode(int _val) {\n        this.val = _val;\n        this.count = 1;\n    }\n}"
        }
    ],
    "idx": 748,
    "task": "1d_recolor_cmp_8",
    "category": "1d_recolor_cmp",
    "ys": [
        "1d_recolor_cmp_8.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0]",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.27236315086782376,
        "cat_success_cnt": 8,
        "cat_success_rate": 0.16326530612244897
    },
    "usage_so_far": {
        "completion_tokens": 406689,
        "prompt_tokens": 446278,
        "cost": null
    }
}