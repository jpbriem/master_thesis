
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [0, 0, 0, 3, 3, 0, 3, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0]
output: [0, 0, 0, 4, 4, 0, 8, 8, 8, 0, 0, 0, 6, 0, 0, 6, 0, 0]

Example_2:
input: [0, 0, 3, 3, 0, 3, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0]
output: [0, 0, 4, 4, 0, 6, 0, 0, 8, 8, 8, 0, 0, 0, 4, 4, 0, 0]

Example_3:
input: [0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 3, 0, 0]
output: [0, 0, 8, 8, 8, 0, 0, 0, 4, 4, 0, 0, 0, 6, 0, 6, 0, 0]

Test case:
input: [0, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 0, 3, 3, 0, 0]

###########################################################
Sample Outputs:
output: [0, 0, 0, 4, 0, 0, 7, 7, 0, 0, 7, 7, 9, 0, 9, 9, 0, 0]
*/

public class Solution {
    public int[] solution(int []arr) {
        int len = arr.length;
        if (len == 0 || len == 1) return arr;

        int sum = 0;
        for (int i=0; i<len-1; i++) {
            if (arr[i]!= 0 && arr[i+1]!= 0) {
                sum += arr[i];
            } else {
                if (sum > 0) System.arraycopy(new int[]{sum}, 0, arr, i+1-sum, sum);
                sum = 0;
            }
        }

        // last one
        if (arr[len-1]!= 0 && arr[len-2]!= 0) {
            sum += arr[len-1];
        }
        if (sum > 0) System.arraycopy(new int[]{sum}, 0, arr, len-sum, sum);

        return Arrays.copyOfRange(arr, 0, len - sum + 1);
    }
}


###########################################################
Result:
solution: [0, 0, 0, 6, 0, 0, 4, 4, 0, 0, 8, 8, 8, 0, 4, 4, 0, 0]

success: 0

too_long_prompt: False

tries: 1

success_rate: 0.2575

cat_success_cnt: 2

cat_success_rate: 0.04

