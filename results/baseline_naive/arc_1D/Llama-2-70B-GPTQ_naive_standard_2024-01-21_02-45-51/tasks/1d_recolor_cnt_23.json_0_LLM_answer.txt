Input token: 523
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 7, 7, 0, 7, 7, 7, 0, 0, 0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 7, 7]
output: [0, 0, 5, 5, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 5, 5]

Example_2:
input: [0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 7, 0, 0]
output: [0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 5, 5, 0, 0, 0, 5, 5, 0, 1, 0, 0]

Example_3:
input: [0, 0, 7, 7, 7, 0, 7, 7, 0, 0, 7, 0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0]
output: [0, 0, 2, 2, 2, 0, 5, 5, 0, 0, 1, 0, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0]

Test case:
input: [0, 7, 7, 7, 0, 7, 7, 0, 0, 0, 7, 0, 0, 0, 7, 7, 0, 7, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 1, 1, 1, 0, 2, 2, 0, 0, 0, 5, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0]
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def get_max_depth(root):
    if root is None: return 0
    else:
        ld = get_max_depth(root.left)
        rd = get_max_depth(root.right)
        return max(ld,rd)+1

def get_min_depth(root):
    if root is None: return float('inf')
    else:
        ld = get_min_depth(root.left)
        rd = get_min_depth(root.right)
        return min(ld,rd)-1

def get_height(root):
    return abs(get_max_depth(root)-get_min_depth(root))

def get_balance(root):
    return get_max_depth(root)-get_min_depth(root)

def get_levels(root):
    levels = []
    queue = [(root, 1)]
    while len(queue)>0:
        node, level = queue[0]
        queue = queue[1:]
        if node is not None:
            levels.append([node.val]*level)
            queue += [(node.left, level+1), (node.right, level+1)]
    return levels

def get_path(root, path):
    if root is None or root.val == path[-1]:
        return True
    elif root.val > path[-1]:
        return False
    else:
        return get_path(root.left, path) or get_path(root.right, path)

def get_paths(root, paths):
    if root is None: return
    if root.val in paths:
        return True
    else:
        return get_paths(root.left, paths) or get_paths(root.right, paths)

def get_all_leaves(root):
    leaves = set()
    queue = [(root, 1)]
    while len(queue)>0:
        node, level = queue[0]
        queue = queue[1:]
        if node is not None:
            if level==1:
                leaves.add(node.val)
            queue += [(node.left, level-1), (node.right, level-1)]
    return list(sorted(list(leaves)))

def get_leaf_nodes(root):
    leaf_nodes = []
    queue = [(root, 1)]
    while len(queue)>0:
        node, level = queue[0]
        queue = queue[1:]
        if node is not None:
            if level==1:
                leaf_nodes.append((node.val, node))
            queue += [(node.left, level-1), (node.right, level-1)]
    return leaf_nodes

def get_parent_child_pairs(root):
    parent_child_pairs = []
    queue = [(root, 1)]
    while len(queue)>0:
        node, level = queue[0]
        queue = queue[1:]
        if node is not None:
            if level>1:
                parent_child_pairs.append((node.val, node.left.val, node.right.val))
            queue += [(node.left, level-1), (node.right, level-1)]
    return parent_child_pairs

def get_ancestor_descendant_pairs(root):
    ancestor_descendant_pairs = []
    queue = [(root, 1)]
    while len(queue)>0:
        node, level = queue[0]
        queue = queue[1:]
        if node is not None:
            if level>1:
                ancestor_descendant_pairs.append((node.val, node.left.val, node.right.val))
            queue += [(node
################################################################

Solution:
[0, 2, 2, 2, 0, 5, 5, 0, 0, 0, 1, 0, 0, 0, 5, 5, 0, 1, 0, 0, 0, 0]

