Input token: 628
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 4, 0, 6, 6, 0, 0, 3, 3, 3, 0, 0, 0, 6, 6, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 8, 8, 8, 0, 0, 8, 0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0]
output: [0, 0, 3, 3, 3, 0, 0, 4, 0, 0, 0, 6, 6, 0, 0, 4, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 3, 3, 3, 0, 6, 6, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 3, 0, 0, 3, 3, 3, 0, 0, 5, 5, 0, 0, 0, 7, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def minMoves(self, nums: List[int]) -> int:
        """
        思路：滑动窗口，每次移动一个元素到最后的位置。
            注意：当前元素不能超过最大值，否则会出现无法解决的情形（例如：[0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], 输入错误）
            O(n) time complexity. O(1) space complexity.
        :param nums:
        :return:
        """
        if not nums or len(nums) == 1:
            return 0
        max_value = max(nums)
        moves = 0
        for i in range(len(nums)):
            while (i + 1 < len(nums)) and (max_value <= nums[i+1]):
                moves += 1
                nums[i], nums[i+1] = nums[i+1], nums[i]
            # print('after move', i, ': ', nums)
        return moves


if __name__ == "__main__":
    solution = Solution()
    assert solution.minMoves([0, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 0, 0, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]) == 9
    assert solution.minMoves([0, 0, 8, 8, 8, 0, 0, 8, 0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0]) == 10
    assert solution.minMoves([0, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 11
    assert solution.minMoves([0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]) == 11
    assert solution.minMoves([0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]) == 11
    assert solution.minMoves([0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 
################################################################

Solution:
[0, 0, 4, 0, 0, 3, 3, 3, 0, 0, 6, 6, 0, 0, 0, 4, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0]

