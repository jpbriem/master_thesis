Input token: 628
Output token: 1024
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0]
output: [0, 0, 0, 9, 9, 9, 9, 9, 0, 0, 8, 8, 0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 8, 8, 8, 0, 0]

Example_2:
input: [0, 8, 8, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0]
output: [0, 8, 8, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 9, 9, 9, 9, 9, 9, 9, 0]

Example_3:
input: [0, 0, 8, 8, 8, 8, 0, 0, 0, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0]
output: [0, 0, 9, 9, 9, 9, 0, 0, 0, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 8, 0, 0, 8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 8, 0, 0, 9, 9, 0, 8, 0, 8, 8, 8, 8, 8, 0, 0, 9, 9, 8, 8, 8, 8, 8, 0, 0, 0, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def transform(self, nums: List[int]) -> List[int]:
        """
        思路：双端队列，从头和尾循环执行相同的操作。
            - 如果当前元素为0，则将其变成最后一个非0元素的值；
            - 否则，将其变成该元素之前的第一个非0元素的值。
            注意：这里需要特判处理边界情况（头、尾）。
                    因此，我们使用了两个指针，分别指向头部和尾部。
                    每次迭代时，都会对应更新指针位置。
        :param nums:
        :return:
        """
        # 定义双端队列
        head = tail = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                # 如果当前元素为0，则将其变成最后一个非0元素的值
                nums[head], nums[tail] = nums[tail], 0
                head += 1
                tail -= 1
            else:
                # 否则，将其变成该元素之前的第一个非0元素的值
                nums[head], nums[i] = nums[i], nums[head]
                head += 1
        return nums


if __name__ == '__main__':
    solution = Solution()
    assert solution.transform([0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0]) == \
               [0, 0, 0, 9, 9, 9, 9, 9, 0, 0, 8, 8, 0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 8, 8, 8, 0, 0]
    assert solution.transform([0, 8, 8, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0]) == \
               [0, 8, 8, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 9, 9, 9, 9, 9, 9, 9, 0]
    assert solution.transform([0, 0, 8, 8, 8, 8, 0, 0, 0, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0]) == \
               [0, 0, 9, 9, 9, 9, 0, 0, 0, 8, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0]

################################################################

Solution:
[0, 8, 0, 0, 8, 8, 0, 8, 0, 9, 9, 9, 9, 9, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0]

