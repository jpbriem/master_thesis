Input token: 313
Output token: 489
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0]

Example_2:
input: [0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0]
output: [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0]

Example_3:
input: [4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0]
output: [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0]

Test case:
input: [0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

expected output: [0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0]
"""

# Solution
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        # initialize variables
        i = j = k = 0
        n = len(nums)
        
        while (i < n - 1 or j < n - 1 or k < n - 1):
            if i == j == k:
                i += 1
                j += 1
                k += 1
            
            elif i > j >= k:
                nums[j], nums[k] = nums[k], nums[j]
                
                i -= 1
                j += 1
                k += 1
            
            else:
                nums[i], nums[j] = nums[j], nums[i]
                
                i += 1
                j -= 1
                k -= 1
    
    def main():
        print("Running " + __name__ + "...")
        solution = Solution()
        for testcase in TESTCASES:
            print("\n\t*** Test Case No. ", testcase['testCaseNo'])
            print("\tInput:\n", testcase["input"])
            solution.wiggleSort(testcase["input"])
            print("\tOutput:\n", testcase["input"])
            print("\tExpected Output:\n", testcase["expectedOutput"])
            assert sorted(testcase["input"]) == sorted(testcase["expectedOutput"]), \
                "\n\tActual Output does not match Expected Output.\n" \
                "\tGot: {}\n\tExpected: {}".format(testcase["input"], testcase["expectedOutput"])

if __name__ == '__main__':
    main()
################################################################

Solution:
[0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0]

