Input token: 586
Output token: 394
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0]
output: [0, 5, 5, 5, 5, 5, 5, 0, 0, 3, 3, 3, 0, 0, 0, 5, 5, 5, 5, 0, 3, 0, 0, 0, 0]

Example_2:
input: [0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0]
output: [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0]

Example_3:
input: [0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 4, 0]
output: [0, 0, 5, 5, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0]

Test case:
input: [0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4]
################################################################

LLM answer:

expected output: [0, 0, 5, 5, 5, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 3, 0, 5, 0, 0, 3, 3, 3, 3, 3]
"""
#!/bin/python3

import math
import os
import random
import re
import sys
class Solution(object):
    def transformToHighestMountain(self, A):
        """
        :type A: List[int]
        :rtype: List[int]
        """
        
        # Write your code here
        n = len(A)
        if not A or all(x == 0 for x in A): return []
        ans = [max(A)] * (n - 1) + [min(A)]
        for i in range(len(ans)):
            if ans[i] > 0:
                ans[i+1:] = sorted([ans[i], min(ans[:i])])
        return ans
                    
if __name__ == "__main__":
    fptr = open(os.environ["OUTPUT_PATH"], 'w')

    t = int(input())

    for t_itr in range(t):
        a_count = int(input().strip())

        a = list(map(int, input().split()))

        result = Solution().transformToHighestMountain(a)

        fptr.write(' '.join(str(item) for item in result))
        fptr.write('\n')

    fptr.close()
################################################################

Solution:
[0, 0, 3, 3, 3, 0, 0, 0, 5, 5, 0, 0, 0, 3, 3, 3, 0, 3, 0, 0, 3, 3, 3, 3, 3]

