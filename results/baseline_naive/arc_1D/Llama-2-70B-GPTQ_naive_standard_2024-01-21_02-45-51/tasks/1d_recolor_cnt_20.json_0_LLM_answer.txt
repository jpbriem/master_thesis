Input token: 481
Output token: 333
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 8, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0]
output: [0, 0, 6, 0, 1, 1, 1, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0]

Example_2:
input: [0, 8, 0, 0, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8, 0, 0, 8, 8, 8]
output: [0, 6, 0, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 1, 0, 0, 1, 1, 1]

Example_3:
input: [0, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0, 8, 0, 0, 8, 8, 8, 0, 0, 0]
output: [0, 0, 0, 1, 1, 1, 0, 2, 2, 0, 0, 6, 0, 0, 1, 1, 1, 0, 0, 0]

Test case:
input: [0, 0, 0, 8, 8, 8, 0, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 8, 0, 0]
################################################################

LLM answer:

expected output: [0, 0, 0, 1, 1, 1, 0, 2, 0, 5, 5, 0, 0, 4, 4, 4, 0, 7, 0, 0]
"""

# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if not nums or len(nums) == 0: return 0
        
        maxLen = 0
        stack = []
        for i in range(len(nums)):
            while stack and nums[i] > nums[stack[-1]]:
                stack.pop()
            
            if stack and nums[i] == nums[stack[-1]] + 1:
                stack.append(i)
                
            else:
                while stack and nums[i]!= nums[stack[-1]] + 1:
                    maxLen = max(maxLen, len(stack))
                    stack.pop()
                    
                stack.append(i)
                
        return maxLen
################################################################

Solution:
[0, 0, 0, 1, 1, 1, 0, 6, 0, 2, 2, 0, 0, 1, 1, 1, 0, 6, 0, 0]

