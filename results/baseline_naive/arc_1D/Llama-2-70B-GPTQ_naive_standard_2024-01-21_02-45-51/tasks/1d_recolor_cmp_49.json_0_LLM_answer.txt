Input token: 565
Output token: 391
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0]
output: [0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 2, 0, 7, 7, 7, 7, 0]

Example_2:
input: [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0]
output: [0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 2, 0, 0, 0]

Example_3:
input: [0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2]
output: [0, 7, 7, 7, 7, 7, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 7, 7, 7, 7, 7, 0, 2]

Test case:
input: [0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0]
################################################################

LLM answer:

output: [0, 7, 7, 7, 7, 7, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 7, 7, 0, 0]
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=[], next=[]):
        self.val = val
        self.children = children
        self.next = next

def dfs(node, res):
    if node is None or len(res) == 0: return
    if not node.val:
        res[len(res)-1].append(node)
        return
    for i in range(len(res)):
        if res[i][-1].val > node.val:
            res[i].append(node)
            break
    else:
        res.append([])
        res[-1].append(node)

def bfs(root, res):
    queue = []
    queue.append((root, res))
    while queue:
        curNode, curRes = queue.pop()
        if curNode is None: continue
        if not curNode.val:
            curRes.append(curNode)
            continue
        for child in curNode.children:
            queue.append((child, curRes[:]))

if __name__ == '__main__':
    root = Node('a', [Node('b'), Node('c')], [Node('d'), Node('e')])
    print(bfs(root, []))
################################################################

Solution:
[0, 7, 7, 7, 7, 7, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0]

