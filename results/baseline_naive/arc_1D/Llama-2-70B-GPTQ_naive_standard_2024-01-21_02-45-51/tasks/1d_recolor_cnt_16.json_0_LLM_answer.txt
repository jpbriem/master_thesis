Input token: 670
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 6, 6, 0, 2, 0, 0, 0, 1, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 2, 0, 6, 6, 0, 0, 1, 1, 1, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 5, 5, 0, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 6, 6, 0, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 5, 5, 5, 0, 0, 5, 5, 0, 0, 0, 5, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 2, 2, 2, 0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def transform(self, nums: List[int]) -> List[int]:
        """
        思路：双端队列，左右两个指针分别从头和尾开始向中间移动。
            当前元素为0时，将其变成最近的非0元素；
            当前元素不为0时，将其变成最近的0元素。
            O(n) time complexity.
        """
        if not nums or len(nums) == 1: return nums
        left = right = 0
        for i in range(len(nums)):
            if nums[i]!= 0:
                while left < i - 1 and nums[left] == 0:
                    left += 1
                while right < i + 1 and nums[right] == 0:
                    right += 1
                if left >= i - 1 and right <= i + 1:
                    nums[i] = min(left, right)
                elif left > i - 1:
                    nums[i] = max(left, right)
                else:
                    nums[i] = min(left, right)
            else:
                while left < i - 1 and nums[left]!= 0:
                    left += 1
                while right < i + 1 and nums[right]!= 0:
                    right += 1
                if left >= i - 1 and right <= i + 1:
                    nums[i] = max(left, right)
                elif left > i - 1:
                    nums[i] = min(left, right)
                else:
                    nums[i] = max(left, right)
        return nums


if __name__ == "__main__":
    solution = Solution()
    assert solution.transform([0, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \
           [0, 6, 6, 0, 2, 0, 0, 0, 1, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert solution.transform([0, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \
           [0, 0, 6, 6, 6, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert solution.transform([0, 0, 5, 5, 0, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
################################################################

Solution:
[0, 0, 0, 1, 1, 1, 0, 0, 6, 6, 0, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]

