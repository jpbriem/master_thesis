Input token: 313
Output token: 478
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 1, 1, 1, 0, 0, 3, 0, 0, 0]
output: [0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 0, 0]

Example_2:
input: [0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 3, 0]
output: [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 3, 0]

Example_3:
input: [4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 3]
output: [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 3]

Test case:
input: [0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 3, 0]
################################################################

LLM answer:

expected output: [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 3]
"""

# @lc code=start
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        if len(nums) <= 1 or (len(nums) == 2 and nums[0] > nums[1]):
            return
            
        i = j = k = 0
        while True:
            # find first nonzero element
            while nums[i] == 0:
                i += 1
                    
            # find last nonzero element
            while nums[j] == 0:
                j -= 1
                
            # swap elements
            if i < j:
                nums[i], nums[j] = nums[j], nums[i]
                
            # move to next window
            i += 1
            j -= 1
            k += 1
            
            if i >= j:
                break
                
        for _ in range(k - 1):
            i = j = k = 0
            while True:
                # find first nonzero element
                while nums[i] == 0:
                    i += 1
                    
                # find last nonzero element
                while nums[j] == 0:
                    j -= 1
                    
                # swap elements
                if i < j:
                    nums[i], nums[j] = nums[j], nums[i]
                
                # move to next window
                i += 1
                j -= 1
                k += 1
                
                if i >= j:
                    break
                
        return nums
# @lc code=end

################################################################

Solution:
[0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 3, 0]

