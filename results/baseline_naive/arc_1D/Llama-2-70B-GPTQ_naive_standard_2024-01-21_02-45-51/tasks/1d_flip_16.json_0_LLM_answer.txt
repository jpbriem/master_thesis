Input token: 397
Output token: 879
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 5, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0]
output: [0, 0, 8, 8, 8, 8, 8, 8, 8, 5, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 1, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 8, 8, 8, 8, 8, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 4, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 5, 5, 5, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0]
"""

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

def get_max_value(head):
    max_value = head.val
    current = head
    while current is not None:
        if current.val > max_value:
            max_value = current.val
        current = current.next
    return max_value

def swap_node(head, i, j):
    # check if node exists
    assert (i < len(head)) and (j < len(head)), "Index out of range."
    
    # find nodes at index i and j
    current = head
    for k in range(len(current)):
        if k == i - 1:
            pre_i = current
        elif k == j - 1:
            pre_j = current
        current = current.next
        
    # swap values between two nodes
    temp = pre_i.next.val
    pre_i.next.val = pre_j.next.val
    pre_j.next.val = temp

def reverse_list(head):
    current = head
    previous = None
    next_node = None
    while current is not None:
        next_node = current.next
        current.next = previous
        previous = current
        current = next_node
    return previous

def rotate_right(head, k):
    length = len(head)
    if length <= 1 or k % length == 0:
        return head
    else:
        k = k % length
        new_head = reverse_list(head[length - k :])
        tail = reverse_list(new_head)
        new_tail = head[:k] + tail
        return new_tail

def rotate_left(head, k):
    length = len(head)
    if length <= 1 or k % length == 0:
        return head
    else:
        k = k % length
        new_head = reverse_list(head[:k])
        tail = reverse_list(new_head)
        new_tail = tail + head[k:]
        return new_tail

def transform(head):
    """
    Transform a linked list to another one with the same elements but different order.
    Input: A linked list with n elements.
    Output: Return a transformed linked list with the same elements as the original linked list.
    Note: You can only use constant extra space.
    """
    # check if empty list
    if head is None:
        return head
    
    # get maximum value
    max_value = get_max_value(head)
    
    # create a copy of the original list
    new_head = head.copy()
    
    # rotate right by half of the list size
    new_head = rotate_right(new_head, int((len(new_head)+1)/2))
    
    # rotate left by half of the list size
    new_head = rotate_left(new_head, int((len(new_head)-1)/2))
    
    # swap adjacent nodes with equal values
    current = new_head
    while current is not None:
        if current.next is not None \
                and current.val == current.next.val:
            swap_node(new_head, current.val, current.next.val)
        current = current.next
            
    return new_head
################################################################

Solution:
[0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 2, 0, 0, 0, 0, 0]

