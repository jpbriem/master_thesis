Input token: 691
Output token: 936
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def wiggleSort(self, nums: List[int]) -> List[int]:
        if not nums or len(nums) <= 1:
            return nums
        
        # dq = deque()
        # for i in range(len(nums)):
        #     dq.appendleft(i)
            
        # while dq:
        #     left, right = dq.pop(), dq.popright()
        #     print('left', left, 'right', right)
        #     if nums[left] > nums[right]:
        #         nums[left], nums[right] = nums[right], nums[left]
                
        #     elif nums[left] < nums[right]:
        #         nums[left], nums[right] = nums[right], nums[left]
                
        #     else:
        #         pass
        
        #     if left == 0:
        #         continue
        
        #     if right == len(nums)-1:
        #         continue
        
        #     if nums[left - 1] >= nums[left + 1]:
        #         nums[left], nums[left+1] = nums[left+1], nums[left]
        #     if nums[right - 1] >= nums[right + 1]:
        #         nums[right], nums[right+1] = nums[right+1], nums[right]
        
        #     dq.appendleft(left)
        #     dq.appendreft(right)
        
        # return nums
        
        n = len(nums)
        for i in range(n):
            if i % 2!= 0:
                if nums[i] > nums[i+1]:
                    nums[i], nums[i+1] = nums[i+1], nums[i]
                if nums[i] > nums[i-1]:
                    nums[i], nums[i-1] = nums[i-1], nums[i]
            else:
                if nums[i] < nums[i+1]:
                    nums[i], nums[i+1] = nums[i+1], nums[i]
                if nums[i] < nums[i-1]:
                    nums[i], nums[i-1] = nums[i-1], nums[i]
        return nums


if __name__ == "__main__":
    solution = Solution()
    assert solution.wiggleSort([0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0]) == \
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

################################################################

Solution:
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0]

