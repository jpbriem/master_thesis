Input token: 523
Output token: 429
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0]
output: [0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 6, 6, 6, 6, 6, 6, 6, 0]

Example_2:
input: [0, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0]
output: [0, 4, 0, 0, 0, 6, 6, 6, 6, 6, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0]

Example_3:
input: [0, 0, 4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4]
output: [0, 0, 6, 6, 6, 6, 0, 4, 0, 4, 0, 4, 4, 0, 0, 4, 4, 0, 6, 6, 6, 6]

Test case:
input: [0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 0]
################################################################

LLM answer:

output: [0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 0]
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=[], next=[]):
        self.val = val
        self.children = children
        self.next = next

def dfs(node, level):
    if node is None or len(node) == 0: return []
    res = []
    for i in range(len(node)):
        if not node[i].isLeaf():
            tmp = dfs(node[i].getChildren(), level + 1)
            res += [[level, i]] + tmp
    return res

def bfs(root, level):
    queue = deque([])
    queue.append((root, level))
    while queue:
        curNode, curLevel = queue.popleft()
        if curNode is None or len(curNode) == 0: continue
        if curNode.isLeaf():
            yield (curLevel, curNode.index())
        else:
            queue.extend((child, curLevel+1) for child in curNode.getChildren())

class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        root = Node(nums)
        maxLen = 0
        for level, index in bfs(root, 0):
            maxLen = max(maxLen, len(dfs(root[index], level)))
        return maxLen

################################################################

Solution:
[0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 0]

