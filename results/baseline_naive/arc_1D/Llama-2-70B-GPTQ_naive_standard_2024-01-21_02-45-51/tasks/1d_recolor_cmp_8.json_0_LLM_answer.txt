Input token: 649
Output token: 494
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]
output: [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1]
output: [0, 3, 3, 3, 3, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1]

Example_3:
input: [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
output: [0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def countBits(self, num: int) -> int:
        """
        计算二进制中的个数，即计算出num的二进制表示中有多少位为1。
        :param num: 整形参数
        :return: 返回int类型结果
        """
        return bin(num).count("1")

    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        """
        求最长连续1的子序列的长度
        :param nums: 输入的list类型数组
        :return: 返回int类型结果
        """
        max_length = 0
        current_length = 0
        for i in range(len(nums)):
            if self.countBits(nums[i]) == 1:
                current_length += 1
                if current_length > max_length:
                    max_length = current_length
            else:
                current_length = 0
        return max_length


if __name__ == "__main__":
    solution = Solution()
    print(solution.findMaxConsecutiveOnes([0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]))

################################################################

Solution:
[0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0]

