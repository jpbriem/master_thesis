Input token: 229
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 7, 7, 7, 0, 0, 0]
output: [0, 0, 7, 0, 7, 0, 0, 0]

Example_2:
input: [0, 0, 0, 0, 6, 6, 6, 0]
output: [0, 0, 0, 0, 6, 0, 6, 0]

Example_3:
input: [0, 0, 0, 7, 7, 7, 7, 0]
output: [0, 0, 0, 7, 0, 0, 7, 0]

Test case:
input: [0, 1, 1, 1, 1, 0, 0, 0]
################################################################

LLM answer:

output: [0, 1, 0, 1, 0, 0, 0, 0]
"""

# @lc code=start
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        if len(nums) <= 1 or (len(nums) == 2 and nums[0] > nums[1]):
            return
            
        i = j = k = 0
        while True:
            # find first nonzero element
            while i < len(nums)-1 and nums[i+1] == 0:
                i += 1
                
            # find last nonzero element
            while j < len(nums)-1 and nums[j+1] == 0:
                j += 1
                
            # swap elements
            for _ in range(k, min(i, j)):
                nums[_], nums[min(i, j)] = nums[min(i, j)], nums(_)
                
            # update index
            i += 1
            j -= 1
            k += 1
            
            if i >= j:
                break
    
    def test(self):
        self.assertEqual([0, 1, 0, 1, 0, 0, 0, 0], self.wiggleSort([0, 1, 1, 1, 1, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7, 7, 7, 0]))
        self.assertEqual([0, 0, 0, 7, 0, 0, 7, 0], self.wiggleSort([0, 0, 0, 7, 7,
################################################################

Solution:
[0, 1, 0, 0, 1, 0, 0, 0]

