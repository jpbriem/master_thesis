Input token: 544
Output token: 528
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 3, 0]
output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0]

Example_2:
input: [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0]
output: [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0]

Example_3:
input: [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]
output: [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 0, 0, 0, 0]

Test case:
input: [0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 3, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def wiggleSort(self, nums: List[int]) -> List[int]:
        if not nums or len(nums) <= 1: return nums
        
        # find first non zero number
        i = 0
        while i < len(nums):
            if nums[i]!= 0: break
            else: i += 1
            
        # find last non zero number
        j = len(nums)-1
        while j >= 0:
            if nums[j]!= 0: break
            else: j -= 1
        
        # sort in ascending order
        for k in range(i+1, j+1):
            nums[k], nums[i] = nums[i], nums[k]
            i += 1
        
        # sort in descending order
        for l in range(len(nums)-1, j,-1):
            nums[l], nums[j] = nums[j], nums[l]
            j -= 1
                    
        return nums


if __name__ == "__main__":
    solution = Solution()
    assert solution.wiggleSort([0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 3, 0]) == \
               [0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 0]
    print("Pass")
################################################################

Solution:
[0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 0]

