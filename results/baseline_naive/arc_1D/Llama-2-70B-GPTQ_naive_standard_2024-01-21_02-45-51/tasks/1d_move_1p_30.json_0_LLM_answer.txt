Input token: 334
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0]

Example_2:
input: [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
output: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0]

Test case:
input: [8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0]
"""

# @lc code=start
class Solution(object):
    def rotate(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        # initialize variables
        n = len(nums)
        start = end = i = j = k = 0
        
        # find first nonzero element
        while (i < n) and (nums[i] == 0):
            i += 1
            
        if i >= n or nums[i] == 0:
            return
        
        # find last nonzero element
        while (j < n - 1) and (nums[n - 1 - j] == 0):
            j += 1
            
        if j > i + 1:
            for k in range(i, j):
                nums[k], nums[end] = nums[end], nums[k]
                
            end -= 1
            
        else:
            for k in range(i, n - 1):
                nums[k], nums[end] = nums[end], nums[k]
                
            end -= 1
            
        # reverse array from start to end
        for k in range(start, end):
            nums[k], nums[end] = nums[end], nums[k]
            
            end -= 1
    
    def rotate(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        # initialize variables
        n = len(nums)
        start = end = i = j = k = 0
        
        # find first nonzero element
        while (i < n) and (nums[i] == 0):
            i += 1
            
        if i >= n or nums[i] == 0:
            return
        
        # find last nonzero element
        while (j < n - 1) and (nums[n - 1 - j] == 0):
            j += 1
            
        if j > i + 1:
            for k in range(i, j):
                nums[k], nums[end] = nums[end], nums[k]
                
            end -= 1
            
        else:
            for k in range(i, n - 1):
                nums[k], nums[end] = nums[end], nums[k]
                
            end -= 1
            
        # reverse array from start to end
        for k in range(start, end):
            nums[k], nums[end] = nums[end], nums[k]
            
            end -= 1
    
    def rotate(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        # initialize variables
        n = len(nums)
        start = end = i = j = k = 0
        
        # find first nonzero element
        while (i < n) and (nums[i] == 0):
            i += 1
            
        if i >= n or nums[i] == 0:
            return
        
        # find last nonzero element
        while (j < n - 1) and (nums[n - 1 - j] == 0):
            j += 1
            
        if j > i + 1:
            for k in range(i, j):
                nums[k], nums[end] = nums[end], nums[k]
                
            end -= 1
            
        else:
            for k in range(i, n - 1):
                nums[k], nums[end] = nums[end], nums[k]
                
            end -= 1
            
        # reverse array from start to end
################################################################

Solution:
[0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0]

