Input token: 271
Output token: 347
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 2, 2, 2, 2, 2, 0, 0, 3, 0]
output: [0, 0, 0, 2, 2, 2, 2, 2, 3, 0]

Example_2:
input: [4, 4, 4, 4, 4, 4, 0, 0, 3, 0]
output: [0, 0, 4, 4, 4, 4, 4, 4, 3, 0]

Example_3:
input: [8, 8, 8, 8, 0, 0, 3, 0, 0, 0]
output: [0, 0, 8, 8, 8, 8, 3, 0, 0, 0]

Test case:
input: [6, 6, 6, 6, 0, 0, 3, 0, 0, 0]
################################################################

LLM answer:

expected output: [0, 0, 6, 6, 6, 6, 3, 0, 0, 0]
"""

# @lc code=start
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        if len(nums) <= 1 or (len(nums) == 2 and nums[0] > nums[1]):
            return
            
        i = j = k = 0
        while True:
            # find first nonzero element from left to right
            while i < len(nums)-1 and nums[i+1] == 0:
                i += 1
                    
            # find first zero element from right to left
            while j < len(nums)-1 and nums[j+1]!= 0:
                j += 1
                
            # swap elements at index i and j
            if i >= j:
                break
            else:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1
                
        for l in range(k, len(nums)):
            nums[l] = 0
            
        return nums
# @lc code=end

################################################################

Solution:
[0, 0, 6, 6, 6, 6, 3, 0, 0, 0]

