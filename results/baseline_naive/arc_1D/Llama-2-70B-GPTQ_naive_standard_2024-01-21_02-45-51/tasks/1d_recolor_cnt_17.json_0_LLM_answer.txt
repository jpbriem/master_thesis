Input token: 754
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 2, 0, 0, 0, 8, 8, 0, 0, 5, 5, 5, 0, 0, 0, 8, 8, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 8, 8, 0, 5, 5, 5, 0, 0, 2, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 2, 0, 0, 8, 8, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Test case:
input: [0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 2, 8, 8, 0, 0, 0, 5, 5, 0, 0, 2, 0, 5, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def transform(self, nums: List[int]) -> List[int]:
        """
        思路：双端队列，从左到右找出最大值的位置，然后将其前面的元素全部变成该数字。
                再从右往左找出最小值的位置，然后将其后面的元素全部变成该数字。
                如果最大值和最小值相等，则不需要进行任何操作。
                O(n) time complexity. O(1) space complexity.
        """
        if not nums or len(nums) == 1: return nums
        # dq = deque()
        max_pos = -1
        min_pos = -1
        for i in range(len(nums)):
            if nums[i] > nums[max_pos + 1]:
                max_pos += 1
            elif nums[min_pos + 1] < nums[i]:
                min_pos += 1
        if max_pos >= 0 and min_pos >= 0:
            if nums[max_pos]!= nums[min_pos]:
                for j in range(max_pos):
                    nums[j] = nums[max_pos]
                for k in range(min_pos, len(nums)-1):
                    nums[k] = nums[min_pos]
        return nums


if __name__ == "__main__":
    solution = Solution()
    assert solution.transform([0, 0, 0, 4, 0, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \
           [0, 0, 0, 2, 0, 0, 0, 8, 8, 0, 0, 5, 5, 5, 0, 0, 0, 8, 8, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert solution.transform([0, 0, 0, 4, 4, 0, 4, 4, 4, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \
           [0, 0, 0, 8, 8, 0, 5, 5, 5, 0, 0, 2, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert solution.transform([0, 0, 0, 4, 0, 0, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0
################################################################

Solution:
[0, 0, 5, 5, 5, 0, 0, 0, 8, 8, 0, 0, 2, 0, 8, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

