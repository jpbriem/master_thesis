Input token: 292
Output token: 365
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0]

Example_2:
input: [3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0]
output: [0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0]

Example_3:
input: [0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0]
output: [0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0]

Test case:
input: [0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0]
"""

# @lc code=start
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        if len(nums) <= 1 or all(x == 0 for x in nums):
            return
            
        i = j = k = 0
        while True:
            # find first nonzero element from left to right
            while i < len(nums)-1 and nums[i+1] == 0:
                i += 1
                    
            # find last nonzero element from right to left
            while j > 0 and nums[j-1] == 0:
                j -= 1
                
            # swap elements at index i and j
            if i!= j:
                nums[i], nums[j] = nums[j], nums[i]
                
            # move forward
            i += 1
            j -= 1
            
            # check whether we have reached the end of array
            if i >= j:
                break
                
        # reverse the remaining part of the array
        nums[k:] = reversed(nums[k:])
        
        return nums
        
# @lc code=end

################################################################

Solution:
[0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0]

