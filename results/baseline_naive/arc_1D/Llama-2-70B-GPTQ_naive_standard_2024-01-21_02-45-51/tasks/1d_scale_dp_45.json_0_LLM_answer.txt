Input token: 397
Output token: 873
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 9, 0, 0]
output: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 9, 0, 0]

Example_2:
input: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 9]
output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 9]

Example_3:
input: [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 9, 0]
output: [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 0]

Test case:
input: [0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 9, 0, 0, 0, 0]
################################################################

LLM answer:

output: [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 5, 0]
"""

import unittest
from typing import List
# @lc appveyor:python3
class Solution:
    def wiggleSort(self, nums: List[int]) -> List[int]:
        if not nums or len(nums) <= 1: return nums
        
        # find first non zero element index
        i = 0
        while i < len(nums):
            if nums[i]!= 0: break
            else: i += 1
            
        # find last non zero element index
        j = len(nums)-1
        while j >= 0:
            if nums[j]!= 0: break
            else: j -= 1
        
        # sort in between
        for k in range(i+1, j):
            nums[k], nums[k-1] = nums[k-1], nums[k]
        
        # reverse in between
        for l in range(len(nums)-1, i,-1):
            nums[l], nums[l-1] = nums[l-1], nums[l]
                    
        return nums

if __name__ == "__main__":
    solution = Solution()
    assert solution.wiggleSort([0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 9, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 9, 0, 0]
    assert solution.wiggleSort([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 9, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 9, 0, 0]
    assert solution.wiggleSort([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 9]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 9]
    assert solution.wiggleSort([0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 9, 0]) == [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 0]
    assert solution.wiggleSort([0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 9, 0, 0, 0, 0]) == [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 5, 0]

################################################################

Solution:
[0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 9, 0, 0, 0, 0]

