Input token: 607
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0]
output: [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0]

Example_2:
input: [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0]
output: [0, 0, 8, 8, 8, 8, 8, 8, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0]

Example_3:
input: [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0]
output: [0, 0, 8, 8, 8, 8, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0]

Test case:
input: [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0]
################################################################

LLM answer:

output: [0, 0, 8, 8, 8, 8, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 4, 0, 0]
"""

import unittest
from typing import List
# from collections import deque


class Solution:
    def run(self, nums: List[int]) -> List[int]:
        """
        思路：滑动窗口，记录每个位置的最大值。
            - 注意：如果当前位置为 0，则不能跟随上一位置的最大值，而是需要从头开始计算。
                - 因此，我们可以将所有数字都转换成 1，然后再进行处理。
                    这样做的目的在于：保持了原来序列中的相对位置关系，但是同时也使得所有元素都变成了 1。
                    这样就只需要考虑 1 和 0 两种情形，而无需考虑其他任何情形（比如 2、3...）。
            - 注意：由于题目中没有限制输入序列的长度，因此我们需要考虑到空间复杂度问题。
                - 解决方法：用一个双向队列来代替一个数组。
                    这样做的目的在于：通过双向队列，我们可以在 O(1) 时间内删除队尾或者队首的元素。
                    而如果我们使用数组，那么我们需要在 O(n) 时间内移动指针才能实现删除操作。
        """
        # 初始化双向队列
        queue = []
        for i in range(len(nums)):
            if i == 0 or (i > 0 and nums[i - 1]!= 0):
                queue.append((i + 1, max(queue[-1][0], i)))
            else:
                queue.append((i + 1, i))
        return list(map(lambda x: x[1], queue))


if __name__ == "__main__":
    solution = Solution()
    assert len(solution.run([0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0])) == \
           len([0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0])
    assert len(solution.run([0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0])) == \
           len([0, 0, 8, 8, 8, 8, 8, 8, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0])
    assert len(solution.run([0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1
################################################################

Solution:
[0, 0, 8, 8, 8, 8, 0, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 0, 0]

