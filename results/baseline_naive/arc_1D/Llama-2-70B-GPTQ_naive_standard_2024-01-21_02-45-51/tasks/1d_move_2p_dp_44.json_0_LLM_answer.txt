Input token: 208
Output token: 584
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [7, 7, 7, 0, 0, 6, 0]
output: [0, 0, 7, 7, 7, 6, 0]

Example_2:
input: [3, 3, 3, 0, 0, 6, 0]
output: [0, 0, 3, 3, 3, 6, 0]

Example_3:
input: [8, 8, 8, 0, 0, 6, 0]
output: [0, 0, 8, 8, 8, 6, 0]

Test case:
input: [5, 5, 5, 0, 0, 6, 0]
################################################################

LLM answer:

output: [0, 0, 5, 5, 5, 6, 0]
"""

# @lc code=start
class Solution(object):
    def rotate(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        
        n = len(nums)
        if n == 0 or n == 1:
            return
            
        left = right = 0
        while True:
            for i in range(left+right, n):
                tmp = nums[i]
                nums[i], nums[n - (i + 1)] = nums[n - (i + 1)], tmp
                
            left += 1
            right -= 1
            if left > right:
                break
    
    # Test cases
    nums = [7, 7, 7, 0, 0, 6, 0]
    print("Input:", nums)
    solution = Solution()
    solution.rotate(nums)
    print("Output:", nums)
    assert nums == [0, 0, 7, 7, 7, 6, 0]
    
    nums = [3, 3, 3, 0, 0, 6, 0]
    print("Input:", nums)
    solution = Solution()
    solution.rotate(nums)
    print("Output:", nums)
    assert nums == [0, 0, 3, 3, 3, 6, 0]
    
    nums = [8, 8, 8, 0, 0, 6, 0]
    print("Input:", nums)
    solution = Solution()
    solution.rotate(nums)
    print("Output:", nums)
    assert nums == [0, 0, 8, 8, 8, 6, 0]
    
    nums = [5, 5, 5, 0, 0, 6, 0]
    print("Input:", nums)
    solution = Solution()
    solution.rotate(nums)
    print("Output:", nums)
    assert nums == [0, 0, 5, 5, 5, 6, 0]
# @lc code=end
################################################################

Solution:
[0, 0, 5, 5, 5, 6, 0]

