Input token: 528
Output token: 368
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'g', 'g'], ['.', '.', 'b', '.'], ['.', '.', '.', 'c'], ['.', '.', 'h', '.']]
output: [['g', 'g', '.', '.'], ['b', '.', '.', '.'], ['c', '.', '.', '.'], ['h', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', 'a', 'a', '.'], ['.', '.', '.', '.', '.', 'b'], ['.', '.', '.', '.', 'c', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'f', 'f', 'f', '.', '.']]
output: [['a', 'a', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['c', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['f', 'f', 'f', '.', '.', '.']]

Example_3:
input: [['.', 'b', 'b', '.', 'b'], ['.', '.', '.', '.', '.'], ['.', 'f', 'f', '.', '.'], ['.', '.', 'i', '.', '.'], ['e', 'e', 'e', '.', '.']]
output: [['b', 'b', 'b', '.', '.'], ['.', '.', '.', '.', '.'], ['f', 'f', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['e', 'e', 'e', '.', '.']]

Test case:
input: [['.', 'g', '.', 'g', '.'], ['.', '.', 'b', '.', '.'], ['.', '.', '.', 'i', '.'], ['h', 'h', '.', '.', '.'], ['.', 'd', '.', 'd', '.']]
################################################################

LLM answer:

output: [['g', 'g', '.', '.'], ['b', '.', '.', '.'], ['i', '.', '.', '.'], ['h', 'h', '.', '.', '.'], ['d', '.', '.', '.', '.']]
'''

# My solution
class Solution:
    def transform(self, matrix):
        if not matrix or len(matrix) == 0: return []
        
        rows = len(matrix)
        cols = len(matrix[0])
        result = [[None for _ in range(cols)] for _ in range(rows)]
        
        # DFS
        queue = [(0, 0), (0, 1)]
        while len(queue) > 0:
            x, y = heapq.heappop(queue)
            
            if x >= rows or y >= cols: continue
            
            result[x][y] = matrix[x][y]
            
            if y + 1 < cols:
                queue.append((x, y+1))
                
            if y - 1 >= 0:
                queue.append((x, y-1))
            
            if x + 1 < rows:
                queue.append((x+1, y))
                
            if x - 1 >= 0:
                queue.append((x-1, y))
            
        return result
    
if __name__ == "__main__":
    s = Solution()
    print(s.transform([["A", "B", "C"], ["S", "O", "N"]]))
################################################################

Solution:
[['g', 'g', '.', '.', '.'], ['b', '.', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.'], ['d', 'd', '.', '.', '.']]

