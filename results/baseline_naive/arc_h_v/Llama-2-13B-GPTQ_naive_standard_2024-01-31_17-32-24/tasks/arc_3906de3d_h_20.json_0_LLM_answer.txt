Input token: 1849
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'g'], ['c', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', 'g'], ['c', 'c', '.', '.', '.', '.', 'g', 'g', 'g', 'g'], ['c', 'c', 'c', 'c', '.', '.', '.', 'g', 'g', 'g'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'g', '.', '.', '.', '.', '.', '.'], ['c', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'g', '.', '.', '.'], ['c', 'c', 'g', 'g', 'g', 'g', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'g', 'g', 'g', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', 'g', 'g', 'g'], ['c', 'c', '.', '.', '.', '.', '.', 'g', 'g', 'g'], ['c', 'c', 'c', '.', '.', '.', '.', 'g', 'g', 'g'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.', 'g', 'g', 'g', 'g'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'g', 'g', 'g', '.', '.', '.'], ['c', 'c', 'g', 'g', 'g', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'g', 'g', 'g', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'g', 'g', 'g', 'g', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', 'g', 'g', 'g', 'g', 'g'], ['c', 'c', 'c', '.', '.', '.', '.', '.', 'g', 'g'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', 'g', 'g', 'g'], ['c', '.', '.', '.', '.', 'g', 'g', 'g', 'g', 'g'], ['c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'g'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', '.', '.', '.', '.', '.', 'g', 'g', 'g', 'g'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'g', 'g', 'g', 'g', 'g', '.', '.', '.'], ['c', 'c', 'c', 'g', 'g', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'g', 'g', 'g', '.', '.', '.'], ['c', 'g', 'g', 'g', 'g', 'g', '.', '.', '.', '.'], ['c', 'c', 'c', 'g', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'g', 'g', 'g', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.', 'g', 'g', 'g', 'g'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', 'g', 'g'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.', '.', '.', 'g', 'g'], ['c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'g'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'g', 'g', 'g', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.', '.', '.', 'g', 'g'], ['c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'g'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
'''

from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np
import pytest

from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC

from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
from skl2onnx.common.data_types import Int64TensorType
from skl2onnx.common.data_types import StringTensorType
from skl2onnx.common.data_types import TensorType
from skl2onnx.common.data_types import to_list
from skl2onnx.common.data_types import to_numpy
from skl2onnx.common.data_types import validate_tensor
from skl2onnx.common.data_types import verify_type

X = load_iris()
y = X.target

# Tests for float tensors

def test_float_tensors():
    # Create a model with 2 inputs and 1 output
    clf = KNeighborsClassifier(n_neighbors=5)
    X = [[0., 0., 0.], [0., 0., 1.]]
    y = [0, 1]
    clf.fit(X, y)

    # Convert it to ONNX format
    onnx_model = convert_sklearn(clf)

    # Check that the graph is correct
    assert len(onnx_model.graph.node) == 7

    # Get the first tensor in the graph
    x = onnx_model.graph.input[0].name
    assert x == "X"
    assert type(onnx_model.graph.input[0]) == Int64TensorType
    assert onnx_model.graph.input[0].shape == (None, 3)
    assert onnx_model.graph.input[0].dtype == np.int64

    # Get the second tensor in the graph
    y = onnx_model.graph.input[1].name
    assert y == "Y"
    assert type(onnx_model.graph.input[1]) == Int64TensorType
    assert onnx_model.graph.input[1].shape == (None, )
    assert onnx_model.graph.input[1].dtype == np.int64

    # Get the third tensor in the graph
    w = onnx_model.graph.input[2].name
    assert w == "W"
    assert type(onnx_model.graph.input[2]) == FloatTensorType
    assert onnx_model.graph.input[2].shape == (None, None)
    assert onnx_model.graph.input[2].dtype == np.float32

    # Get the fourth tensor in the graph
    b = onnx_model.graph.input[3].name
    assert b == "B"
    assert type(onnx_model.graph.input[3]) == FloatTensorType
    assert onnx_model.graph.input[3].shape == (None, )
    assert onnx_model.graph.input[3].dtype == np.float32

    # Get the fifth tensor in the graph
    c = onnx_model.graph.input[4].name
    assert c == "C"
    assert type(onnx_model.graph.input[4]) == FloatTensorType
    assert onnx_model.graph.input[4].shape == (None, )
    assert onnx_model.graph.input[4].dtype == np.float32

    # Get the sixth tensor in the graph
    d = onnx_model.graph.input[5].name
    assert d == "D"
    assert type(onnx_model.graph.input[5]) == FloatTensorType
    assert onnx_model.graph.input[5].shape == (None, )
    assert onnx_model.graph.input[5].dtype == np.float32

    # Get the seventh tensor in the graph
    e = onnx_model.graph.input[6].name
    assert e == "E"
    assert type(onnx_model.graph.input[6]) == FloatTensorType
    assert onnx_model.graph.input[6].shape == (None, )
    assert onnx_model.graph.input[6].dtype == np.float32

    # Verify that all of the outputs have been converted correctly
    assert len(onnx_model.graph.output) == 1
    assert onnx_model.graph.output[0].name == "Y_pred"
    assert type(onnx_model.graph.output[0]) == Int64TensorType
    assert onnx_model.graph.output[0].shape == ()
    assert onnx_model.graph.output[0].dtype == np.int64

    # Make sure that the weights were converted correctly
    assert len(onnx_model.weights) == 1
    assert onnx_model.weights["w"] == [0.1, -0.8, 0.9, -0.1]
    assert type(onnx_model.weights["w"]) == FloatTensorType
    assert onnx_model.weights["w"].shape == (4, )
    assert onnx_model.weights["w"].dtype == np.float32

    # Make sure that the biases were converted correctly
    assert len(onnx_model.biases) == 1
    assert onnx_model.biases["b"] == [-0.1]
    assert type(onnx_model.biases["b"]) == FloatTensorType
    assert onnx_model.biases["b"].shape == (1, )
    assert onnx_model.biases["b"].dtype == np.float32

    # Make sure that the constants were converted correctly
    assert len(onnx_model.constants) == 1
    assert onnx_model.constants["c"] == 0.1
    assert type(onnx_model.constants["c"]) == FloatTensorType
    assert onnx_model.constants["c"].shape == ()
    assert onnx_model.constants["c"].dtype == np.float32

    # Make sure that the initializers were converted correctly
    assert len(onnx_model.initializers) == 1
    assert onnx_model.initializers["d"] == 0.1
    assert type(onnx_model.initializers["d"]) == FloatTensorType
    assert onnx_model.initializers["d"].shape == ()
    assert onnx_model.initializers["d"].dtype == np.float32

    # Make sure that the name mapping was done correctly
    assert len(onnx_model.name_map) == 7
    assert onnx_model.name_map["X"] == "X"
    assert onnx_model.name_map["Y"] == "Y"
    assert onnx_model.name_map["W"] == "W"
    assert onnx_model.name_map["B"] == "B"
    assert onnx_model.name_map["C"] == "C"
    assert onnx_model.name_map["D"] == "
################################################################

Solution:
[['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'g', 'g', 'g', 'g', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'g', 'g', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'g', 'g', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

