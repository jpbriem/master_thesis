Input token: 403
Output token: 682
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'a', 'd], ['.', '.', '.', '.], ['.', 'h', 'a', 'd], ['.', '.', '.', 'd']]
output: [['.', '.', '.', '.], ['.', '.', '.', 'd], ['.', '.', 'a', 'd], ['.', 'h', 'a', 'd']]

Example_2:
input: [['g', '.', '.', 'c], ['g', 'i', 'e', '.], ['g', '.', 'e', '.], ['.', '.', 'e', '.']]
output: [['.', '.', '.', '.], ['g', '.', 'e', '.], ['g', '.', 'e', '.], ['g', 'i', 'e', 'c']]

Example_3:
input: [['h', '.', 'i', '.], ['.', 'f', '.', '.], ['h', '.', '.', '.], ['h', '.', 'i', '.']]
output: [['.', '.', '.', '.], ['h', '.', '.', '.], ['h', '.', 'i', '.], ['h', 'f', 'i', '.']]

Test case:
input: [['g', '.', 'c', '.', '.', '.], ['.', 'i', '.', '.', '.', '.], ['.', '.', '.', 'd', 'b', 'h], ['g', '.', '.', '.', 'b', '.], ['.', '.', '.', 'd', '.', 'h], ['g', '.', 'c', 'd', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]
*/
public class Solution {
    public int[][] updateMatrix(int[][] mat) {
        if (mat == null || mat.length == 0 || mat[0].length == 0) return mat;
        int m = mat.length, n = mat[0].length;
        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 0) {
                    qx.offer(i);
                    qy.offer(j);
                } else {
                    mat[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        while (!qx.isEmpty()) {
            int x = qx.poll();
            int y = qy.poll();
            // up
            if (x - 1 >= 0 && mat[x - 1][y] > mat[x][y] + 1) {
                mat[x - 1][y] = mat[x][y] + 1;
                qx.offer(x - 1);
                qy.offer(y);
            }
            // down
            if (x + 1 < m && mat[x + 1][y] > mat[x][y] + 1) {
                mat[x + 1][y] = mat[x][y] + 1;
                qx.offer(x + 1);
                qy.offer(y);
            }
            // left
            if (y - 1 >= 0 && mat[x][y - 1] > mat[x][y] + 1) {
                mat[x][y - 1] = mat[x][y] + 1;
                qx.offer(x);
                qy.offer(y - 1);
            }
            // right
            if (y + 1 < n && mat[x][y + 1] > mat[x][y] + 1) {
                mat[x][y + 1] = mat[x][y] + 1;
                qx.offer(x);
                qy.offer(y + 1);
            }
        }
        return mat;
    }
}
################################################################

Solution:
[['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['g', '.', '.', 'd', '.', '.], ['g', '.', 'c', 'd', 'b', 'h], ['g', 'i', 'c', 'd', 'b', 'h']]

