Input token: 588
Output token: 554
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', 'd', 'a', '.], ['f', '.', '.', '.], ['.', '.', 'a', '.], ['.', 'd', 'a', '.']]
output: [['.', '.', '.', '.], ['.', '.', 'a', '.], ['.', 'd', 'a', '.], ['f', 'd', 'a', '.']]

Example_2:
input: [['.', 'g', '.', '.', 'h', '.], ['.', '.', '.', 'i', '.', 'b], ['e', 'g', 'd', 'i', '.', '.], ['e', '.', '.', 'i', '.', '.], ['.', '.', '.', '.', '.', 'b], ['e', 'g', 'd', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['e', 'g', '.', 'i', '.', '.], ['e', 'g', 'd', 'i', '.', 'b], ['e', 'g', 'd', 'i', 'h', 'b']]

Example_3:
input: [['.', '.', 'f', '.', '.', '.], ['.', 'i', '.', '.', 'e', 'c], ['.', '.', 'f', '.', 'e', '.], ['.', '.', '.', 'a', '.', 'c], ['.', '.', '.', '.', 'e', '.], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'e', '.], ['.', '.', 'f', '.', 'e', 'c], ['.', 'i', 'f', 'a', 'e', 'c']]

Test case:
input: [['.', 'h', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', 'h', '.', '.', 'f', '.], ['.', 'h', 'a', 'i', 'f', 'c']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.']]

Constraints:
0 <= matrix.length, matrix[i].length <= 500
matrix[i][j] is either '.' or a lowercase English letter.
 */
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'M') continue;
                else if (board[i][j] == 'E' && i == click[0] && j == click[1]) {
                    board[i][j] = 'B';
                    queue.offer(new int[]{i - 1, j});
                    queue.offer(new int[]{i + 1, j});
                    queue.offer(new int[]{i, j - 1});
                    queue.offer(new int[]{i, j + 1});
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            if (x >= 0 && x < m && y >= 0 && y < n && board[x][y]!= 'X') {
                board[x][y] = 'X';
                queue.offer(new int[]{x - 1, y});
                queue.offer(new int[]{x + 1, y});
                queue.offer(new int[]{x, y - 1});
                queue.offer(new int[]{x, y + 1});
            }
        }
        return board;
    }
}
################################################################

Solution:
[['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', 'h', '.', '.', '.', '.], ['.', 'h', '.', '.', 'f', '.], ['g', 'h', 'a', 'i', 'f', 'c']]

