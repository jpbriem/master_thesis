Input token: 462
Output token: 582
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['e', 'e', 'e', '.], ['.', '.', '.', '.], ['d', 'd', '.', 'd], ['.', 'b', 'b', 'b']]
output: [['e', 'e', 'e', '.], ['.', '.', '.', '.], ['d', 'd', 'd', '.], ['b', 'b', 'b', '.']]

Example_2:
input: [['c', '.', '.', '.', '.], ['.', '.', '.', 'b', 'b], ['.', '.', '.', '.', '.], ['.', 'd', 'd', '.', '.], ['a', '.', '.', '.', 'a']]
output: [['c', '.', '.', '.', '.], ['b', 'b', '.', '.', '.], ['.', '.', '.', '.', '.], ['d', 'd', '.', '.', '.], ['a', 'a', '.', '.', '.']]

Example_3:
input: [['.', 'i', '.', '.', 'i], ['.', 'e', 'e', 'e', '.], ['d', '.', 'd', '.', 'd], ['.', 'c', '.', '.', 'c], ['.', '.', '.', '.', '.']]
output: [['i', 'i', '.', '.', '.], ['e', 'e', 'e', '.', '.], ['d', 'd', 'd', '.', '.], ['c', 'c', '.', '.', '.], ['.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'h', '.', '.], ['g', '.', 'g', 'g', '.], ['b', '.', '.', '.', '.], ['.', 'e', '.', '.', '.], ['.', '.', 'i', 'i', '.']]
################################################################

LLM answer:

output: [['h', 'h', '.', '.', '.], ['g', 'g', 'g', '.', '.], ['b', 'b', '.', '.', '.], ['e', 'e', '.', '.', '.], ['.', 'i', 'i', 'i', '.']]
'''

class Solution(object):
    def updateBoard(self, board, click):
        """
        :type board: List[List[str]]
        :type click: List[int]
        :rtype: List[List[str]]
        """
        if not board or len(board) == 0 or len(click)!= 2: return []
        m = len(board)
        n = len(board[0])
        self.visited = [[False for _ in range(n)] for _ in range(m)]
        self.count = 0
        self.update(board, click[0], click[1])
        return board

    def update(self, board, x, y):
        if self.visited[x][y]: return
        self.visited[x][y] = True
        self.count += 1
        if board[x][y] == 'M':
            return
        else:
            num = self.getNum(board, x, y)
            if num > 0:
                board[x][y] = str(num)
            else:
                self.expand(board, x, y)

    def getNum(self, board, x, y):
        count = 0
        for i in [-1, 0, 1]:
            for j in [-1, 0, 1]:
                if (not (-1 < x + i < len(board) and -1 < y + j < len(board[0]))): continue
                if board[x+i][y+j] == 'M':
                    count += 1
        return count

    def expand(self, board, x, y):
        for i in [-1, 0, 1]:
            for j in [-1, 0, 1]:
                if (not (-1 < x + i < len(board) and -1 < y + j < len(board[0]))): continue
                if board[x+i][y+j] == 'E' and not self.visited[x+i][y+j]:
                    self.update(board, x+i, y+j)
################################################################

Solution:
[['h', '.', '.', '.', '.], ['g', 'g', 'g', '.', '.], ['b', '.', '.', '.', '.], ['e', '.', '.', '.', '.], ['i', 'i', '.', '.', '.']]

