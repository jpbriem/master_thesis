Input token: 391
Output token: 529
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['g', '.', '.', 'g], ['.', '.', '.', '.], ['.', '.', '.', '.], ['.', 'i', 'i', 'i']]
output: [['g', 'g', '.', '.], ['.', '.', '.', '.], ['.', '.', '.', '.], ['i', 'i', 'i', '.']]

Example_2:
input: [['.', 'e', 'e', 'e', '.], ['b', '.', '.', 'b', 'b], ['.', '.', '.', '.', 'f], ['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.']]
output: [['e', 'e', 'e', '.', '.], ['b', 'b', 'b', '.', '.], ['f', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.']]

Example_3:
input: [['i', 'i', '.', '.], ['.', '.', '.', '.], ['.', '.', '.', '.], ['g', '.', 'g', 'g']]
output: [['i', 'i', '.', '.], ['.', '.', '.', '.], ['.', '.', '.', '.], ['g', 'g', 'g', '.']]

Test case:
input: [['.', 'a', '.', '.], ['.', '.', '.', 'i], ['.', '.', 'g', 'g], ['.', '.', 'f', '.']]
################################################################

LLM answer:

output: [['.', 'a', '.', '.], ['.', '.', '.', 'i'], ['.', '.', 'g', 'g'], ['.', '.', 'f', '.']]
*/
public class Solution {
    public int[][] updateBoard(int[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == MINE) {
                    q.offer(i * n + j);
                } else if (board[i][j] > 0 && i == click[0] && j == click[1]) {
                    board[i][j]--;
                }
            }
        }
        while (!q.isEmpty()) {
            int index = q.poll();
            int x = index / n, y = index % n;
            if (x - 1 >= 0 && board[x - 1][y]!= MINE) {
                board[x - 1][y]++;
                q.offer((x - 1) * n + y);
            }
            if (x + 1 < m && board[x + 1][y]!= MINE) {
                board[x + 1][y]++;
                q.offer((x + 1) * n + y);
            }
            if (y - 1 >= 0 && board[x][y - 1]!= MINE) {
                board[x][y - 1]++;
                q.offer(x * n + y - 1);
            }
            if (y + 1 < n && board[x][y + 1]!= MINE) {
                board[x][y + 1]++;
                q.offer(x * n + y + 1);
            }
        }
        return board;
    }
}
################################################################

Solution:
[['a', '.', '.', '.], ['i', '.', '.', '.], ['g', 'g', '.', '.], ['f', '.', '.', '.']]

