Input token: 2361
Output token: 1032
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.']]

Constraints:
0 <= grid.length, grid[i].length <= 50
grid[i][j] is either a period or an uppercase G
 */
public class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j].equals("M")) continue;
                if (i == click[0] && j == click[1]) {
                    q.offer(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int x = cur[0], y = cur[1];
            if (x - 1 >= 0 &&!visited[x - 1][y] && board[x - 1][y].equals("E")) {
                q.offer(new int[]{x - 1, y});
                visited[x - 1][y] = true;
            }
            if (x + 1 < m &&!visited[x + 1][y] && board[x + 1][y].equals("E")) {
                q.offer(new int[]{x + 1, y});
                visited[x + 1][y] = true;
            }
            if (y - 1 >= 0 &&!visited[x][y - 1] && board[x][y - 1].equals("E")) {
                q.offer(new int[]{x, y - 1});
                visited[x][y - 1] = true;
            }
            if (y + 1 < n &&!visited[x][y + 1] && board[x][y + 1].equals("E")) {
                q.offer(new int[]{x, y + 1});
                visited[x][y + 1] = true;
            }
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (visited[i][j]) {
                    board[i][j] = "B";
                } else if (board[i][j].equals("E")) {
                    int count = 0;
                    if (i - 1 >= 0) count += Integer.parseInt(board[i - 1][j]);
                    if (i + 1 < m) count += Integer.parseInt(board[i + 1][j]);
                    if (j - 1 >= 0) count += Integer.parseInt
################################################################

Solution:
[['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'g', 'e', 'e', 'g', 'e', 'e', 'g', '.', '.', '.', '.', '.', '.']]

