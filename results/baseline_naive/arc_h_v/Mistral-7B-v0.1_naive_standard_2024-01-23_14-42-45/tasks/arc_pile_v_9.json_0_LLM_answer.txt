Input token: 497
Output token: 284
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['g', '.', 'c', '.], ['g', 'b', '.', 'h], ['.', '.', '.', '.], ['.', '.', '.', '.']]
output: [['.', '.', '.', '.], ['.', '.', '.', '.], ['g', '.', '.', '.], ['g', 'b', 'c', 'h']]

Example_2:
input: [['.', 'b', '.', '.', '.', '.], ['a', '.', 'c', '.', '.', '.], ['a', '.', '.', '.', '.', 'f], ['.', '.', '.', '.', '.', 'f], ['.', '.', '.', '.', '.', 'f], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'f], ['a', '.', '.', '.', '.', 'f], ['a', 'b', 'c', '.', '.', 'f']]

Example_3:
input: [['b', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['b', '.', 'f', 'i', 'e], ['b', '.', 'f', '.', 'e], ['.', '.', '.', '.', 'e']]
output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['b', '.', '.', '.', 'e], ['b', '.', 'f', '.', 'e], ['b', '.', 'f', 'i', 'e']]

Test case:
input: [['.', '.', '.', '.', '.], ['g', '.', 'i', '.', 'd], ['.', 'b', '.', '.', '.], ['g', '.', '.', 'h', 'd], ['.', '.', '.', 'h', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Constraints:
1 <= grid.length, grid[0].length <= 50
grid[i][j] is either a lowercase English letter or '.'.
 */
public class RotateImage {
    public void rotate(char[][] grid) {
        int n = grid.length;
        for (int i=0; i<n/2; ++i){
            for (int j=i; j<n-i-1; ++j){
                char tmp = grid[i][j];
                grid[i][j] = grid[n-j-1][i];
                grid[n-j-1][i] = grid[n-i-1][n-j-1];
                grid[n-i-1][n-j-1] = grid[j][n-i-1];
                grid[j][n-i-1] = tmp;
            }
        }
    }
}
################################################################

Solution:
[['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['g', '.', '.', 'h', 'd], ['g', 'b', 'i', 'h', 'd']]

