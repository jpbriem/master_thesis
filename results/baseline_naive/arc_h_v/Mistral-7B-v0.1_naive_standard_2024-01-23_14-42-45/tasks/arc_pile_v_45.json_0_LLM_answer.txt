Input token: 592
Output token: 287
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['d', '.', '.', '.', '.', 'f], ['d', '.', 'e', '.', '.', 'f], ['.', 'a', 'e', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['d', '.', '.', '.', '.', 'f], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['d', '.', '.', '.', '.', 'f], ['d', '.', 'e', '.', '.', 'f], ['d', 'a', 'e', '.', '.', 'f']]

Example_2:
input: [['.', 'c', 'f', '.', '.', '.], ['.', '.', '.', '.', 'd', '.], ['.', '.', 'f', '.', 'd', '.], ['.', '.', 'f', '.', '.', '.], ['.', 'c', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', 'f', '.', 'd', '.], ['.', 'c', 'f', '.', 'd', '.], ['.', 'c', 'f', '.', 'd', '.']]

Example_3:
input: [['.', '.', '.', '.', 'h], ['.', 'f', 'd', '.', '.], ['.', '.', 'd', '.', '.], ['.', '.', 'd', '.', 'h], ['i', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', 'd', '.', '.], ['.', '.', 'd', '.', 'h], ['i', 'f', 'd', '.', 'h']]

Test case:
input: [['.', '.', '.', '.', '.], ['.', '.', '.', 'e', '.], ['.', 'i', '.', '.', 'f], ['.', '.', '.', '.', 'f], ['d', 'i', 'a', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Constraints:
0 <= matrix.length, matrix[i].length <= 500
matrix[i][j] is either '.' or a lowercase English letter.
 */
public class RotateImage {
    public void rotate(char[][] matrix) {
        int n = matrix.length;
        for (int i=0; i<n/2; i++) {
            for (int j=i; j<n-i-1; j++) {
                char temp = matrix[i][j];
                matrix[i][j] = matrix[n-j-1][i];
                matrix[n-j-1][i] = matrix[n-i-1][n-j-1];
                matrix[n-i-1][n-j-1] = matrix[j][n-i-1];
                matrix[j][n-i-1] = temp;
            }
        }
    }
}
################################################################

Solution:
[['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', 'i', '.', '.', 'f], ['d', 'i', 'a', 'e', 'f']]

