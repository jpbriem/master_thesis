Input token: 635
Output token: 422
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', '.], ['.', 'f', 'f', 'f', '.', '.], ['e', '.', '.', '.', 'e', 'e], ['.', '.', '.', '.', '.', '.], ['c', '.', '.', '.', '.', '.']]
output: [['a', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['f', 'f', 'f', '.', '.', '.], ['e', 'e', 'e', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['c', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.], ['e', '.', '.', 'e', '.', '.], ['i', '.', '.', '.', 'i', '.], ['.', 'h', 'h', 'h', '.', '.], ['.', 'g', '.', '.', '.', 'g], ['.', 'd', '.', 'd', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['e', 'e', '.', '.', '.', '.], ['i', 'i', '.', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['g', 'g', '.', '.', '.', '.], ['d', 'd', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.], ['a', 'a', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', '.], ['i', 'i', '.', 'i', '.', '.], ['.', '.', '.', '.', '.', '.], ['f', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['a', 'a', 'a', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['f', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'e', '.', 'e], ['.', '.', 'b', 'b', 'b], ['.', 'g', 'g', '.', '.], ['.', 'c', 'c', '.', '.], ['d', '.', '.', '.', 'd']]
################################################################

LLM answer:

output: [['.', '.', 'e', '.', 'e'], ['.', '.', 'b', 'b', 'b'], ['.', 'g', 'g', '.', '.'], ['.', 'c', 'c', '.', '.'], ['d', '.', '.', '.', 'd']]

Constraints:
0 <= matrix.length, matrix[i].length <= 500
matrix[i][j] is either '.' or lowercase English letter.
 */
public class ReplaceSpaces {
    public static void main(String[] args) {
        String[][] matrix = new String[][]{
                {".", ".", ".", ".", "a", "."},
                {".", ".", ".", ".", ".", "."},
                {".", "f", "f", "f", ".", "."},
                {"e", ".", ".", ".", "e", "e"},
                {".", ".", ".", ".", ".", "."},
                {"c", ".", ".", ".", ".", "."}
        };
        System.out.println(Arrays.deepToString(replaceSpace(matrix)));
    }

    private static String[][] replaceSpace(String[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j].equals(".")) {
                    continue;
                } else {
                    sb.append("%");
                    sb.append(matrix[i][j]);
                }
            }
            matrix[i] = sb.toString().split("%");
        }
        return matrix;
    }
}
################################################################

Solution:
[['e', 'e', '.', '.', '.], ['b', 'b', 'b', '.', '.], ['g', 'g', '.', '.', '.], ['c', 'c', '.', '.', '.], ['d', 'd', '.', '.', '.']]

