
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'a', 'c', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'g'], ['a', 'e', 'a', 'a', 'a', 'a'], ['j', 'a', 'a', 'a', 'a', 'a']]
output: [['c', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'a', 'a'], ['j', 'a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['b', 'a', 'a', 'b', 'a', 'b'], ['h', 'a', 'a', 'a', 'h', 'a'], ['a', 'a', 'd', 'a', 'd', 'd'], ['a', 'i', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'g', 'a']]
output: [['b', 'b', 'b', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a', 'a'], ['d', 'd', 'd', 'a', 'a', 'a'], ['i', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'd', 'a', 'd', 'a', 'a'], ['a', 'a', 'a', 'h', 'h', 'a'], ['a', 'a', 'a', 'a', 'f', 'a'], ['a', 'a', 'b', 'a', 'a', 'b']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['d', 'd', 'a', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a', 'a']]

Test case:
input: [['a', 'a', 'h', 'a', 'h', 'a'], ['e', 'e', 'a', 'a', 'e', 'a'], ['a', 'b', 'b', 'a', 'a', 'a'], ['g', 'g', 'a', 'a', 'a', 'g'], ['a', 'i', 'a', 'a', 'a', 'i'], ['d', 'a', 'a', 'a', 'd', 'd']]



###########################################################
Sample Outputs:
To solve this problem, we can iterate through each row of the input matrix and then iterate through each element in the row. We will check if there exists a neighboring cell (left, right, up, or down) that has a different character than the current cell. If such a neighbor is found, we replace the current cell's character with the neighbor's character.
Here's the Python code to implement this solution:
```python
def change_characters(input_matrix):
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix[i])):
            # Check left neighbor
            if j > 0 and input_matrix[i][j] != input_matrix[i][j-1]:
                input_matrix[i][j] = input_matrix[i][j-1]
            
            # Check right neighbor
            if j < len(input_matrix[i])-1 and input_matrix[i][j] != input_matrix[i][j+1]:
                input_matrix[i][j] = input_matrix[i][j+1]
            
            # Check up neighbor
            if i > 0 and input_matrix[i][j] != input_matrix[i-1][j]:
                input_matrix[i][j] = input_matrix[i-1][j]
            
            # Check down neighbor
            if i < len(input_matrix)-1 and input_matrix[i][j] != input_matrix[i+1][j]:
                input_matrix[i][j] = input_matrix[i+1][j]
                
    return input_matrix

# Test case
input_matrix = [['a', 'a', 'h', 'a', 'h', 'a'],
                 ['e', 'e', 'a', 'a', 'e', 'a'],
                 ['a', 'b', 'b', 'a', 'a', 'a'],
                 ['g', 'g', 'a', 'a', 'a', 'g'],
                 ['a', 'i', 'a', 'a', 'a', 'i'],
                 ['d', 'a', 'a', 'a', 'd', 'd']]
print(change_characters(input_matrix))
```

The output for the given test case should be:
```python
[['a', 'a', 'h', 'a', 'h', 'a'],
 ['e', 'e', 'a', 'a', 'e', 'a'],
 ['b', 'b', 'b', 'a', 'a', 'a'],
 ['g', 'g', 'a', 'a', 'a', 'g'],
 ['i', 'i', 'a', 'a', 'a', 'i'],
 ['d', 'd', 'a', 'a', 'd', 'd']]
```


###########################################################
Result:
solution: [['h', 'h', 'a', 'a', 'a', 'a'], ['e', 'e', 'e', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a', 'a'], ['g', 'g', 'g', 'a', 'a', 'a'], ['i', 'i', 'a', 'a', 'a', 'a'], ['d', 'd', 'd', 'a', 'a', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0321285140562249

cat_success_cnt: 2

cat_success_rate: 0.04081632653061224

