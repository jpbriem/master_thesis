
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', 'f', 'a', 'h'], ['.', '.', 'd', 'f', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'i', 'd', '.', '.', 'h'], ['.', 'i', '.', '.', '.', '.'], ['.', '.', '.', '.', 'a', 'h']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'h'], ['.', 'i', 'd', 'f', 'a', 'h'], ['.', 'i', 'd', 'f', 'a', 'h']]

Example_2:
input: [['.', 'c', 'a', 'd'], ['.', '.', 'a', '.'], ['.', '.', 'a', '.'], ['.', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['.', '.', 'a', '.'], ['.', '.', 'a', '.'], ['.', 'c', 'a', 'd']]

Example_3:
input: [['g', 'a', '.', '.'], ['.', 'a', '.', 'e'], ['g', 'a', '.', '.'], ['g', '.', '.', 'e']]
output: [['.', '.', '.', '.'], ['g', 'a', '.', '.'], ['g', 'a', '.', 'e'], ['g', 'a', '.', 'e']]

Test case:
input: [['h', '.', 'c', '.', '.', 'd'], ['h', 'g', '.', '.', '.', 'd'], ['h', 'g', 'c', '.', '.', 'd'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'e', 'f', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'e', 'f', '.'], ['.', 'h', 'g', 'c', 'a', 'd']]
*/

// Solution 1:
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[n-j-1][i];
                matrix[n-j-1][i] = matrix[n-i-1][n-j-1];
                matrix[n-i-1][n-j-1] = matrix[j][n-i-1];
                matrix[j][n-i-1] = tmp;
            }
        }
    }
}

// Solution 2:
class Solution {
    public void rotate(int[][] matrix) {
        transpose(matrix);
        reverse(matrix);
    }

    private void transpose(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                swap(matrix, i, j);
            }
        }
    }

    private void reverse(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n / 2; ++j) {
                swap(matrix, i, j, n - j - 1);
            }
        }
    }

    private void swap(int[][] matrix, int x, int y) {
        int temp = matrix[x][y];
        matrix[x][y] = matrix[y][x];
        matrix[y][x] = temp;
    }

    private void swap(int[][] matrix, int x, int y, int z) {
        int temp = matrix[x][y];
        matrix[x][y] = matrix[x][z];
        matrix[x][z] = temp;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['h', '.', '.', '.', '.', 'd'], ['h', 'g', 'c', '.', '.', 'd'], ['h', 'g', 'c', 'e', 'f', 'd']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.011029411764705883

cat_success_cnt: 0

cat_success_rate: 0.0

