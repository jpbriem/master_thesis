
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['c', '.', 'd', '.', '.'], ['c', '.', 'd', '.', 'b'], ['.', '.', '.', '.', '.'], ['c', '.', '.', '.', 'b'], ['.', '.', '.', 'f', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['c', '.', '.', '.', '.'], ['c', '.', 'd', '.', 'b'], ['c', '.', 'd', 'f', 'b']]

Example_2:
input: [['a', 'i', '.', '.'], ['a', '.', '.', '.'], ['a', '.', 'd', 'b'], ['.', 'i', '.', '.']]
output: [['.', '.', '.', '.'], ['a', '.', '.', '.'], ['a', 'i', '.', '.'], ['a', 'i', 'd', 'b']]

Example_3:
input: [['c', '.', 'h', '.'], ['c', '.', '.', 'd'], ['.', 'f', 'h', '.'], ['c', 'f', 'h', '.']]
output: [['.', '.', '.', '.'], ['c', '.', 'h', '.'], ['c', 'f', 'h', '.'], ['c', 'f', 'h', 'd']]

Test case:
input: [['g', 'i', '.', '.', 'h'], ['g', '.', '.', '.', '.'], ['.', 'i', '.', 'e', 'h'], ['.', '.', 'a', 'e', '.'], ['.', '.', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'a', 'e', '.'], ['.', 'i', '.', 'e', 'h']]
*/

// Solution 1:
class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board[click[0]][click[1]] == "M") return new String[][]{};
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        // base case
        if (!inArea(x, y)) return;
        if (board[x][y].equals("E")) {
            int count = getAdjacentBombCount(board, x, y);
            if (count > 0) {
                board[x][y] = "" + count;
            } else {
                board[x][y] = "";
                for (int i = -1; i <= 1; ++i) {
                    for (int j = -1; j <= 1; ++j) {
                        dfs(board, x+i, y+j);
                    }
                }
            }
        }
    }

    private boolean inArea(int x, int y) {
        return x >= 0 && x < board.length && y >= 0 && y < board[0].length;
    }

    private int getAdjacentBombCount(String[][] board, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (!(i == 0 && j == 0) && board[x+i][y+j].equals("M")) {
                    count++;
                }
            }
        }
        return count;
    }
}

// Solution 2:
class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board[click[0]][click[1]].equals("M")) {
            board[click[0]][click[1]] = "X";
            return board;
        }
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (!inArea(x, y)) return;
        if (board[x][y].equals("E")) {
            int count = getAdjacentBombCount(board, x, y);
            if (count > 0) {
                board[x][y] = "" + count;
            } else {
                board[x][y] = "";
                for (int i = -1; i <= 1; ++i) {
                    for (int j = -1; j <= 1; ++j) {
                        dfs(board, x+i, y+j);
                    }
                }
            }
        }
    }

    private boolean inArea(int x, int y) {
        return x >= 0 && x < board.length && y >= 0 && y < board[0].length;
    }

    private int getAdjacentBombCount(String[][] board, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (!(i == 0 && j == 0) && board[x+i][y+j].equals("M")) {
                    count++;
                }
            }
        }
        return count;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['g', 'i', '.', 'e', 'h'], ['g', 'i', 'a', 'e', 'h']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.01020408163265306

cat_success_cnt: 0

cat_success_rate: 0.0

