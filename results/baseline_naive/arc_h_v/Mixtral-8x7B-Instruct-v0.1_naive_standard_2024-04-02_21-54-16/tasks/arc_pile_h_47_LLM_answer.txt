
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['d', '.', '.', '.', '.', '.'], ['g', '.', '.', 'g', 'g', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['.', 'e', 'e', '.', '.', 'e']]
output: [['d', '.', '.', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['e', 'e', 'e', '.', '.', '.']]

Example_2:
input: [['.', 'i', '.', '.', '.', 'i'], ['.', 'h', '.', '.', '.', 'h'], ['.', 'b', '.', '.', '.', 'b'], ['.', 'c', '.', 'c', 'c', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.']]
output: [['i', 'i', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['i', '.', '.', 'i', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'd', '.'], ['g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['i', 'i', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['h', '.', '.', '.'], ['.', 'a', 'a', '.'], ['e', 'e', 'e', '.'], ['i', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['h', '.', '.', '.'], ['.', 'a', 'a', '.'], ['e', 'e', 'e', '.'], ['i', '.', '.', '.']]
*/

public class Solution {
    public char[][] fill(char[][] image) {
        if (image == null || image.length == 0 || image[0].length == 0) return new char[0][];
        int m = image.length, n = image[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!visited[i][j]) {
                    dfs(image, visited, i, j);
                }
            }
        }
        return image;
    }

    private void dfs(char[][] image, boolean[][] visited, int x, int y) {
        if (x < 0 || x >= image.length || y < 0 || y >= image[0].length || visited[x][y] || image[x][y]!= '#') return;
        visited[x][y] = true;
        image[x][y] = '#';
        dfs(image, visited, x + 1, y);
        dfs(image, visited, x - 1, y);
        dfs(image, visited, x, y + 1);
        dfs(image, visited, x, y - 1);
    }
}


###########################################################
Result:
solution: [['h', '.', '.', '.'], ['a', 'a', '.', '.'], ['e', 'e', 'e', '.'], ['i', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.012345679012345678

cat_success_cnt: 2

cat_success_rate: 0.046511627906976744

