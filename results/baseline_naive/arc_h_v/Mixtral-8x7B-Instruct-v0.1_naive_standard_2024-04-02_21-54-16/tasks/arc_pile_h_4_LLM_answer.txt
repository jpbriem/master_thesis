
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'b'], ['i', 'i', 'i', '.', '.', '.'], ['d', '.', '.', '.', 'd', 'd'], ['h', '.', '.', 'h', 'h', '.'], ['.', 'f', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['f', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', 'c', '.', '.'], ['.', '.', '.', '.'], ['g', 'g', 'g', '.'], ['.', 'f', 'f', 'f']]
output: [['c', '.', '.', '.'], ['.', '.', '.', '.'], ['g', 'g', 'g', '.'], ['f', 'f', 'f', '.']]

Example_3:
input: [['a', '.', '.', '.', 'a'], ['.', '.', '.', '.', 'i'], ['e', '.', 'e', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'c', 'c', 'c']]
output: [['a', 'a', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['e', 'e', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.']]

Test case:
input: [['d', 'd', '.', 'd', '.'], ['.', 'h', 'h', '.', '.'], ['.', 'c', '.', '.', '.'], ['b', '.', 'b', 'b', '.'], ['.', '.', '.', '.', 'a']]

###########################################################
Sample Outputs:
output: [['d', 'd', '.', 'd', '.'], ['.', 'h', 'h', '.', '.'], ['.', 'c', '.', '.', '.'], ['b', 'b', 'b', '.', '.'], ['a', '.', '.', '.', '.']]
*/

public class Solution {
    public char[][] pushDominoes(char[][] dominoes) {
        int n = dominoes.length;
        for (int i = 0; i < n; ++i) {
            if (dominoes[i][0]!= '.') break;
            for (int j = 0; j < n - 1; ++j) {
                if (dominoes[i][j + 1] == '.') continue;
                dominoes[i][j + 1] = dominoes[i][j];
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            if (dominoes[i][n - 1]!= '.') break;
            for (int j = n - 1; j > 0; --j) {
                if (dominoes[i][j - 1] == '.') continue;
                dominoes[i][j - 1] = dominoes[i][j];
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n - 1; ++j) {
                if (dominoes[i][j] == '.' || dominoes[i][j + 1] == '.') continue;
                if (dominoes[i][j] == dominoes[i][j + 1]) continue;
                if (dominoes[i][j] == 'l' && dominoes[i][j + 1] == 'r') {
                    for (int k = j + 1; k < n; ++k) {
                        dominoes[i][k] = 'r';
                    }
                } else if (dominoes[i][j] == 'r' && dominoes[i][j + 1] == 'l') {
                    for (int k = j; k >= 0; --k) {
                        dominoes[i][k] = 'l';
                    }
                }
            }
        }
        return dominoes;
    }
}


###########################################################
Result:
solution: [['d', 'd', 'd', '.', '.'], ['h', 'h', '.', '.', '.'], ['c', '.', '.', '.', '.'], ['b', 'b', 'b', '.', '.'], ['a', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.00851063829787234

cat_success_cnt: 1

cat_success_rate: 0.02857142857142857

