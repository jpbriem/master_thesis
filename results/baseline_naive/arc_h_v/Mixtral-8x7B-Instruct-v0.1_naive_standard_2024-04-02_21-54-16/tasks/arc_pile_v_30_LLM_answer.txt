
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.'], ['e', 'c', '.', 'a', '.'], ['.', 'c', '.', '.', 'd'], ['.', 'c', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'c', '.', '.', '.'], ['.', 'c', '.', 'a', '.'], ['e', 'c', '.', 'a', 'd']]

Example_2:
input: [['i', '.', 'c', '.', '.'], ['.', 'e', 'c', 'a', '.'], ['i', '.', '.', '.', '.'], ['.', 'e', '.', '.', 'h'], ['.', 'e', 'c', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'e', 'c', '.', '.'], ['i', 'e', 'c', '.', '.'], ['i', 'e', 'c', 'a', 'h']]

Example_3:
input: [['.', '.', 'b', 'f', '.'], ['.', '.', '.', 'f', '.'], ['.', '.', 'b', '.', '.'], ['.', '.', '.', 'f', '.'], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'f', '.'], ['.', '.', 'b', 'f', '.'], ['.', '.', 'b', 'f', '.']]

Test case:
input: [['.', 'f', 'e', '.'], ['h', '.', 'e', '.'], ['.', 'f', '.', 'c'], ['.', 'f', 'e', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', 'f', 'e', '.']]
*/

public class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board[click[0]][click[1]] == "M") return new String[][]{};
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) return;
        if (board[x][y]!= null &&!board[x][y].equals(".")) return;
        if (x + 1 < board.length && board[x+1][y]!= null && board[x+1][y].charAt(0) >='0' && board[x+1][y].charAt(0) <= '8') return;
        if (x - 1 >= 0 && board[x-1][y]!= null && board[x-1][y].charAt(0) >='0' && board[x-1][y].charAt(0) <= '8') return;
        if (y + 1 < board[0].length && board[x][y+1]!= null && board[x][y+1].charAt(0) >='0' && board[x][y+1].charAt(0) <= '8') return;
        if (y - 1 >= 0 && board[x][y-1]!= null && board[x][y-1].charAt(0) >='0' && board[x][y-1].charAt(0) <= '8') return;

        if (board[x][y] == null) {
            board[x][y] = "";
            for (int i = -1; i <= 1; ++i) {
                for (int j = -1; j <= 1; ++j) {
                    if (i == 0 && j == 0) continue;
                    dfs(board, x + i, y + j);
                    if (!board[x + i][y + j].equals("")) {
                        board[x][y] += board[x + i][y + j];
                    }
                }
            }
            if (board[x][y].matches("[0-9]+")) {
                board[x][y] = "" + board[x][y].length();
            }
        } else if (board[x][y].equals(".")){
            int count = 0;
            for (int i = -1; i <= 1; ++i) {
                for (int j = -1; j <= 1; ++j) {
                    if (i == 0 && j == 0) continue;
                    if (board[x + i][y + j]!= null && board[x + i][y + j].charAt(0) >= '0' && board[x + i][y + j].charAt(0) <= '8') {
                        count++;
                    }
                }
            }
            if (count > 0) {
                board[x][y] = "" + count;
            } else {
                board[x][y] = "";
                for (int i = -1; i <= 1; ++i) {
                    for (int j = -1; j <= 1; ++j) {
                        if (i == 0 && j == 0) continue;
                        dfs(board, x + i, y + j);
                    }
                }
            }
        }
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.'], ['.', 'f', 'e', '.'], ['.', 'f', 'e', '.'], ['h', 'f', 'e', 'c']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.01090909090909091

cat_success_cnt: 0

cat_success_rate: 0.0

