
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'b', '.'], ['.', 'a', '.', '.', '.', '.'], ['.', '.', '.', 'e', 'b', '.'], ['.', '.', '.', '.', 'b', '.'], ['.', '.', '.', '.', '.', 'g']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'b', '.'], ['.', '.', '.', '.', 'b', '.'], ['.', 'a', '.', 'e', 'b', 'g']]

Example_2:
input: [['.', '.', 'c', '.'], ['.', 'b', '.', '.'], ['a', '.', '.', '.'], ['.', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['a', 'b', 'c', '.']]

Example_3:
input: [['.', '.', '.', 'e'], ['c', '.', '.', 'e'], ['.', '.', '.', '.'], ['c', '.', '.', 'e']]
output: [['.', '.', '.', '.'], ['.', '.', '.', 'e'], ['c', '.', '.', 'e'], ['c', '.', '.', 'e']]

Test case:
input: [['.', '.', '.', 'g', '.'], ['i', 'a', 'e', '.', '.'], ['i', 'a', '.', 'g', 'd'], ['.', 'a', 'e', '.', '.'], ['i', '.', '.', 'g', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', 'g', '.'], ['.', '.', '.', 'g', '.'], ['.', '.', '.', 'g', '.'], ['i', 'a', 'e', '.', '.'], ['.', 'a', '.', 'g', 'd']]
*/

// Solution 1:
class Solution {
    public void rotate(char[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                char tmp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
    }
}

// Solution 2:
class Solution {
    public void rotate(char[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                int k = n - j - 1;
                char tmp = matrix[i][j];
                matrix[i][j] = matrix[k][i];
                matrix[k][i] = matrix[n - i - 1][k];
                matrix[n - i - 1][k] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['i', 'a', '.', 'g', '.'], ['i', 'a', 'e', 'g', '.'], ['i', 'a', 'e', 'g', 'd']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.010344827586206896

cat_success_cnt: 0

cat_success_rate: 0.0

