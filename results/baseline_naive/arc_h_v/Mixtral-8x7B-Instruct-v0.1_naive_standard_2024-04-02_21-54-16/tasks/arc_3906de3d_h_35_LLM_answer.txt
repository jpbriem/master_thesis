
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', 'g'], ['d', 'd', '.', '.', '.', '.', '.', '.', 'g', 'g'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', 'g', 'g'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'g', '.', '.', '.', '.'], ['d', 'd', 'g', 'g', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'g', 'g', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.', '.', '.', 'g', 'g'], ['d', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.', '.', 'g', 'g', 'g'], ['d', '.', '.', '.', '.', '.', '.', 'g', 'g', 'g'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'g', 'g', '.', '.', '.', '.', '.'], ['d', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'g', 'g', 'g', '.', '.', '.', '.', '.'], ['d', 'g', 'g', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', 'g', 'g', 'g'], ['d', 'd', 'd', '.', '.', '.', '.', '.', '.', 'g'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.', '.', '.', 'g', 'g'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', 'g', 'g']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'g', 'g', 'g', '.', '.', '.'], ['d', 'd', 'd', 'g', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.'], ['d', 'd', 'd', 'g', 'g', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'g', 'g', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.', '.', '.', 'g', 'g'], ['d', 'd', '.', '.', '.', '.', '.', 'g', 'g', 'g'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', 'g', 'g', 'g'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', 'g', 'g'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.', '.', '.', 'g', 'g'], ['d', 'd', '.', '.', '.', '.', '.', 'g', 'g', 'g'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', 'g', 'g', 'g'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', 'g', 'g'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public List<List<Character>> wallsAndGates(List<List<Character>> rooms) {
        if (rooms == null || rooms.size() == 0) return rooms;
        int m = rooms.size(), n = rooms.get(0).size();
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rooms.get(i).get(j) == 'S') {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0];
            int y = cur[1];
            if (x > 0 && rooms.get(x - 1).get(y) == 'E' && rooms.get(x - 1).get(y) >= rooms.get(x).get(y)) {
                rooms.get(x - 1).set(y, (char)(rooms.get(x).get(y) + 1));
                queue.offer(new int[]{x - 1, y});
            }
            if (x < m - 1 && rooms.get(x + 1).get(y) == 'E' && rooms.get(x + 1).get(y) >= rooms.get(x).get(y)) {
                rooms.get(x + 1).set(y, (char)(rooms.get(x).get(y) + 1));
                queue.offer(new int[]{x + 1, y});
            }
            if (y > 0 && rooms.get(x).get(y - 1) == 'E' && rooms.get(x).get(y - 1) >= rooms.get(x).get(y)) {
                rooms.get(x).set(y - 1, (char)(rooms.get(x).get(y) + 1));
                queue.offer(new int[]{x, y - 1});
            }
            if (y < n - 1 && rooms.get(x).get(y + 1) == 'E' && rooms.get(x).get(y + 1) >= rooms.get(x).get(y)) {
                rooms.get(x).set(y + 1, (char)(rooms.get(x).get(y) + 1));
                queue.offer(new int[]{x, y + 1});
            }
        }
        return rooms;
    }
}

// Solution 2:
class Solution {
    private static final char WALL = '#';
    private static final char GATE = 'D';
    private static final char EMPTY = '.';
    private static final char VISITED = 'V';
    private static final int[] DX = {-1, 0, 1, 0};
    private static final int[] DY = {0, 1, 0, -1};

    public void bfs(List<List<Character>> rooms, int sx, int sy) {
        Queue<Integer> q = new LinkedList<>();
        q.add((sx << 16) | sy);
        rooms.get(sx).set(sy, VISITED);
        while (!q.isEmpty()) {
            int top = q.poll();
            int x = top >> 16;
            int y = top & 0xFFFF;
            for (int k = 0; k < 4; k++) {
                int a = x + DX[k];
                int b = y + DY[k];
                if (a >= 0 && a < rooms.size() && b >= 0 && b < rooms.get(0).size()) {
                    if (rooms.get(a).get(b)!= WALL) {
                        if (rooms.get(a).get(b) == EMPTY) {
                            rooms.get(a).set(b, (char)(rooms.get(x).get(y) + 1));
                            q.add((a << 16) | b);
                        } else if (rooms.get(a).get(b) == GATE) {
                            rooms.get(a).set(b, Math.min(rooms.get(x).get(y), rooms.get(a).get(b)));
                        }
                    }
                }
            }
        }
    }

    public List<List<Character>> wallsAndGates(List<List<Character>> rooms) {
        if (rooms == null || rooms.size() == 0) return rooms;
        int m = rooms.size(), n = rooms.get(0).size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rooms.get(i).get(j) == GATE) {
                    bfs(rooms, i, j);
                }
            }
        }
        return rooms;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'g', 'g', '.', '.', '.', '.', '.', '.'], ['d', 'd', 'g', 'g', 'g', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.'], ['d', 'd', 'd', 'd', 'g', 'g', 'g', '.', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'g', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.007692307692307693

cat_success_cnt: 0

cat_success_rate: 0.0

