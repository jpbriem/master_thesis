
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', 'g', 'g'], ['.', '.', 'b', '.'], ['.', '.', '.', 'c'], ['.', '.', 'h', '.']]
output: [['g', 'g', '.', '.'], ['b', '.', '.', '.'], ['c', '.', '.', '.'], ['h', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', 'a', 'a', '.'], ['.', '.', '.', '.', '.', 'b'], ['.', '.', '.', '.', 'c', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'f', 'f', 'f', '.', '.']]
output: [['a', 'a', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['c', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['f', 'f', 'f', '.', '.', '.']]

Example_3:
input: [['.', 'b', 'b', '.', 'b'], ['.', '.', '.', '.', '.'], ['.', 'f', 'f', '.', '.'], ['.', '.', 'i', '.', '.'], ['e', 'e', 'e', '.', '.']]
output: [['b', 'b', 'b', '.', '.'], ['.', '.', '.', '.', '.'], ['f', 'f', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['e', 'e', 'e', '.', '.']]

Test case:
input: [['.', 'g', '.', 'g', '.'], ['.', '.', 'b', '.', '.'], ['.', '.', '.', 'i', '.'], ['h', 'h', '.', '.', '.'], ['.', 'd', '.', 'd', '.']]

###########################################################
Sample Outputs:
output: [['g', 'g', '.', '.', '.'], ['.', '.', 'b', '.', '.'], ['.', '.', '.', 'i', '.'], ['.', '.', '.', '.', '.'], ['.', 'd', '.', 'd', '.']]
*/

public class Solution {
    public String[][] move(String[][] board) {
        if (board == null || board.length == 0) return new String[0][];
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            boolean hasGotten = false;
            for (int j = 0; j < n - 1; j++) {
                if (!hasGotten && board[i][j].equals(".")) continue;
                else if (!hasGotten &&!board[i][j].equals(".")) {
                    hasGotten = true;
                    swap(board, i, j, i, j + 1);
                }
                else if (hasGotten && board[i][j].equals(".") && board[i][j + 1].equals(".")) {
                    while (j + 1 < n && board[i][j + 1].equals(".")) j++;
                    if (j + 1 < n &&!board[i][j + 1].equals(".")) {
                        swap(board, i, j, i, j + 1);
                    }
                }
                else if (hasGotten && board[i][j].equals(".") &&!board[i][j + 1].equals(".")) {
                    while (j + 1 < n && board[i][j + 1].equals(".")) j++;
                    if (j + 1 < n && board[i][j + 1].equals(".")) {
                        j--;
                        hasGotten = false;
                    }
                }
            }
        }
        return board;
    }

    private void swap(String[][] board, int x, int y, int a, int b) {
        String tmp = board[x][y];
        board[x][y] = board[a][b];
        board[a][b] = tmp;
    }
}


###########################################################
Result:
solution: [['g', 'g', '.', '.', '.'], ['b', '.', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.'], ['d', 'd', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.012

cat_success_cnt: 2

cat_success_rate: 0.04

