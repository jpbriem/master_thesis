
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', 'h', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'e'], ['.', '.', '.', '.', '.', 'a'], ['.', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.'], ['.', '.', 'g', '.', 'g', '.']]
output: [['h', '.', '.', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['a', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.']]

Example_2:
input: [['g', '.', 'g', '.', 'g'], ['.', '.', '.', '.', 'a'], ['i', '.', 'i', '.', 'i'], ['.', '.', 'h', '.', '.'], ['.', '.', '.', '.', '.']]
output: [['g', 'g', 'g', '.', '.'], ['a', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.'], ['h', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Example_3:
input: [['.', 'i', '.', '.'], ['g', '.', '.', '.'], ['.', '.', '.', '.'], ['f', 'f', 'f', '.']]
output: [['i', '.', '.', '.'], ['g', '.', '.', '.'], ['.', '.', '.', '.'], ['f', 'f', 'f', '.']]

Test case:
input: [['.', 'f', '.', '.', '.'], ['.', '.', 'h', 'h', 'h'], ['.', 'i', 'i', '.', 'i'], ['.', 'a', 'a', 'a', '.'], ['.', 'b', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['f', '.', '.', '.', '.'], ['h', 'h', 'h', '.', '.'], ['i', 'i', '.', '.', 'i'], ['a', 'a', 'a', '.', '.'], ['b', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public char[][] rotate(char[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n / 2 + 1; ++i) {
            for (int j = i; j < n - i - 1; ++j) {
                char tmp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
        return matrix;
    }
}

// Solution 2:
class Solution {
    public char[][] rotate(char[][] matrix) {
        if (matrix == null || matrix.length <= 1) {
            return matrix;
        }
        int len = matrix.length, halfLen = len >> 1;
        for (int row = 0; row < halfLen; row++) {
            for (int col = row; col < len - row - 1; col++) {
                // save the top-left value to a temp variable
                char tmp = matrix[row][col];
                // move the values in clockwise direction
                matrix[row][col] = matrix[len - col - 1][row];
                matrix[len - col - 1][row] = matrix[len - row - 1][len - col - 1];
                matrix[len - row - 1][len - col - 1] = matrix[col][len - row - 1];
                matrix[col][len - row - 1] = tmp;
            }
        }
        return matrix;
    }
}


###########################################################
Result:
solution: [['f', '.', '.', '.', '.'], ['h', 'h', 'h', '.', '.'], ['i', 'i', 'i', '.', '.'], ['a', 'a', 'a', '.', '.'], ['b', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.004424778761061947

cat_success_cnt: 0

cat_success_rate: 0.0

