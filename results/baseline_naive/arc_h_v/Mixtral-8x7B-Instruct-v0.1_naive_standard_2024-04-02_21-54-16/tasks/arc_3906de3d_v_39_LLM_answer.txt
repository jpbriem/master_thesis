
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.', '.'], ['.', 'g', '.', '.', '.', 'g', 'g', '.', '.', '.'], ['.', 'g', '.', '.', '.', '.', 'g', '.', '.', '.'], ['.', 'g', '.', '.', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'h', '.', '.'], ['.', '.', 'h', 'h', '.', '.', '.', 'h', '.', '.'], ['h', '.', 'h', 'h', '.', '.', '.', 'h', '.', '.']]
output: [['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.', '.'], ['h', 'g', 'h', 'h', '.', 'g', 'g', '.', '.', '.'], ['.', 'g', 'h', 'h', '.', '.', 'g', '.', '.', '.'], ['.', 'g', '.', '.', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.'], ['g', 'g', 'g', 'g', 'g', '.', 'g', 'g', '.', '.'], ['g', 'g', 'g', 'g', 'g', '.', '.', 'g', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.'], ['.', 'h', '.', '.', 'h', 'h', 'h', '.', 'h', '.'], ['.', 'h', 'h', '.', 'h', 'h', 'h', '.', 'h', '.']]
output: [['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.'], ['g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.'], ['g', 'g', 'g', 'g', 'g', 'h', 'g', 'g', 'h', '.'], ['g', 'g', 'g', 'g', 'g', 'h', 'h', 'g', 'h', '.'], ['.', 'h', 'h', '.', 'h', '.', 'h', 'g', '.', '.'], ['.', 'h', '.', '.', 'h', '.', 'h', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'h', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', '.', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', '.', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', '.', '.', 'g', 'g', 'g', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', 'h', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'h', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'h', '.', '.', 'h', '.', '.'], ['.', '.', '.', '.', 'h', '.', '.', 'h', '.', '.']]
output: [['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'h', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'h', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', '.', 'h', 'g', 'g', 'g', '.', '.'], ['.', '.', '.', '.', 'h', '.', 'g', 'h', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'h', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', '.', 'g', '.', 'g', '.', '.'], ['.', '.', 'g', '.', '.', 'g', '.', 'g', '.', '.'], ['.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', 'h', '.'], ['.', '.', '.', '.', '.', '.', 'h', '.', 'h', '.'], ['.', '.', '.', 'h', '.', '.', 'h', '.', 'h', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', '.', '.'], ['.', '.', 'g', 'g', '.', 'g', '.', 'g', '.', '.'], ['.', '.', 'g', '.', '.', 'g', '.', 'g', '.', '.'], ['.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', 'h', '.'], ['.', '.', '.', '.', '.', '.', 'h', '.', 'h', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public List<List<Character>> wallsAndGates(List<List<Character>> rooms) {
        if (rooms == null || rooms.size() == 0) return rooms;
        int m = rooms.size(), n = rooms.get(0).size();
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rooms.get(i).get(j) == 'S') {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0];
            int y = cur[1];
            if (x > 0 && rooms.get(x - 1).get(y) == '.') {
                queue.offer(new int[]{x - 1, y});
                rooms.get(x - 1).set(y, 'D');
            }
            if (x + 1 < m && rooms.get(x + 1).get(y) == '.') {
                queue.offer(new int[]{x + 1, y});
                rooms.get(x + 1).set(y, 'D');
            }
            if (y > 0 && rooms.get(x).get(y - 1) == '.') {
                queue.offer(new int[]{x, y - 1});
                rooms.get(x).set(y - 1, 'D');
            }
            if (y + 1 < n && rooms.get(x).get(y + 1) == '.') {
                queue.offer(new int[]{x, y + 1});
                rooms.get(x).set(y + 1, 'D');
            }
            if (rooms.get(x).get(y) == 'D' && (x == 0 || x == m - 1 || y == 0 || y == n - 1)) {
                rooms.get(x).set(y, 'E');
            }
        }
        return rooms;
    }
}


###########################################################
Result:
solution: [['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.'], ['.', '.', 'g', 'g', 'g', 'g', 'g', 'g', 'h', '.'], ['.', '.', 'g', 'g', '.', 'g', 'h', 'g', '.', '.'], ['.', '.', 'g', 'h', '.', 'g', 'h', 'g', '.', '.'], ['.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.005434782608695652

cat_success_cnt: 0

cat_success_rate: 0.0

