
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', '.', 'h', 'h', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', '.', '.', 'g', 'h', 'h', 'g', '.', '.', 'g', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.']]
'''

def replace_g(grid):
    for i in range(len(grid)):
        for j in range(len(grid[i])):
            if grid[i][j] == "g":
                grid[i][j] = "h"
    return grid

def add_ghosts(grid, n):
    new_grid = []
    for row in grid:
        new_row = []
        for cell in row:
            new_row.append(cell)
        new_grid.append(new_row)

    # top left corner
    if (n % 4)!= 0 and (n % 4)!= 3:
        new_grid[0][0] = "h"

    # bottom right corner
    if (n % 4)!= 1 and (n % 4)!= 2:
        new_grid[-1][-1] = "h"

    # top right corner
    if (n % 4)!= 0 and (n % 4)!= 1:
        new_grid[0][-1] = "h"

    # bottom left corner
    if (n % 4)!= 2 and (n % 4)!= 3:
        new_grid[-1][0] = "h"

    # horizontal edges
    if (n % 4) == 0 or (n % 4) == 3:
        for i in range(len(new_grid)):
            new_grid[i][0] = "h"
            new_grid[i][-1] = "h"

    # vertical edges
    if (n % 4) == 0 or (n % 4) == 1:
        for i in range(len(new_grid)):
            new_grid[0][i] = "h"
            new_grid[-1][i] = "h"

    return new_grid

def generate_maze(grid, maze_size):
    count = 0
    while True:
        count += 1
        print("Attempt", count)
        temp_grid = copy.deepcopy(grid)
        temp_grid = replace_g(temp_grid)
        temp_grid = add_ghosts(temp_grid, count)
        if is_valid_maze(temp_grid, maze_size):
            break

    return temp_grid

def is_valid_maze(grid, size):
    num_of_ghosts = 0
    for i in range(size):
        for j in range(size):
            if grid[i][j] == "h":
                num_of_ghosts += 1

    if num_of_ghosts < 3:
        return False

    for i in range(size - 1):
        for j in range(size - 1):
            if grid[i][j] == "." and grid[i + 1][j] == "." and grid[i][j + 1] == "." and grid[i + 1][j + 1] == ".":
                return False

    return True

if __name__ == "__main__":
    input_1 = [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.']]
    output_1 = [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.']]

    input
    output

    input
    output

    test_case = [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', 'g', '.', '.', '.', '.', '.', '.']]
    expected_output = [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', '.', 'h', 'h', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', '.', '.', 'g', 'h', 'h', 'g', '.', '.', 'g', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.']]

    assert generate_maze(input_1, len(input_1)) == output_1
    assert generate_maze(input_2, len(input_2)) == output_2
    assert generate_maze(input_3, len(input_3)) == output_3
    assert generate_maze(test_case, len(test_case)) == expected_output


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'g', 'h', 'h', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', 'h', 'h', 'g', '.', '.', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.16666666666666666

cat_success_cnt: 1

cat_success_rate: 0.16666666666666666

