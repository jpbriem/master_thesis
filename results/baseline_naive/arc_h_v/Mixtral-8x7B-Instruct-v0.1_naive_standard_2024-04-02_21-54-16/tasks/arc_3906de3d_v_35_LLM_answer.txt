
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', '.', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', '.', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', '.', 'd', '.'], ['.', '.', '.', 'd', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'd', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'g', '.', 'g', '.', '.'], ['.', '.', '.', '.', '.', 'g', '.', 'g', 'g', '.']]
output: [['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', 'g', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', 'g', 'd', '.'], ['.', '.', 'd', 'd', 'd', 'd', 'd', '.', 'd', '.'], ['.', '.', '.', 'd', '.', 'g', '.', '.', 'g', '.'], ['.', '.', '.', 'd', '.', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['.', '.', '.', '.', 'd', 'd', '.', 'd', 'd', '.'], ['.', '.', '.', '.', '.', 'd', '.', 'd', 'd', '.'], ['.', '.', '.', '.', '.', 'd', '.', '.', 'd', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', 'd', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.', 'g', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.', 'g', 'g', '.', '.'], ['.', '.', '.', 'g', 'g', '.', 'g', 'g', '.', '.']]
output: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['.', '.', '.', 'g', 'd', 'd', 'g', 'd', 'd', '.'], ['.', '.', '.', 'g', 'g', 'd', 'g', 'd', 'd', '.'], ['.', '.', '.', 'g', 'g', 'd', 'g', 'g', 'd', '.'], ['.', '.', '.', '.', 'g', '.', '.', 'g', 'd', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['d', 'd', 'd', '.', 'd', 'd', '.', 'd', 'd', '.'], ['.', '.', 'd', '.', 'd', 'd', '.', '.', '.', '.'], ['.', '.', 'd', '.', 'd', 'd', '.', '.', '.', '.'], ['.', '.', 'd', '.', '.', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', '.', '.'], ['g', '.', '.', 'g', '.', '.', '.', 'g', '.', '.'], ['g', '.', '.', 'g', '.', '.', 'g', 'g', '.', '.']]
output: [['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.'], ['d', 'd', 'd', 'g', 'd', 'd', 'g', 'd', 'd', '.'], ['g', '.', 'd', 'g', 'd', 'd', '.', 'g', '.', '.'], ['g', '.', 'd', '.', 'd', 'd', '.', 'g', '.', '.'], ['.', '.', 'd', '.', '.', 'd', '.', 'g', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.'], ['.', '.', '.', 'd', '.', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'g', '.', 'g', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.', 'g', 'g', '.', '.'], ['.', '.', '.', 'g', 'g', '.', 'g', 'g', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', '.', '.', '.', '.'], ['.', '.', '.', 'd', '.', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public List<List<Character>> wallsAndGates(char[][] rooms) {
        if (rooms == null || rooms.length == 0 || rooms[0].length == 0) return new ArrayList<>();
        int m = rooms.length, n = rooms[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rooms[i][j] == 'S') {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int k = 0; k < size; k++) {
                int[] cur = queue.poll();
                int x = cur[0];
                int y = cur[1];
                if (x > 0 && rooms[x - 1][y] == 'E' && rooms[x - 1][y]!= 'D') {
                    rooms[x - 1][y] = (char)(rooms[x][y] + 1);
                    queue.offer(new int[]{x - 1, y});
                }
                if (x < m - 1 && rooms[x + 1][y] == 'E' && rooms[x + 1][y]!= 'D') {
                    rooms[x + 1][y] = (char)(rooms[x][y] + 1);
                    queue.offer(new int[]{x + 1, y});
                }
                if (y > 0 && rooms[x][y - 1] == 'E' && rooms[x][y - 1]!= 'D') {
                    rooms[x][y - 1] = (char)(rooms[x][y] + 1);
                    queue.offer(new int[]{x, y - 1});
                }
                if (y < n - 1 && rooms[x][y + 1] == 'E' && rooms[x][y + 1]!= 'D') {
                    rooms[x][y + 1] = (char)(rooms[x][y] + 1);
                    queue.offer(new int[]{x, y + 1});
                }
            }
        }
        return Arrays.asList(rooms);
    }
}


###########################################################
Result:
solution: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'g', 'g', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'g', 'g', '.', '.'], ['.', '.', '.', 'd', 'g', 'd', 'g', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.005555555555555556

cat_success_cnt: 0

cat_success_rate: 0.0

