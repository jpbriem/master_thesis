
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['e', '.', '.', 'e', '.', '.'], ['.', 'i', '.', 'i', '.', 'i'], ['.', '.', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.'], ['d', '.', '.', '.', 'd', 'd'], ['.', 'a', '.', 'a', 'a', '.']]
output: [['e', 'e', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['a', 'a', 'a', '.', '.', '.']]

Example_2:
input: [['.', 'd', '.', '.', '.', 'd'], ['.', 'e', '.', '.', 'e', '.'], ['.', '.', '.', 'f', 'f', '.'], ['.', '.', '.', '.', 'g', '.'], ['.', '.', '.', 'b', '.', '.'], ['.', 'a', 'a', 'a', '.', '.']]
output: [['d', 'd', '.', '.', '.', '.'], ['e', 'e', '.', '.', '.', '.'], ['f', 'f', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['a', 'a', 'a', '.', '.', '.']]

Example_3:
input: [['f', 'f', '.', '.', '.', 'f'], ['.', '.', '.', 'h', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a'], ['g', '.', '.', '.', '.', '.']]
output: [['f', 'f', 'f', '.', '.', '.'], ['h', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['a', '.', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'f', '.', '.', 'f'], ['.', 'g', '.', '.', 'g', '.'], ['.', '.', '.', '.', '.', 'e'], ['.', '.', '.', '.', 'd', '.'], ['h', '.', '.', 'h', '.', 'h'], ['.', '.', 'c', '.', 'c', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', 'f', '.', '.', 'f'], ['.', 'g', '.', '.', 'g', '.'], ['.', '.', '.', '.', '.', 'e'], ['.', '.', '.', '.', 'd', '.'], ['h', 'h', 'h', '.', '.', 'h'], ['c', 'c', '.', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public void duplicate(char[][] matrix) {
        if (matrix == null || matrix.length == 0) return;
        int m = matrix.length, n = matrix[0].length;
        for (int i = 0; i < m; ++i) {
            boolean flag = false;
            for (int j = 0; j < n - 1; ++j) {
                if (matrix[i][j]!= '.' && matrix[i][j] == matrix[i][j + 1]) {
                    flag = true;
                } else if (flag) {
                    matrix[i][j] = matrix[i][j + 1];
                }
            }
        }
    }
}

// Solution 2:
class Solution {
    public void duplicate(char[][] matrix) {
        if (matrix == null || matrix.length == 0) return;
        int m = matrix.length, n = matrix[0].length;
        for (int i = 0; i < m; ++i) {
            char pre = '\0';
            for (int j = 0; j < n; ++j) {
                if (pre == '\0') {
                    pre = matrix[i][j];
                } else if (pre == matrix[i][j]) {
                    matrix[i][j] = pre;
                    while (--j >= 0 && matrix[i][j] == pre);
                    --j;
                } else {
                    pre = matrix[i][j];
                }
            }
        }
    }
}


###########################################################
Result:
solution: [['f', 'f', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.008620689655172414

cat_success_cnt: 1

cat_success_rate: 0.03125

