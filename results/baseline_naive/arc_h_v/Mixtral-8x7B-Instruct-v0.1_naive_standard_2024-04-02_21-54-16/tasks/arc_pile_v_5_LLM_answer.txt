
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', 'a', 'd'], ['.', '.', '.', '.'], ['.', 'h', 'a', 'd'], ['.', '.', '.', 'd']]
output: [['.', '.', '.', '.'], ['.', '.', '.', 'd'], ['.', '.', 'a', 'd'], ['.', 'h', 'a', 'd']]

Example_2:
input: [['g', '.', '.', 'c'], ['g', 'i', 'e', '.'], ['g', '.', 'e', '.'], ['.', '.', 'e', '.']]
output: [['.', '.', '.', '.'], ['g', '.', 'e', '.'], ['g', '.', 'e', '.'], ['g', 'i', 'e', 'c']]

Example_3:
input: [['h', '.', 'i', '.'], ['.', 'f', '.', '.'], ['h', '.', '.', '.'], ['h', '.', 'i', '.']]
output: [['.', '.', '.', '.'], ['h', '.', '.', '.'], ['h', '.', 'i', '.'], ['h', 'f', 'i', '.']]

Test case:
input: [['g', '.', 'c', '.', '.', '.'], ['.', 'i', '.', '.', '.', '.'], ['.', '.', '.', 'd', 'b', 'h'], ['g', '.', '.', '.', 'b', '.'], ['.', '.', '.', 'd', '.', 'h'], ['g', '.', 'c', 'd', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'd', 'b', 'h']]
*/

// Solution 1:
class Solution {
    public String[][] solve(String[][] board) {
        if (board == null || board.length == 0) return new String[0][];
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; ++i) {
            dfs(board, i, 0);
            dfs(board, i, n - 1);
        }
        for (int j = 0; j < n; ++j) {
            dfs(board, 0, j);
            dfs(board, m - 1, j);
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j].equals("O")) board[i][j] = "X";
                else if (board[i][j].equals("#")) board[i][j] = "O";
            }
        }
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y].equals("#") || board[x][y].equals("X")) return;
        board[x][y] = "#";
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
}

// Solution 2:
class Solution {
    public String[][] solve(String[][] board) {
        if (board == null || board.length == 0) return new String[0][];
        int m = board.length, n = board[0].length;
        // Step 1: DFS to mark all the boundary O as #
        for (int i = 0; i < m; ++i) {
            dfs(board, i, 0);
            dfs(board, i, n - 1);
        }
        for (int j = 0; j < n; ++j) {
            dfs(board, 0, j);
            dfs(board, m - 1, j);
        }
        // Step 2: Change all unmarked O to X and marked O to original value
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j].equals("O")) board[i][j] = "X";
                else if (board[i][j].equals("#")) board[i][j] = "O";
            }
        }
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y].equals("#") || board[x][y].equals("X")) return;
        board[x][y] = "#";
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['g', '.', '.', 'd', '.', '.'], ['g', '.', 'c', 'd', 'b', 'h'], ['g', 'i', 'c', 'd', 'b', 'h']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.010135135135135136

cat_success_cnt: 0

cat_success_rate: 0.0

