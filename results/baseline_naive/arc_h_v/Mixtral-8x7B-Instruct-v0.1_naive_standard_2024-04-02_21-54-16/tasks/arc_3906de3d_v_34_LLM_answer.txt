
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', 'd', '.', 'd', '.', '.', 'd', '.', '.'], ['.', '.', 'd', '.', 'd', '.', '.', 'd', '.', '.'], ['.', '.', 'd', '.', 'd', '.', '.', 'd', '.', '.'], ['.', '.', 'd', 'i', 'd', '.', '.', 'd', '.', '.'], ['.', '.', '.', 'i', 'd', '.', '.', '.', '.', '.'], ['.', '.', '.', 'i', '.', 'i', '.', '.', '.', '.'], ['.', '.', '.', 'i', '.', 'i', 'i', '.', '.', '.'], ['.', '.', '.', 'i', '.', 'i', 'i', '.', '.', '.'], ['.', '.', '.', 'i', '.', 'i', 'i', '.', '.', '.']]
output: [['.', '.', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', 'd', 'i', 'd', 'i', 'i', 'd', '.', '.'], ['.', '.', 'd', 'i', 'd', 'i', 'i', 'd', '.', '.'], ['.', '.', 'd', 'i', 'd', 'i', 'i', 'd', '.', '.'], ['.', '.', 'd', 'i', 'd', 'i', '.', 'd', '.', '.'], ['.', '.', '.', 'i', 'd', '.', '.', '.', '.', '.'], ['.', '.', '.', 'i', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', '.', '.', '.', '.', '.', 'd', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'd', '.', '.', '.'], ['.', '.', 'i', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', 'i', '.', 'i', '.', '.', '.', '.', '.'], ['.', '.', 'i', '.', 'i', '.', '.', '.', '.', '.'], ['.', 'i', 'i', '.', 'i', '.', '.', '.', '.', '.']]
output: [['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', 'i', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', 'i', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'i', 'i', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', '.', 'i', '.', 'i', '.', 'd', '.', '.', '.'], ['.', '.', '.', '.', 'i', '.', 'd', '.', '.', '.'], ['.', '.', '.', '.', 'i', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', 'd', 'd', 'd', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', 'd', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', 'i', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', 'i', '.', '.', '.', '.', 'i', 'i', '.', '.'], ['.', 'i', '.', '.', '.', '.', 'i', 'i', '.', '.'], ['.', 'i', '.', '.', '.', '.', 'i', 'i', '.', '.']]
output: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'i', 'd', 'd', 'd', 'd', 'i', 'i', '.', '.'], ['.', 'i', '.', '.', 'd', 'd', 'i', 'i', '.', '.'], ['.', 'i', '.', '.', '.', '.', 'i', 'i', '.', '.'], ['.', 'i', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.'], ['.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'i', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'i', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'i', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.'], ['.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'i', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'i', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'i', '.', '.', '.']]
*/

// Solution 1:
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        if (mat == null || mat.length == 0 || mat[0].length == 0) return mat;

        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j] == 0) {
                    queue.offer(new int[]{i, j});
                } else {
                    mat[i][j] = Integer.MAX_VALUE;
                }
            }
        }

        int[] dirs = {-1, 0, 1, 0, -1};
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int k = 0; k < size; k++) {
                int[] cur = queue.poll();
                for (int d = 0; d < 4; d++) {
                    int x = cur[0] + dirs[d];
                    int y = cur[1] + dirs[d+1];
                    if (x >= 0 && x < mat.length && y >= 0 && y < mat[0].length && mat[x][y] > mat[cur[0]][cur[1]] + 1) {
                        mat[x][y] = mat[cur[0]][cur[1]] + 1;
                        queue.offer(new int[]{x, y});
                    }
                }
            }
        }

        return mat;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', '.', 'd', 'i', 'd', '.', '.'], ['.', '.', '.', 'd', '.', 'd', 'i', 'd', '.', '.'], ['.', '.', '.', '.', '.', '.', 'i', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.00558659217877095

cat_success_cnt: 0

cat_success_rate: 0.0

