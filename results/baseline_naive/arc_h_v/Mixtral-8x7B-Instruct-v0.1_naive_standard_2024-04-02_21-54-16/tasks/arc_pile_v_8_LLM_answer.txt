
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', 'f', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'd', '.'], ['.', '.', '.', '.', '.', 'i']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['b', '.', '.', 'f', 'd', 'i']]

Example_2:
input: [['a', '.', 'c', '.', '.', '.'], ['.', 'g', 'c', '.', '.', 'f'], ['a', '.', '.', 'h', '.', '.'], ['.', '.', 'c', '.', '.', '.'], ['.', '.', '.', 'h', '.', '.'], ['a', 'g', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['a', '.', 'c', '.', '.', '.'], ['a', 'g', 'c', 'h', '.', '.'], ['a', 'g', 'c', 'h', '.', 'f']]

Example_3:
input: [['.', '.', '.', '.', '.', 'a'], ['.', '.', '.', 'g', 'e', '.'], ['.', '.', 'c', 'g', '.', '.'], ['.', '.', '.', '.', '.', 'a'], ['.', '.', 'c', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'c', 'g', '.', 'a'], ['.', '.', 'c', 'g', 'e', 'a']]

Test case:
input: [['.', '.', '.', 'f', 'h', 'c'], ['g', 'd', '.', '.', '.', 'c'], ['.', '.', '.', '.', '.', '.'], ['g', '.', 'a', '.', '.', '.'], ['.', 'd', 'a', 'f', 'h', '.'], ['.', 'd', '.', 'f', '.', 'c']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'f', 'h', 'c'], ['.', 'g', 'd', 'f', 'h', 'c']]
*/

// Solution 1:
class Solution {
    public void moveChess(char[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'K') {
                    // check up
                    if (i - 2 >= 0 && board[i-2][j] == 'P' && board[i-1][j]!= 'B') {
                        char tmp = board[i][j];
                        board[i][j] = board[i-2][j];
                        board[i-2][j] = tmp;
                    }
                    // check down
                    else if (i + 2 < m && board[i+2][j] == 'P' && board[i+1][j]!= 'B') {
                        char tmp = board[i][j];
                        board[i][j] = board[i+2][j];
                        board[i+2][j] = tmp;
                    }
                    // check left
                    else if (j - 2 >= 0 && board[i][j-2] == 'P' && board[i][j-1]!= 'B') {
                        char tmp = board[i][j];
                        board[i][j] = board[i][j-2];
                        board[i][j-2] = tmp;
                    }
                    // check right
                    else if (j + 2 < n && board[i][j+2] == 'P' && board[i][j+1]!= 'B') {
                        char tmp = board[i][j];
                        board[i][j] = board[i][j+2];
                        board[i][j+2] = tmp;
                    }
                }
            }
        }
    }
}

// Solution 2:
class Solution {
    public void moveChess(char[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'K') {
                    List<Integer> moves = new ArrayList<>();
                    // check up
                    if (i - 2 >= 0 && board[i-2][j] == 'P' && board[i-1][j]!= 'B') {
                        moves.add(-2);
                    }
                    // check down
                    if (i + 2 < m && board[i+2][j] == 'P' && board[i+1][j]!= 'B') {
                        moves.add(2);
                    }
                    // check left
                    if (j - 2 >= 0 && board[i][j-2] == 'P' && board[i][j-1]!= 'B') {
                        moves.add(-2);
                    }
                    // check right
                    if (j + 2 < n && board[i][j+2] == 'P' && board[i][j+1]!= 'B') {
                        moves.add(2);
                    }
                    Collections.sort(moves);
                    if (!moves.isEmpty()) {
                        board[i][j] += moves.get(0);
                        board[i + board[i][j]/2][j] -= moves.get(0);
                    }
                }
            }
        }
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'd', '.', 'f', '.', 'c'], ['g', 'd', 'a', 'f', 'h', 'c'], ['g', 'd', 'a', 'f', 'h', 'c']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.010033444816053512

cat_success_cnt: 0

cat_success_rate: 0.0

