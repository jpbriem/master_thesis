
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', '.', '.', '.', 'h', 'h', 'h', 'h', 'h', 'h'], ['c', '.', '.', '.', '.', '.', 'h', 'h', 'h', 'h'], ['c', 'c', '.', '.', '.', '.', '.', 'h', 'h', 'h'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.', '.', '.', 'h', 'h'], ['c', 'c', '.', '.', '.', 'h', 'h', 'h', 'h', 'h'], ['c', 'c', 'c', '.', '.', '.', '.', '.', 'h', 'h'], ['c', 'c', '.', '.', '.', '.', '.', 'h', 'h', 'h']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['c', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['c', 'c', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['c', 'c', 'c', 'h', 'h', '.', '.', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.', '.', '.', '.', 'h'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.', '.', '.', 'h', 'h'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'h', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.', 'h', 'h', 'h', 'h'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.', '.', '.', 'h', 'h'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', 'h'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'h', 'h', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'h', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', 'h'], ['c', 'c', '.', '.', '.', 'h', 'h', 'h', 'h', 'h'], ['c', 'c', '.', '.', '.', '.', 'h', 'h', 'h', 'h'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.', '.', 'h', 'h', 'h'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', '.', '.', '.', 'h', 'h'], ['c', 'c', '.', '.', '.', '.', '.', 'h', 'h', 'h'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', 'h'], ['c', 'c', '.', '.', '.', 'h', 'h', 'h', 'h', 'h'], ['c', 'c', '.', '.', '.', 'h', 'h', 'h', 'h', 'h'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', 'h', 'h', 'h', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', '.', '.', '.', 'h', 'h', 'h'], ['c', 'c', '.', '.', '.', 'h', 'h', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
```

Comment: What have you tried so far? Please post your code and explain what's not working.

## Answer (0)

You can use a recursive function to solve this problem, here is the solution in python:

```
def replace(board):
    for i in range(len(board)):
        if "." not in board[i]:
            return board

    # find first row with.
    start = 0
    while start < len(board) and "." not in board[start]:
        start += 1

    end = start + 1
    while end < len(board) and "." in board[end]:
        end += 1

    newBoard = []
    for j in range(start, end):
        line = list(board[j])
        for k in range(len(line)):
            if line[k] == "c":
                line[k] = "h"
        newBoard.append("".join(line))

    for j in range(start, end):
        board[j] = newBoard[j - start]

    return replace(board)

# test cases
print(replace([[".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["c", ".", ".", ".", "h", "h", "h", "h", "h", "h"], ["c", ".", ".", ".", ".", ".", "h", "h", "h", "h"], ["c", "c", ".", ".", ".", ".", ".", "h", "h", "h"], ["c", "c", "c", "c", "c", ".", ".", ".", ".", "."], ["c", "c", ".", ".", ".", ".", ".", ".", "h", "h"], ["c", "c", "c", "c", "c", "c", ".", ".", ".", "."], ["c", "c", "c", "c", ".", ".", ".", ".", "h", "h"], ["c", "c", ".", ".", ".", ".", ".", "h", "h", "h"], [".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]))
print(replace([[".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["c", "c", "c", "c", ".", ".", ".", ".", ".", "h"], ["c", "c", ".", ".", ".", "h", "h", "h", "h", "h"], ["c", "c", ".", ".", ".", ".", "h", "h", "h", "h"], ["c", "c", "c", "c", "c", "c", "c", ".", ".", "."], ["c", "c", ".", ".", ".", ".", ".", "h", "h", "h"], ["c", "c", "c", "c", "c", "c", "c", ".", ".", "."], ["c", "c", "c", "c", ".", ".", ".", ".", "h", "h"], ["c", "c", ".", ".", ".", ".", ".", "h", ".", "h"], [".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]))
print(replace([[".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["c", "c", "c", "c", ".", ".", ".", ".", ".", "."], ["c", "c", "c", "c", "c", "c", ".", ".", ".", "."], ["c", "c", ".", ".", ".", ".", "h", "h", "h", "h"], ["c", "c", "c", "c", "c", "c", ".", ".", ".", "."], ["c", "c", ".", ".", ".", ".", ".", "h", "h", "h"], ["c", "c", "c", "c", "c", "c", ".", ".", ".", "."], ["c", "c", "c", "c", ".", ".", ".", ".", "h", "h"], ["c", "c", ".", ".", ".", ".", ".", "h", ".", "h"], [".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]))
print(replace([[".", ".", ".", ".", ".", ".", ".", ".", ".", "."], ["c", "c", "c", "c", "c", "c", ".", ".", ".", "h"], ["c", "c", ".", ".", ".", "h", "h", "h", "h", "h"], ["c", "c", ".", ".", ".", ".", "h", "h", "h", "h"], ["c", "c", "c", "c", "c", "c", "c", ".", ".", "."], ["c", "c", ".", ".", ".", ".", ".", "h", "h", "h"], ["c", "c", "c", "c", "c", "c", "c", ".", ".", "."], ["c", "c", "c", "c", ".", ".", ".", ".", "h", "h"], ["c", "c", ".", ".", ".", ".", ".", "h", ".", "h"], [".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]))
```


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'h', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', '.', '.', '.'], ['c', 'c', 'c', 'c', 'c', 'h', 'h', '.', '.', '.'], ['c', 'c', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.00847457627118644

cat_success_cnt: 0

cat_success_rate: 0.0

