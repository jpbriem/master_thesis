
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['g', '.', 'c', '.'], ['g', 'b', '.', 'h'], ['.', '.', '.', '.'], ['.', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['g', '.', '.', '.'], ['g', 'b', 'c', 'h']]

Example_2:
input: [['.', 'b', '.', '.', '.', '.'], ['a', '.', 'c', '.', '.', '.'], ['a', '.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'f'], ['a', '.', '.', '.', '.', 'f'], ['a', 'b', 'c', '.', '.', 'f']]

Example_3:
input: [['b', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['b', '.', 'f', 'i', 'e'], ['b', '.', 'f', '.', 'e'], ['.', '.', '.', '.', 'e']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['b', '.', '.', '.', 'e'], ['b', '.', 'f', '.', 'e'], ['b', '.', 'f', 'i', 'e']]

Test case:
input: [['.', '.', '.', '.', '.'], ['g', '.', 'i', '.', 'd'], ['.', 'b', '.', '.', '.'], ['g', '.', '.', 'h', 'd'], ['.', '.', '.', 'h', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'h', '.'], ['g', 'b', 'g', 'h', 'd']]
*/

// Solution 1:
class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board[click[0]][click[1]].equals("M")) return new String[][]{};
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) return;
        if (!board[x][y].equals(".")) return;
        int count = getCount(board, x, y);
        if (count > 0) {
            board[x][y] = "" + count;
            return;
        }
        board[x][y] = "B";
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                dfs(board, x+i, y+j);
            }
        }
    }

    private int getCount(String[][] board, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                int a = x + i, b = y + j;
                if (a < 0 || a >= board.length || b < 0 || b >= board[0].length) continue;
                if (board[a][b].equals("M")) count++;
            }
        }
        return count;
    }
}

// Solution 2:
class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board[click[0]][click[1]].equals("M")) return new String[][]{};
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) return;
        if (!board[x][y].equals(".")) return;
        int count = getCount(board, x, y);
        if (count > 0) {
            board[x][y] = "" + count;
            return;
        }
        board[x][y] = "B";
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                dfs(board, x+i, y+j);
            }
        }
    }

    private int getCount(String[][] board, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                int a = x + i, b = y + j;
                if (a < 0 || a >= board.length || b < 0 || b >= board[0].length) continue;
                if (board[a][b].equals("M") || board[a][b].equals("E")) count++;
            }
        }
        return count;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['g', '.', '.', 'h', 'd'], ['g', 'b', 'i', 'h', 'd']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.01

cat_success_cnt: 0

cat_success_rate: 0.0

