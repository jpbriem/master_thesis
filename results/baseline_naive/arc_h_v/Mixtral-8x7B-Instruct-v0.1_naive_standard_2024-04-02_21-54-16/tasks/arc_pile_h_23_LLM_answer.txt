
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', '.', '.'], ['b', '.', 'b', '.', 'b'], ['d', 'd', '.', '.', '.'], ['.', 'h', '.', 'h', 'h'], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['b', 'b', 'b', '.', '.'], ['d', 'd', '.', '.', '.'], ['h', 'h', 'h', '.', '.'], ['.', '.', '.', '.', '.']]

Example_2:
input: [['g', '.', '.', '.'], ['.', 'c', '.', 'c'], ['.', '.', '.', '.'], ['a', 'a', '.', 'a']]
output: [['g', '.', '.', '.'], ['c', 'c', '.', '.'], ['.', '.', '.', '.'], ['a', 'a', 'a', '.']]

Example_3:
input: [['.', '.', '.', '.', '.'], ['.', 'd', '.', '.', '.'], ['.', 'h', '.', '.', 'h'], ['.', '.', '.', '.', '.'], ['.', 'a', '.', 'a', '.']]
output: [['.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.']]

Test case:
input: [['.', 'c', 'c', 'c'], ['i', '.', '.', 'i'], ['e', '.', 'e', 'e'], ['b', 'b', 'b', '.']]

###########################################################
Sample Outputs:
output: [['.', 'c', 'c', 'c'], ['i', '.', '.', 'i'], ['e', 'e', 'e', '.'], ['b', 'b', 'b', '.']]
*/

public class Solution {
    public char[][] fill(char[][] image) {
        if (image == null || image.length == 0 || image[0].length == 0) return new char[0][];
        int m = image.length, n = image[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!visited[i][j]) {
                    dfs(image, visited, i, j, image[i][j]);
                }
            }
        }
        return image;
    }

    private void dfs(char[][] image, boolean[][] visited, int x, int y, char c) {
        if (x < 0 || x >= image.length || y < 0 || y >= image[0].length || visited[x][y] || image[x][y]!= c) return;
        visited[x][y] = true;
        image[x][y] = c;
        dfs(image, visited, x + 1, y, c);
        dfs(image, visited, x - 1, y, c);
        dfs(image, visited, x, y + 1, c);
        dfs(image, visited, x, y - 1, c);
    }
}


###########################################################
Result:
solution: [['c', 'c', 'c', '.'], ['i', 'i', '.', '.'], ['e', 'e', 'e', '.'], ['b', 'b', 'b', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.004608294930875576

cat_success_cnt: 0

cat_success_rate: 0.0

