
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', '.', '.', 'g', '.', 'i'], ['.', '.', 'd', 'g', 'e', 'i'], ['.', '.', 'd', '.', '.', 'i'], ['a', 'f', '.', '.', '.', '.'], ['.', '.', 'd', 'g', 'e', '.'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'd', 'g', '.', 'i'], ['a', '.', 'd', 'g', 'e', 'i'], ['a', 'f', 'd', 'g', 'e', 'i']]

Example_2:
input: [['.', '.', '.', 'e', '.', '.'], ['.', '.', '.', 'e', 'f', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'f', 'g'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'e', 'f', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'e', 'f', '.'], ['.', '.', '.', 'e', 'f', '.'], ['.', '.', '.', 'e', 'f', 'g']]

Example_3:
input: [['f', '.', 'e', 'g', 'd'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'd'], ['f', '.', 'e', '.', '.'], ['.', 'i', 'e', 'g', 'd']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'e', 'g', 'd'], ['f', '.', 'e', 'g', 'd'], ['f', 'i', 'e', 'g', 'd']]

Test case:
input: [['i', 'h', 'a', '.'], ['i', 'h', '.', 'g'], ['.', '.', 'a', '.'], ['.', 'h', 'a', 'g']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', 'a', '.'], ['.', 'h', 'a', 'g']]
*/

public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        if (board[click[0]][click[1]] == 'M') {
            board[click[0]][click[1]] = 'X';
            return board;
        }
        dfs(board, click[0], click[1]);
        return board;
    }

    private void dfs(char[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y]!= '.') {
            return;
        }
        int count = getCount(board, x, y);
        if (count > 0) {
            board[x][y] = (char)(count + '0');
            return;
        }
        board[x][y] = 'B';
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                dfs(board, x + i, y + j);
            }
        }
    }

    private int getCount(char[][] board, int x, int y) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                int a = x + i, b = y + j;
                if (a < 0 || a >= board.length || b < 0 || b >= board[0].length || board[a][b]!= 'M') continue;
                count++;
            }
        }
        return count;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.'], ['.', 'h', 'a', '.'], ['i', 'h', 'a', 'g'], ['i', 'h', 'a', 'g']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.010067114093959731

cat_success_cnt: 0

cat_success_rate: 0.0

