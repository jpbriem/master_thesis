
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['c', '.', '.', '.'], ['c', '.', '.', '.'], ['c', 'i', 'b', '.'], ['.', 'i', '.', '.']]
output: [['.', '.', '.', '.'], ['c', '.', '.', '.'], ['c', 'i', '.', '.'], ['c', 'i', 'b', '.']]

Example_2:
input: [['.', 'b', '.', 'i', '.', 'a'], ['.', '.', '.', 'i', 'e', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['h', '.', '.', '.', 'e', '.'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'i', 'e', '.'], ['h', 'b', '.', 'i', 'e', 'a']]

Example_3:
input: [['.', '.', '.', 'h'], ['f', 'a', '.', '.'], ['.', 'a', '.', '.'], ['f', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['f', 'a', '.', '.'], ['f', 'a', '.', 'h']]

Test case:
input: [['.', '.', '.', '.', '.', 'c'], ['h', '.', '.', '.', '.', '.'], ['.', 'a', 'f', '.', 'b', '.'], ['h', '.', 'f', 'g', '.', 'c'], ['.', '.', 'f', '.', 'b', '.'], ['.', 'a', '.', 'g', '.', '.']]

###########################################################
Sample Outputs:
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'b', 'c']]
*/

// Solution 1:
class Solution {
    public String[][] pushDominoes(String[][] dominoes) {
        int m = dominoes.length, n = dominoes[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j + 1 < n; ++j) {
                if (dominoes[i][j] == '.' && dominoes[i][j+1]!= '.') {
                    char c = dominoes[i][j+1];
                    while (j + 1 < n && dominoes[i][j+1] == c) {
                        dominoes[i][j++] = c;
                    }
                }
            }
        }
        for (int i = 0; i < m; ++i) {
            boolean leftFilled = false, rightFilled = false;
            for (int j = 0; j < n; ++j) {
                if (!leftFilled && dominoes[i][j] == 'l') {
                    for (int k = j - 1; k >= 0; --k) {
                        dominoes[i][k] = 'l';
                    }
                    leftFilled = true;
                } else if (!rightFilled && dominoes[i][j] == 'r') {
                    for (int k = j + 1; k < n; ++k) {
                        dominoes[i][k] = 'r';
                    }
                    rightFilled = true;
                } else if (leftFilled && rightFilled && dominoes[i][j] == '.') {
                    dominoes[i][j] = 'x';
                }
            }
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dominoes[i][j] == 'x') {
                    dominoes[i][j] = '.';
                } else if (dominoes[i][j] == 'l' && j > 0 && dominoes[i][j-1] == '.') {
                    dominoes[i][j-1] = 'l';
                } else if (dominoes[i][j] == 'r' && j + 1 < n && dominoes[i][j+1] == '.') {
                    dominoes[i][j+1] = 'r';
                }
            }
        }
        return dominoes;
    }
}


###########################################################
Result:
solution: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'f', '.', '.', '.'], ['h', 'a', 'f', 'g', 'b', 'c'], ['h', 'a', 'f', 'g', 'b', 'c']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.011406844106463879

cat_success_cnt: 0

cat_success_rate: 0.0

