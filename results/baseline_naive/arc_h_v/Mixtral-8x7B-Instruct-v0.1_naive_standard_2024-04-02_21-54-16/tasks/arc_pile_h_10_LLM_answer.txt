
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', '.', 'h', '.', '.'], ['.', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'a', '.', '.'], ['.', 'c', '.', '.', '.', '.'], ['.', '.', 'b', '.', '.', '.'], ['.', 'g', '.', '.', 'g', '.']]
output: [['h', '.', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['a', '.', '.', '.', '.', '.'], ['c', '.', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.'], ['i', 'i', 'i', '.'], ['.', '.', '.', '.'], ['d', 'd', '.', 'd']]
output: [['.', '.', '.', '.'], ['i', 'i', 'i', '.'], ['.', '.', '.', '.'], ['d', 'd', 'd', '.']]

Example_3:
input: [['.', '.', '.', '.', '.'], ['.', 'f', '.', '.', 'f'], ['h', '.', 'h', 'h', '.'], ['.', 'g', '.', '.', 'g'], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['f', 'f', '.', '.', '.'], ['h', 'h', 'h', '.', '.'], ['g', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Test case:
input: [['.', 'g', '.', '.', 'g', 'g'], ['.', 'c', '.', 'c', 'c', '.'], ['.', 'b', 'b', '.', '.', 'b'], ['.', '.', '.', 'i', 'i', '.'], ['.', '.', '.', 'h', '.', '.'], ['d', '.', '.', 'd', '.', '.']]

###########################################################
Sample Outputs:
output: [['g', 'g', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['b', 'b', '.', '.', '.', 'b'], ['.', '.', '.', 'i', 'i', '.'], ['.', '.', '.', 'h', '.', '.'], ['d', '.', '.', 'd', '.', '.']]
*/

// Solution 1:
class Solution {
    public char[][] fill(char[][] image) {
        if (image == null || image.length == 0 || image[0].length == 0) return new char[0][];
        int m = image.length, n = image[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!visited[i][j]) {
                    dfs(image, visited, i, j, image[i][j]);
                }
            }
        }
        return image;
    }

    private void dfs(char[][] image, boolean[][] visited, int x, int y, char c) {
        if (x < 0 || x >= image.length || y < 0 || y >= image[0].length || visited[x][y] || image[x][y]!= c) return;
        visited[x][y] = true;
        image[x][y] = c;
        dfs(image, visited, x + 1, y, c);
        dfs(image, visited, x - 1, y, c);
        dfs(image, visited, x, y + 1, c);
        dfs(image, visited, x, y - 1, c);
    }
}

// Solution 2:
class Solution {
    public char[][] floodFill(char[][] image, int sr, int sc, int newColor) {
        if (image == null || image.length == 0 || image[sr][sc] == newColor) return image;
        int oldColor = image[sr][sc];
        Stack<Integer> stack = new Stack<>();
        stack.push(sr * image[0].length + sc);
        while (!stack.isEmpty()) {
            int idx = stack.pop();
            int r = idx / image[0].length;
            int c = idx % image[0].length;
            if (image[r][c]!= oldColor) continue;
            image[r][c] = newColor;
            if (r > 0 && image[r-1][c] == oldColor) stack.push((r-1)*image[0].length+c);
            if (r < image.length-1 && image[r+1][c] == oldColor) stack.push((r+1)*image[0].length+c);
            if (c > 0 && image[r][c-1] == oldColor) stack.push(r*image[0].length+c-1);
            if (c < image[0].length-1 && image[r][c+1] == oldColor) stack.push(r*image[0].length+c+1);
        }
        return image;
    }
}


###########################################################
Result:
solution: [['g', 'g', 'g', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['b', 'b', 'b', '.', '.', '.'], ['i', 'i', '.', '.', '.', '.'], ['h', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0049261083743842365

cat_success_cnt: 0

cat_success_rate: 0.0

