
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['.', '.', 'c', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'f', '.', '.', '.'], ['a', '.', '.', '.', 'b'], ['.', '.', '.', '.', 'b']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'b'], ['a', 'f', 'c', '.', 'b']]

Example_2:
input: [['b', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['b', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['b', '.', '.', '.'], ['b', '.', '.', '.']]

Example_3:
input: [['.', 'e', '.', '.', 'c'], ['.', '.', '.', 'i', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'e', 'f', '.', 'c']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'e', '.', '.', 'c'], ['.', 'e', 'f', 'i', 'c']]

Test case:
input: [['h', '.', '.', 'a', '.'], ['.', 'b', 'g', '.', '.'], ['h', '.', 'g', '.', 'i'], ['.', 'b', '.', '.', '.'], ['h', '.', '.', '.', '.']]



###########################################################
Sample Outputs:
```python
class Solution:
    def restoreMatrix(self, matrix: List[List[str]]) -> None:
        n = len(matrix)
        m = len(matrix[0])
        
        if n != m:
            print("Invalid input")
            return
        
        directions = [[-1,-1],[1,-1],[-1,1],[1,1]]
        for i in range(n):
            for j in range(m):
                if matrix[i][j] == '.':
                    continue
                
                x = y = 0
                for k in range(4):
                    dx,dy = directions[k]
                    if dx == -1 and j+dy < 0 or dx == 1 and j+dy >= m or dy == -1 and i+dx < 0 or dy == 1 and i+dx >= n:
                        continue
                    
                    while matrix[x][y] != '.' and (matrix[x][y] == matrix[i][j] or matrix[x][y].islower() != matrix[i][j].islower()):
                        y += dy
                        x += dx
                    
                    if matrix[x][y] == matrix[i][j]:
                        matrix[x][y] = matrix[i][j].upper()
                    else:
                        matrix[x][y] = matrix[i][j]
                
                for k in range(4):
                    dx,dy = directions[k]
                    if dx == -1 and j+dy < 0 or dx == 1 and j+dy >= m or dy == -1 and i+dx < 0 or dy == 1 and i+dx >= n:
                        continue
                    
                    while matrix[x][y] != '.' and (matrix[x][y] == matrix[i][j] or matrix[x][y].islower() != matrix[i][j].islower()):
                        y -= dy
                        x += dx
                    
                    if matrix[x][y] == matrix[i][j]:
                        matrix[x][y] = matrix[i][j].upper()
                    else:
                        matrix[x][y] = matrix[i][j]
```


###########################################################
Result:
solution: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['h', '.', '.', '.', '.'], ['h', 'b', 'g', '.', '.'], ['h', 'b', 'g', 'a', 'i']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

