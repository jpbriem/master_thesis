Input token: 546
Output token: 428
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'e', 'c], ['f', 'a', 'a', 'c], ['f', 'a', 'e', 'c], ['f', 'a', 'e', 'a']]
output: [['a', 'a', 'a', 'a], ['f', 'a', 'e', 'c], ['f', 'a', 'e', 'c], ['f', 'a', 'e', 'c']]

Example_2:
input: [['a', 'c', 'a', 'a', 'b], ['a', 'c', 'a', 'a', 'a], ['a', 'a', 'a', 'e', 'a], ['a', 'a', 'a', 'e', 'a], ['d', 'a', 'a', 'a', 'b']]
output: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'c', 'a', 'e', 'b], ['d', 'c', 'a', 'e', 'b']]

Example_3:
input: [['j', 'a', 'e', 'd', 'a], ['a', 'f', 'a', 'a', 'a], ['a', 'f', 'e', 'a', 'a], ['j', 'f', 'a', 'd', 'a], ['a', 'a', 'e', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'f', 'e', 'a', 'a], ['j', 'f', 'e', 'd', 'a], ['j', 'f', 'e', 'd', 'a']]

Test case:
input: [['a', 'a', 'a', 'a', 'a], ['a', 'h', 'a', 'a', 'j], ['i', 'h', 'a', 'a', 'j], ['a', 'a', 'a', 'f', 'a], ['a', 'h', 'c', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a', 'a'], ['a', 'h', 'a', 'a', 'j'], ['i', 'h', 'a', 'a', 'j'], ['a', 'a', 'a', 'f', 'a'], ['a', 'h', 'c', 'a', 'a']]
"""
import collections
from typing import List, Tuple


def get_transformation(inputs: List[Tuple]) -> Tuple:
    """
    Transformations are defined as a list of tuples (source, target).
    Each tuple is a pair of strings that represent the source and target characters in the string.
    For example, if we have an input string "abcde", then the transformations would be:
        [(0, 4), (5, 6)]
    :param inputs: A list of tuples representing the input strings to transform.
    :return: A tuple containing the output strings for each input string.
    """
    # Create a dictionary mapping from index to character
    char_dict = dict()
    for i, s in enumerate(inputs):
        for c in s:
            char_dict[i] = c

    # Get the indices of the first occurrence of each character
    char_indices = []
    for i, s in enumerate(inputs):
        for j, c in enumerate(s):
            if c not in char_dict:
                continue
            else:
                char_indices.append((char_dict[c][0], i))

    # Sort by ascending order of index
    sorted_indices = sorted(char_indices)

    # Return the transformed strings
    return tuple([sorted_indices[:len(inputs) - len(sorted_indices)] + sorted_indices[-len(inputs):]])

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'h', 'a', 'a', 'a], ['a', 'h', 'a', 'a', 'j], ['i', 'h', 'c', 'f', 'j']]

