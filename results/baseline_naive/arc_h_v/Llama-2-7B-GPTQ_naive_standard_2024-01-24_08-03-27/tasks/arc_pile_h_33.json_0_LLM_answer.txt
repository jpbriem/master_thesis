Input token: 651
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'g', 'a', 'a], ['a', 'a', 'c', 'a', 'a', 'a], ['a', 'a', 'a', 'f', 'a', 'f], ['a', 'a', 'b', 'a', 'b', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['d', 'a', 'a', 'd', 'a', 'a']]
output: [['g', 'a', 'a', 'a', 'a', 'a], ['c', 'a', 'a', 'a', 'a', 'a], ['f', 'f', 'a', 'a', 'a', 'a], ['b', 'b', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['d', 'd', 'a', 'a', 'a', 'a']]

Example_2:
input: [['d', 'd', 'd', 'a', 'a', 'a], ['f', 'a', 'a', 'a', 'a', 'a], ['a', 'c', 'c', 'c', 'a', 'a], ['a', 'a', 'h', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'j', 'j', 'j']]
output: [['d', 'd', 'd', 'a', 'a', 'a], ['f', 'a', 'a', 'a', 'a', 'a], ['c', 'c', 'c', 'a', 'a', 'a], ['h', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['j', 'j', 'j', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['a', 'j', 'j', 'a']]
output: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['j', 'j', 'a', 'a']]

Test case:
input: [['a', 'd', 'a', 'd], ['g', 'g', 'g', 'a], ['a', 'a', 'f', 'f], ['a', 'i', 'i', 'i']]
################################################################

LLM answer:

output: [['a', 'd', 'd', 'd'], ['g', 'g', 'g', 'a], ['f', 'f', 'f', 'f'], ['i', 'i', 'i', 'i']]
"""
import sys
from collections import deque, defaultdict
from typing import List, Tuple


def get_input(filename):
    with open(filename) as f:
        return list(map(''.join, map(lambda x: tuple(x), f)))


def get_output(filename):
    with open(filename) + '.out' as f:
        return list(map(''.join, map(lambda x: tuple(x), f)))


def main():
    filename = sys.argv[1] if len(sys.argv) > 1 else "input.txt"
    input_list = get_input(filename)
    output_list = get_output(filename)

    # 0. 입력과 출력의 길이가 다름
    if len(input_list)!= len(output_list):
        print("Input length is different from Output length")
        exit()

    # 1. 패턴을 만들기 위한 전처리
    # 숫자를 제외하고 모든 문자는 소문자로 바꾼다.
    # 그리고 약수에서 나오는 부분은 아무거나 생략해도 상관없다.
    def preprocess(s):
        s = set([char for char in s]) - {'0'}
        return ''.join([''.join(sorted(set(ch)) for ch in s)), '.' * (len(s) % 4)]

    # 2. 실제 연산
    def transform(s):
        # 양방향 스트럿 삭제
        s = s[:-1] if s[-1] == '.' else s
        # 카운터 직사각형 구성
        counter = defaultdict(deque)
        for c in s:
            counter[c].append(counter[c][:-1])
        # 카운터 직사각형 조합
        result = []
        for i in range(len(counter)):
            for j in range(i+1, len(counter)):
                if counter[i]+counter[j]:
                    result.append((counter[i]+counter[j]))
        return result

    # 3. 정답 비교
    def compare(s1, s2):
        if not all(s1) or not all(s2):
            return False
        return all(transform(s1) == transform(s2))

    # 4. 추가 컬럼 추가
    def add_column(s):
        return [preprocess(s), transform(s)]

    # 5. 충돌 체크
    def check_collision(s1, s2):
        if not all(s1) or not all(s2):
            return True
        return any(all(transform(s1) == transform(s2)) for s1 in s2)

    # 6. 출력
    def print_result(s1, s2):
        if not all(s1) or not all(s2):
            return None
        return all(transform(s1) == transform(s2))

    # 7. 시험 진행
    for i in range(len(input_list)):
        if compare(input_list[i], output_list[i]):
            print(add_column(input_list[i]), end='\n')
        elif check_collision(input_list[i], output_list[i]):
            print(add_column(input_list[i]), end='\n')
        else:
################################################################

Solution:
[['d', 'd', 'a', 'a], ['g', 'g', 'g', 'a], ['f', 'f', 'a', 'a], ['i', 'i', 'i', 'a']]

