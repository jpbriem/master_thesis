Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 1, 1, 1, 1], [3, 3, 3, 0, 0, 0, 0, 0, 1, 1], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 1, 1], [3, 3, 3, 3, 3, 0, 0, 0, 1, 1], [3, 3, 3, 0, 0, 0, 1, 1, 1, 1], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 1, 1, 1, 1, 0, 0, 0], [3, 3, 3, 1, 1, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 1, 1, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 1, 1, 0, 0, 0], [3, 3, 3, 1, 1, 1, 1, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 0, 1], [3, 0, 0, 0, 1, 1, 1, 1, 1, 1], [3, 0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 1, 1], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 0, 1]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 1, 0, 0, 0, 0, 0, 0], [3, 1, 1, 1, 1, 1, 1, 0, 0, 0], [3, 1, 1, 1, 1, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 1, 1, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 1, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 1, 1, 1], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 1, 1, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 0, 0, 0, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 1], [3, 3, 0, 0, 0, 0, 0, 0, 1, 1], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 1, 1, 1, 1, 1, 1, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 1], [3, 3, 0, 0, 0, 0, 0, 0, 1, 1], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j%2else min(x[i][j]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `min()` is a builtin function so you can save some bytes by using that instead of `sorted()[0]`. Also, I think you can use `range(len(x))` instead of `range(len(x)-1)`, since you're not actually using the last element anyway.

Comment: @JonathanFrech Thanks for the tips!

## Answer (3)

# Jelly, 5 bytes

```
ḶṪẎỤƊ
```

Try it online!

### How?

```
ḶṪẎỤƊ - Main link. Takes an argument A on the left
Ḷ      -   transpose A
 Ṫ     -   pop; discard the rightmost column
   Ɗ   -   last three links as a monad f(A):
  Ẏ    -       maximum over each row
   Ụ   -       minimum over each column
```

## Answer (3)

# JavaScript (ES6), 50 bytes

Expects **matrix** to be a two dimensional array. Returns a new matrix.

```
a=>a.map((r,y)=>(r=r.map(v=>Math.max(...r)),v=Math.min(...r),r))
```

Try it online!

--------------------

# JavaScript (ES6), 49 bytes

Expects **matrix** to be a two dimensional array. Returns a new matrix.

```
a=>a.map((r,y)=>(r=r.map(v=>Math.max(...r)),r=r.map(v=>Math.min(...r))))
```

Try it online!

Comment: You can remove the space after `r=` in both cases.

Comment: @Neil Thanks, but I don't see how that would help.

Comment: It saves one byte.

Comment: @Neil Oh, I didn't realize that. Thanks again.

## Answer (2)

# Haskell, 49 bytes

```
f m=[maximum$m!!i|i<-[0..length m-1]]++[minimum$m!!i|i<-[0..length m-1]]
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*a){int b[2];b[0]=a[0][0];b[1]=a[0][1];for(int i=1;i<9;i++)for(int j=0;j<2;j++){b[j]=a[i][j]<b[j]?a[i][j]:b[j];}return b;}
```

Try it online!

## Answer (2)

# R, 54 bytes

```
function(x)apply(x,1,max)+apply(x,2,min)
```

Try it online!

## Answer (2)

# Retina 0.8.2, 24 bytes

```
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+`\d+
¶
+
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 1, 1, 1, 1, 1, 1, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 1, 0, 0, 0, 0, 0], [3, 3, 1, 1, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0]]

