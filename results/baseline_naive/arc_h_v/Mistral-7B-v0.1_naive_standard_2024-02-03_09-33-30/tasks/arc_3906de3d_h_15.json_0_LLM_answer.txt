Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0, 3, 3, 3, 3], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 3, 3, 3], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 3, 3], [6, 6, 6, 6, 6, 6, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 3, 3, 3, 3, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 3, 3, 3, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 3, 3, 0, 0, 0], [6, 6, 6, 6, 6, 6, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 3], [6, 6, 6, 6, 6, 0, 0, 0, 0, 3], [6, 6, 6, 0, 0, 0, 0, 0, 0, 3], [6, 6, 0, 0, 0, 0, 0, 0, 3, 3], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 3, 0, 0, 0], [6, 6, 6, 6, 6, 3, 0, 0, 0, 0], [6, 6, 6, 3, 0, 0, 0, 0, 0, 0], [6, 6, 3, 3, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 3, 3], [6, 6, 6, 0, 0, 0, 0, 0, 0, 3], [6, 6, 6, 6, 0, 0, 0, 0, 0, 3], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 3, 3, 0, 0, 0, 0, 0, 0], [6, 6, 6, 3, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 3, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 0, 0, 0, 0, 3, 3, 3], [6, 6, 6, 0, 0, 0, 3, 3, 3, 3], [6, 0, 0, 0, 0, 0, 0, 3, 3, 3], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0, 3, 3, 3, 3], [6, 0, 0, 0, 0, 0, 3, 3, 3, 3], [6, 6, 6, 0, 0, 0, 0, 0, 3, 3], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 59 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j%2else min(x[i][j]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `min()` is a builtin function so you can save some bytes by using that instead of `sorted()[0]`. Also, I think you can use `range(len(x))` instead of `range(len(x)-1)`, since you're not actually using the last element anyway.

Comment: @JonathanFrech Thanks for the tips!

## Answer (3)

# Jelly, 11 bytes

```
Ṛ⁸ŒmƑẎỤṖ€ṀṂ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmƑẎỤṖ€ṀṂ - Link: list of lists, L
Ṛ           - reverse each row
  ⁸         - transpose
   Œm       - map over each column:
    Ƒ       -   filter keep:
     Ẏ      -     flatten
       Ụ    -   uniqify
       Ṗ€   -   remove from each row
         Ṁ  - maximum
           Ṃ - minimum
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
a=>a.map((r,y)=>(r=r.map((_,x)=>x%2?Math.min(...r):Math.max(...r)),r))
```

Try it online!

--------------------

# JavaScript (ES6), 59 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
a=>a.map((r,y)=>(r=r.map((_,x)=>x%2?Math.min(...r):Math.max(...r)),r))
```

Try it online!

Comment: You can replace `r.filter(v => v).length` with `r.reduceRight((a,b) => b || a)` to save 2 bytes.

Comment: @Neil Thanks! That was a nice one.

## Answer (2)

# Haskell, 56 bytes

```
f l=[[maximum$l!!i|i<-[0..]]++[minimum$l!!i|i<-[0..]]|l<-l]
```

Try it online!

## Answer (2)

# C (gcc), 104 bytes

```
f(int*a){int*p;char*q;for(p=a+sizeof(*a)*sizeof(*a)[0];--p>a;)for(q=p;*q--;)if(!*q)break;*q=*p;}
```

Try it online!

This is a void function that takes a pointer to an array of pointers to ints. It modifies the original matrix in place.

The idea is to iterate through all rows and columns at once, starting from the bottom right corner. If we encounter a zero, then we know that this cell has already been processed, so we break out of the inner loop. Otherwise, we set the current value to the maximum or minimum of its row/column depending on whether the current position is even or odd.

## Answer (2)

# R, 60 bytes

```
function(x)t(apply(x,1,rev))
```

Try it online!

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＦθ«Ｅθ⊞υ⌈ι↨⊕κ⊟ι⌉ι↨⊕κ»≔υη
```

Try it online! Link is to verbose version of code. Explanation:

```
Ｎθ
```

Input the number of rows.

```
Ｆθ«
```

Loop over the rows.

```
Ｅθ
```

Map over the columns.

```
⊞υ⌈ι
```

Push the maximum of the row onto the stack.

```
↨⊕κ
```

Convert the index to a string.

```
⊟ι
```

Pop the previous item off the stack.

```
⌉ι
```

Push the minimum of the column onto the stack.

```
↨⊕κ
```

Convert the index to a string.

```
»
```

Close the block.

```
≔υη
```

Output the result.

## Answer (2)

# Ruby, 51 bytes

```
->a{a.map{|r|r.zip([*r].reverse)}&.flatten}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d
¶
^.*¶
$*
+`(\d)(.)
$1$2
```

Try it online! Link includes test cases. Explanation:

```
\d
¶
```

Replace digits with newlines.

```
^.*¶
$*
```

Remove leading whitespace.

```
+`(\d)(.)
$1$2
```

Swap the first two characters of each line.

## Answer (2)

# Perl 5, 49 + 1 (-p) = 50 bytes

```
$_=$_;s/\G(\d)/$1.$&/gr;s/(.)/$1$&/rg;say
```

Try it online!

## Answer (2)

# APL (Dyalog Unicode), 19 bytes^{SBCS}

Anonymous tacit prefix function.

```
{(⍵⋄⍪⍣⍳⍴⍵⊃⍵⍬⍪⍣⍳⍴⍵⊢⍬)⍣¨⍵}
```

Try it online!

`⍵` is the input matrix.

`⍪⍣⍳⍴⍵⊃⍵⍬⍪⍣⍳⍴⍵⊢⍬` is the output matrix.

`⍳⍴⍵` is the length of the input matrix.

`⍵⊃⍵⍬` is the first
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 3, 3, 3, 0, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 3, 3, 3, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 6, 3, 3, 3, 3, 0, 0, 0], [6, 3, 3, 3, 3, 0, 0, 0, 0, 0], [6, 6, 6, 3, 3, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0]]

