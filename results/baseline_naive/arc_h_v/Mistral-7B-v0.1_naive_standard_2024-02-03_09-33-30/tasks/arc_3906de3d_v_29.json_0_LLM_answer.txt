Input token: 2161
Output token: 2042
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 2, 0]]
output: [[0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 2, 0, 2, 6, 6, 2, 0], [0, 0, 0, 2, 0, 0, 6, 6, 0, 0], [0, 0, 0, 2, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 0, 6, 6, 0], [0, 0, 6, 6, 6, 6, 0, 6, 6, 0], [0, 0, 6, 6, 6, 6, 0, 0, 6, 0], [0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 2, 0, 6, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 2, 2, 0, 2, 2, 2, 2, 0, 0]]
output: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 2, 6, 6, 6, 6, 2, 6, 6, 0], [0, 2, 6, 6, 6, 6, 2, 6, 6, 0], [0, 2, 6, 6, 6, 6, 2, 2, 6, 0], [0, 2, 2, 6, 6, 6, 2, 2, 0, 0], [0, 0, 2, 6, 2, 2, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 0, 6, 6, 0, 6, 6, 0], [0, 6, 0, 0, 6, 6, 0, 6, 6, 0], [0, 6, 0, 0, 0, 6, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 0, 2, 2, 0, 2, 2, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0]]
output: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 2, 6, 6, 2, 6, 6, 0], [0, 6, 2, 2, 6, 6, 2, 6, 6, 0], [0, 6, 2, 2, 2, 6, 2, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 0, 6, 6, 6, 6, 6, 0, 0, 0], [6, 0, 6, 0, 6, 6, 6, 0, 0, 0], [6, 0, 6, 0, 6, 6, 6, 0, 0, 0], [6, 0, 0, 0, 0, 0, 6, 0, 0, 0], [6, 0, 0, 2, 0, 0, 6, 0, 0, 0], [0, 2, 0, 2, 0, 0, 6, 0, 0, 0], [0, 2, 0, 2, 2, 0, 0, 2, 0, 0], [0, 2, 0, 2, 2, 0, 0, 2, 0, 0], [0, 2, 0, 2, 2, 2, 0, 2, 0, 0]]
################################################################

LLM answer:

output: [[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 2, 6, 6, 6, 6, 6, 0, 0, 0], [6, 2, 6, 2, 6, 6, 6, 0, 0, 0], [6, 2, 6, 2, 6, 6, 6, 0, 0, 0], [6, 2, 2, 0, 0, 0, 6, 0, 0, 0], [6, 0, 2, 0, 0, 0, 6, 0, 0, 0], [0, 0, 2, 0, 0, 0, 6, 0, 0, 0], [0, 0, 2, 0, 0, 0, 6, 0, 0, 0], [0, 0, 2, 0, 0, 0, 6, 0, 0, 0], [0, 0, 2, 0, 0, 0, 6, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 59 bytes

```
lambda x:[max(x[i][j]for i in range(len(x)))if j<len(x)-1else max(x[i][j+1]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `lambda x:[[max(x[i][j]for i in range(len(x)))if j<len(x)-1else max(x[i][j+1]for i in range(len(x)))]for j in range(len(x[0]))]` for -19 bytes

Comment: @JonathanAllan Thanks! I'm not sure why I didn't think of that...

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€ƊḢ⁼ẎỤṀṚṂ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test-suite.

### How?

The first line is a helper link to get the maximum value from each row.

```
Ṗ€ƊḢ⁼ẎỤṀṚṂ - Main link: list of lists
Ṗ€          - pop off the last element of each list
  Ɗ         - map over each remaining list:
   Ḣ        -   head -> maximum value in the row
     Ẏ      - transpose
      Ụ     - unwrap (remove outermost list)
       Ṁ    - maximum
        Ṛ   - reverse
          Ṃ - minimum
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
a=>a.map((r,y)=>(r=r.slice(-1),r.push(Math.max(...r)),r))
```

Try it online!

### Commented

```
a =>                 // a[] = input array
  a.map(             // for each row r[]:
    (r, y) =>        //   current row index y
      (               //   return:
        r = r.slice(-1), //   append the last column to the end of the row
        r.push(         //   push the maximum of all columns onto the end
          Math.max(...r) //   of the row
        ),              //   end of push()
        r              //   return the modified row
      )               //   end of map()
  )                  // end of map()
```

## Answer (2)

# Haskell, 54 bytes

```
f l=[maximum$zipWith max l$tail l++[l!!length l]]
```

Try it online!

## Answer (2)

# R, 54 bytes

```
function(x){apply(x,1,cbind,max(x[-nrow(x),]))}
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*p,int n){while(*p++)printf("%d",*p>*--p?*p:*p);}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 27 bytes

```
\d+
$*
^(\d+)(.*)$
$2$1
```

Try it online! Explanation: This solution uses the fact that the output can be obtained by removing the last digit from every number in the input and then reversing the result.

## Answer (2)

# Perl 5, 41 + 1 (-p) = 42 bytes

```
$_=$_;s/([^\d]+)\d+\K(.)/$1$2/ge;say$&
```

Try it online!

## Answer (2)

# Charcoal, 12 bytes

```
ＮθＦθ«≔⪫ι⟦⌈κ↨⊕λ⟧»⊞υ⟦⊗κ⟧
```

Try it online! Link is to verbose version of code. Outputs a list of lists. Explanation:

```
Ｎθ
```

Input the matrix.

```
Ｆθ«
```

Loop over the rows.

```
≔⪫ι⟦⌈κ↨⊕λ⟧»
```

Append the maximum of the row to the end of the row.

```
⊞υ⟦⊗κ⟧
```

Output the new row.

## Answer (2)

# Ruby, 44 bytes

```
->a{a.map{|r|r<<r.max}}
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
ṠṘṡṄṙṡṃṛṡ
```

Try it Online!

## Explained

```
ṠṘṡṄṙṡṃṛṡ
Ṡ            # Pop the last item of each list
 Ṙ           # Transpose
  ṡ          # Maximum along each row
   Ṅ         # Append to each list
    ṙ        # Reverse
     ṡ       # Minimum along each row
```

## Answer (2)

# APL (Dyalog Unicode), 16 bytes^{SBCS}

Anonymous tacit prefix function taking a two dimensional array as left argument.

```
⍵⋄⍳⍴⍵←⍳⍴⍵⊣⍳⍴⍵
```

Try it online!

`⍳⍴⍵` generates a vector of indices from 1 to the length of the right argument.

`⍳⍴⍵⊣` takes the maximum of each row.

`⍳⍴⍵←` appends this to each row.

`⍵⋄` returns the resulting array.

## Answer (2)

# Japt, 10 bytes

```
òUìXèVàU
```

Try it online!

## Answer (2)

# Java 8, 79 bytes

```
import java.util.*;class M{static void f(int[][]a){List<Integer>b=new ArrayList<>();for(int[]r:a)b.add(Collections.max(Arrays.asList(r)));System.out.println(b);}}
```

Try it online!


################################################################

Solution:
[[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 2, 6, 6, 6, 6, 6, 2, 0, 0], [6, 2, 6, 2, 6, 6, 6, 2, 0, 0], [6, 2, 6, 2, 6, 6, 6, 2, 0, 0], [6, 2, 0, 2, 2, 2, 6, 0, 0, 0], [6, 0, 0, 2, 2, 0, 6, 0, 0, 0], [0, 0, 0, 2, 2, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

