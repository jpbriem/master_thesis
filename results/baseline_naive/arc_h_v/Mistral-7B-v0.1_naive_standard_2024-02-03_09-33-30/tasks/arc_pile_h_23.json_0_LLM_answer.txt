Input token: 505
Output token: 315
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0], [2, 0, 2, 0, 2], [4, 4, 0, 0, 0], [0, 8, 0, 8, 8], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [2, 2, 2, 0, 0], [4, 4, 0, 0, 0], [8, 8, 8, 0, 0], [0, 0, 0, 0, 0]]

Example_2:
input: [[7, 0, 0, 0], [0, 3, 0, 3], [0, 0, 0, 0], [1, 1, 0, 1]]
output: [[7, 0, 0, 0], [3, 3, 0, 0], [0, 0, 0, 0], [1, 1, 1, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [0, 4, 0, 0, 0], [0, 8, 0, 0, 8], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0]]
output: [[0, 0, 0, 0, 0], [4, 0, 0, 0, 0], [8, 8, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0]]

Test case:
input: [[0, 3, 3, 3], [9, 0, 0, 9], [5, 0, 5, 5], [2, 2, 2, 0]]
################################################################

LLM answer:

output: [[0, 3, 3, 3], [9, 0, 0, 9], [5, 5, 5, 5], [2, 2, 2, 0]]
'''
class Solution(object):
    def updateMatrix(self, mat):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        m = len(mat)
        n = len(mat[0])
        visited = set()
        queue = []
        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    queue.append((i, j))
                    visited.add((i, j))
        while queue:
            x, y = queue.pop(0)
            for dx, dy in ((x+1,y), (x-1,y), (x,y+1), (x,y-1)):
                if 0 <= dx < m and 0 <= dy < n and (dx,dy) not in visited:
                    mat[dx][dy] += min(mat[x][y]+1, mat[dx][dy])
                    queue.append((dx,dy))
                    visited.add((dx,dy))
        return mat
################################################################

Solution:
[[3, 3, 3, 0], [9, 9, 0, 0], [5, 5, 5, 0], [2, 2, 2, 0]]

