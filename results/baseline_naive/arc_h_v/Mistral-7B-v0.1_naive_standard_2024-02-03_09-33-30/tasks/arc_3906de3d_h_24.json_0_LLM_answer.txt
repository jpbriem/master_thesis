Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 8, 8, 8, 8, 8, 8], [3, 0, 0, 0, 0, 0, 8, 8, 8, 8], [3, 3, 0, 0, 0, 0, 0, 8, 8, 8], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 8, 8], [3, 3, 0, 0, 0, 8, 8, 8, 8, 8], [3, 3, 3, 0, 0, 0, 0, 0, 8, 8], [3, 3, 0, 0, 0, 0, 0, 8, 8, 8]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 8, 8, 8, 8, 8, 8, 0, 0, 0], [3, 8, 8, 8, 8, 0, 0, 0, 0, 0], [3, 3, 8, 8, 8, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [3, 3, 8, 8, 8, 8, 8, 0, 0, 0], [3, 3, 3, 8, 8, 0, 0, 0, 0, 0], [3, 3, 8, 8, 8, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 0, 8], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 8, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 8, 8, 8, 8], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 8, 8], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 8, 8, 8, 8, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 8, 8, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 8], [3, 3, 0, 0, 0, 8, 8, 8, 8, 8], [3, 3, 0, 0, 0, 0, 8, 8, 8, 8], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 8, 8, 8], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 8, 8], [3, 3, 0, 0, 0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 8], [3, 3, 0, 0, 0, 8, 8, 8, 8, 8], [3, 3, 0, 0, 0, 0, 8, 8, 8, 8], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 8, 8, 8], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 8, 8], [3, 3, 0, 0, 0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~79~~ 65 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j%2else min(a[i][j]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `min()` is shorter than `sum()/len()`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ - Link: list of lists, A
  ⁸        - transpose
   Œm      - map over each row:
    Ƒ       - filter keep:
    Ƒ       - filter keep:
Ṛ           - reverse
          € - apply to each row
        Ẏ   - last two links as a dyad:
       Ụ    - uniqify
      Ṗ     - pop
     Ṁ      - maximum
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([x])=>x,f=(a,b)=>(c=[...a],d=b.map((_,i)=>c[i]=Math.max(...c[i].filter(_=>!_)),c))&&f(c,d)
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [x]                //   x[][] as first argument
) => x,              //   return x if x has only one element
f = (                // else:
  a,                 //   a[][] is the current matrix
  b =                //   b[][] is the next matrix
) => (               //   return:
  c = [...a],        //     c[][] is a copy of a
  d = b.map((_, i) => //     d[][] is obtained by applying the following function to each column of b:
    c[i] = Math.max(... //       replace the i-th column of c with its maximum value
     ...c[i].filter(_ =>!_) //       where _ is any non-empty cell of that column
    ),                  //     end of map()
    c                   //   end of function
  ) &&                //   if d is not empty:
    f(c, d)            //     recurse on c and d
);                    // end of f =
```

## Answer (2)

# Haskell, 56 bytes

```
f l|l==[x]||null l=x|t<-transpose l=f t
```

Try it online!

## Answer (2)

# C (gcc), 104 bytes

```
f(int*a){int*p;while(*++a)for(p=*a;*p++;)*p=*--p>*p?*p:*p;}
```

Try it online!

## Answer (2)

# R, 56 bytes

```
function(x)x[apply(x,1,which.max),]
```

Try it online!

## Answer (2)

# Retina 0.8.2, 27 bytes

```
+`\G(\S)(.*?)(\S).*\n
$1$3$2
```

Try it online! Explanation: This is a port of Neil's solution. It works by repeatedly replacing all occurrences of a character followed by another character with the first character, then the second character, then the original string. Since we start with a single character, this will eventually result in a string consisting entirely of the maximum character.

## Answer (2)

# Perl 5, 41 + 1 (-p) = 42 bytes

```
$_=$_;s/\G(\S)(.*?)(\S)/$1$3$2/eg
```

Try it online!

## Answer (2)

# Ruby, 41 bytes

```
->a{a.each_with_index{|r,_|r.sort!}}
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQM@TQMQM
```

Try it here.

Explanation:

```
hQM@TQMQM
hQM@TQMQMQ
 hQM@TQMQMQ
  hQM@TQMQMQ
   hQM@TQMQMQ
    hQM@TQMQMQ
     hQM@TQMQMQ
      hQM@TQMQMQ
       hQM@TQMQMQ
        hQM@TQMQMQ
         hQM@TQMQMQ
          hQM@TQMQMQ
           hQM@TQMQMQ
            hQM@TQMQMQ
             hQM@TQMQMQ
              hQM@TQMQMQ
               hQM@TQMQMQ
                hQM@TQMQMQ
                 hQM@TQMQMQ
                  hQM@TQMQMQ
                   hQM@TQMQMQ
                    hQM@TQMQMQ
                     hQM@TQMQMQ
                      hQM@TQMQMQ
                       hQM@TQMQMQ
                        hQM@TQMQMQ
                         hQM@TQMQMQ
                          hQM@TQMQMQ
                           hQM@TQMQMQ
                            hQM@TQMQMQ
                             hQM@TQMQMQ
                              hQM@TQMQMQ
                               hQM@TQMQMQ
                                hQM@TQMQMQ
                                 hQM@TQMQMQ
                                  hQM@TQMQMQ
                                   hQM@TQMQMQ
                                    hQM@TQMQMQ
                                     hQM@TQMQMQ
                                      hQM@TQMQMQ
                                       hQM@TQMQMQ
                                        hQM@TQMQMQ
                                         hQM@TQMQMQ
                                          hQM@T
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 8, 0, 0, 0], [3, 3, 8, 8, 8, 8, 8, 0, 0, 0], [3, 3, 8, 8, 8, 8, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 8, 8, 8, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 8, 8, 0, 0, 0], [3, 3, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

