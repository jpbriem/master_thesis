Input token: 685
Output token: 700
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 7, 2, 0, 0], [0, 0, 0, 2, 6, 1], [9, 8, 0, 0, 0, 1], [9, 8, 0, 0, 6, 0], [0, 0, 0, 2, 0, 0], [9, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 0, 0, 2, 0, 0], [9, 8, 0, 2, 6, 1], [9, 8, 7, 2, 6, 1]]

Example_2:
input: [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 4, 0], [8, 0, 0, 4, 0], [0, 0, 0, 4, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 4, 0], [0, 0, 1, 4, 0], [8, 0, 1, 4, 0]]

Example_3:
input: [[0, 0, 5, 0, 0], [0, 0, 0, 0, 1], [0, 0, 5, 0, 1], [0, 0, 5, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 0], [0, 0, 5, 0, 1], [0, 0, 5, 0, 1]]

Test case:
input: [[0, 0, 4, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 9, 0, 5, 0, 8], [3, 9, 0, 0, 7, 0], [0, 0, 4, 5, 7, 8], [3, 0, 4, 0, 7, 8]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 9, 0, 5, 0, 8], [3, 9, 0, 0, 7, 0], [0, 0, 4, 5, 7, 8], [3, 0, 4, 0, 7, 8]]

Constraints:
1 <= matrix.length == matrix[i].length <= 100
matrix[i][j] is either 0 or a positive integer less than 100.
 */
public class _1005 {
    public int[][] pacificAtlantic(int[][] heights) {
        if (heights == null || heights.length == 0 || heights[0].length == 0) return new int[0][0];
        int m = heights.length;
        int n = heights[0].length;
        boolean[][] p = new boolean[m][n];
        boolean[][] a = new boolean[m][n];
        for (int i = 0; i < m; ++i) {
            dfs(p, heights, i, 0);
            dfs(a, heights, i, n - 1);
        }
        for (int j = 0; j < n; ++j) {
            dfs(p, heights, 0, j);
            dfs(a, heights, m - 1, j);
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (p[i][j] && a[i][j]) res.add(Arrays.asList(i, j));
            }
        }
        int[][] ans = new int[res.size()][2];
        for (int i = 0; i < res.size(); ++i) {
            ans[i] = res.get(i).toArray(new Integer[0]);
        }
        return ans;
    }

    private void dfs(boolean[][] visited, int[][] heights, int x, int y) {
        if (x >= 0 && x < heights.length && y >= 0 && y < heights[0].length &&!visited[x][y] && heights[x][y] > 0) {
            visited[x][y] = true;
            dfs(visited, heights, x + 1, y);
            dfs(visited, heights, x - 1, y);
            dfs(visited, heights, x, y + 1);
            dfs(visited, heights, x, y - 1);
        }
    }
}
################################################################

Solution:
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 4, 0, 7, 8], [3, 9, 4, 5, 7, 8], [3, 9, 4, 5, 7, 8]]

