Input token: 2161
Output token: 2048
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 6], [7, 7, 7, 7, 7, 7, 0, 0, 0, 6], [7, 7, 0, 0, 0, 0, 6, 6, 6, 6], [7, 7, 0, 0, 0, 0, 0, 0, 6, 6], [7, 7, 7, 7, 0, 0, 0, 0, 0, 6], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 0, 0, 0, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 6, 6, 6]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 6, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 6, 0, 0, 0], [7, 7, 6, 6, 6, 6, 0, 0, 0, 0], [7, 7, 6, 6, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 6, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 6, 6, 6, 6, 6, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 6, 6, 6, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 6, 6], [7, 7, 7, 7, 0, 0, 0, 0, 0, 6], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 6, 6, 0, 0, 0], [7, 7, 7, 7, 6, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 6, 6, 6, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 6, 6, 6], [7, 7, 7, 7, 0, 0, 0, 0, 6, 6], [7, 7, 7, 0, 0, 0, 0, 6, 6, 6], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 6, 6, 6, 6], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 6, 6, 6, 0, 0, 0], [7, 7, 7, 7, 6, 6, 0, 0, 0, 0], [7, 7, 7, 6, 6, 6, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 6, 6, 6, 6, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 7, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 0, 6, 6, 6], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 6, 6, 6, 6], [7, 7, 7, 0, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 6, 6, 6, 6, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 6, 6, 6, 6, 6, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~95~~ 89 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j<len(a)-1else max(a[i][j+1]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(n)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 11 bytes

```
Ṗ€ƊḢ⁼ịẋỤṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€ƊḢ⁼ịẋỤṪ - Link: list of lists
Ṗ€         - pop each row                    e.g. [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...] -> [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...]
    Ɗ       - last two links as a dyad f(x,y):
     Ḣ      -   head                e.g. [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...] -> [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...]
       ⁼    - equal to?              e.g. [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...] -> [[False,True,True,True,True,True,True,True,True,True],[False,False,False,False,False,False,False,False,False,False],...]
         ị  - index into x             e.g. [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...] -> [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...]
          ẋ - repeat                    e.g. [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...] -> [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...]
           Ụ - unmodifiable view        e.g. [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...] -> [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...]
            Ṫ - tail                     e.g. [[0,0,0,0,0,0,0,0,0,0],[7,7,7,7,0,0,0,0,0,6],...] -> [[7,7,7,7,0,0,0,0,0,6],...]
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...r])=>r.map(([_,...c])=>c.reduceRight((m,v)=>(m>v)?m:v,''))
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [_,...r]          //   r[] = original matrix
) =>                  // return:
  r.map(             //   map over rows:
    ([_,...c]) =>   //     c[] = current row
    c.reduceRight(   //     reduce from right to left:
      (m, v) =>      //       accumulator m and value v:
        (m > v)?    //         if m > v:
          m          //           use m
        :            //         else:
          v          //           use v
     , '')          //       initial value ''
    )                //     end of reduce()
  )                   //   end of map()
```

## Answer (2)

# Haskell, 56 bytes

```
import Data.List
t=transpose
f=[maximum$t$zipWith(\x y->takeWhile(/=0)[x,y])t]
```

Try it online!

## Answer (2)

# C++ (clang), 100 bytes

```
int main(){int n;cin>>n;vector<vector<int>>a(n);while(n--){int t;cin>>t;a.push_back({});while(t--)a.back().push_back(0);}return 0;}
```

Try it online!

## Answer (2)

# R, 64 bytes

```
function(x)apply(x,1,function(y)rev(sort(unlist(y))))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^.*¶
$&
```

Try it online! Explanation: This solution uses the fact that the output will always have the same number of lines as the input. It simply removes all non-digits and then joins the remaining digits on newlines.

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＦθ«ＷＳＩ⌈↨⟦…⟧⟦…⟧
```

Try it online! Link is to verbose version of code. Takes input as a single line of space separated numbers. Explanation: Reads the input as a string and splits it by spaces. Then iterates over the resulting array of strings. Each iteration reads the next string and converts it to a list of characters. Then compares the first character to the second and so on until one of them is not zero. Outputs this maximum value.

## Answer (1)

# Vyxal, 1
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 6, 6, 6, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 6, 6, 6, 6, 0, 0, 0, 0, 0], [7, 7, 7, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

