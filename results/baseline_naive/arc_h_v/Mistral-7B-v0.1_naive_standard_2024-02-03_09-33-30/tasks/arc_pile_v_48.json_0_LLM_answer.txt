Input token: 478
Output token: 850
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[3, 0, 4, 0, 0], [3, 0, 4, 0, 2], [0, 0, 0, 0, 0], [3, 0, 0, 0, 2], [0, 0, 0, 6, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [3, 0, 0, 0, 0], [3, 0, 4, 0, 2], [3, 0, 4, 6, 2]]

Example_2:
input: [[1, 9, 0, 0], [1, 0, 0, 0], [1, 0, 4, 2], [0, 9, 0, 0]]
output: [[0, 0, 0, 0], [1, 0, 0, 0], [1, 9, 0, 0], [1, 9, 4, 2]]

Example_3:
input: [[3, 0, 8, 0], [3, 0, 0, 4], [0, 6, 8, 0], [3, 6, 8, 0]]
output: [[0, 0, 0, 0], [3, 0, 8, 0], [3, 6, 8, 0], [3, 6, 8, 4]]

Test case:
input: [[7, 9, 0, 0, 8], [7, 0, 0, 0, 0], [0, 9, 0, 5, 8], [0, 0, 1, 5, 0], [0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [7, 9, 0, 5, 8], [7, 9, 1, 5, 0], [7, 9, 1, 5, 8]]

Constraints:
1 <= matrix.length == matrix[i].length <= 100
matrix[i][j] is either 0 or an integer in range [1, 9].
 */
public class _1012 {
    public static void main(String[] args) {
        int[][] matrix = {{7, 9, 0, 0, 8}, {7, 0, 0, 0, 0}, {0, 9, 0, 5, 8}, {0, 0, 1, 5, 0}, {0, 0, 0, 0, 0}};
        System.out.println(Arrays.deepToString(updateMatrix(matrix)));
    }

    private static int[][] updateMatrix(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return new int[0][];
        int m = matrix.length, n = matrix[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j]!= 0) {
                    matrix[i][j] = -1;
                } else {
                    matrix[i][j] = 0;
                }
            }
        }
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == 0) {
                    queue.offer(new int[]{i, j});
                }
            }
        }
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int k = 0; k < size; ++k) {
                int[] cur = queue.poll();
                int x = cur[0], y = cur[1];
                if (x > 0 && matrix[x - 1][y] == -1) {
                    matrix[x - 1][y] = matrix[x][y] + 1;
                    queue.offer(new int[]{x - 1, y});
                }
                if (y > 0 && matrix[x][y - 1] == -1) {
                    matrix[x][y - 1] = matrix[x][y] + 1;
                    queue.offer(new int[]{x, y - 1});
                }
                if (x < m - 1 && matrix[x + 1][y] == -1) {
                    matrix[x + 1][y] = matrix[x][y] + 1;
                    queue.offer(new int[]{x + 1, y});
                }
                if (y < n - 1 && matrix[x][y + 1] == -1) {
                    matrix[x][y + 1] = matrix[x][y] + 1;
                    queue.offer(new int[]{x, y + 1});
                }
            }
        }
        return matrix;
    }
}
################################################################

Solution:
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [7, 9, 0, 5, 8], [7, 9, 1, 5, 8]]

