Input token: 2305
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 5, 0], [5, 0, 0, 0, 0, 0], [0, 5, 0, 0, 5, 0], [5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 7, 0], [0, 5, 0, 0, 5, 0], [5, 7, 0, 0, 7, 0], [7, 5, 0, 0, 5, 0], [5, 0, 0, 0, 7, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 0], [5, 0, 0, 0, 0], [0, 0, 5, 5, 0], [5, 0, 0, 0, 0], [0, 0, 0, 5, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 0], [5, 0, 7, 0, 0], [7, 0, 5, 5, 0], [5, 0, 0, 7, 0], [0, 0, 0, 5, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 0], [5, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 0], [5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 0], [5, 0, 0, 7, 7, 0], [7, 0, 0, 5, 5, 0], [5, 0, 0, 0, 7, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~89~~ 86 bytes

```
lambda a:[[sum(a[i][j]for i in range(len(a)))%2*max(a[i])for j in range(len(a))]+[0]*len(a)]+[[0]*len(a)+[sum(a[i][j]for i in range(len(a)))%2*max(a[i])for j in range(len(a))]]
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(n)`.

Comment: @KevinCruijssen Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 14 bytes

```
Ḷ€Ɗ⁼ị$Ṗµẋ€ỤṪ
```

A monadic Link accepting a list of lists of integers which yields a list of lists of integers.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€Ɗ⁼ị$Ṗµẋ€ỤṪ - Link: list of lists of integers, A
   €         - for each row R:
   Ɗ         -   last two links as a dyad f(R):
    ⁼        -     equality comparison
      $      -       last three links as a monad:
      ị      -         index into A at position R
       Ṗ     -         pop
         µ   - start a new monad:
          ẋ€ -     repeat each element E times
            Ụ -   unmodifiable copy of A
              Ṫ - tail; remove the first column
```

## Answer (3)

# JavaScript (ES6), 70 bytes

Expects an array of arrays of numbers. Returns an array of arrays of numbers.

```
a=>a.map((r,y)=>(r=r.map(_=>a[x++].reduce((p,c)=>p^c)),r.push(...r),r))
```

Try it online!

### Commented

```
a =>                 // given an array of arrays of numbers, a[][],
a.map((r, y) = >     // map over rows r[]:
  (r = r.map(_ =>    //   replace each cell by its XOR sum:
    a[x++]           //     get next row from a[][]
   .reduce((p, c) =>//     reduce to the XOR sum p ^ c
      p ^ c,          //     initial value is 0
    )                 //     end of reduction
  ),                 //   end of mapping
  r.push(...r),      //   push a copy of the current row onto itself
  r                  //   return the modified row
)                    // end of mapping
```

## Answer (2)

# Haskell, 72 bytes

```
f x=[[sum[x!!i!!j|i<-[0..m-1]]%2*maximum[x!!i!!j|i<-[0..m-1]]|j<-[0..n
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 0, 7, 0, 0, 0, 0], [7, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 0, 7, 0, 0, 0, 0], [7, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 5, 0, 0, 7, 0, 0, 0, 0], [7, 0, 7, 0, 0, 5, 0, 0, 5, 0], [5, 0, 5, 0, 0, 7, 0, 0, 7, 0], [7, 0, 7, 0, 0, 5, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

