Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 3, 0, 3, 0], [0, 0, 0, 3, 3, 0, 3, 0, 3, 0], [0, 0, 0, 3, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 7, 0, 0], [0, 0, 0, 0, 7, 7, 0, 7, 0, 0], [0, 0, 0, 0, 7, 7, 0, 7, 0, 0], [0, 0, 0, 0, 7, 7, 7, 7, 7, 0]]
output: [[0, 0, 0, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 3, 7, 3, 0], [0, 0, 0, 3, 3, 7, 3, 7, 3, 0], [0, 0, 0, 3, 3, 7, 3, 7, 7, 0], [0, 0, 0, 0, 7, 7, 3, 7, 0, 0], [0, 0, 0, 0, 7, 7, 3, 0, 0, 0], [0, 0, 0, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 0, 3, 3, 3, 3, 3, 0, 3, 0], [3, 0, 3, 3, 3, 3, 0, 0, 3, 0], [3, 0, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0], [0, 7, 3, 0, 0, 3, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 7, 7, 7, 0], [0, 7, 0, 0, 0, 0, 7, 7, 7, 0], [0, 7, 0, 0, 0, 0, 7, 7, 7, 0]]
output: [[3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 7, 3, 3, 3, 3, 3, 7, 3, 0], [3, 7, 3, 3, 3, 3, 7, 7, 3, 0], [3, 7, 3, 3, 3, 3, 7, 7, 7, 0], [0, 7, 3, 3, 3, 3, 7, 0, 7, 0], [0, 0, 3, 0, 0, 3, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 3, 3, 0, 3, 3, 3, 3, 0], [0, 0, 3, 3, 0, 3, 3, 3, 0, 0], [0, 0, 3, 0, 0, 3, 3, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 3, 0, 7, 0, 0, 0, 7, 0], [0, 7, 3, 0, 7, 0, 0, 0, 7, 0], [0, 7, 0, 0, 7, 7, 0, 0, 7, 0], [0, 7, 0, 0, 7, 7, 0, 7, 7, 0], [0, 7, 0, 7, 7, 7, 0, 7, 7, 0]]
output: [[0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 7, 3, 3, 7, 3, 3, 3, 3, 0], [0, 7, 3, 3, 7, 3, 3, 3, 7, 0], [0, 7, 3, 7, 7, 3, 3, 7, 7, 0], [0, 7, 3, 0, 7, 7, 3, 7, 7, 0], [0, 0, 3, 0, 7, 7, 0, 0, 7, 0], [0, 0, 3, 0, 0, 7, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 0, 3, 0, 0, 0], [0, 0, 0, 3, 3, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 7, 0, 0, 7, 0, 0, 7, 0], [0, 7, 7, 0, 0, 7, 0, 0, 7, 0]]
################################################################

LLM answer:

output: [[0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 0, 3, 0, 0, 0], [0, 0, 0, 3, 3, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 0, 0, 7, 0, 0, 7, 0], [0, 7, 7, 0, 0, 7, 0, 0, 7, 0]]
```

## Answer (4)

# Python 3, ~~95~~ 86 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j<len(x)-1else max(x[i][j+1]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `range(len(x))` can be replaced with `range(n)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€ƊḢ⁼ịẋỤṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€ƊḢ⁼ịẋỤṪ - Link: list of lists
Ṗ€         - pop each row                    e.g. [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...] -> [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...]
  Ɗ        - last two links as a dyad f(a,b):
    ⁼      -   equal to                       e.g. [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...] -> [[True,False,False,False,False,False,False,False,False,False],...]
     ị     - index into a                e.g. [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...] -> [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...]
      ẋ    - repeat                          e.g. [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...] -> [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...]
       Ṫ   - tail                            e.g. [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...] -> [[0,0,0,3,3,3,3,3,3,0],[0,0,0,3,3,3,3,0,3,0],...]
           - implicit print
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...r])=>r.map((c,i)=>(c>_.pop()?c:f(r)[i]))
```

Try it online!

### Commented

```
f = (             // f is a recursive function taking:
  [_,...r]       //   r[] = the current row
) =>              //
  r.map((c, i) => // map over c[]:
    (c > _.pop()? // if c[] is greater than the last element of r[],
      c           //   return c[] itself
    :              // else:
      f(r)[i]     //   recurse on r[] and use its result at position i
    )             // end if/else
  )               // end map()
```

## Answer (2)

# Haskell, 54 bytes

```
f l=[max$zipWith max l$tail l|l==last l]
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*m){int n;for(n=0;m[n];++n);while(*--*){int*p,*q=&m[n];do{p=q++;while(*p&&*p<=*q)p+=n;}while(p!=q);}return m;}
```

Try it online!

## Answer (2)

# R, 64 bytes

```
function(x)t(apply(x,1,sort))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^(\d+)(.*)$
$1$2
```

Try it online! Explanation: This solution uses the fact that the first column of the output matrix will always contain only ones. It therefore suffices to convert the input matrix to one where all columns except the first have been removed. Then we simply remove the leading zeros from each line.

## Answer (2)

# Perl 5, 49 + 1 (-p) = 50 bytes

```
$_=$_;s/\G(\d+)/$1/ge;say$"x s/(.)/$1/gr
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQMzTQMzTQMz
```

Try it online!

## Answer (2)

# Ruby, 49 bytes

```
->a{(a<<a).transpose.map(&:max)}
```

Try it online!

## Answer (2)

# Java 8, ~~107~~ 106 bytes

```
m->{var t=new int[m.length][m[0].length];for(int i=0;i<m.length;i++)for(int j=0;j<m[0].length;j++){t[i][j]=Math.max(m[i][j],t[i][j]);}}
```

-1 byte thanks to *@ceilingcat*.

Try it online.

**Explanation:**

```
m->{                                   // Method with integer-matrix parameter & no return-type
  var t=new int[m.length][m[0].length];// Create new temporary matrix
                                       //  with the same dimensions as the input
  for(int i=0;i<m.length;i++)         // Loop over every row in the input
    for(int j=0;j<m[0].length;j++){    //  Inner loop over every column in the input
      t[i][j]=Math.max(m[i][j],t[
################################################################

Solution:
[[0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [0, 7, 7, 3, 3, 3, 3, 3, 7, 0], [0, 0, 7, 3, 3, 7, 3, 0, 7, 0], [0, 0, 0, 3, 3, 7, 3, 0, 7, 0], [0, 0, 0, 3, 0, 0, 3, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

