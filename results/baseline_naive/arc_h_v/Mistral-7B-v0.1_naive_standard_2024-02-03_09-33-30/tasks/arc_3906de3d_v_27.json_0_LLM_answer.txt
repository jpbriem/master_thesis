Input token: 2161
Output token: 2049
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 0, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 5, 5, 0, 5, 5, 9, 0], [0, 0, 9, 5, 0, 0, 0, 5, 9, 0], [0, 0, 9, 0, 0, 0, 0, 0, 9, 0], [0, 0, 9, 0, 0, 0, 0, 0, 9, 0], [0, 0, 9, 0, 0, 0, 0, 0, 9, 0]]
output: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 9, 0], [0, 5, 9, 5, 5, 5, 5, 5, 9, 0], [0, 0, 9, 5, 5, 0, 5, 5, 9, 0], [0, 0, 9, 5, 5, 0, 5, 5, 9, 0], [0, 0, 9, 5, 0, 0, 0, 5, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 0, 5, 5, 0, 0, 0, 0], [0, 9, 5, 0, 5, 0, 0, 0, 0, 0], [0, 9, 0, 0, 5, 0, 0, 0, 9, 0], [0, 9, 0, 0, 0, 0, 0, 0, 9, 0], [0, 9, 0, 0, 0, 9, 0, 0, 9, 0], [0, 9, 0, 0, 0, 9, 0, 0, 9, 0]]
output: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 9, 5, 5, 5, 5, 5, 5, 5, 0], [0, 9, 5, 5, 5, 5, 5, 5, 5, 0], [0, 9, 5, 5, 5, 5, 5, 5, 9, 0], [0, 9, 5, 0, 5, 5, 0, 0, 9, 0], [0, 9, 5, 0, 5, 9, 0, 0, 9, 0], [0, 0, 0, 0, 5, 9, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 0, 5, 5, 5, 5, 0, 0], [0, 5, 5, 0, 0, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 0, 0], [9, 0, 0, 0, 0, 5, 0, 5, 0, 0], [9, 0, 0, 9, 0, 5, 0, 5, 0, 0], [9, 9, 0, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 9, 9, 0, 0, 0, 0, 0], [9, 9, 0, 9, 9, 0, 0, 0, 0, 0]]
output: [[5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [9, 5, 5, 5, 5, 5, 5, 5, 0, 0], [9, 5, 5, 9, 5, 5, 5, 5, 0, 0], [9, 5, 5, 9, 9, 5, 5, 5, 0, 0], [9, 9, 0, 9, 9, 5, 5, 5, 0, 0], [9, 9, 0, 9, 0, 5, 0, 5, 0, 0], [0, 9, 0, 0, 0, 5, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 0, 0], [0, 5, 5, 5, 5, 0, 5, 0, 0, 0], [0, 0, 5, 5, 5, 0, 5, 0, 0, 0], [0, 0, 5, 0, 5, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 9, 5, 0, 0, 0], [0, 0, 0, 9, 0, 9, 0, 9, 0, 0], [0, 9, 0, 9, 9, 9, 0, 9, 0, 0], [0, 9, 9, 9, 9, 9, 0, 9, 0, 0]]
################################################################

LLM answer:

output: [[0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda x:[max(x[i][j]for j in range(len(x)))if i<len(x)-1else max([sum(x[i+1])/len(x),*x[i]])for i in range(len(x))]
```

Try it online!

Comment: `sum(x[i+1])/len(x)` can be replaced with `sum(x[i+1])//len(x)`.

Comment: @KevinCruijssen Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 11 bytes

```
Ṛ⁸Œc€ƲẎµỌṪ
```

A monadic Link accepting a list of lists which yields a list of integers.

**Try it online!** Or see the test-suite.

### How?

```
Ṛ⁸Œc€ƲẎµỌṪ - Link: list of lists of integers, L
Ṛ          - reverse each row
  Ʋ        - last two links as a dyad f(a,b):
   Œc      -   count occurrences of each element in b
     €     -   for each a in a:
      Ẏ    -     maximum of each column
        µ  - start a new monadic chain:
        Ọ  -     sort by decreasing order
          Ṫ - tail; yield the last item
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays of numbers. Returns an array of numbers.

```
f=a=>a.map((r,y)=>(g=(v,z)=>v>z||z&&g(v,r[++z]))(0,y)?g(0,y):r.reduce((p,q)=>p+q)/r.length)
```

Try it online!

### Commented

```
f =                 // f is a recursive function taking:
a =>                //   a[][] = the input matrix
a.map(              // Map over rows:
  (r, y) =>         //   r = current row; y = its index
    (g =            //   g is a recursive function taking:
      (v, z) =>     //     v = current value; z = its index
        v > z ||    //     If v is greater than z:
        z &&        //       If z is defined:
          g(v, r[++z]) //         Recurse on the next value
    )(0, y)?       //   If g returns true:
      g(0, y) :      //     Return the result of calling g again
      r.reduce((p, q) => //   Otherwise reduce the row to sum all values:
        p + q        //     Accumulator += current value
      ) / r.length  //   Divide by the number of elements in the row
    )
```

## Answer (2)

# Haskell, 64 bytes

```
import Data.List
f l=[maximum$zipWith(\a b->a+fromIntegral b)l$tail l|l/=[]]
```

Try it online!

## Answer (2)

# CJam, 17 bytes

```
{~{:@}%\:+/\}%
```

Try it online!

## Explanation

```
{             e# For each line...
 ~            e# Reverse it.
 {            e# For each character...
  :@}%        e# Count how many times it occurs.
 \:+/         e# Sum up the counts.
 }%           e# End of inner loop.
}%            e# End of outer loop.
```

## Answer (2)

# R, 54 bytes

```
function(m){apply(m,1,function(x)max(x)+sum(x[-1])/length(x))}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
O`¶
^.*¶(.)
$1
T`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&¶$&
+`¶
$&
################################################################

Solution:
[[0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 9, 5, 5, 0, 0], [0, 5, 5, 5, 5, 9, 5, 9, 0, 0], [0, 9, 5, 5, 5, 9, 5, 9, 0, 0], [0, 9, 5, 9, 5, 9, 5, 9, 0, 0], [0, 0, 9, 9, 9, 0, 5, 0, 0, 0], [0, 0, 0, 9, 9, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

