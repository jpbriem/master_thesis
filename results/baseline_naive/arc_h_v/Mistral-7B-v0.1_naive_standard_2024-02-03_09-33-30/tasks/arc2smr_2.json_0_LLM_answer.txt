Input token: 2077
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 6, 1, 6, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 6, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 6, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~79~~ 85 bytes

```
lambda x:[[sum(x[i][j]for i in range(len(x)))%2*~x[i][j]or x[i][j]for j in range(len(x))]for i in range(len(x))]
```

Try it online!

Comment: I think you can save a byte by using `range(len(x))` instead of `range(len(x)-1)`.

Comment: @JonathanAllan Thanks for the suggestion.

## Answer (3)

# Jelly, 11 bytes

```
Ḷ€Ɗ⁼ịṪµẋ€Ụ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€Ɗ⁼ịṪµẋ€Ụ - Main link: list of lists L
Ḷ€          - length of each row -> [1,1,1,1,1,1,1,1,1,1,1,1,1,1]
  Ɗ         - last two links as a dyad:
   ⁼        -   equal to?
     Ṫ       - tail (of the first argument)
    ị       - index into (the second argument)
            - e.g. [1,1,1,1,1,1,1,1,1,1,1,1,1,1] with [1,1,1,1,1,1,1,1,1,1,1,1,1,1] -> [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
             - e.g. [1,1,1,1,1,1,1,1,1,1,1,1,1,1] with [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] -> [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
 µ          - start a new monadic chain:
  ẋ€       -   repeat each element of the first argument
              e.g. [1,1,1,1,1,1,1,1,1,1,1,1,1,1] -> [1,1,1,1,1,1,1,1,1,1,1,1,1,1]
               e.g. [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] -> [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
    Ụ      - logical OR
             e.g. [1,1,1,1,1,1,1,1,1,1,1,1,1,1] -> [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
               e.g. [0,0,0,0,0,0,0,0,0,0,0,0,0,0] -> [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays. Returns an array of arrays.

```
a=>a.map((r,y)=>(r=r.map((_,x)=>x^y)),r=[...a])
```

Try it online!

### Commented

```
a =>                 // a[] = input array of arrays
a.map((r, y) =>      // map over rows r[]:
  (r = r.map((_, x) => //   map over columns r[]:
    x ^ y              //     XOR the column number x with the row number y
  ),                  //   end of inner map()
  r                   //   return the modified row r[]
))                   // end of outer map()
```

## Answer (2)

# Haskell, 54 bytes

```
f l=(zipWith(\x->x^<$>l)l)[0..length l-1]
```

Try it online!

## Answer (2)

# C (gcc), 104 bytes

```
f(int**m){for(int i=0;i<*(*m+0);++i)for(int j=0;j<*(*m+0);++j)(*m)[i][j]=!(i|j)&(*m)[i][j];}
```

Try it online!

## Answer (2)

# R, 64 bytes

```
function(x)t(apply(x,1,function(y)y&!rowSums(x)))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 34 bytes

```
\d
$*
+`(.)(.)
$1^$2
```

Try it online! Explanation: This is a port of my Java answer.

## Answer (2)

# Charcoal, 20 bytes

```
ＮθＷθＳＥθＩ⌕ι↨⟦⁰‖ι∧⁰ι✂ι⟧
```

Try it online! Link is to verbose version of code. Takes input as a single line of space separated numbers. Explanation: Input is read from STDIN as a string of digits. Output is written to STDOUT as a string of digits.

```
Ｎθ
```

Input the size of the matrix.

```
ＷθＳ
```

Repeat this many times.

```
Ｅθ
```

Map over the rows.

```
Ｉ⌕ι↨⟦⁰‖ι∧⁰ι✂ι⟧
```

Output the bitwise XOR of the row with its own transpose.

## Answer (2)

# Ruby, 49 bytes

```
->a{a.map{|r|r.map{|c|!(r.index c)|c}}}
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
℅ṗ⁽ⁿ⁾⁵⁴ⁱ≬
```

Try it Online!

Port of @Neil's Python
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 6, 1, 6, 1, 6, 1, 6, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 6, 1, 6, 1, 6, 1, 6, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 0, 0, 0]]

