Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[2, 2, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 2, 2, 2, 0, 2, 2, 2, 0], [0, 0, 2, 2, 2, 0, 2, 2, 2, 0], [0, 0, 2, 0, 2, 0, 2, 2, 0, 0], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0], [0, 3, 0, 0, 2, 0, 2, 0, 0, 0], [3, 3, 0, 0, 0, 3, 0, 0, 0, 0], [3, 3, 0, 0, 0, 3, 0, 0, 3, 0], [3, 3, 0, 3, 0, 3, 0, 0, 3, 0], [3, 3, 0, 3, 0, 3, 0, 0, 3, 0]]
output: [[2, 2, 2, 2, 2, 2, 2, 2, 2, 0], [3, 3, 2, 2, 2, 3, 2, 2, 2, 0], [3, 3, 2, 2, 2, 3, 2, 2, 2, 0], [3, 3, 2, 3, 2, 3, 2, 2, 3, 0], [3, 3, 0, 3, 2, 3, 2, 2, 3, 0], [0, 3, 0, 0, 2, 0, 2, 0, 3, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 2, 2, 2, 2, 2, 2, 2, 2, 0], [0, 2, 2, 2, 0, 2, 0, 2, 2, 0], [0, 2, 2, 2, 0, 2, 0, 2, 2, 0], [0, 2, 2, 2, 0, 2, 0, 0, 2, 0], [0, 2, 2, 0, 0, 0, 0, 0, 2, 0], [0, 2, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 3, 0, 3, 3, 0, 0], [0, 0, 0, 0, 3, 0, 3, 3, 0, 0], [0, 3, 3, 0, 3, 0, 3, 3, 0, 0]]
output: [[0, 2, 2, 2, 2, 2, 2, 2, 2, 0], [0, 2, 2, 2, 3, 2, 3, 2, 2, 0], [0, 2, 2, 2, 3, 2, 3, 2, 2, 0], [0, 2, 2, 2, 3, 2, 3, 3, 2, 0], [0, 2, 2, 0, 0, 0, 3, 3, 2, 0], [0, 2, 2, 0, 0, 0, 0, 3, 2, 0], [0, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 3, 0, 0, 3, 0, 0]]
output: [[0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 2, 2, 2, 2, 3, 0, 0], [0, 0, 0, 2, 2, 2, 2, 3, 0, 0], [0, 0, 0, 3, 2, 2, 2, 3, 0, 0], [0, 0, 0, 0, 2, 2, 2, 3, 0, 0], [0, 0, 0, 0, 3, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 2, 2, 2, 0, 2, 0, 0], [0, 0, 2, 2, 2, 2, 0, 2, 0, 0], [0, 0, 2, 2, 2, 2, 0, 2, 0, 0], [0, 0, 2, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 2, 2, 2, 3, 2, 0, 0], [0, 0, 2, 2, 2, 2, 3, 2, 0, 0], [0, 0, 2, 2, 2, 2, 3, 2, 0, 0], [0, 0, 2, 0, 2, 2, 3, 2, 0, 0], [0, 0, 0, 0, 2, 2, 3, 0, 0, 0], [0, 0, 0, 0, 0, 2, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda x:[max(x[i][j]for i in range(len(x)))if j<len(x)-1else max(x[i][j+1]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `range(len(x))` can be replaced with `range(len(x[0]))`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 5 bytes

```
Ḷ⁼ƇṚẎ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ⁼ƇṚẎ - Link: list of lists, L
Ḷ      - length                    e.g. [2,2,2,2,2,2,2,2,2,0] -> 10
  Ƈ    - filter keep those where:
 ⁼     -   equal to               e.g. [2,2,2,2,2,2,2,2,2,0] -> [10]
       -   last two links as a dyad...
Ṛ      -   reverse                 e.g. [10] -> [0,1,2,3,4,5,6,7,8,9]
        -  ...and yield the maximum value from each row
      Ẏ - de-duplicate by row
```

## Answer (3)

# JavaScript (ES6), 51 bytes

Expects an array of arrays. Returns an array of arrays.

```
a=>a.map((_,c)=>(b=[]).fill(Math.max(...a[c])),c++)
```

Try it online!

--------------------

# JavaScript (ES6), 53 bytes

Expects an array of arrays. Returns an array of arrays.

```
a=>a.map((r,c)=>(b=[...r]).sort(),c++)
```

Try it online!

## Answer (2)

# Haskell, 44 bytes

```
f l=(zipWith max$l++[[maximum l]])
```

Try it online!

## Answer (2)

# R, 44 bytes

```
function(m)t(apply(m,1,max))
```

Try it online!

## Answer (2)

# C (gcc), 64 bytes

```
f(int*p){for(;*p;p+=*p+1)printf("%d",*p);}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 21 bytes

```
\d+
$*¶$&
^.*
$*
```

Try it online! Explanation:

```
\d+
$*¶$&
```

Convert all numbers into their unary representation.

```
^.*
$*
```

Remove leading spaces.

## Answer (2)

# Perl 5, 31 + 1 (-p) = 32 bytes

```
say join" ",@F=map{max split/ /}@F
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQGVeMzQT
```

Try it here!

## Answer (2)

# Ruby, 31 bytes

```
->a{(a.map(&:max)+[a.max]).each_with_index{|v,i|a[i]=v}}
```

Try it online!

## Answer (2)

# Vyxal, 5 bytes

```
ṗḢḣḋ
```

Try it Online!

## Explained

```
ṗḢḣḋ
ṗ     # Get the lengths of each row
 Ḣ    # Take the first element
  ḣ   # Split on that many elements
   ḋ  # Maximum of each sublist
```

## Answer (2)

# Charcoal, 10 bytes

```
ＮθＦθ«≔⊕ι⌈⟦…⟧
```

Try it online! Link is to verbose version of code. Outputs newline separated rows. Explanation:

```
Ｎθ
```

Input the number of rows.

```
Ｆθ«
```

Loop over the rows.

```
≔⊕ι⌈⟦…⟧
```

Increment the index and output the maximum of the current row.

## Answer (2)

# APL (Dyalog Unicode), 10 bytes^{SBCS}

Anonymous tacit prefix function taking a matrix as left argument.

```������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������
################################################################

Solution:
[[0, 0, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 2, 2, 2, 3, 2, 0, 0], [0, 0, 2, 2, 2, 2, 3, 2, 0, 0], [0, 0, 2, 2, 2, 2, 3, 2, 0, 0], [0, 0, 2, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

