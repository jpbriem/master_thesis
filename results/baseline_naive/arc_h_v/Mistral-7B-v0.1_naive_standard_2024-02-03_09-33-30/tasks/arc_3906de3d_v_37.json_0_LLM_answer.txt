Input token: 2161
Output token: 2044
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 0, 9, 9, 9, 9, 0], [0, 9, 9, 9, 0, 0, 9, 9, 0, 0], [0, 9, 0, 9, 0, 0, 9, 9, 0, 0], [0, 9, 0, 9, 0, 0, 9, 9, 0, 0], [6, 0, 0, 9, 0, 0, 9, 0, 0, 0], [6, 0, 0, 0, 0, 0, 9, 0, 6, 0], [6, 0, 0, 0, 6, 6, 0, 0, 6, 0], [6, 0, 6, 0, 6, 6, 0, 0, 6, 0], [6, 0, 6, 0, 6, 6, 0, 0, 6, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [6, 9, 9, 9, 6, 9, 9, 9, 9, 0], [6, 9, 9, 9, 6, 6, 9, 9, 6, 0], [6, 9, 6, 9, 6, 6, 9, 9, 6, 0], [6, 9, 6, 9, 0, 6, 9, 9, 6, 0], [6, 0, 0, 9, 0, 0, 9, 0, 6, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 9, 9, 9, 9, 9, 9, 0, 0], [0, 0, 9, 9, 9, 9, 0, 9, 0, 0], [0, 0, 9, 9, 9, 9, 0, 9, 0, 0], [0, 0, 9, 9, 9, 9, 0, 9, 0, 0], [0, 0, 0, 9, 9, 0, 0, 9, 0, 0], [0, 0, 0, 9, 9, 0, 6, 0, 0, 0], [0, 0, 0, 9, 0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 6, 0, 6, 0, 0, 0]]
output: [[0, 0, 9, 9, 9, 9, 9, 9, 0, 0], [0, 0, 9, 9, 9, 9, 6, 9, 0, 0], [0, 0, 9, 9, 9, 9, 6, 9, 0, 0], [0, 0, 9, 9, 9, 9, 6, 9, 0, 0], [0, 0, 6, 9, 9, 0, 6, 9, 0, 0], [0, 0, 6, 9, 9, 0, 6, 0, 0, 0], [0, 0, 6, 9, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 0, 0, 0, 9, 9, 9, 0, 0], [9, 9, 0, 0, 0, 9, 9, 9, 0, 0], [9, 9, 0, 0, 0, 9, 9, 0, 0, 0], [0, 9, 0, 0, 0, 9, 9, 0, 0, 0], [0, 9, 0, 6, 0, 9, 0, 0, 0, 0], [0, 9, 0, 6, 0, 9, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 6, 0, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 6, 6, 6, 9, 9, 9, 0, 0], [9, 9, 6, 6, 6, 9, 9, 9, 0, 0], [9, 9, 6, 6, 6, 9, 9, 6, 0, 0], [0, 9, 0, 6, 0, 9, 9, 0, 0, 0], [0, 9, 0, 6, 0, 9, 0, 0, 0, 0], [0, 9, 0, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [0, 9, 0, 9, 9, 9, 0, 9, 0, 0], [0, 9, 0, 0, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0], [6, 0, 0, 0, 9, 0, 0, 0, 0, 0], [6, 0, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 6, 0, 0, 0, 6, 0, 0, 0], [6, 0, 6, 6, 0, 0, 6, 0, 0, 0], [6, 0, 6, 6, 0, 0, 6, 6, 0, 0]]
################################################################

LLM answer:

output: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [6, 9, 6, 9, 9, 9, 6, 9, 0, 0], [6, 9, 6, 6, 9, 9, 6, 6, 0, 0], [6, 9, 6, 6, 6, 6, 6, 6, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 59 bytes

```
lambda a:[max(a[i][j]for i in range(len(a)))if j%2else min(a[i][j]for i in range(len(a)))for j in range(len(a))]
```

Try it online!

Comment: `min()` is shorter than `sorted()[0]`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṛ⁸ŒmẎỤƊḢ€
```

A monadic Link accepting a list of lists which yields a list of integers.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmẎỤƊḢ€ - Link: list of lists of integers, A
Ṛ         - reverse each row
  ⁸       - index into A with:
   Œm     - maximums
     Ẏ    - flatten each
       Ɗ - map over each row:
         Ḣ€ - head (first element)
```

## Answer (3)

# JavaScript (ES6), 53 bytes

Expects an array of arrays as input. Returns an array of numbers.

```
f=([x])=>x,f=(a,b)=>(c=[...a,...b]).map((_,i)=>f(a.slice(i/2|0).map(r=>Math.max(...r))))
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [x]                //   x[][] as first argument
) => x,              //   return x if x is empty
f = (                 // f is a recursive function taking:
  a, b               //   a[][] and b[][] as arguments
) => (                //   return:
  c = [...a,...b]    //     concatenate a and b
).map((_, i) =>       //   for each position i in c:
  f(                  //     call f recursively on:
    a.slice(           //       slice a from position i / 2 rounded up to next integer
      i / 2 | 0        //       (this will be either a or b depending on whether i is even or odd)
    ).map(             //       map each row r of this subarray to:
      r => Math.max(...r) //         take the max of all elements in r
    )                  //     end of map()
  )                   //   end of map()
);                    // end of f = () =>...
```

## Answer (2)

# Haskell, 57 bytes

```
f l=l>>=(\x->zipWith max x$replicate(length x)[0..])
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*a){int*p;while(*++p)for(int*q=p+1;*q;q+=2)*q>*--p&&p--;return p;}
```

Try it online!

## Answer (2)

# R, 54 bytes

```
function(x)apply(x,1,max)+apply(x,1,min)-apply(x,1,sum)
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^.*¶
$&
.
$*
```

Try it online! Explanation:

```
\d+
$*
```

Convert each line to its digits.

```
^.*¶
$&
```

Join them together.

```
.
$*
```

Convert back to a number.

## Answer (2)

# Charcoal, 14 bytes

```
ＮθＦθ«≔⌈ι↨⪫⟦✂κ‖⁰⁴⟧⊞υ≔⌊ι↨⪫⟦✂κ‖⁰⁵⟧
```

Try it online! Link is to verbose version of code. Outputs a string of digits separated by newlines. Explanation:

```
Ｎθ
```

Input the size of the grid.

```
Ｆθ«
```

Loop over the rows.

```
≔⌈ι↨⪫⟦✂κ‖⁰⁴⟧
```

Find the maximum value in the current row.

```
⊞υ
```

Push that onto the output stack.

```
≔⌊ι↨⪫⟦✂κ‖⁰⁵⟧
```

Find the minimum value in the current row.

```
»
```

Output the result.

## Answer (2)

# Vyxal, 10 bytes

```
ṗ℅ṡṠṘṙṡṛ
```

Try it Online!

Port of Jonathan Allan's Python answer.

## Explained

```
ṗ℅ṡṠṘṙṡṛ
ṗ            # Push the length of the input
 ℅           # Split the input into chunks of that length
  ṡ          # Flatten
   Ṡ         # Reverse each chunk
    Ṙ        # Rotate right
     ṙ       # Rotate left
      ṡ      # Flatten again
       ṛ     # Take the last item
```

## Answer (2)

# Ruby, 49 bytes

```
->a{a.each_with_index.map{|e,_|e.max}}
```

Try it online!

## Answer (2)

# Perl 5, 44 + 1 (-p) = 45 bytes

```
say join"",map max split//,@F
```

Try it online!

## Answer (2)

# Java 8, ~~100~~ 99 bytes

```
n->{var m=Integer.MAX_VALUE;var s="";for(var i=0;i<n;i++)for(var j=0;j<n;j++){var t=m;m=Math.max(t,n[i][j]);s+=m+"";}return s;}
```

Try it online.

**Explanation:**

```
n->{                                  // Method with
################################################################

Solution:
[[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [6, 9, 6, 9, 9, 9, 6, 9, 0, 0], [6, 9, 6, 6, 9, 9, 6, 6, 0, 0], [6, 0, 6, 6, 9, 0, 6, 0, 0, 0], [6, 0, 6, 0, 9, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

