Input token: 2161
Output token: 2051
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 0, 5, 0, 5, 5, 5, 0], [0, 0, 5, 0, 5, 0, 5, 5, 5, 0], [0, 0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 5, 3, 0, 0, 5, 0], [0, 0, 0, 0, 5, 3, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 3, 0, 0], [0, 0, 0, 3, 0, 3, 0, 3, 0, 0], [0, 0, 3, 3, 0, 3, 3, 3, 0, 0]]
output: [[0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 3, 5, 3, 5, 5, 5, 0], [0, 0, 5, 3, 5, 3, 5, 5, 5, 0], [0, 0, 3, 3, 5, 3, 5, 3, 5, 0], [0, 0, 0, 0, 5, 3, 5, 3, 5, 0], [0, 0, 0, 0, 5, 3, 3, 3, 5, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [5, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 0, 0, 0, 0, 0], [0, 3, 0, 0, 5, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 3, 0, 0, 0, 0]]
output: [[5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [5, 3, 5, 5, 5, 5, 5, 5, 0, 0], [3, 3, 3, 5, 5, 5, 5, 5, 0, 0], [3, 3, 3, 5, 5, 5, 5, 5, 0, 0], [0, 3, 0, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 5, 5, 3, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 5, 0, 5, 0, 0, 0, 0], [0, 0, 5, 5, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0]]
output: [[0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 3, 0], [0, 0, 5, 5, 5, 5, 5, 5, 3, 0], [0, 0, 5, 5, 5, 5, 5, 5, 3, 0], [0, 0, 5, 5, 0, 5, 3, 3, 3, 0], [0, 0, 5, 5, 0, 5, 3, 0, 0, 0], [0, 0, 0, 0, 0, 5, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 0, 0, 5, 5, 5, 5, 0, 5, 0], [0, 0, 0, 5, 5, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 3, 0, 0, 3, 3, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 0, 0, 5, 5, 5, 5, 5, 3, 0], [0, 0, 0, 5, 5, 5, 5, 3, 3, 0], [0, 0, 0, 5, 5, 5, 3, 3, 3, 0], [0, 0, 0, 0, 0, 5, 3, 3, 3, 0], [0, 0, 0, 0, 0, 5, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda a:[max(a[i][j]for i in range(len(a)))if j<len(a)-1else max(a[i][j+1])for j in range(len(a))]
```

Try it online!

Comment: `lambda a:[max(a[i][j]for i in range(len(a)))if j<len(a)-1else max(a[i][j+1])for j in range(len(a))]` saves 9 bytes.

Comment: @JonathanAllan Thanks for that! I'm not sure why I didn't think of that...

## Answer (3)

# Jelly, 10 bytes

```
Ṛ⁸Œc€ƲẎỤṖ
```

A monadic Link accepting a list of lists which yields a list of integers.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸Œc€ƲẎỤṖ - Link: list of lists of integers, A
Ṛ          - reverse each row
  ⁸        - transpose
   Œc      - call -suffixes with:
     €     -...each row
      Ʋ    - while:
        Ẏ  - last link (yield): flatten
          Ụ - uniqify
           Ṗ - pop
```

## Answer (3)

# JavaScript (ES6), 51 bytes

Expects an array of arrays as input. Returns an array of numbers.

```
f=([x,...r]=>(x||[]).map((_,i)=>(r[i]||[])[0]))
```

Try it online!

### Commented

```
f =                 // f is a recursive function taking:
  ([x,...r] = >    //   x = first row of the matrix
                    //   r = remaining rows of the matrix
    (x || []).map(  // map over the elements of x:
      (_             //   _ is the current element
       , i) =>      //   i is the index of the current element
      (r[i] || [])[0]//   return the first element of the corresponding row
    )                // end of map()
  )                 // end of recursion
```

## Answer (2)

# Haskell, 49 bytes

```
import Data.List
f=[maximum$zipWith(\x y->head y)xs$tail x|x<-tails xs]
```

Try it online!

## Answer (2)

# R, 51 bytes

```
function(x){apply(x,1,function(y)max(unlist(lapply(y,-1))))}
```

Try it online!

## Answer (2)

# C++ (gcc), 100 bytes

```
int f(vector<vector<int>>&v){return v.size()&&v[0].size()?(v[0][0]+f(v)):0;}
```

Try it online!

## Answer (2)

# Charcoal, 12 bytes

```
ＦθＥι⊞υ⟦≔⌈⟧κ⟦≔⌈⟧λ
```

Try it online! Link is to verbose version of code. Explanation:

```
 Ｆθ
```

Loop over all rows.

```
 Ｅι
```

For each column...

```
 ⊞υ⟦≔⌈⟧κ
```

Push the maximum value onto the stack.

```
 ⟦≔⌈⟧λ
```

Pop the maximum value from the stack.

## Answer (2)

# Retina 0.8.2, 27 bytes

```
\d+
$*
^
$*
¶
$*
```

Try it online! Link includes test cases. Explanation:

```
\d+
$*
```

Convert the input to a single string of digits.

```
^
$*
```

Remove the leading digit.

```
¶
$*
```

Remove any trailing newlines.

```
$*
```

Output the result.

## Answer (2)

# Ruby, 41 bytes

```
->a{a.map{|e|e.map(&:max)}[-1]}
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
ṗ₀ṠṡṪṘṄṙṡ
```

Try it Online!

Port of my Python answer.

## Explained

```
ṗ₀ṠṡṪṘṄṙṡ
ṗ₀              # Push the empty list
    Ṡ          # For each row
     ṡ         #   Flatten
       Ṫ       #   Pop
        Ṙ      #   Reverse
         Ṅ     #   Join by newline
          ṙ    #   Transpose
           ṡ   #   Flatten
```

## Answer (2)

# Perl 5, 43 + 1 (-p) = 44 bytes

```
$_=join"",@F;say grep/./,$_.reverse
```

Try it online!

## Answer (2)

# Java 8, 70 bytes

```
a->a.stream().flatMapToInt(b->b.stream()).max().getAsInt()
```

Try it online.

## Answer (2)

# Japt, 10 bytes

```
òUìVàXèY
```

Try it

--------------------

## Explanation

```
òUìVàXèY
òUìVàXèY  Implicit: U = input
   Và    Map each row
     Xè  Get the maximum element
       Y  Take the last element
```

## Answer (2)

# Pyth, 10 bytes

```
.TQMzGhQ.T
```

Try it online!

## Answer (2)

# PHP, 59 Bytes

```
<?php foreach($argv as $row)echo max($row);
```

Run with `-nR` flag

## Answer (2)

# MATL, 10 bytes

```
Zq~Yt~Yt~Y
```

Try it online!

## Answer (2)

# PowerShell, 49 bytes

```
param
################################################################

Solution:
[[0, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 0, 0, 5, 5, 5, 5, 3, 5, 0], [0, 0, 0, 5, 5, 5, 3, 3, 5, 0], [0, 0, 0, 3, 0, 5, 0, 3, 5, 0], [0, 0, 0, 3, 0, 5, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

