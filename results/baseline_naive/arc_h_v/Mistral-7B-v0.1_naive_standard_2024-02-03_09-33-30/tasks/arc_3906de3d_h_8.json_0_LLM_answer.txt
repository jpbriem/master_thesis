Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 9, 9, 9], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 9, 9], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 9, 9, 9, 9, 9, 9], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 9, 9, 9, 9], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 9, 9, 9, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 9, 9, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 9, 9, 9, 9, 9, 9, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 9, 9, 9, 9, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 9, 9, 9], [3, 3, 3, 0, 0, 0, 0, 9, 9, 9], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 9, 9, 9, 0, 0, 0], [3, 3, 3, 9, 9, 9, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 9], [3, 0, 0, 0, 9, 9, 9, 9, 9, 9], [3, 3, 3, 0, 0, 0, 0, 0, 9, 9], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 9, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 9, 0, 0, 0], [3, 9, 9, 9, 9, 9, 9, 0, 0, 0], [3, 3, 3, 9, 9, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 9, 9], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 9, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 9, 9], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 65 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j%2else min(a[i][j]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `min()` is shorter than `sum()/len()`.

Comment: @JonathanAllan Thanks for that tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ḷ⁼€ƇṚẎỤḢṖ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ⁼€ƇṚẎỤḢṖ - Link: list of lists
Ḷ           - length of each row
   €        - each...
   Ƈ        - keep those where:
    ⁼       equal to
     Ṛ      reverse
        Ẏ  transpose
         Ụ  unique values
           Ḣ - head (first value)
            Ṗ - pop
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
f=([x])=>x,f=(a,b)=>(c=[],d=a.map((_,i)=>b[i].reduce((p,q)=>p>q?p:q)),c.push(d),f(d,b))
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [x]                //   x[][] as first argument
) => x,              // if x is empty, return x
f = (                 // else:
  a, b = []           //   a[][], b[][] are the two arguments
) => (                //   initialise c[][] with:
  c = [],             //     an empty array
  d = a.map((_, i) => //     map over the rows of a:
    b[i].reduce((p, q) => //       reduce the corresponding rows of b:
      p > q? p : q     //       take the maximum or minimum element
    )                   //     end of map()
  ),                  //   end of map()
  c.push(d),          //   push d onto c
  f(d, b)             //   recurse on d and b
);                    // end of f =...
```

## Answer (2)

# Haskell, 56 bytes

```
f l|l==[]=l;f(h:t)=zipWith max h t:f t
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*a){int*b,*c;for(b=a+sizeof(*a)/sizeof(**a);--b>=a;)for(c=b;c--;)*c<*b&&*c++=*b;}
```

Try it online!

## Answer (2)

# R, 56 bytes

```
function(m)Reduce(`&`,Map(\(x)m[x]<-apply(m[x],1,max),seq_along(m)))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d
$*
^
$*
+`(.)(.)
$2$1
```

Try it online! Explanation: This solution uses the fact that the output can be obtained by applying the transformation twice.

```
\d
$*
```

Replace all digits with their ASCII code.

```
^
$*
```

Remove leading spaces.

```
+`(.)(.)
$2$1
```

Swap adjacent characters.

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＦθ«≔⊕ιη≔⌈⟦⟧↨η⟦⟧⟦⟧
```

Try it online! Link is to verbose version of code. Outputs newline separated strings. Explanation:

```
Ｎθ
```

Input the number of rows.

```
Ｆθ«
```

Loop over the rows.

```
≔⊕ιη
```

Increment the column index.

```
≔⌈⟦⟧↨η⟦⟧⟦⟧
```

Output the maximum of the current row.

## Answer (2)

# Vyxal, 10 bytes

```
ṗ₀ṠṪṡṘṄṫ
```

Try it Online!

```
ṗ₀ṠṪṡṘṄṫ
ṗ₀          # Push the length of the input
  Ṡ         # Swap the top two items
   Ṫ        # Pop the length off the stack
    ṡ       # Sort the input
     Ṙ      # Rotate the sorted input left
      Ṅ     # Join the rotated input into a string
       ṫ    # Remove the last character from the string
```

## Answer (2)

# Perl 5, 48 + 1 (-p) = 49 bytes

```
$_=$_;s/\D//gr;say join"",sort{($a,$b)=@F[$_];$a}0..$#F
```

Try it online!

## Answer (2)

# Ruby, 49 bytes

```
->a{(a.transpose.map(&:max)+a.transpose.map(&:min)).join}
```

Try it online!

## Answer (2)

# Java 8, ~~100~~ 99 bytes

```
a->{var r=new int[a.length][a[0].length];for(int i=0;i<r.length;i++)for(int j=0;j<r[i].length;j++)r[i][j]=Math.max(a[i][j],r[i][j]);return r;}
```

Try it online.

**Explanation:**

```
a->{                                  // Method with integer matrix parameter and integer matrix return type
  var r=                              //  Result matrix, initialized with the size of the input matrix
    new int[a.length][a[0].length];  //  And filled with zeros
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 9, 9, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

