Input token: 1948
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 5, 7, 5, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 5, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 5, 7, 5, 7, 5, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 5, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~98~~ 96 bytes

```
lambda a:[[sum(map(int,i))for i in zip(*a)]]*(len(a)+1)[::-1][:-1]
```

Try it online!

Comment: `zip(*a)` is shorter than `[list(x) for x in zip(*a)]`.

Comment: @KevinCruijssen Thanks! I've been using that trick for ages but forgot about it here.

## Answer (3)

# Jelly, 10 bytes

```
Ḷ€ƇṖ⁼ịẋµỤ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€ƇṖ⁼ịẋµỤ - Main link: list of lists L
Ḷ          - length; y (the number of rows)
  Ƈ        - filter keepers:
   Ṗ       -     -      -         -   -   -    -  -ẋ -   Ụ
    €      - for each row R in L:
    Ƈ      - y = length(R)?                            - if so...
     ⁼     ...is equal to y?                         - if not...
      ị    - index into L at position y                  - return R
           -ẋ    repeat R y times                        - return L
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
a=>a.map((_,y)=>(a=a.slice(0,y+1)).join``,y)
```

Try it online!

### Commented

```
a =>               // a[] = input array
  a.map(          // map over each row r[] of a[]:
    (_ =>         //   implicit loop variable _
      (a = a.slice(0, y + 1)) //   slice out all rows up to and including row y
                              //   (row y itself will be included)
                              //   assign result back to a[]
    ),             // end of inner function
    y              //   loop variable y
  )               // end of outer map()
```

## Answer (2)

# Haskell, 54 bytes

```
f l=[take(length l)l|l<-tails l]
```

Try it online!

## Answer (2)

# CJam, 14 bytes

```
q~{_e*_}%$*
```

Try it online!

## Explanation

```
q~{_e*_}%$*
q~                 e# Read input from STDIN.
 {_e*_}%           e# For each line, duplicate it and append it to the previous lines.
     $             e# Take the last element of this stack.
      *            e# Repeat it n times, where n is the length of the original input.
```

## Answer (2)

# Perl 5, 39 bytes

```
sub f{@_=reverse@_;$_=$_[0]}while++$.<@_
```

Try it online!

## Answer (2)

# MATL, 10 bytes

```
"YGhX&ZP
```

Try it online!

## Answer (2)

# Ruby, 36 bytes

```
->a{(a<<a).each_cons(a.size)}
```

Try it online!

## Answer (2)

# Retina, 24 bytes

```
\n
$*
^
$*
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
.QT.QT.Q
```

Try it online!

## Answer (2)

# Java 8, ~~100~~ 99 bytes

```
m->{var s="";for(int i=0;i<m.length();i++)s+=m[i];return Arrays.asList(Arrays.copyOfRange(m,0,i+1));}
```

Try it online!

-1 byte thanks to Kevin Cruijssen

Comment: You can save a byte by replacing `StringBuilder sb=new StringBuilder("");` with `var s=""`.

Comment: @KevinCruijssen Thank you very much!

## Answer (2)

# Vyxal, 5 bytes

```
ṗṠṘṀ
```

Try it Online!

## Explained

```
ṗṠṘṀ
ṗṠṘṀ  # Implicit input
ṗ     # Push range [0..N]
 Ṡ    # Split on newlines
  Ṙ   # Rotate right N times
   Ṁ  # Join with newlines
```

## Answer (2)

# Charcoal, 10 bytes

```
ＮθＦθＥθι
```

Try it online! Link is to verbose version of code. Outputs a string instead of a list of strings. Explanation:

```
Ｎθ
```

Input the number of rows.

```
ＦθＥθι
```

For each row, print the row.

## Answer (2)

# APL (Dyalog Unicode), 11 bytes^{SBCS}

Anonymous tacit prefix function.

```
⊃⍨∘⌽¨⎕⍴⍵
```

Try it online!

`⎕⍴⍵` Get the size of the matrix.

`⍵¨` Apply the following function to each row of the matrix:

`⌽` reverse the row

`⊃⍨` take the first `⍨` elements of the reversed row

`⍨` discard the rest of the reversed row

## Answer (2)

# Japt, 10 bytes

```
õUòVìÃr
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 5, 7, 5, 7, 5, 7, 5, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 5, 7, 5, 7, 5, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 5, 7, 5, 7, 5, 7, 5, 7, 0, 0, 0]]

