Input token: 2161
Output token: 2042
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 5, 5, 5, 5], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 5, 5, 5, 5], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 5], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 5, 5, 5, 5, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 5, 5, 5, 5, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 5, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 5, 5], [8, 8, 8, 8, 8, 0, 0, 0, 0, 5], [8, 0, 0, 0, 0, 5, 5, 5, 5, 5], [8, 0, 0, 0, 0, 5, 5, 5, 5, 5], [8, 8, 8, 8, 8, 8, 0, 0, 0, 5], [8, 8, 0, 0, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 5, 5, 0, 0, 0], [8, 8, 8, 8, 8, 5, 0, 0, 0, 0], [8, 5, 5, 5, 5, 5, 0, 0, 0, 0], [8, 5, 5, 5, 5, 5, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 5, 0, 0, 0], [8, 8, 5, 5, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 5, 5, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 5], [8, 8, 0, 0, 0, 5, 5, 5, 5, 5], [8, 8, 8, 8, 8, 0, 0, 0, 5, 5], [8, 8, 8, 8, 8, 0, 0, 0, 0, 5], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 5, 5], [8, 8, 8, 0, 0, 0, 0, 0, 5, 5]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 5], [8, 8, 0, 0, 0, 5, 5, 5, 5, 5], [8, 8, 8, 8, 8, 0, 0, 0, 5, 5], [8, 8, 8, 8, 8, 0, 0, 0, 0, 5], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 5, 5], [8, 8, 8, 0, 0, 0, 0, 0, 5, 5]]
```

## Answer (4)

# Python 3, ~~79~~ 69 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j%2else min(a[i][j]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `min()` is shorter than `sorted()[0]`.

Comment: @JonathanAllan Thanks for that tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ - Link: list of lists
Ṛ           - reverse each row
  ⁸         - index into each row at indices 0, 1,..., len(row)-1
   Œm       - map over each row:
    Ƒ       -   filter keep those elements where:
     Ẏ      -     last link (implicit): yield the last element
       Ụ    -   remove duplicates from the filtered list
         Ṗ€ - pop off the first element of each row
           Ṁ - maximum
```

## Answer (3)

# JavaScript (ES6), 59 bytes

Expects an array of arrays as input. Returns an array of arrays as output.

```
f=([x])=>x,f=(a,b)=>(c=[...a],d=b.map((_,i)=>c[i]=Math.max(...c[i]),c),f(c,d))
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [x]                //   x[] = initial array of arrays
) => x,              //   return x if x has only one element
f = (                 // f is a recursive function taking:
  a,                 //   a[] = current array of arrays
  b = []             //   b[] = new array of arrays to be returned
) => (               //
  c = [...a],        //   c[] = copy of a[]
  d = b.map((_, i) => //   loop over all rows of b[]:
    c[i] = Math.max(...c[i]), //     replace the i-th row of c[] with its max value
    c                         //   end of map()
  ),                 //
  f(c, d)            //   recurse on c[] and d[]
)                    // end of f()
```

## Answer (2)

# Haskell, 56 bytes

```
f l|l==[r]=r|t<-zipWith max r$transpose l=f t
```

Try it online!

## Answer (2)

# C (gcc), 104 bytes

```
f(int*a){int*p;return p=a,*q=p+*p++,*q=*q>*(p+=*p++)?*q:*p++;}
```

Try it online!

## Answer (2)

# R, 56 bytes

```
function(x)do.call("cbind",Map(function(y)rev(unique(y)),x))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^(\d+)(.*)$
$2$1
T`(.)(..)*
$1$2
```

Try it online! Explanation:

```
\d+
$*
```

Convert the numbers to stars.

```
^(\d+)(.*)$
$2$1
```

Reverse the lines.

```
T`(.)(..)*
$1$2
```

Transpose the matrix.

## Answer (2)

# Charcoal, 18 bytes

```
ＮθＦθ«Ｅι⊞υ⌈⟦⟧κ≔⪫υ⊕κ✂υκ
```

Try it online! Link is to verbose version of code. Outputs a string of characters instead of a list of lists. Explanation:

```
Ｎθ
```

Input the number of rows.

```
Ｆθ«
```

Loop over the rows.

```
Ｅι⊞υ⌈⟦⟧κ
```

Append the maximum of the row to the list.

```
≔⪫υ⊕κ
```

Remove the maximum from the list.

```
✂υκ
```

Output the remaining items.

## Answer (2)

# Ruby, 47 bytes

```
->a{a.map{|e|e.reverse}.transpose.map(&:first)}
```

Try it online!

## Answer (2)

# Perl 5, 44 + 1 (-p) = 45 bytes

```
@F=reverse@F;say join" ",@F[$_]while 0..$#F
```

Try it online!

## Answer (2)

# Pyth, 11 bytes

```
hQGVQMQMQMQ
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
ṗṠṡṘṙṄṡṛ
```

Try it Online!

## Explained

```
ṗṠṡṘṙṄṡṛ
ṗ            # Reverse each line
 Ṡ           # Transpose
  ṡ          # Flatten
   Ṙ         # Sort by descending order
    ṙ        # Remove the largest item
      Ṅ      # Join by spaces
       ṡ     # Split by spaces
        ṛ    # Take the first item
```

## Answer (2)

# APL (Dyalog Unicode), 15 bytes^{SBCS}

Anonymous tacit prefix function.

```
⍳/⍨↑⍣⍴⍵⋄⍬
```

Try it online!

`⍳/⍨↑⍣⍴⍵⋄⍬`

`⍳/⍨↑⍣⍴⍵` Find the maximum of each row of the input.

`⋄⍬`
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 5, 0, 0, 0, 0, 0], [8, 8, 5, 5, 5, 5, 5, 0, 0, 0], [8, 8, 8, 8, 8, 5, 5, 0, 0, 0], [8, 8, 8, 8, 8, 5, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 5, 5, 0, 0, 0, 0, 0], [8, 8, 8, 5, 5, 0, 0, 0, 0, 0]]

