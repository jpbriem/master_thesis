Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 9, 9, 0, 9, 0, 0], [0, 9, 9, 0, 9, 9, 0, 9, 0, 0], [0, 9, 9, 0, 9, 0, 0, 9, 0, 0], [0, 9, 9, 0, 0, 0, 0, 0, 6, 0], [6, 9, 9, 6, 0, 0, 0, 0, 6, 0], [6, 0, 0, 6, 0, 0, 0, 0, 6, 0], [6, 0, 0, 6, 0, 0, 6, 0, 6, 0], [6, 0, 0, 6, 0, 0, 6, 0, 6, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 9, 9, 6, 0], [9, 9, 9, 9, 9, 9, 6, 9, 6, 0], [6, 9, 9, 6, 9, 9, 6, 9, 6, 0], [6, 9, 9, 6, 9, 0, 0, 9, 6, 0], [6, 9, 9, 6, 0, 0, 0, 0, 6, 0], [6, 9, 9, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 0, 9, 0, 9, 0, 0, 9, 0], [0, 9, 0, 9, 0, 0, 0, 0, 9, 0], [0, 9, 0, 9, 0, 0, 0, 0, 9, 0], [0, 9, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 6, 0, 6, 6, 6, 6, 0, 0], [0, 0, 6, 0, 6, 6, 6, 6, 0, 0], [0, 0, 6, 0, 6, 6, 6, 6, 6, 0]]
output: [[0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 6, 9, 6, 9, 6, 6, 9, 0], [0, 9, 6, 9, 6, 6, 6, 6, 9, 0], [0, 9, 6, 9, 6, 6, 6, 6, 9, 0], [0, 9, 0, 9, 0, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 0, 9, 9, 0], [0, 0, 9, 9, 9, 0, 0, 9, 9, 0], [0, 0, 9, 9, 9, 0, 0, 9, 9, 0], [0, 0, 9, 9, 0, 0, 0, 9, 9, 0], [0, 0, 9, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 0, 0, 0]]
output: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 6, 9, 9, 0], [0, 0, 9, 9, 9, 6, 6, 9, 9, 0], [0, 0, 9, 9, 9, 6, 6, 9, 9, 0], [0, 0, 9, 9, 0, 6, 0, 9, 9, 0], [0, 0, 9, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 0, 0, 0, 0], [0, 0, 0, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 9, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 6, 9, 0, 0], [0, 0, 0, 9, 9, 6, 6, 9, 0, 0], [0, 0, 0, 9, 9, 6, 6, 9, 0, 0], [0, 0, 0, 9, 9, 6, 6, 9, 0, 0], [0, 0, 0, 9, 9, 6, 6, 9, 0, 0], [0, 0, 0, 9, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 58 bytes

```
lambda x:[max(x[:i]+[min([j for j in x[i+1:]if j>0])]*len(x)-i,x[-1]),*x[:-1]]
```

Try it online!

Comment: `sum(x[:i]+[min([j for j in x[i+1:]if j>0])]*len(x)-i,x[-1])` -> `max(x[:i]+[min([j for j in x[i+1:]if j>0])]*len(x)-i,x[-1])`

Comment: @KevinCruijssen Thanks! I'm not sure why I didn't think of that...

## Answer (3)

# Jelly, 11 bytes

```
Ḷ⁼€;ṚẎỤƊḢṖ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ⁼€;ṚẎỤƊḢṖ - Link: list of lists
Ḷ           - length
   €        - for each:
   ⁼         - maximum with
     ;       concatenate
     Ṛ       reverse
      Ẏ      flatten
       Ụ     filter keep those > 0
         Ɗ   last two links as a dyad f(a,b):
           Ḣ  head/first element of a
            Ṗ pop from b
```

## Answer (3)

# JavaScript (ES6), 59 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=a=>a.map((_,i)=>(g=v=>v<0||v==a[i][i]?a[i][i]:Math.max(...v))(a.slice(i+1).filter(v=>v>0)))
```

Try it online!

--------------------

# JavaScript (ES6), 60 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=a=>a.map((_,i)=>(g=v=>v<0||v==a[i][i]?a[i][i]:Math.max(...v))(a.slice(i+1).filter(v=>v>0)))
```

Try it online!

Comment: You can save one byte by using `a[i][i]` instead of `a[i][i]===0`.

Comment: @Arnauld Good catch!

## Answer (2)

# Haskell, 61 bytes

```
import Data.List
f l=[maximum$take i l++[minimum$dropWhile(<0)$tail$drop i l]|i<-[0..length l-1]]
```

Try it online!

## Answer (2)

# CJam, 20 bytes

```
q~{_e%}%{_e%}%{_e%}%{_e%}%{_e%}%
```

Try it online!

## Explanation

```
q~                               "Read input"
 {_e%}%{_e%}%{_e%}%{_e%}%{_e%}%  "For each row:"
                                 "  For each column:"
                                 "    If the value is nonzero:"
                                 "      Take the minimum of all values to the right."
                                 "    Else:"
                                 "      Take the first value."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "End."
                                 "
################################################################

Solution:
[[0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 6, 6, 0, 0], [0, 0, 0, 9, 9, 6, 6, 6, 0, 0], [0, 0, 0, 9, 9, 6, 6, 6, 0, 0], [0, 0, 0, 9, 9, 0, 6, 6, 0, 0], [0, 0, 0, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

