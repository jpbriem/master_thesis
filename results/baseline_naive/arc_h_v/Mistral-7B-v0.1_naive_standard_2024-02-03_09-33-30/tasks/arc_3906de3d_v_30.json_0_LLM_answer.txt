Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 0, 9, 0, 0, 9, 9, 9, 0, 0], [9, 0, 9, 0, 0, 9, 9, 9, 0, 0], [9, 0, 0, 0, 0, 0, 9, 9, 0, 0], [9, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 5, 9, 5, 5, 9, 9, 9, 0, 0], [9, 5, 9, 5, 5, 9, 9, 9, 0, 0], [9, 5, 5, 5, 5, 5, 9, 9, 0, 0], [9, 0, 5, 5, 5, 0, 9, 0, 0, 0], [0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 0, 9, 9, 9, 9, 9, 9, 0, 0], [9, 0, 9, 9, 9, 9, 9, 9, 0, 0], [9, 0, 9, 0, 9, 0, 9, 9, 0, 0], [9, 0, 9, 0, 9, 0, 9, 9, 0, 0], [9, 0, 9, 0, 9, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 5, 0, 0, 0, 0, 0, 0], [0, 5, 0, 5, 0, 0, 0, 0, 0, 0], [0, 5, 0, 5, 0, 5, 0, 0, 0, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 5, 9, 9, 9, 9, 9, 9, 0, 0], [9, 5, 9, 9, 9, 9, 9, 9, 0, 0], [9, 5, 9, 5, 9, 5, 9, 9, 0, 0], [9, 5, 9, 5, 9, 0, 9, 9, 0, 0], [9, 0, 9, 5, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 0, 0, 0], [0, 0, 9, 9, 0, 9, 9, 0, 0, 0], [0, 0, 9, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 0, 5, 0, 0], [0, 0, 0, 0, 0, 9, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 0], [0, 0, 5, 5, 0, 0, 5, 5, 5, 0], [0, 0, 5, 5, 5, 0, 5, 5, 5, 0]]
output: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 5, 5, 0], [0, 0, 9, 9, 5, 9, 9, 5, 5, 0], [0, 0, 9, 5, 0, 9, 5, 5, 5, 0], [0, 0, 5, 5, 0, 9, 5, 5, 0, 0], [0, 0, 5, 0, 0, 9, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 9, 9, 9, 9, 9, 9, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 0, 9, 0, 9, 9, 0, 0], [0, 0, 0, 0, 9, 0, 9, 9, 5, 0], [0, 0, 0, 0, 0, 0, 9, 9, 5, 0], [0, 0, 0, 0, 0, 5, 9, 9, 5, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 0, 5, 0], [0, 0, 0, 5, 5, 5, 0, 0, 5, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 9, 9, 9, 9, 9, 9, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 9, 9, 9, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda x:[max(x[i][j]for i in range(len(x)))if j<len(x)-1else max(x[i][j+1]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `range(len(x))` can be replaced with `range(9)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ - Link: list of lists
Ṛ           - reverse each row
  ⁸         - maximum over each row
   Œm       - maximum over each column
     Ẏ      transpose
       Ụ    unwrap (remove outermost list)
        €   for each in the list:
         Ṗ  pop
         Ṁ  maximum
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns an array of arrays as output.

```
a=>a.map((r,y)=>(r=r.map(_=>Math.max(...r)),r[y])||[])
```

Try it online!

### Commented

```
a =>                     // given an array of arrays a[][]
  a.map((r, y) = >       // map r[] to its index y:
    (r = r.map(_ =>      //   replace each element by its maximum value:
      Math.max(...r)     //     use spread syntax to get all elements
    ),                   // end of inner map()
    r[y] || []           // return either the last element or an empty array
  )                      // end of map()
```

## Answer (2)

# Haskell, 54 bytes

```
f l=[maximum$zipWith max l$tail l|l/=[]]
```

Try it online!

## Answer (2)

# R, 54 bytes

```
function(x){apply(x,1,max);apply(x,2,max)}
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*p,int n){while(*p++&&n--)printf("%d",*--p);}
```

Try it online!

## Answer (2)

# Vyxal, 5 bytes

```
ṠṪṗṡṘ
```

Try it Online!

Port of Jonathan Allan's Python answer.

## Explained

```
ṠṪṗṡṘ
Ṡ      # Reverse each row
 Ṫ     # Pop off the last item
  ṗ    # Maximum along columns
   ṡ   # Swap dimensions
    Ṙ  # Unwrap
```

## Answer (2)

# Charcoal, 12 bytes

```
ＮθＦθＥθ⊕κ≔⌈ι↨⟦✂ι⟧⊞υ⊟υ
```

Try it online! Link is to verbose version of code. Explanation:

```
Ｎθ
```

Input the number of rows.

```
ＦθＥθ
```

Loop over the rows.

```
⊕κ
```

Increment the current row index.

```
≔⌈ι↨⟦✂ι⟧
```

Find the maximum element in the current row.

```
⊞υ⊟υ
```

Push that onto the stack.

```
Ｉυ
```

Output the stack.

## Answer (2)

# Ruby, 44 bytes

```
->a{a.map{|r|r.map(&:max)}}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 26 bytes

```
\d
$*
^
$&
$
$&
```

Try it online! Takes input as a single line of numbers separated by spaces. Outputs on separate lines. Explanation:

```
\d
$*
```

Convert each digit into a string of digits.

```
^
$&
```

Reverse each row.

```
$
$&
```

Transpose.

## Answer (2)

# Perl 5, 38 + 1 (-p) = 39 bytes

```
$_=reverse@F;say join" ",sort{$b>$a}@F
```

Try it online!

## Answer (2)

# APL (Dyalog Extended), 11 bytes^{SBCS}

Anonymous tacit prefix function.

```
⍳⍣⍴⍵⋄⍳⍣⍴⍵
```

Try it online!

`⍳⍣⍴⍵` Find the maximum of each row.

`⋄` Then find the maximum of each column.

## Answer (2)

# Java 8, 70 bytes

```
a->{var b=new int[a.length];for(int i=0;i<a.length;i++)for(int j=0;j<a[i].length;j++)b[i]=Math.max(b[i],a[i][j]);return b;}
```

Try it online.

**Explanation:**

```
a->{               // Method with integer-array parameter and integer-array return-type
  var b=new int[a.length];//  Create a new integer-array of length equal to the amount of rows
                          //  in the input-matrix
  for(int i=0;i<a.length;i++){// Loop over every row
    for(int j=0;j<a[i].length;j++){//  Inner loop over every cell in this row
      b[i]=Math.max(b[i],a[i][j]);//   Set the current row-index to the maximum between
                                    //   the current row-index and the current cell-value
    }
  }
  return b;}       //  Return the created integer-array
```


################################################################

Solution:
[[0, 0, 0, 9, 9, 9, 9, 9, 9, 0], [0, 0, 0, 9, 9, 9, 9, 9, 5, 0], [0, 0, 0, 9, 9, 9, 9, 9, 5, 0], [0, 0, 0, 5, 9, 5, 9, 9, 5, 0], [0, 0, 0, 5, 9, 5, 9, 9, 5, 0], [0, 0, 0, 0, 5, 5, 9, 9, 5, 0], [0, 0, 0, 0, 0, 5, 9, 9, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

