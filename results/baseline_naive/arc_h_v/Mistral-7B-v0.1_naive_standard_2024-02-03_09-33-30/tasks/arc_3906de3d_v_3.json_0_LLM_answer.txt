Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 0], [0, 0, 0, 9, 0, 9, 9, 0, 9, 0], [0, 0, 0, 9, 0, 0, 9, 0, 9, 0], [0, 0, 0, 9, 0, 0, 9, 0, 0, 0], [0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 0, 3, 0, 0], [0, 0, 3, 0, 3, 0, 0, 3, 0, 0], [0, 0, 3, 0, 3, 0, 0, 3, 0, 0], [0, 0, 3, 0, 3, 3, 0, 3, 0, 0]]
output: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 3, 9, 0], [0, 0, 3, 9, 3, 9, 9, 3, 9, 0], [0, 0, 3, 9, 3, 3, 9, 3, 9, 0], [0, 0, 3, 9, 3, 0, 9, 3, 0, 0], [0, 0, 3, 9, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 0, 9, 9, 9, 0, 0], [0, 0, 0, 9, 0, 9, 0, 9, 0, 0], [0, 0, 0, 9, 0, 0, 0, 9, 0, 0], [0, 0, 0, 9, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 3, 3, 0, 3, 0, 0, 0, 0, 0], [3, 3, 3, 0, 3, 0, 3, 0, 0, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 9, 9, 9, 9, 0, 0], [9, 9, 9, 9, 3, 9, 9, 9, 0, 0], [3, 3, 3, 9, 3, 9, 3, 9, 0, 0], [0, 3, 3, 9, 3, 0, 0, 9, 0, 0], [0, 0, 0, 9, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 0, 9, 9, 9, 9, 9, 9, 0], [0, 0, 0, 9, 9, 0, 9, 9, 9, 0], [0, 0, 0, 9, 0, 0, 9, 9, 9, 0], [0, 0, 3, 0, 0, 0, 9, 0, 9, 0], [0, 0, 3, 0, 0, 0, 0, 0, 9, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 3, 0, 0, 0, 0], [0, 0, 3, 0, 3, 3, 0, 0, 0, 0], [0, 0, 3, 0, 3, 3, 3, 0, 0, 0]]
output: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 3, 9, 9, 9, 9, 9, 9, 0], [0, 0, 3, 9, 9, 3, 9, 9, 9, 0], [0, 0, 3, 9, 3, 3, 9, 9, 9, 0], [0, 0, 3, 0, 3, 3, 9, 0, 9, 0], [0, 0, 3, 0, 3, 0, 3, 0, 9, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 0, 0, 9, 9, 9, 9, 0, 0], [0, 0, 0, 0, 0, 9, 9, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 3, 0, 0, 0, 0, 3, 0], [0, 3, 3, 3, 0, 0, 0, 3, 3, 0], [0, 3, 3, 3, 3, 0, 0, 3, 3, 0]]
################################################################

LLM answer:

output: [[0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 9, 9, 9, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 65 bytes

```
lambda x:[max(x[i][j]for j in range(len(x)))if i<len(x)-1else max([*x[i]])for i in range(len(x))]
```

Try it online!

Comment: `sum(map(max,zip(*x)),[])` is a bit shorter than your current solution.

Comment: @JonathanAllan Thanks for that! I've updated my answer with this suggestion.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€ƊḢ⁼ẎỤṪḶṀ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test-suite.

### How?

```
Ṗ€ƊḢ⁼ẎỤṪḶṀ - Link: list of lists
Ṗ€          - pop each row                    e.g. [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...] -> [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...]
    Ɗ        - last two links as a dyad f(a,b):
     Ḣ       -   head                e.g. [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...] -> [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...]
        Ẏ    - transpose              e.g. [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...] -> [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...]
          Ụ  - uniques                e.g. [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...] -> [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...]
           Ṫ - tail                   e.g. [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...] -> [[0,0,9,9,9,9,9,9,9,0],[0,0,9,9,9,9,9,0,9,0],...]
             - implicit print
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=a=>a.map((r,y)=>(r=[...r].sort()[(r.length+1)/2|0])&&r)
```

Try it online!

### Commented

```
f = a =>                 // f is a function taking a matrix as argument
  a.map((r, y) =>        // map over rows:
    (r = [...r].sort())  //   sort the elements of the row
    [(r.length + 1) / 2 | 0] //   take the middle element
  ) && r                 // return the result if not empty
```

## Answer (2)

# Haskell, 52 bytes

```
import Data.List
p=map(takeWhile id).transpose
f m=(m!!0:p m)
```

Try it online!

## Answer (2)

# C++ (clang), 100 bytes

```
[](auto&a){int b;for(auto&c:a)for(auto&d:c)b=std::max(b,d);return{b};}
```

Try it online!

## Answer (2)

# R, 54 bytes

```
function(x)t(apply(x,1,sort)[,nrow(x)]/2)
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^.*¶
$*
¶

T`(.)(.).*\1
$2
```

Try it online! Explanation:

```
\d+
$*
```

Convert all digits to stars.

```
^.*¶
$*
```

Remove newlines from the beginning of each line.

```
¶
```

Delete all newlines.

```
T`(.)(.).*\1
$2
```

Replace every pair of matching characters by their second character.

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＦθ«Ｅι����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������
################################################################

Solution:
[[0, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 3, 9, 9, 9, 9, 9, 9, 9, 0], [0, 3, 3, 3, 9, 9, 9, 9, 3, 0], [0, 3, 3, 3, 3, 9, 9, 9, 3, 0], [0, 0, 0, 3, 0, 0, 0, 9, 3, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

