Input token: 2521
Output token: 587
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0], [2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0], [2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0], [2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0], [6, 0, 2, 0, 2, 0], [2, 0, 6, 0, 6, 0], [6, 0, 6, 0, 6, 0], [6, 0, 2, 0, 2, 0], [2, 0, 6, 0, 6, 0], [6, 0, 6, 0, 6, 0], [6, 0, 2, 0, 2, 0], [2, 0, 0, 0, 6, 0], [0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0], [6, 0, 2, 0, 0, 0, 0], [2, 0, 6, 0, 0, 0, 0], [6, 0, 6, 0, 0, 0, 0], [6, 0, 2, 0, 0, 0, 0], [2, 0, 6, 0, 0, 2, 0], [6, 0, 6, 0, 0, 6, 0], [6, 0, 2, 0, 0, 6, 0], [2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [2, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [2, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 0, 0], [2, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 0, 0], [2, 0, 0, 0, 0], [0, 0, 0, 2, 0], [0, 2, 0, 0, 0], [2, 0, 0, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [2, 0, 0, 0, 0], [6, 0, 0, 0, 0], [6, 0, 0, 0, 0], [2, 0, 0, 0, 0], [6, 0, 0, 0, 0], [6, 2, 0, 0, 0], [2, 6, 0, 0, 0], [6, 6, 0, 0, 0], [6, 2, 0, 0, 0], [2, 6, 0, 0, 0], [6, 6, 0, 2, 0], [6, 2, 0, 6, 0], [2, 0, 0, 6, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [2, 0, 2, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [2, 0, 2, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [0, 0, 4, 0, 0], [0, 0, 4, 0, 0], [4, 0, 4, 0, 0], [0, 0, 4, 0, 0], [0, 0, 0, 0, 0], [4, 0, 4, 0, 0], [0, 0, 4, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0]]
 */
public class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        if (image == null || image.length == 0 || image[0].length == 0) return image;
        int m = image.length, n = image[0].length;
        int oldColor = image[sr][sc];
        if (oldColor!= newColor) dfs(image, sr, sc, oldColor, newColor);
        return image;
    }

    private void dfs(int[][] image, int i, int j, int color, int newColor) {
        if (i < 0 || i >= image.length || j < 0 || j >= image[0].length || image[i][j]!= color) return;
        image[i][j] = newColor;
        dfs(image, i - 1, j, color, newColor);
        dfs(image, i + 1, j, color, newColor);
        dfs(image, i, j - 1, color, newColor);
        dfs(image, i, j + 1, color, newColor);
    }
}
################################################################

Solution:
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 6, 0], [0, 0, 2, 6, 0], [0, 0, 6, 2, 0], [0, 0, 6, 6, 0], [2, 0, 2, 6, 0], [6, 0, 6, 2, 0], [6, 0, 6, 6, 0], [2, 0, 2, 6, 0], [0, 0, 0, 2, 0], [0, 0, 0, 6, 0], [0, 0, 0, 6, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 0]]

