Input token: 2161
Output token: 2051
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 9, 0, 9, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 9, 9, 0, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 0, 0, 2, 2, 2, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 9, 2, 9, 0], [9, 9, 9, 9, 9, 9, 2, 2, 2, 0], [9, 9, 9, 9, 9, 9, 2, 2, 2, 0], [9, 9, 9, 9, 9, 0, 2, 2, 2, 0], [0, 9, 9, 2, 9, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 0, 9, 0, 9, 9, 9, 0], [0, 0, 9, 0, 9, 0, 0, 9, 9, 0], [0, 0, 9, 0, 9, 0, 0, 9, 9, 0], [0, 0, 0, 0, 9, 0, 0, 9, 9, 0], [0, 0, 0, 0, 9, 2, 0, 0, 9, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 0, 2, 0, 2, 2, 0, 0, 0], [2, 2, 0, 2, 0, 2, 2, 0, 0, 0]]
output: [[9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 9, 9, 9, 0], [2, 2, 9, 2, 9, 2, 9, 9, 9, 0], [2, 2, 9, 2, 9, 2, 2, 9, 9, 0], [0, 0, 9, 0, 9, 2, 2, 9, 9, 0], [0, 0, 0, 0, 9, 2, 0, 9, 9, 0], [0, 0, 0, 0, 9, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 0, 9, 9, 0, 0], [0, 0, 0, 9, 9, 0, 9, 9, 0, 0], [0, 0, 0, 9, 9, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0]]
output: [[0, 0, 0, 9, 9, 9, 9, 9, 0, 0], [0, 0, 0, 9, 9, 2, 9, 9, 0, 0], [0, 0, 0, 9, 9, 2, 9, 9, 0, 0], [0, 0, 0, 9, 9, 2, 2, 9, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 0, 9, 0, 9, 0], [0, 0, 9, 9, 9, 0, 9, 0, 9, 0], [0, 0, 9, 9, 9, 0, 9, 0, 9, 0], [0, 0, 9, 0, 0, 2, 9, 0, 9, 0], [0, 0, 9, 0, 0, 2, 0, 0, 9, 0], [0, 0, 0, 0, 0, 2, 0, 2, 9, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 9, 9, 9, 9, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 65 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j<len(x)-1else max(x[i][j+1])for j in range(len(x))]for i in range(len(x))]
```

Try it online!

Comment: `range(len(x))` can be replaced with `range(n)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€ƊḢ⁼ẎỤṚṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€ƊḢ⁼ẎỤṚṪ - Link: list of lists
Ṗ€         - pop each row                    e.g. [[1,2,3],[4,5,6]] -> [[2,3],[5,6]]
  Ɗ        - last two links as a dyad f(a,b):
    Ḣ      -   head                e.g. [[2,3],[5,6]] -> [2,5]
      ⁼    -   equal?              e.g. [2,5] -> [False,True]
     Ẏ     -   maximum over rows  e.g. [False,True] -> True
      Ụ    -   logical NOT          e.g. True -> False
       Ṛ   -   reverse             e.g. False -> [False]
        Ṫ - tail                   e.g. [False] -> []
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...r]=>(r=[...r].map((v,i)=>(v>_.reduceRight((a,c)=>(a||c),0)?v:_.pop()))))
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [_,...r] = >       //   r[] = [...r] is a copy of the remaining rows
                      //   _ = _.pop() is the first row
  (                   // start the reduction on _
    r = [             //   initialize r[] to an empty array
     ...r            //   append all elements from r[]
    ] =>              // end of reduction
    r.map((           // map each element v of r[]:
      v, i) =>        //   v = v, i = index of v in r[]
      (v > _.reduceRight( // if v is greater than the maximum value in _
        (a, c) =>       //   initial value: a = undefined
          (a || c)     //   update a: a or c
       , 0)           //   default value: 0
      )?              //   if so:
        v              //     return v
      :                //   else:
        _.pop())       //     remove the last element from _
    ))                // end of map()
)                     // end of reduction
```

## Answer (2)

# Haskell, 54 bytes

```
f l=(zipWith(\a b->max a$dropWhile(<a)$tail b)l$transpose l)
```

Try it online!

## Answer (2)

# C++ (clang), 100 bytes

```
int main(){int n;cin>>n;vector<vector<int>>m(n);while(n--){for(auto&i:m[n]){cin>>i;}cout<<*max_element(m[n].begin(),m[n].end());}}
```

Try it online!

## Answer (2)

# R, 58 bytes

```
function(x)t(apply(x,1,sort)[,nrow(x)][-1])
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^.*¶
$*
T`(.)(.).*\1
$2
```

Try it online! Explanation:

```
\d+
$*
```

Convert the numbers into stars.

```
^.*¶
$*
```

Remove the newlines.

```
T`(.)(.).*\1
$2
```

Replace each number by its rightmost neighbour.

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＷθＦθＥι≔⌈⟦⟧↨⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦⟧⟦
################################################################

Solution:
[[0, 0, 9, 9, 9, 9, 9, 9, 9, 0], [0, 0, 9, 9, 9, 2, 9, 2, 9, 0], [0, 0, 9, 9, 9, 2, 9, 2, 9, 0], [0, 0, 9, 9, 9, 2, 9, 2, 9, 0], [0, 0, 9, 0, 0, 2, 9, 2, 9, 0], [0, 0, 9, 0, 0, 2, 0, 0, 9, 0], [0, 0, 0, 0, 0, 2, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

