Input token: 2161
Output token: 2048
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 2, 2, 2, 2], [6, 6, 6, 6, 6, 6, 0, 0, 0, 2], [6, 6, 6, 6, 0, 0, 0, 0, 0, 2], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [6, 2, 2, 2, 2, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 2, 0, 0, 0], [6, 6, 6, 6, 2, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 2, 2, 2], [6, 0, 0, 0, 0, 0, 2, 2, 2, 2], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 0, 0, 0, 2, 2, 2], [6, 6, 0, 0, 0, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 2, 2, 2, 0, 0, 0, 0, 0, 0], [6, 2, 2, 2, 2, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 2, 2, 2, 0, 0, 0], [6, 6, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0, 2, 2, 2, 2], [6, 0, 0, 0, 0, 2, 2, 2, 2, 2], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0, 0, 2, 2, 2], [6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 2, 2, 2, 2, 0, 0, 0, 0], [6, 2, 2, 2, 2, 2, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 0, 0, 0, 0], [6, 6, 6, 2, 2, 2, 0, 0, 0, 0], [6, 6, 6, 6, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0, 2, 2, 2, 2], [6, 0, 0, 0, 2, 2, 2, 2, 2, 2], [6, 6, 6, 6, 0, 0, 0, 0, 0, 2], [6, 6, 0, 0, 0, 0, 0, 0, 2, 2], [6, 6, 0, 0, 0, 0, 0, 0, 2, 2], [6, 6, 6, 6, 6, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 59 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j%2else min(a[i][j]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `min()` is shorter than `sorted()[0]`.

Comment: @JonathanAllan Thanks for that tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€ƊḢ⁼ẎỤṪṀ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€ƊḢ⁼ẎỤṪṀ - Main link: list of lists L
Ṗ€         - pop each row from L; yield [L[0],..., L[-1]]
  Ɗ        - last two links as a dyad f(x,y):
   Ḣ       -   head x                     e.g. [6,6,6,6,6,6,6,0,0,0] -> 6
     ⁼     -   equal to y                 e.g. 6 == 6 -> True
      Ẏ    -   maximum over all truthy values in x
         Ṫ - tail; drop the first element
          Ṁ - maximum
```

## Answer (3)

# JavaScript (ES6), 59 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...l])=>l.map((r,i)=>(r.reduce((m,n)=>Math.max(m,n),0)|i&1)?r:0)
```

Try it online!

### Commented

```
f = (               // f is a recursive function taking:
  [_,...l]         //   l[] = the current subarray
) =>                //
  l.map((r, i) =>   // for each r[] in l[], do:
    (r.reduce((m, n) => Math.max(m, n), 0) | i & 1)? // if either:
      r              //   r[] itself or
      : 0            //   0
    )                // end if
```

## Answer (2)

# Haskell, 54 bytes

```
import Data.List
p=[maximum$filter(\x->odd$mod(length p)x)$zipWith max p]
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*a){int*b,*c;for(b=a+1;b<a+10;++b)for(c=b;c>a&&*c==*--b;--c);return c;}
```

Try it online!

## Answer (2)

# R, 56 bytes

```
function(x)t(apply(x,1,function(y)max(y[seq(1,length(y),2)],y[seq(2,length(y),2)])))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^.*¶
$*
\G(.)(.).*\1
$2
```

Try it online! Explanation:

```
\d+
$*
```

Convert the numbers into stars.

```
^.*¶
$*
```

Remove the newlines.

```
\G(.)(.).*\1
$2
```

Replace every pair of matching characters with their second character.

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＦθ«≔⌈ι↨⟦⁰⁴⟧⁵≔⌈ι↨⟦⁶⁷⁸⁹⟧⁶
```

Try it online! Link is to verbose version of code. Outputs using Charcoal's implicit print method. Explanation:

```
Ｎθ
```

Input the number of rows.

```
Ｆθ«
```

Loop over the rows.

```
≔⌈ι↨⟦⁰⁴⟧⁵
```

Find the maximum value in the row.

```
≔⌈ι↨⟦⁶⁷⁸⁹⟧⁶
```

Find the minimum value in the row.

```
»
```

Output the result.

## Answer (2)

# Vyxal, 10 bytes

```
ṗ₇℅ṡṠṘṙṫ
```

Try it Online!

Port of @Arnauld's Python answer.

## Explained

```
ṗ₇℅ṡṠṘṙṫ
ṗ             # Pop the first item off the stack
 ₇            # Push the length of the stack
  ℅           # Take the modulo of the top two items on the stack
   ṡ          # Split the stack at indices given by the previous item
    Ṡ         # Swap the top two items on the stack
     Ṙ        # Reverse the stack
      ṙ       # Rotate the stack right by the top item
       ṫ      # Pop the bottom item off the stack
```

## Answer (2)

# Perl 5, 49 + 1 (-p) = 50 bytes

```
$_=$F[$_%2];say sort{$a<=>$b}@F
```

Try it online!

## Answer (2)

# Ruby, 49 bytes

```
->a{a.map{|e|e.max(e.reverse)}*''}
```

Try it online!

## Answer (2)

# Java 8, ~~100~~ 99 bytes

```
a->{var b=new int[a.length][a.length];for(int i=0;i<a.length;i++)for(int j=0;j<a.length;j++)b[i][j]=a[i][j]<a[i][j+1]?a[i][j]:a[i][j+1];return b;}
```

Try it online.

**Explanation:**

```
a->{                                  // Method with integer
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 2, 2, 2, 2, 0, 0, 0], [6, 2, 2, 2, 2, 2, 2, 0, 0, 0], [6, 6, 6, 6, 2, 0, 0, 0, 0, 0], [6, 6, 2, 2, 0, 0, 0, 0, 0, 0], [6, 6, 2, 2, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

