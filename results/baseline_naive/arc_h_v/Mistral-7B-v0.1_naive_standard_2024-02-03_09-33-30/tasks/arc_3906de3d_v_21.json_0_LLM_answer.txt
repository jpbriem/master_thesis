Input token: 2161
Output token: 1356
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 8, 8, 0, 8, 8, 0], [0, 0, 0, 8, 8, 8, 0, 8, 8, 0], [0, 0, 0, 8, 8, 8, 0, 8, 0, 0], [0, 0, 0, 8, 0, 0, 0, 8, 0, 0], [0, 0, 0, 8, 0, 0, 0, 8, 0, 0], [0, 0, 0, 8, 0, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 5, 0, 5, 0], [0, 0, 0, 0, 5, 0, 5, 0, 5, 0]]
output: [[0, 0, 0, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 8, 8, 5, 8, 8, 0], [0, 0, 0, 8, 8, 8, 5, 8, 8, 0], [0, 0, 0, 8, 8, 8, 5, 8, 5, 0], [0, 0, 0, 8, 5, 0, 5, 8, 5, 0], [0, 0, 0, 8, 0, 0, 0, 8, 5, 0], [0, 0, 0, 8, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 0, 0, 8, 8, 8, 0], [0, 8, 0, 8, 0, 0, 8, 8, 8, 0], [0, 8, 0, 8, 0, 0, 8, 8, 8, 0], [0, 8, 0, 8, 0, 0, 8, 8, 8, 0], [0, 0, 0, 8, 5, 5, 0, 0, 8, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 0, 5, 0, 5, 5, 0, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0]]
output: [[0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 5, 5, 8, 8, 8, 0], [0, 8, 5, 8, 5, 5, 8, 8, 8, 0], [0, 8, 5, 8, 5, 5, 8, 8, 8, 0], [0, 8, 0, 8, 5, 5, 8, 8, 8, 0], [0, 0, 0, 8, 5, 5, 5, 5, 8, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 0, 8, 8, 8, 0, 0], [0, 0, 8, 8, 0, 8, 8, 8, 0, 0], [0, 0, 8, 8, 0, 0, 8, 8, 0, 0], [0, 0, 8, 8, 0, 0, 0, 8, 0, 0], [0, 0, 8, 8, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0]]
output: [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 8, 8, 5, 8, 8, 8, 0, 0], [0, 0, 8, 8, 5, 8, 8, 8, 0, 0], [0, 0, 8, 8, 0, 0, 8, 8, 0, 0], [0, 0, 8, 8, 0, 0, 0, 8, 0, 0], [0, 0, 8, 8, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [8, 8, 8, 8, 8, 0, 8, 8, 0, 0], [0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 5, 0, 0, 0, 0], [0, 0, 8, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 5, 0, 0, 5, 5, 0, 0, 0, 0], [5, 5, 0, 5, 5, 5, 5, 0, 0, 0]]
################################################################

LLM answer:

output: [[8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [8, 8, 8, 8, 8, 5, 8, 8, 0, 0], [8, 8, 8, 8, 8, 5, 8, 8, 0, 0], [8, 8, 8, 8, 8, 0, 8, 8, 0, 0], [8, 8, 8, 8, 0, 0, 0, 8, 0, 0], [8, 8, 8, 8, 0, 0, 0, 8, 0, 0], [8, 8, 8, 8, 0, 0, 0, 8, 0, 0], [8, 8, 8, 8, 0, 0, 0, 8, 0, 0], [8, 8, 8, 8, 0, 0, 0, 8, 0, 0]]
```

## Answer (4)

# Python 3, ~~79~~ 69 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j<len(x)-1else max(x[i][j+1])for j in range(len(x))]for i in range(len(x))]
```

Try it online!

Comment: `range(len(x))` can be replaced with `range(n)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€ƊḢ⁼ẎỤṚṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€ƊḢ⁼ẎỤṚṪ - Link: list of lists
Ṗ€         - pop each row from the head of the argument
            e.g. [[0,0,0,8,8,8,8,8,8,0],[0,0,0,8,8,8,0,8,8,0],...] -> [[0,0,0,8,8,8,8,8,8,0],[0,0,0,8,8,8,0,8,8,0],...]
  Ɗ        - last two links as a dyad f(a,b):
   Ḣ       -   head of b
    ⁼      - logical AND
         Ẏ -   transpose
          Ụ   uniques
            Ṛ - reverse
             Ṫ - tail
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...r]=>(r=[...r].map((c,i)=>(c>_.reduceRight((a,e)=>Math.max(a,e),0)?c:_.slice(-1)[i]))))
```

Try it online!

--------------------

# JavaScript (ES6), 56 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=(a=>a.map((r,y)=>r.map((v,x)=>v>a.map(r=>r[x]).reverse()[y]?v:a[y][x+1]||0)))
```

Try it online!

## Answer (2)

# Haskell, 54 bytes

```
f l=[[max$zipWith max r$tail$transpose l|r<-l]$]
```

Try it online!

## Answer (2)

# R, 64 bytes

```
function(m){t(apply(m,1,function(x)x[which.max(rev(x))]))}
```

Try it online!

## Answer (2)

# C++ (clang), 100 bytes

```
[](auto&a){int n=a.size();return{for(int i=0;i<n;i++)for(int j=0;j<n;j++){if(j==n-1&&i!=n-1)continue;cout<<max({a[i][j],a[i][j+1]})<<" ";}}
```

Try it online!

## Answer (2)

# Charcoal, 16 bytes

```
ＦθＥι≔⌈↨κ⟦⁰‧⁴✂λ⁵⁷⟧⁶⁴
```

Try it online! Link is to verbose version of code. Explanation:

```
ＦθＥι
```

Loop over all rows.

```
≔⌈↨κ⟦⁰‧⁴✂λ⁵⁷⟧⁶⁴
```

Output the maximum value in the current row.
################################################################

Solution:
[[8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [8, 8, 8, 8, 8, 5, 8, 8, 0, 0], [5, 5, 8, 8, 8, 5, 8, 8, 0, 0], [5, 5, 8, 8, 8, 5, 5, 0, 0, 0], [0, 0, 8, 5, 5, 5, 0, 0, 0, 0], [0, 0, 8, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

