Input token: 625
Output token: 643
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0], [0, 0, 2, 0, 9], [0, 0, 2, 7, 0], [0, 0, 0, 0, 0], [0, 0, 0, 7, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 2, 7, 0], [0, 0, 2, 7, 9]]

Example_2:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 5, 8], [0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 8], [7, 0, 0, 0, 5, 8]]

Example_3:
input: [[0, 1, 9, 0, 0], [7, 1, 0, 5, 0], [0, 0, 0, 5, 0], [0, 1, 0, 0, 0], [0, 0, 0, 5, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 5, 0], [0, 1, 0, 5, 0], [7, 1, 9, 5, 0]]

Test case:
input: [[7, 6, 3, 0], [0, 6, 3, 0], [7, 0, 0, 2], [7, 0, 3, 0]]
################################################################

LLM answer:

output: [[7, 6, 3, 0], [0, 6, 3, 0], [7, 0, 0, 2], [7, 0, 3, 0]]

Constraints:
1 <= matrix.length == matrix[i].length <= 100
matrix[i][j] is either 0 or an integer in range [1, 9].
*/
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        if (mat == null || mat.length == 0 || mat[0].length == 0) return mat;
        int m = mat.length, n = mat[0].length;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 0) q.offer(i * n + j);
                else mat[i][j] = Integer.MAX_VALUE;
            }
        }
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int cur = q.poll();
                int x = cur / n, y = cur % n;
                if (x > 0 && mat[x - 1][y] > mat[x][y] + 1) {
                    mat[x - 1][y] = mat[x][y] + 1;
                    q.offer((x - 1) * n + y);
                }
                if (x < m - 1 && mat[x + 1][y] > mat[x][y] + 1) {
                    mat[x + 1][y] = mat[x][y] + 1;
                    q.offer((x + 1) * n + y);
                }
                if (y > 0 && mat[x][y - 1] > mat[x][y] + 1) {
                    mat[x][y - 1] = mat[x][y] + 1;
                    q.offer(x * n + y - 1);
                }
                if (y < n - 1 && mat[x][y + 1] > mat[x][y] + 1) {
                    mat[x][y + 1] = mat[x][y] + 1;
                    q.offer(x * n + y + 1);
                }
            }
        }
        return mat;
    }
}
################################################################

Solution:
[[0, 0, 0, 0], [7, 0, 3, 0], [7, 6, 3, 0], [7, 6, 3, 2]]

