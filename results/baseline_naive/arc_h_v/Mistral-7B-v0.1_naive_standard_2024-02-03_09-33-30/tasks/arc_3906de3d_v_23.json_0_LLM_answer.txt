Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [0, 7, 0, 7, 7, 0, 7, 7, 7, 0], [0, 7, 0, 7, 0, 0, 7, 0, 7, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 0], [8, 0, 0, 7, 0, 0, 0, 0, 0, 0], [8, 0, 8, 0, 8, 8, 0, 0, 0, 0], [8, 0, 8, 0, 8, 8, 0, 0, 0, 0], [8, 0, 8, 0, 8, 8, 0, 8, 0, 0], [8, 0, 8, 0, 8, 8, 0, 8, 0, 0]]
output: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [8, 7, 8, 7, 7, 8, 7, 7, 7, 0], [8, 7, 8, 7, 8, 8, 7, 8, 7, 0], [8, 0, 8, 7, 8, 8, 7, 8, 0, 0], [8, 0, 8, 7, 8, 8, 0, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 7, 0, 0, 0], [0, 0, 7, 7, 7, 0, 7, 0, 0, 0], [0, 8, 7, 7, 0, 0, 7, 0, 0, 0], [0, 8, 0, 7, 0, 0, 0, 0, 0, 0], [0, 8, 0, 7, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 8, 8, 0, 0, 0, 0], [0, 8, 0, 0, 8, 8, 0, 8, 0, 0], [0, 8, 0, 0, 8, 8, 0, 8, 0, 0]]
output: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 8, 7, 7, 7, 7, 7, 7, 0, 0], [0, 8, 7, 7, 7, 8, 7, 8, 0, 0], [0, 8, 7, 7, 7, 8, 7, 8, 0, 0], [0, 8, 7, 7, 8, 8, 7, 0, 0, 0], [0, 8, 0, 7, 8, 0, 0, 0, 0, 0], [0, 8, 0, 7, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 0, 0, 7, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0]]
output: [[0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 0, 8, 7, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 0, 7, 7, 7, 0, 7, 7, 0, 0], [0, 0, 7, 0, 7, 0, 7, 7, 0, 0], [0, 0, 7, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 8, 7, 0, 0, 0], [8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [8, 8, 0, 0, 0, 8, 0, 0, 0, 0], [8, 8, 0, 8, 0, 8, 0, 0, 0, 0], [8, 8, 0, 8, 0, 8, 0, 8, 0, 0]]
################################################################

LLM answer:

output: [[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 8, 7, 7, 8, 7, 7, 0, 0], [8, 7, 8, 7, 8, 8, 7, 8, 0, 0], [8, 0, 8, 7, 8, 8, 7, 8, 0, 0], [8, 0, 8, 7, 8, 8, 0, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~95~~ 94 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j<len(a)-1else max(a[i][j+1]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(len(a[0]))`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 6 bytes

```
ḶṚẎƊỤṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
ḶṚẎƊỤṪ - Main link: list of lists L
Ḷ       - length of each row
  Ṛ     - reverse
   Ẏ    - maximum along rows
     Ɗ  - last two links as a dyad f(L,x):
       Ụ - unwrap x (list of lists -> list of integers)
        Ṫ - tail
```

## Answer (3)

# JavaScript (ES6), 51 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...l])=>l.map((r,y)=>(r.map((v,x)=>v>r[x+1]&&v>r[x-1]?v:r[x+1]),y))
```

Try it online!

--------------------

# JavaScript (ES6), 50 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...l])=>l.map((r,y)=>(r.map((v,x)=>v>r[x+1]||v>r[x-1]?v:r[x+1]),y))
```

Try it online!

## Answer (2)

# Haskell, 51 bytes

```
import Data.List
f l=[[maximum$zipWith(\a b->if a==b then a else max a b)(tails r)|r<-l]$|t<-transpose l]
```

Try it online!

## Answer (2)

# R, ~~54~~ 53 bytes

```
function(m)apply(m,1,function(x)cumsum(x[-1]>x)[-nrow(x)+1])
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*p){int*q;while(*++p);return q=calloc(--*,sizeof *p);for(;p--;)for(q+=*p;*p++;)*q++=*p;}
```

Try it online!

Returns a pointer to the result matrix.

## Answer (2)

# Charcoal, 12 bytes

```
Ｎθ≔⁰ηＦθＦθι≔⌈ιη≧ι⟦η⟧
```

Try it online! Link is to verbose version of code. Explanation:

```
Ｎθ                          Read the number of rows from STDIN
 ≔⁰η                        Initialise the column index to zero
               ι            Loop over all columns
                 ≔⌈ιη       Set the current cell value to the maximum so far
                           Implicitly print the new row
                             End of inner loop
                              Implicitly print a blank line
                             End of outer loop
```

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^(.)
$1
.+
$&$&
```

Try it online! Takes input as a single string of digits separated by spaces. Outputs on separate lines. Explanation:

```
\d+
$*
```

Convert the input into a single string of digits.

```
^(.)
$1
```

Remove leading whitespace.

```
.+
$&$&
```

Replace every non-whitespace character with itself followed by itself. This will cause the first digit of each row to be duplicated at the end of the previous row.

## Answer (2)

# Perl 5, 44 + 1 (-p) = 45 bytes

```
$_=$_;s/./$&$&/ge;s/\G(..)/$1>$2?$1:$2/eg
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
ṠṘṗ₍‛ṡṖṗ
```

Try it Online!

Takes input as a list of lists.

## Explained

```
ṠṘṗ₍‛ṡṖṗ
Ṡ          # Transpose
 Ṙ         # Reverse
  ṗ        # Zip
   ₍       # Map
    ‛      # Maximum
     ṡ      # Swap
      Ṗ     # Pop
       ṗ    # Zip again
```

## Answer (2)

# APL (Dyalog Unicode), 17 bytes^{SBCS}

Anonymous tacit prefix function taking a rectangular matrix of positive integers as left argument and returning a rectangular matrix of positive integers.

```
{⍵⋄⍨⍳⍴⍵←⍣¯1⍨⍵⊃⍵}
```

Try it online!

`⍵⋄⍨⍳⍴⍵←⍣¯1⍨⍵⊃⍵`

`⍵⋄⍨⍳⍴⍵`

`⍵⋄⍨⍳⍴⍵←⍣¯1⍨⍵`

`⍵⋄⍨⍳⍴⍵←⍣¯1⍨⍵⊃⍵`

`⍵⋄⍨⍳⍴⍵←⍣¯1⍨⍵⊃⍵`

`⍵⋄⍨⍳⍴⍵←⍣¯1⍨⍵⊃⍵`

`����������������
################################################################

Solution:
[[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 8, 7, 7, 7, 8, 7, 7, 0, 0], [8, 8, 7, 8, 7, 8, 7, 7, 0, 0], [8, 8, 7, 8, 7, 8, 7, 8, 0, 0], [8, 0, 0, 0, 7, 8, 7, 0, 0, 0], [8, 0, 0, 0, 0, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

