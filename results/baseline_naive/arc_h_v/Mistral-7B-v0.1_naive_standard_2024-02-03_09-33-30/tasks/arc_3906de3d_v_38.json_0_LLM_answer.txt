Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 0]]
output: [[0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 7, 0, 0], [0, 0, 0, 1, 1, 1, 1, 7, 0, 0], [0, 0, 0, 1, 1, 1, 0, 7, 0, 0], [0, 0, 0, 1, 1, 0, 0, 7, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 7, 0, 1, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 0, 0, 7, 0, 0]]
output: [[1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 7, 1, 1, 1, 1, 0, 0], [1, 1, 1, 7, 1, 1, 1, 1, 0, 0], [1, 1, 1, 7, 7, 1, 1, 1, 0, 0], [1, 1, 7, 7, 7, 1, 1, 1, 0, 0], [1, 1, 7, 0, 7, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 7, 0, 7, 0]]
output: [[0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 7, 7, 1, 7, 1, 7, 0], [0, 0, 0, 0, 7, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 7, 0, 1, 0, 0], [0, 0, 0, 0, 0, 7, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 0], [0, 0, 0, 7, 0, 7, 0, 0, 7, 0], [0, 0, 0, 7, 0, 7, 0, 0, 7, 0]]
################################################################

LLM answer:

output: [[0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0]]
```

## Answer (4)

# Python 3, ~~85~~ 69 bytes

```
lambda x:[max(x[i][j]for i in range(len(x)))or 0for j in range(len(x))]+[[0]*len(x)]*len(x)
```

Try it online!

Comment: `sum([max(x[i]) for i in range(len(x))],[])` is shorter than your first line.

Comment: @JonathanAllan Thanks! I didn't know about that syntax.

## Answer (3)

# Jelly, 10 bytes

```
Ḷ⁼ƇṚẎ€µỤḢ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test-suite.

### How?

```
Ḷ⁼ƇṚẎ€µỤḢ - Link: list of lists
Ḷ          - length of each row
  Ƈ        - filter keep those where:
   Ṛ       -   reverse
    Ẏ      -   maximum
      €    - map over each row:
        Ụ   -   uniqify (remove duplicates)
          µ - start a new chain with:
            -   the empty list
             - implicit print
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns an array of arrays as output.

```
a=>a.map((r,y)=>(r=r.sort(),r[r.length-1]),a.push([]))
```

Try it online!

### Commented

```
a =>                 // a[] = input array of arrays
a.map((r, y) =>      // for each row r[] at position y:
  (r = r.sort(),     //   sort r[]
   r[r.length - 1])  //   take the last element of r[]
                     // end of map()
,                    // append to a[]
 a.push([]))         //   an empty array
```

## Answer (2)

# Haskell, 51 bytes

```
f l=[maximum$zipWith max l<*>l|l<-l]++replicate(length l)[[0]]
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
m;f(int**p){for(m=0;m<*(*p+1);m++)for(int*q=*p,*w=*p+1;q!=*w;q+=*w)if(*q>*--w)*w=*q;}
```

Try it online!

## Answer (2)

# R, 56 bytes

```
function(x)cbind(apply(x,1,max),rep(0,nrow(x)))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 27 bytes

```
\d+
$*
^
$&¶
+`(\d)(.)
$1$2
```

Try it online! Explanation:

```
\d+
$*
```

Convert all digits to stars.

```
^
$&¶
```

Add a blank line between rows.

```
+`(\d)(.)
$1$2
```

Replace every digit by itself followed by its neighbour. This will leave only one star per column.

## Answer (2)

# Perl 5, 44 + 1 (-p) = 45 bytes

```
say join"",map{$_=$_;@F[$_]=max(@F[$_]);}0..$#F
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
.QMzGhQTQ
```

Try it here!

## Answer (2)

# Ruby, 44 bytes

```
->a{(a<<[0]).product(a).map(&:max)}
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
ṗ∧⌊₀ḟ℅ḣṠ
```

Try it Online!

## Explained

```
ṗ∧⌊₀ḟ℅ḣṠ
ṗ               # Push the number of columns
 ∧              # And zip them together
  ⌊₀            # Take the minimum of each row
     ḟ          # Remove the first row
      ℅         # Flatten
        ḣṠ      # Transpose
```

## Answer (2)

# APL (Dyalog Unicode), 15 bytes^{SBCS}

Anonymous tacit prefix function.

```
⍵⋄≢⍨⍳⍴⍵⊃⍵
```

Try it online!

`⍵⋄` If there is no argument, return the identity function.

`⍳⍴⍵` Generate indices from 1 up to the number of rows in the matrix.

`≢⍨` Apply the function to each index.

`⍵` The current index.

`⊃⍵` Get the first element of the current row.

`⍴⍵` The number of elements in the current row.

`⍵` The current index again.

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＦθ«Ｅι⪫↨⊕κ⁰⊞υ⭆ι⊖κ
```

Try it online! Link is to verbose version of code. Outputs a list of lists. Explanation:

```
Ｎθ
```

Input the size of the grid.

```
Ｆθ«
```

Loop over the rows.

```
Ｅι⪫↨⊕κ⁰
```

Map over the characters in the row, incrementing the character codes.

```
⊞υ⭆ι⊖κ
```

Append the result to the output list.

## Answer (2)

# Java 8, 100 bytes

```
import java.util.*;class M{static void f(int[][]a){List<Integer>b=new ArrayList<>();for(int[]r:a)b.add(Collections.max(Arrays.asList(r)));System.out.println(b);}}
```

Try it online!

## Answer (2)

# Japt, 10 bytes

```
ò
################################################################

Solution:
[[0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 7, 1, 1, 7, 0], [0, 0, 1, 1, 1, 7, 1, 1, 7, 0], [0, 0, 1, 7, 1, 7, 1, 1, 7, 0], [0, 0, 0, 7, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

