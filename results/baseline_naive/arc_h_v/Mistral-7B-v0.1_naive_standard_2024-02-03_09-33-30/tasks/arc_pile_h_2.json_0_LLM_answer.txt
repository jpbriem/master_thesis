Input token: 577
Output token: 528
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 3, 3, 3], [9, 9, 0, 0], [0, 2, 0, 0], [0, 0, 0, 0]]
output: [[3, 3, 3, 0], [9, 9, 0, 0], [2, 0, 0, 0], [0, 0, 0, 0]]

Example_2:
input: [[0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 9], [0, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 1]]
output: [[8, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]

Example_3:
input: [[6, 0, 6, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 8]]
output: [[6, 6, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0], [8, 0, 0, 0]]

Test case:
input: [[0, 0, 8, 0, 8, 0], [1, 0, 0, 1, 0, 0], [0, 6, 6, 6, 0, 0], [7, 0, 7, 0, 0, 0], [0, 2, 0, 2, 0, 0], [0, 0, 3, 0, 0, 3]]
################################################################

LLM answer:

output: [[8, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0]]

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 10^4
grid[i][j] is either 0 or a positive integer less than 10^4.
 */
public class SpiralMatrix {
    public int[][] spiralOrder(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return new int[0][];
        int row = matrix.length;
        int col = matrix[0].length;
        int[][] res = new int[row * col][];
        int index = 0;
        while (true) {
            for (int i = 0; i < col && index < row * col; ++index) {
                res[index] = new int[]{matrix[0][i++], 0};
            }
            if (index >= row * col) break;
            for (int j = 1; j < row && index < row * col; ++index) {
                res[index] = new int[]{0, matrix[j++][col - 1]};
            }
            if (index >= row * col) break;
            for (int k = col - 2; k >= 0 && index < row * col; --k) {
                res[index++] = new int[]{matrix[row - 1][k--], 0};
            }
            if (index >= row * col) break;
            for (int l = row - 2; l > 0 && index < row * col; --l) {
                res[index++] = new int[]{0, matrix[l--][0]};
            }
            if (index >= row * col) break;
        }
        return res;
    }
}
################################################################

Solution:
[[8, 8, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0], [7, 7, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0]]

