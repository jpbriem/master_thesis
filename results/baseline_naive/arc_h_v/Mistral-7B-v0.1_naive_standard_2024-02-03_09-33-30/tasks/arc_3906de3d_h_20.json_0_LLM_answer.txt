Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 0, 7], [3, 0, 0, 0, 0, 0, 7, 7, 7, 7], [3, 3, 3, 3, 3, 3, 0, 0, 0, 7], [3, 3, 0, 0, 0, 0, 7, 7, 7, 7], [3, 3, 3, 3, 0, 0, 0, 7, 7, 7], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 7, 0, 0, 0, 0, 0, 0], [3, 7, 7, 7, 7, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 7, 0, 0, 0], [3, 3, 7, 7, 7, 7, 0, 0, 0, 0], [3, 3, 3, 3, 7, 7, 7, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 7, 7, 7], [3, 3, 0, 0, 0, 0, 0, 7, 7, 7], [3, 3, 3, 0, 0, 0, 0, 7, 7, 7], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 0, 0, 0, 0, 7, 7, 7, 7], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 7, 7, 7, 0, 0, 0], [3, 3, 7, 7, 7, 0, 0, 0, 0, 0], [3, 3, 3, 7, 7, 7, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 7, 7, 7, 7, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 7, 7, 7, 7, 7], [3, 3, 3, 0, 0, 0, 0, 0, 7, 7], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 7, 7, 7], [3, 0, 0, 0, 0, 7, 7, 7, 7, 7], [3, 3, 3, 0, 0, 0, 0, 0, 0, 7], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 0, 0, 0, 0, 0, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 7, 7, 7, 7, 7, 0, 0, 0], [3, 3, 3, 7, 7, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 7, 7, 7, 0, 0, 0], [3, 7, 7, 7, 7, 7, 0, 0, 0, 0], [3, 3, 3, 7, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 7, 7, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0, 7, 7, 7, 7], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 7, 7], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 7, 7], [3, 3, 3, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 7, 7, 7, 0, 0, 0], [3, 3, 3, 7, 7, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 0, 0, 0, 0, 0, 7, 7], [3, 3, 3, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~95~~ 86 bytes

```
lambda a:[[sum(a[i][j]for i in range(len(a)))%2*max(a[i])for j in range(len(a))]+[0]*len(a)]+[[0]*len(a)+[sum(a[i][j]for i in range(len(a)))%2*max(a[i])for j in range(len(a))]]
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(9)`.

Comment: @JonathanAllan Thanks for that tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 15 bytes

```
Ṗ€Ɗ⁸ẎµỌḢṚṪḣṫṀṂ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test-suite.

### How?

The first line is a helper function to get the maximum value from each row or column.

```
Ṗ€Ɗ⁸ẎµỌḢṚṪḣṫṀṂ - Helper link: m/n -> n
Ṗ€                   - pop; split into rows
   Ɗ                - last two links as a dyad f(m,n):
    ⁸               -   transpose; swap rows & columns
     Ẏ              -   flatten; concatenate all rows
       µ            - start a new chain with:
        Ọ           -   sums of each row
         Ḣ          -   head; take the first element
          Ṛ         -   reverse
            Ṫ       - tail; drop the last element
             ḣ      - head; take the first element
              ṫ    - tail; drop the last element
               Ṁ    - maximum
                Ṃ  - modulo by 2
```

Then we apply this to each row and column of the original matrix.

```
Ṗ€Ɗ⁸ẎµỌḢṚṪḣṫṀṂ - Main link: list of lists -> list of lists
Ṗ€                 - pop; split into rows
   Ɗ               - last three links as a dyad f(m,n):
    ⁸               -   transpose; swap rows & columns
     Ẏ              -   flatten; concatenate all rows
       µ            - start a new chain with:
        Ọ           -   sums of each row
         Ḣ          -   head; take the first element
          Ṛ         -   reverse
            Ṫ       - tail; drop the last element
             ḣ      - head; take the first element
              ṫ    - tail; drop the last element
               Ṁ    - maximum
                Ṃ  - modulo by 2
```

## Answer (3)

# JavaScript (ES6), 100 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([x,...y])=>[x.map((_,i)=>(y.reduce((a,b)=>a|b[i],0)&1)*Math.max(...x)),y.map((_,i)=>(x.reduce((a,b)=>a|b[i],0)&1)*Math.max(...y))]
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [x,...y]          //   x[] = the current row
) =>                  // return:
[                     //   an array containing:
  x.map((_, i) =>     //     a map over the elements of x:
    (                 //       the result of:
      y.reduce((a, b) => //         reduce y[] to a single number:
        a | b[i],       //           OR together the elements of y[] at index i
        0               //           starting with 0
      ) & 1            //       AND with 1
    ) * Math.max(...x) //       multiply by the max of x[]
  ),                  //     end of map()
  y.map((_, i) =>     //     a map over the elements of y:
    (                 //       the result of:
      x.reduce((a, b) => //         reduce x[] to a single number:
        a | b[i],       //           OR together the elements of x[] at index i
        0               //           starting with 0
      ) & 1            //       AND with 1
    ) * Math.max(...y) //       multiply by the max of y[]
  )                   //     end of map()
]                     // end of outer array
```

## Answer (2)

# Haskell, 100 bytes

```
import Data.List
g l=[[sum$zipWith(&&)(l!!i)$l!!j|i<-[0..length l-1]]++[0]|j<-[0..length l-1]]
```

Try it online!

## Answer (2)

# C (gcc), 144 bytes

```
f(int**a){int**r=malloc(sizeof(*a)*2);r[0]=calloc(9,sizeof(**a));r[1]=calloc(9,sizeof(**a));for(int i=0;i<9;i++)for(int j=0;j<9;j++){r[0][i][j]=r[1][i][j]=a[i][j];if(i==j||i+j==8)r[0][i][j]^=r[1][i][j]^=a[i][j];}}
```

Try it online!

## Answer (2)

# Charcoal, 30 bytes

```
ＮθＦθ«ＥθＩ∧ικ����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 7, 7, 7, 7, 0, 0, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 3, 7, 7, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [3, 3, 3, 7, 7, 0, 0, 0, 0, 0], [3, 3, 3, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

