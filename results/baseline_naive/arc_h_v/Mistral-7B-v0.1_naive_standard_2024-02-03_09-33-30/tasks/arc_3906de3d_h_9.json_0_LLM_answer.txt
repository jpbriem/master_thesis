Input token: 2161
Output token: 2049
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 5], [8, 0, 0, 0, 0, 5, 5, 5, 5, 5], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 5], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 5, 5, 5, 5], [8, 8, 8, 8, 0, 0, 0, 0, 0, 5]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 5, 0, 0, 0, 0, 0, 0], [8, 5, 5, 5, 5, 5, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 5, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 5, 5, 5, 5, 0, 0, 0], [8, 8, 8, 8, 5, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 5, 5, 5], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 5], [8, 8, 8, 8, 8, 8, 0, 0, 0, 5], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 5, 5, 5], [8, 8, 8, 0, 0, 0, 0, 0, 0, 5], [8, 8, 0, 0, 0, 0, 0, 0, 5, 5]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 5, 5, 5, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 5, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 5, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 5, 5, 5, 0, 0, 0, 0], [8, 8, 8, 5, 0, 0, 0, 0, 0, 0], [8, 8, 5, 5, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 5, 5, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 5, 5, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 0, 0, 0, 0, 5, 5], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~79~~ 69 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j%2else min(a[i][j]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `min()` is shorter than `sorted()[0]`.

Comment: @JonathanAllan Thanks for that tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€⁸ŒmẎƊỤṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€⁸ŒmẎƊỤṪ - Link: list of lists, A
   €      - for each row R in A:
   ⁸       -   transpose
    Œm     - - maximum
       Ụ   -             -         -     -     -Ẏ -Ṫ -              -                          - minimum
    Ẏ      - - transpose
   Ɗ      - - last two links as a dyadic Link: f(R)
 Ṗ        - pop
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([x])=>x,f=(a,b)=>(c=[...a,...b]).map((_,i)=>f(a.map(_=>c[i]),b.map(_=>c[i+a.length])));
```

Try it online!

### Commented

```
f = (               // f is a recursive function taking:
  [x] => x,         //   if there's only one argument, return it;
  (a, b) => (       //   otherwise:
    c = [...a,...b] //     create a new array c by concatenating a and b;
    map((_, i) =>    //     for each element at index i in c:
      f(            //       apply f to:
        a.map(_ => c[i]), //         a mapped to itself with c[i] inserted;
        b.map(_ => c[i + a.length]) //         b mapped to itself with c[i + a.length] inserted
      )              //     end of map()
    )                //   end of map()
  )                  // end of f()
);
```

## Answer (2)

# Haskell, 54 bytes

```
f[]=[]
f l@(h:_)=l++[zipWith max h$tail l,zipWith min h$drop(length h)l]:f$tail l
```

Try it online!

## Answer (2)

# C (gcc), 104 bytes

```
f(int*a){int*p,*q;return p=a,q=a+sizeof(*a)/sizeof(*p),p+=q-a,q-=p-a,p>q?p:q;}
```

Try it online!

## Answer (2)

# Charcoal, 12 bytes

```
ＦθＥι≔⌈↨κ↨λ≔⌊↨κ↨λ
```

Try it online! Link is to verbose version of code. Explanation:

```
 θ           Input matrix
Ｆ               Map over rows
   ι            Current row
  Ｅ             Map over columns
     ≔          Implicitly push current column onto stack
      ⌈         Maximum of all elements on stack
       ↨        Convert from integer to string
         κ      Push implicit input matrix onto stack
         ↨      Convert from integer to string
          λ     Push implicit output matrix onto stack
          ⌊     Minimum of all elements on stack
           ≔   Store result in output matrix
                Implicitly print result
```

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d
$*
^
$&
+`(\d)(.)
$1$2
```

Try it online! Link includes test cases. Explanation:

```
\d
$*
```

Convert the numbers to unary.

```
^
$&
```

Transpose the matrix.

```
+`(\d)(.)
$1$2
```

Replace each pair of digits with their sum. This has the effect of replacing each number with its rank within the row.

## Answer (2)

# Vyxal, 10 bytes

```
ṗ₀ṡṠṘṚṙṡṀ
```

Try it Online!

Port of @Neil's Python answer.

## Explained

```
ṗ₀ṡṠṘṚṙṡṀ
ṗ₀ṡṠṘṚṙṡṀ  # Main program
ṗ₀            # Pop and save the first item
  ṡ          # Swap
   Ṡ         # Transpose
    Ṙ        # Rotate right
     Ṛ       # Rotate left
      ṙ      # Reverse
       ṡ     # Swap
        Ṁ    # Maximum
```

## Answer (2)

# Ruby, 54 bytes

```
->a{a.each_with_object([]){|r,o|o<<r.map{|e|o[-1].include?(e)?e:o[-1].max}}}
```

Attempt This Online!

## Answer (2)

# Perl 5, 54 bytes

```
sub f{my($a,$b)=@_;$a<$b&&$a||$b}say map{join" ",map{f($_[$_],$_[$_+@_])}$_[0..$_]}0..$#_
```

Try it online!

## Answer (2)

# Java (OpenJDK 8), 104 bytes

```
void m(int[][]a){for(int i=0;i<a.length;i++)for(int j=0;j<a[i].length;j++){int k=Math.max(a[i][j],a[i][j+a[i].length]);System.out.print(k+" ");}}
```

Try it online!

## Answer (2)

# Japt, 10 bytes

```
òUìXèVòU
```

Try it

--------------------

## Explanation

```
òUìXè
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 5, 5, 0, 0, 0, 0, 0], [8, 8, 8, 8, 5, 5, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

