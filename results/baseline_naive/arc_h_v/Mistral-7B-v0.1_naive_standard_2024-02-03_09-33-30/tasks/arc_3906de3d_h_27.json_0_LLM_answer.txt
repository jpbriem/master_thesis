Input token: 2161
Output token: 2004
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 9, 9, 9, 9, 9], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 0, 0, 0, 9, 9, 9, 9], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 9, 9, 9, 9, 9, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 9, 9, 9, 9, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0, 9, 9, 9, 9], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 9, 9], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [5, 0, 0, 0, 0, 9, 9, 9, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 9, 9, 9, 9, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 9, 9, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [5, 9, 9, 9, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 0, 0, 0, 0, 0, 9, 9], [5, 5, 0, 0, 0, 0, 9, 9, 9, 9], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 9, 9, 9], [5, 0, 0, 0, 0, 9, 9, 9, 9, 9]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 9, 9, 0, 0, 0, 0, 0], [5, 5, 9, 9, 9, 9, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 9, 9, 9, 0, 0, 0], [5, 9, 9, 9, 9, 9, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0, 0, 9, 9, 9], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 0, 0, 0, 0, 0, 9, 9, 9, 9], [5, 5, 5, 5, 5, 0, 0, 0, 9, 9], [5, 5, 5, 5, 0, 0, 0, 9, 9, 9], [5, 5, 5, 5, 5, 0, 0, 0, 0, 9], [5, 5, 5, 0, 0, 0, 0, 0, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 5, 5, 9, 9, 0, 0, 0, 0, 0], [5, 5, 9, 9, 9, 9, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 9, 9, 9, 0, 0, 0], [5, 9, 9, 9, 9, 9, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j%2else min(a[i][j]for i in range(len(a)))for j in range(len(a))]for i in range(len(a))]
```

Try it online!

Comment: `min()` is shorter than `sorted()[0]`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€⁸ŒmẎỤƊṀṂ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€⁸ŒmẎỤƊṀṂ - Link: list of lists
Ṗ€         - pop each row from the argument
   ⁸       - transpose
    Œm     - maximum along rows
     Ẏ     - index into the original list of lists
       Ụ   - unindex
         Ɗ - map over each row:
          Ṁ - maximum
           Ṃ - minimum
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
f=([x])=>x,f=(a,b)=>(c=[...a],d=b.map((_,y)=>c[y]=[...c[y].map((_,x)=>Math.max(...a.map((e,i)=>e[x])))]),f(c,d))
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [x]                //   x[][] as first argument
) => x,              // return x if x has only one element
f = (                 // f is a recursive function taking:
  a,                 //   a[][] as first argument
  b = []             //   b[][] as second argument
) => (               // return:
  c = [...a],        //   c[][] with the same elements as a[][], but copied
  d = b.map((_, y) => //   d[][] with the same elements as b[][], but copied
    c[y] = [          //   and modified to contain:
     ...c[y].map((_, x) => //     a new subarray containing:
        Math.max(...a.map((e, i) => e[x])) //       the max value of all values at position x in a[][]
      )
    ]
  ),                 // end of map()
  f(c, d)            // recursively call f() on c[][] and d[][]
)
```

## Answer (2)

# Haskell, 64 bytes

```
f l|l==[r]=r|t<-transpose l=f$zipWith(\a b->[maximum a,minimum b])t t
```

Try it online!

## Answer (2)

# C++ (gcc), 100 bytes

```
int main(){int a[10][10];for(int i=0;i<10;i++)for(int j=0;j<10;j++){scanf("%d",&a[i][j]);}for(int i=0;i<10;i++)for(int j=0;j<10;j++)printf("%d ",a[i][j]>a[i][j+1]&&a[i][j]<a[i][j+1]||a[i][j]>a[i+1][j]&&a[i][j]<a[i+1][j]?a[i][j]:a[i][j+1]);}
```

Try it online!

## Answer (2)

# R, 68 bytes

```
function(x){apply(x,1,function(y)rev(sort(unlist(y))))}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 34 bytes

```
\d
$*
^.*¶
$*
T`(.)(.).*\1
$2$1
```

Try it online! Explanation:

```
\d
$*
```

Convert the numbers to their decimal representations.

```
^.*¶
$*
```

Remove the line breaks.

```
T`(.)(.).*\1
$2$1
```

Transpose the matrix and swap the columns so that the smallest number is always last.

## Answer (2)

# Charcoal, 20 bytes

```
ＮθＷθＩ⌈ι↨⪫κ⟦⊞υ⟧≔⊕η⊗υ✳⊘η⊞υ⟦⊞υ⟧
```

Try it online! Link is to verbose version of code. Outputs each row on its own line. Explanation:

```
Ｎθ
```

Input the size of the grid.

```
ＷθＩ⌈ι↨⪫κ⟦⊞υ⟧
```

Repeat this loop `N` times.

```
≔⊕η⊗υ
```

Increment the column counter and output the current row.

```
✳⊘η⊞υ⟦⊞υ⟧
```

If the column counter is odd then append the next row to the output.

## Answer (2)

# Pyth, 12 bytes

```
hQ@GVQMQ@GVQ
```

Try it online!

## Answer (1)

# Vyxal, 10 bytes

```
Ṡ℅ṡ⇱ṙṡṡṡṡ
```

Try it Online!

Port of Jonathan Allan's Python answer.

## Explained

```
Ṡ℅ṡ⇱ṙṡṡṡṡ
Ṡ            # Pop each row from the argument
 ℅           # Transpose
  ṡ          # Map over each row
   ⇱         # Index into the original list of lists
     ṡṡṡṡ   # Map over each row
       ṡ     # Map over each cell
```
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 9, 9, 9, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [5, 9, 9, 9, 9, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 9, 9, 0, 0, 0], [5, 5, 5, 5, 9, 9, 9, 0, 0, 0], [5, 5, 5, 5, 5, 9, 0, 0, 0, 0], [5, 5, 5, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

