Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 0, 7, 7, 0, 0, 7, 7, 0], [0, 7, 0, 7, 7, 0, 0, 7, 7, 0], [0, 7, 0, 7, 0, 0, 0, 7, 0, 0], [0, 7, 6, 7, 0, 0, 0, 7, 0, 0], [0, 7, 6, 0, 0, 0, 6, 0, 0, 0], [6, 0, 6, 0, 0, 0, 6, 0, 0, 0], [6, 0, 6, 0, 0, 6, 6, 0, 0, 0], [6, 0, 6, 0, 6, 6, 6, 6, 6, 0]]
output: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 6, 7, 7, 6, 6, 7, 7, 0], [6, 7, 6, 7, 7, 6, 6, 7, 7, 0], [6, 7, 6, 7, 6, 0, 6, 7, 6, 0], [6, 7, 6, 7, 0, 0, 6, 7, 0, 0], [0, 7, 6, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 7, 0, 7, 7, 7, 7, 7, 0, 0], [0, 7, 0, 7, 7, 7, 7, 7, 0, 0], [0, 7, 0, 7, 7, 7, 7, 7, 0, 0], [0, 7, 0, 7, 0, 7, 0, 0, 0, 0], [0, 7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 6, 0, 0, 0, 0], [0, 0, 6, 0, 6, 6, 0, 0, 0, 0]]
output: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 7, 6, 7, 7, 7, 7, 7, 0, 0], [0, 7, 6, 7, 7, 7, 7, 7, 0, 0], [0, 7, 6, 7, 7, 7, 7, 7, 0, 0], [0, 7, 0, 7, 6, 7, 0, 0, 0, 0], [0, 7, 0, 7, 0, 6, 0, 0, 0, 0], [0, 7, 0, 7, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 7, 7, 0, 7, 7, 7, 7, 0, 0], [0, 7, 7, 0, 7, 7, 7, 7, 0, 0], [0, 0, 7, 0, 7, 0, 7, 7, 0, 0], [0, 0, 7, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 6, 0, 0], [0, 6, 0, 6, 0, 6, 6, 6, 0, 0], [0, 6, 0, 6, 0, 6, 6, 6, 0, 0]]
output: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 7, 7, 6, 7, 7, 7, 7, 0, 0], [0, 7, 7, 6, 7, 7, 7, 7, 0, 0], [0, 6, 7, 6, 7, 6, 7, 7, 0, 0], [0, 6, 7, 6, 7, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 7, 7, 7, 7, 7, 0, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0], [0, 0, 0, 7, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 6, 0, 0], [0, 0, 0, 0, 6, 0, 0, 6, 0, 0], [0, 0, 0, 6, 6, 0, 0, 6, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 7, 7, 7, 7, 7, 0, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0], [0, 0, 0, 7, 0, 7, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~85~~ 84 bytes

```
lambda a:[max(a[i][j]for i in range(len(a)))if j<len(a)-1else max(a[i][j+1])for j in range(len(a))]+[[0]*len(a)]*len(a)
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(9)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ṗ€⁸ŒmƑẎỤṀṂ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṗ€⁸ŒmƑẎỤṀṂ - Link: list of lists
Ṗ€         - pop each row from the left
   ⁸       - literal 9
   €       - map over each row:
    ŒmƑ    -   maximums of each column
       Ẏ   - transpose
         Ụ - remove all zeroes
          Ṁ - maximum
           Ṃ - wrap in a list
```

## Answer (3)

# JavaScript (ES6), 59 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
f=([x,...y]=>(x||[]).concat(f(y)))
```

Try it online!

### Commented

```
f =                      // f is a recursive function taking:
  (                      //   x = current row
    [x,...y] =          //   y = remaining rows
    >(                   //   if x is truthy:
      x || []            //     return x or []
     .concat(           //     concatenate with
        f(               //       f(y)
          y              //       y
        )                //     end of concat
      )                  //   else:
  )                      // end of if
```

## Answer (3)

# Haskell, 51 bytes

```
f l=[maximum$map(\r->head r):l|length l>0]++replicate(length l)[[0]]
```

Try it online!

## Answer (2)

# R, 54 bytes

```
function(x){cbind(t(apply(x,1,max)),rep(0,nrow(x))))
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int**a,int n){int b[n];while(*a)b[--n]=*a++;return n?b:calloc(n,sizeof *a);}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
\d+
$*
^
$&
```

Try it online! Explanation: This solution uses the fact that the first line of the output will always have a nonzero value. It then replaces every digit by a star, so that the first line becomes `*`, and then removes the leading character to get `*`. Then it prepends this to the input, and repeats until there are no more lines. Finally, it converts back to digits.

## Answer (2)

# Perl 5, 44 + 1 (-p) = 45 bytes

```
$_=$_;s/./$&\n/g;say$_,pop@F while@F
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQMzG.TQ
```

Try it here!

## Answer (2)

# Ruby, 44 bytes

```
->a{a.zip(a.reverse).map(&:max)+[[0]*a.size]}
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
ṗ∇⌊↲Ḣḣ⟜ṡ
```

Try it Online!

## Explained

```
ṗ∇⌊↲Ḣḣ⟜ṡ
ṗ             # Pop the last element of the stack
 ∇           # Push the rest of the stack onto the stack
  ⌊          # Take the minimum of each element
   ↲         # Reverse the stack
     Ḣḣ      # Get the head and tail of the stack
       ⟜     # Rotate the top two elements of the stack
        ṡ    # Sum the stack
```

## Answer (2)

# Charcoal, 12 bytes

```
ＮθＦθ«≔⪫ι⁰≔⪫κ⁰≔⪫λ⁰≔⪫§⊕λ⊞υ⪫§⊕κ⊞υ⪫§⊕ι⊞υ⪫§⊕ι
```

Try it online! Link is to verbose version of code. Outputs newline separated strings. Explanation:

```
Ｎθ
```

Input the number of rows.

```
Ｆθ«
```

Loop over the rows.

```
≔⪫ι⁰
```

Push the first item on the current row.

```
≔⪫κ⁰
```

Push the second item on the current row.

```
≔⪫λ⁰
```

Push the third item on the current row.

```
≔⪫§⊕λ⊞υ⪫§⊕κ⊞υ⪫§⊕ι⊞υ⪫§⊕ι
```

Append the maximum of the next three items on the current row to the output.

## Answer (2)

# APL (Dyalog Unicode), 17 bytes^{SBCS}

Anonymous tacit prefix function.

```������������������������������������������������������������������������������������������������������������������������������������
################################################################

Solution:
[[0, 0, 0, 7, 7, 7, 7, 7, 0, 0], [0, 0, 0, 7, 6, 7, 7, 7, 0, 0], [0, 0, 0, 7, 6, 7, 7, 6, 0, 0], [0, 0, 0, 6, 6, 7, 7, 6, 0, 0], [0, 0, 0, 0, 6, 7, 7, 6, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

