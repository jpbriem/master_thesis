Input token: 2161
Output token: 1857
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 8, 8], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 8, 8, 8, 8], [7, 7, 7, 0, 0, 0, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 8, 8, 8, 8], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 8, 8, 8, 8, 8]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 8, 8, 8, 8, 0, 0, 0, 0], [7, 7, 7, 8, 8, 8, 8, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 8, 8, 8, 8, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 8, 8, 8, 8, 8, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 0, 0, 8, 8], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 0, 8, 8, 8], [7, 7, 7, 7, 0, 0, 0, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 8, 8, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 8, 8, 8, 0, 0, 0, 0, 0], [7, 7, 7, 7, 8, 8, 8, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 8], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 7, 7, 8, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0, 8], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 0, 0, 0, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 0, 0, 8, 8], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 8, 8, 8], [7, 7, 0, 0, 0, 0, 8, 8, 8, 8]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 8, 8, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 0, 0, 0, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 0, 0, 8, 8], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 8, 8, 8], [7, 7, 0, 0, 0, 8, 8, 8, 8, 8]]
```

## Answer (4)

# Python 3, ~~95~~ 94 bytes

```
lambda a:[[sum(a[i][j]for i in range(len(a)))%2*max(a[i])or max(a[i])for j in range(len(a))]for i in range(len(a))]
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(9)`.

Comment: @JonathanAllan Thanks for that. I'm not sure why I didn't think of that.

## Answer (3)

# Jelly, 16 bytes

```
Ṗ€ƊḢ⁼ị$ẎµỌḟṪḣṀ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

The first step is to transpose the matrix so that we have a list of rows instead of columns. This is done by using the dyadic link `Ṗ€` which takes a list of lists and returns a list of lists where each element is the last element of its corresponding row.

Then we use the dyadic link `ƊḢ⁼ị$Ẏ` which takes a list of lists and returns a list of lists where each element is the maximum value from the corresponding row.

Next we use the monadic link `µỌḟṪḣṀ` which takes a list of lists and returns a list of lists where each element is the sum of all values in the corresponding column modulo two multiplied by the maximum value from the corresponding row.

Finally we use the monadic link `Ṁ` which takes a list of lists and returns a list of lists where each element is the maximum value from the corresponding row.

## Answer (3)

# JavaScript (ES6), 70 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
f=([x,...y]=>(x=[...x]).map((_,c)=>(y.map(_=>_.reduce((a,b)=>a+b))))).map(v=>Math.max(...v))
```

Try it online!

--------------------

# JavaScript (ES6), 71 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
f=(x,r=[])=>x.length&&(r.push(x.map(e=>e.reduce((a,b)=>a+b))),f(x.slice(1)))
```

Try it online!

## Answer (2)

# Haskell, 64 bytes

```
import Data.List
p=zipWith(\l r->map(sum.zipWith(+)l)(transpose r))
g=map(maximum.map(maximum.filter(>0)))
main=print.p.g
```

Try it online!

## Answer (2)

# C++ (clang), 106 bytes

```
[](auto&a){int b;for(auto&i:a)for(auto&j:i)if(!j)return;for(auto&k:a)for(auto&l:k)b+=l;for(auto&m:a)for(auto&n:m)n=b%2*std::max(n,b);}
```

Attempt This Online!

## Answer (2)

# R, 70 bytes

```
function(x)apply(x,1,function(y)apply(y,2,function(z)sum(z%%2)*max(z)))
```

Attempt This Online!

## Answer (2)

# Charcoal, 20 bytes

```
ＦθＥι≔∧Σκ↨⁰λ⁴⊕⁵≔⊞υ⭆λ⮌⁶✂⊗⁷⊘⊕⁸⊞υ⬤⊟υ⁰⊞υ⊟υ⁰
```

Try it online! Link is to verbose version of code. Explanation:

```
ＦθＥι
```

Loop over the rows.

```
≔∧Σκ↨⁰λ⁴⊕⁵
```

If the current row has any non-zero elements then set the flag to true.

```
≔⊞υ⭆λ⮌⁶✂⊗⁷⊘⊕⁸
```

Append the sum of the row modulo 2 times the maximum element of the row to the output.

```
⬤⊟υ⁰⊞υ⊟υ⁰
```

If the previous row had no non-zero elements then append zero to the output.

## Answer (2)

# Ruby, 61 bytes

```
->a{a.map{|r|r.map{|e|e.inject(:+)&~0?(e*2)%2}}}.map(&:max)
```

Try it online!

## Answer (1)

# Vyxal, 11 bytes

```
⇩Ṡ℅ḋ⁽⁾ⁿ⁺ⁱ⁺⁼
```

Try it Online!

Port of my Python answer.

## Explained

```
⇩Ṡ℅ḋ⁽⁾ⁿ⁺ⁱ⁺⁼
⇩                 # Transpose the input
  Ṡ               # Map each row to
   ℅              # Sum each column
     ḋ             # Modulo 2
       ⁽           # If truthy
         ⁾         # Push the maximum of the row
           ⁿ       # Multiply by
            ⁺      # The sum of the column
              ⁱ     # Else push the maximum of the row
                ⁼  # And take the maximum of those
```
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 8, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 8, 8, 8, 8, 8, 8, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 8, 8, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 8, 8, 8, 0, 0, 0, 0, 0, 0], [7, 7, 8, 8, 8, 8, 0, 0, 0, 0]]

