Input token: 2161
Output token: 2051
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 2, 2, 2, 2], [9, 0, 0, 0, 0, 0, 2, 2, 2, 2], [9, 9, 0, 0, 0, 0, 2, 2, 2, 2], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 2], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 2, 2, 2, 2, 0, 0, 0, 0], [9, 2, 2, 2, 2, 0, 0, 0, 0, 0], [9, 9, 2, 2, 2, 2, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 2, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0, 0, 0, 2, 2], [9, 9, 0, 0, 0, 0, 2, 2, 2, 2], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 0, 2, 2], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 0, 2, 2], [9, 9, 0, 0, 0, 0, 0, 0, 2, 2]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 2, 2, 0, 0, 0, 0, 0], [9, 9, 2, 2, 2, 2, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 2, 2, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 2, 2, 0, 0, 0, 0, 0, 0], [9, 9, 2, 2, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 2, 2], [9, 9, 9, 0, 0, 0, 0, 0, 0, 2], [9, 0, 0, 0, 0, 0, 2, 2, 2, 2], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 2, 2, 0, 0, 0, 0], [9, 9, 9, 2, 0, 0, 0, 0, 0, 0], [9, 2, 2, 2, 2, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 0, 0, 0, 0, 0, 2, 2, 2, 2], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 0, 0, 0, 2, 2, 2, 2, 2, 2], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 0, 0, 0, 0, 0, 2, 2, 2, 2], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 0, 0, 0, 2, 2, 2, 2, 2, 2], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 65 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j%2else min(x[i][j]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `min()` is a builtin function so you can save some bytes by using that instead of `sorted()[0]`. Also, I think you can use `range(len(x))` instead of `range(len(x)-1)`, since you're not actually using the last element anyway.

Comment: @JonathanFrech Thanks for the tips!

## Answer (3)

# Jelly, 10 bytes

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmƑẎỤṖ€Ṁ - Link: list of lists
Ṛ           - reverse each row
  ⁸         - index into each row at indices: [0,1,...,n-1]
   Œm       - map over each row:
    Ƒ       -   filter keep those where:
     Ẏ      -     yield the last item of the row
       Ụ    -   remove all but the first truthy value
          € - for each row:
        Ṗ   -   pop
         Ṁ - maximum
```

## Answer (3)

# JavaScript (ES6), 59 bytes

Expects an array of arrays as input. Returns an array of arrays as output.

```
a=>a.map((r,i)=>(r=r.slice(),r[i]=Math.max(...r)),r=>r.pop())
```

Try it online!

### Commented

```
a =>                 // a[] = input array of arrays
a.map((r, i) =>      // for each row r[] of a[]:
  (r = r.slice(),    //   create a copy of r[]
   r[i] = Math.max(  //   set the current cell to the max of its column
    ...r             //     spread r[]
   )                  // end of assignment expression
),                   // end of map()
r => r.pop())        // return the popped row
```

## Answer (2)

# Haskell, 58 bytes

```
f l=[maximum$zipWith(\a b->max a b)$l!!i|i<-[0..length l-1]]
```

Try it online!

## Answer (2)

# C++ (gcc), 100 bytes

```
int f(int*a){int n=sizeof(*a)/sizeof(**a);return*std::max_element(a+n*~n,a+n*n);}
```

Try it online!

## Answer (2)

# R, 56 bytes

```
function(x)t(apply(x,1,max))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 27 bytes

```
\d
$*
^.*¶
$&
¶

$*
```

Try it online! Explanation:

```
\d
$*
```

Convert the matrix to a string with each number on a separate line.

```
^.*¶
$&
```

Remove the newlines.

```
¶

$*
```

Convert back to a matrix.

## Answer (2)

# Perl 5, 44 + 1 (-p) = 45 bytes

```
say join" ",@F[$_]=$_[$_]||max(@F[$_])for 0..$#F;
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQMzGQTQ.Q
```

Try it here!

## Answer (2)

# Ruby, 41 bytes

```
->a{a.map{|r|r.max}}
```

Try it online!

## Answer (2)

# Java 8, ~~100~~ 99 bytes

```
a->{var m=new int[a.length];for(int i=0;i<a.length;i++)m[i]=a[i].stream().max(Integer::compare).get();return m;}
```

Try it online!

-1 byte thanks to *@ceilingcat*.

--------------------

# Java 8, 100 bytes

```
a->{int[]m=new int[a.length];for(int i=0;i<a.length;i++){m[i]=a[i].stream().max(Integer::compare).get();}return m;}
```

Try it online!

Comment: You can replace `a[i].stream().max(Comparator.naturalOrder()).get()` with `a[i].stream().max(Integer::compare).get()`

Comment: @ceilingcat Thanks! :)

## Answer (2)

# Vyxal, 6 bytes

```
ṗ∧ṠṡṘ
```

Try it Online!

```
ṗ∧ṠṡṘ
ṗ        # Push the length of the input
 ∧       # And take the minimum of that and the length of the rows
  Ṡ      # Transpose the input
   ṡ     # Flatten it
    Ṙ    # Take the maximum of each row
```

## Answer (2)

# Charcoal, 10 bytes

```
ＮθＦθＥθ⊕ι≔⌈⟦✂ι↨κ⟧κ
```

Try it online! Link is to verbose version of code. Outputs a list of integers rather than a list of lists. Explanation:

```
Ｎθ
```

Input the size of the grid.

```
Ｆθ
```

Loop over the rows.

```
Ｅθ
```

Map over the columns.

```
⊕ι
```

Increment the column index.

```
≔⌈⟦✂ι↨κ⟧κ
```

Store the maximum value found so far.

## Answer (2)

# APL (Dyalog Unicode), 14 bytes^{SBCS}

Anonymous tacit prefix function.

```
⍳/⍴¨�������������
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 2, 2, 2, 2, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 2, 2, 2, 2, 2, 2, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

