Input token: 559
Output token: 280
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [5, 3, 0, 1, 0], [0, 3, 0, 0, 4], [0, 3, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 3, 0, 0, 0], [0, 3, 0, 1, 0], [5, 3, 0, 1, 4]]

Example_2:
input: [[9, 0, 3, 0, 0], [0, 5, 3, 1, 0], [9, 0, 0, 0, 0], [0, 5, 0, 0, 8], [0, 5, 3, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 5, 3, 0, 0], [9, 5, 3, 0, 0], [9, 5, 3, 1, 8]]

Example_3:
input: [[0, 0, 2, 6, 0], [0, 0, 0, 6, 0], [0, 0, 2, 0, 0], [0, 0, 0, 6, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 6, 0], [0, 0, 2, 6, 0], [0, 0, 2, 6, 0]]

Test case:
input: [[0, 6, 5, 0], [8, 0, 5, 0], [0, 6, 0, 3], [0, 6, 5, 0]]
################################################################

LLM answer:

output: [[0, 6, 5, 0], [8, 0, 5, 0], [0, 6, 0, 3], [0, 6, 5, 0]]

Constraints:
1 <= matrix.length == matrix[i].length <= 100
matrix[i][j] is either 0 or a positive integer less than 100.
 */
public class RotateImage {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for (int i=0; i<n/2; i++) {
            for (int j=i; j<n-i-1; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[n-j-1][i];
                matrix[n-j-1][i] = matrix[n-i-1][n-j-1];
                matrix[n-i-1][n-j-1] = matrix[j][n-i-1];
                matrix[j][n-i-1] = temp;
            }
        }
    }
}
################################################################

Solution:
[[0, 0, 0, 0], [0, 6, 5, 0], [0, 6, 5, 0], [8, 6, 5, 3]]

