Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 1], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 1, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 1, 1], [8, 8, 0, 0, 0, 0, 0, 0, 1, 1], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 0, 0, 0, 0, 0, 1, 1, 1, 1], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 1, 1, 1], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 1, 1, 0, 0, 0, 0], [8, 8, 1, 1, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 1, 1, 1, 1, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 1, 1, 1, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 1, 1], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 0, 0, 0, 1, 1, 1, 1, 1, 1], [8, 8, 8, 0, 0, 0, 0, 0, 0, 1], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 1, 1, 1, 1, 1, 1, 0, 0, 0], [8, 8, 8, 1, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 1, 1], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 1, 1, 1], [8, 0, 0, 0, 0, 0, 0, 1, 1, 1], [8, 8, 8, 0, 0, 0, 0, 0, 0, 1], [8, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 1, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 1, 1, 1], [8, 0, 0, 0, 0, 0, 0, 1, 1, 1], [8, 8, 8, 0, 0, 0, 0, 0, 0, 1], [8, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~79~~ 65 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j%2else min(x[i][j]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `min()` is a builtin function so you can save some bytes by using that instead of `sorted()[0]`. Also, I think you can use `range(len(x))` instead of `range(len(x)-1)`, since you're not actually accessing the last element anyway.

Comment: @JonathanFrech Thanks for the tips!

## Answer (3)

# Jelly, 10 bytes

```
ḶṚ⁼ƇẎỌḢ€Ṁ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
ḶṚ⁼ƇẎỌḢ€Ṁ - Main link: list of lists L
Ḷ          - length of each row
  ⁼         - compare to...
   Ƈ        - keep those where:
    Ẏ       -   last two links as a dyad f(a,b):
     Ṛ      -     reverse b
      Ọ     -     sort
       Ḣ€   -     head of each
          Ṁ - maximum
```

## Answer (3)

# JavaScript (ES6), 59 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...l])=>l.map((r,y)=>(r.map((v,x)=>v>r[~x]?v:r[~x]),r))
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [_,...l]          //   l[] = the current submatrix
) =>                  // return:
  l.map(              //   map over rows r[] of l[]:
    (r, y) =>         //     for each row r[] at position y:
      (               //       map over columns v of r[]:
        r[~x]         //         if column x is the first one:
       ?             //           take its value v:
        :             //         else:
          r[~x]       //           take the value of the previous column
      ),               //       end of mapping over columns
    r                 //     end of mapping over rows
  )                   //   end of mapping over rows
```

## Answer (2)

# Haskell, 56 bytes

```
import Data.List
f=[maximum$zipWith max[last,init]$t|t<-transpose]
```

Try it online!

## Answer (2)

# C++ (gcc), 100 bytes

```
int main(){int n;cin>>n;while(n--){int m;cin>>m;vector<vector<int>>a(m);for(auto&i:a)for(auto&j:i)cin>>j;cout<<*max_element(begin(a),end(a));}}
```

Try it online!

## Answer (2)

# R, 54 bytes

```
function(x)apply(x,1,rev)[c(T,F)]
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
+`\d+
$*
^(\d)(.*)$
$2$1
```

Try it online! Explanation: This solution uses the fact that the output is always a permutation of the input. It therefore suffices to permute the digits within each line.

## Answer (2)

# Charcoal, 16 bytes

```
ＮθＷθＩ⊕⪫ι≔↨⟦⟧κ⟦⟧λ
```

Try it online! Link is to verbose version of code. Outputs each row on a new line. Explanation:

```
Ｎθ
```

Input the number of rows.

```
ＷθＩ⊕⪫ι
```

Repeat this block `N` times.

```
≔↨⟦⟧κ⟦⟧λ
```

Transpose the matrix.

```
⊕
```

Increment all elements.

```
⪫
```

Flatten the matrix.

```
Ｉ
```

Print the result.

## Answer (2)

# Pyth, 10 bytes

```
hQMzGQ@ZQ
```

Try it online!

## Answer (1)

# Vyxal, 10 bytes

```
ṗ₴ṡṠṖṘṄṙṡ
```

Try it Online!

Port of my Jelly answer.

## Answer (1)

# Perl 5, 49 + 1 (-p) = 50 bytes

```
$_=$_;s/./$&>$&?$&:reverse$&/ge;say
```

Try it online!

## Answer (1)

# Ruby, 51 bytes

```
->a{a.map{|r|r.map{|e|e>r[-1]?e:r[-1]}*''}.join}
```

Try it online!

## Answer (1)

# APL (Dyalog Unicode), 17 bytes^{SBCS}

Anonymous tacit prefix function.

```
⍵∘⍞∘⍋⍣¨⍳⍴⍵
```

Try it online!

`⍳⍴⍵` generate indices from 1 to the height of the matrix

`⍵∘⍞` transpose the matrix

`⍋⍣¨` apply `⍋` to each row

`⍵` the original matrix

## Answer (1)

# Java 8, 77 bytes

```
m->{var r=new int[m.length];for(int i=0;i<m.length;i++)for(int j=0;j<m[i].length;j++)r[i]=Math.max(r[i],m[i][j]);return r;}
```

Try it online.

**Explanation:**

```
m->{                            // Method with integer matrix parameter and integer matrix return-type
  var r=new int[m.length];    
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 1, 1, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [8, 1, 1, 1, 0, 0, 0, 0, 0, 0], [8, 1, 1, 1, 0, 0, 0, 0, 0, 0], [8, 8, 8, 1, 0, 0, 0, 0, 0, 0], [8, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

