Input token: 2161
Output token: 1492
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 3, 3, 0, 3, 3, 3, 3, 3, 0], [3, 0, 3, 0, 3, 3, 3, 0, 0, 0], [3, 0, 3, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0]]
output: [[3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 3, 3, 1, 3, 3, 3, 3, 3, 0], [3, 1, 3, 1, 3, 3, 3, 1, 1, 0], [3, 1, 3, 0, 3, 0, 3, 1, 1, 0], [0, 1, 1, 0, 0, 0, 3, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 0, 0, 3, 0, 0], [3, 3, 3, 3, 3, 0, 0, 3, 0, 0], [0, 3, 0, 3, 3, 0, 0, 0, 0, 0], [0, 3, 0, 3, 0, 0, 1, 0, 0, 0], [0, 3, 0, 3, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0]]
output: [[3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 1, 1, 3, 0, 0], [3, 3, 3, 3, 3, 1, 1, 3, 0, 0], [1, 3, 1, 3, 3, 1, 1, 1, 0, 0], [0, 3, 1, 3, 0, 1, 1, 0, 0, 0], [0, 3, 0, 3, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]]
output: [[0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 1, 0, 0], [0, 0, 3, 3, 3, 3, 3, 1, 0, 0], [0, 0, 3, 3, 3, 3, 3, 1, 0, 0], [0, 0, 1, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 0, 3, 3, 3, 0, 0], [3, 0, 3, 3, 0, 3, 3, 3, 0, 0], [3, 0, 3, 3, 0, 3, 3, 3, 0, 0], [3, 0, 0, 3, 1, 3, 3, 3, 0, 0], [3, 0, 0, 3, 1, 3, 3, 3, 0, 0], [0, 0, 0, 3, 1, 0, 3, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda x:[max(x[i])for i in range(len(x))]if all([all(j>0for j in r)for r in zip(*x)])else x
```

Try it online!

Comment: `zip(*x)` is a nice trick to get the transpose of a list.

Comment: @JonathanAllan Thanks for the tip :)

## Answer (3)

# Jelly, 5 bytes

```
Ḷ⁼€ƑṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ⁼€ƑṪ - Link: list of lists, L           e.g. [[3,3,3,3,3,3,3,3,3,0],...]
   €   - for each row R                    e.g. [[3,3,3,3,3,3,3,3,3,0]]
    Ƒ  - filter keep those where:          e.g. [[3,3,3,3,3,3,3,3,3,0]]
      -   all(R):                          e.g. True
       -   all(R > 0):                     e.g. False
        -   all(R < 0):                    e.g. False
         -   all(R == 0):                  e.g. False
            -   all(R!= 0):               e.g. True
Ḷ       - length of L                      e.g. 10
 ⁼      - equals?                         e.g. False
          - if so, return L else return []
             - implicit print
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns an array of arrays as output.

```
a=>a.map((r,i)=>(r=r.sort(),r[0]&&r==r.slice(0,-~i)))
```

Try it online!

### Commented

```
a =>              // a[] = input array of arrays
a.map(            // map over each row r[]:
  (r, i) =>       //   r[] = current row; i = index of this row
  (r = r.sort())  //   sort the elements of r[]
 ,               // end of map() callback
  r[0] &&         // if the first element of r[] is nonzero:
  r ==            //   check whether r[] is equal to
  r.slice(0, -~i) //   its prefix up to the last zero
)                 // end of map()
```

## Answer (2)

# Haskell, 61 bytes

```
f l=[maximum$l!!i|i<-[0..length l-1],all(/=0)$l!!i]
```

Try it online!

## Answer (2)

# C++ (clang), 100 bytes

```
int f(auto&a){return*std::max_element(a.begin(),a.end());}
bool g(auto&a){return std::all_of(a.begin(),a.end(),[](auto b){return b!=0;});}
int main(){int n;cin>>n;while(n--){vector<vector<int>>v;int m;cin>>m;while(m--){vector<int>w;int k;cin>>k;while(k--){int t;cin>>t;}w.push_back(t);v.push_back(w);}cout<<f(v)?f(v):g(v)<<'\n';}}
```

Try it online!

## Answer (2)

# Charcoal, 16 bytes

```
ＦθＥι≔⊕λ∧⌈⟦↨κ✂⊞υ⁰‖⟦↨κ✂⊞υ⁰
```

Try it online! Link is to verbose version of code. Explanation:

```
ＦθＥι
```

Loop over the rows.

```
≔⊕λ
```

Increment the column counter.

```
∧⌈⟦↨κ✂⊞υ⁰‖⟦↨κ✂⊞υ⁰
```

If the maximum value in the row is greater than or equal to the previous maximum value then add that maximum value to the result otherwise add the minimum value in the row to the result.
################################################################

Solution:
[[3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 1, 3, 3, 3, 0, 0], [3, 1, 3, 3, 1, 3, 3, 3, 0, 0], [3, 1, 3, 3, 1, 3, 3, 3, 0, 0], [3, 0, 1, 3, 1, 3, 3, 3, 0, 0], [3, 0, 0, 3, 1, 3, 3, 3, 0, 0], [0, 0, 0, 3, 1, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

