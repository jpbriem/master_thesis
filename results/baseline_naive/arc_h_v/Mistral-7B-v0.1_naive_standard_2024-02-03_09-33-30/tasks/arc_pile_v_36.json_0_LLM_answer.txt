Input token: 505
Output token: 391
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 6, 0, 0], [0, 0, 0, 3, 0], [0, 0, 0, 0, 0], [0, 0, 0, 3, 9], [0, 0, 0, 3, 9]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 3, 0], [0, 0, 0, 3, 9], [0, 0, 6, 3, 9]]

Example_2:
input: [[7, 0, 0, 0], [7, 0, 0, 4], [0, 5, 8, 0], [7, 5, 0, 0]]
output: [[0, 0, 0, 0], [7, 0, 0, 0], [7, 5, 0, 0], [7, 5, 8, 4]]

Example_3:
input: [[0, 0, 0, 8, 3], [0, 0, 0, 0, 0], [0, 0, 0, 0, 3], [0, 2, 4, 8, 3], [0, 0, 0, 8, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 8, 3], [0, 0, 0, 8, 3], [0, 2, 4, 8, 3]]

Test case:
input: [[1, 0, 4, 0], [0, 0, 0, 0], [0, 7, 4, 6], [0, 0, 4, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 7, 4, 6], [0, 0, 4, 0]]

Constraints:
1 <= matrix.length == matrix[i].length <= 100
matrix[i][j] is either 0 or an integer in range [1, 9].
 */
public class SpiralMatrix {
    public int[][] spiralOrder(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return new int[0][];
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] res = new int[m * n][];
        int i = 0, j = 0, k = 0;
        while (k < m * n) {
            for (j = j; j < n && k < m * n; ++j) {
                res[k++] = new int[]{i, j};
            }
            for (i = i + 1; i < m && k < m * n; ++i) {
                res[k++] = new int[]{i, j};
            }
            for (j = j - 1; j >= 0 && k < m * n; --j) {
                res[k++] = new int[]{i, j};
            }
            for (i = i - 1; i > 0 && k < m * n; --i) {
                res[k++] = new int[]{i, j};
            }
        }
        return res;
    }
}
################################################################

Solution:
[[0, 0, 0, 0], [0, 0, 4, 0], [0, 0, 4, 0], [1, 7, 4, 6]]

