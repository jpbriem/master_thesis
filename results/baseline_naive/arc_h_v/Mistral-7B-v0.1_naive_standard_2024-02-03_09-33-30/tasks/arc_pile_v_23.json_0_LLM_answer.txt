Input token: 505
Output token: 379
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 2, 0, 8, 0], [0, 0, 0, 8, 0], [0, 2, 0, 0, 0], [0, 0, 4, 8, 0], [0, 2, 4, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 8, 0], [0, 2, 4, 8, 0], [0, 2, 4, 8, 0]]

Example_2:
input: [[0, 3, 0, 1], [0, 0, 0, 0], [0, 3, 0, 1], [7, 0, 0, 1]]
output: [[0, 0, 0, 0], [0, 0, 0, 1], [0, 3, 0, 1], [7, 3, 0, 1]]

Example_3:
input: [[0, 0, 8, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 4, 8, 0, 1], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 8, 0, 1], [0, 4, 8, 0, 1]]

Test case:
input: [[3, 9, 5, 0], [3, 0, 5, 2], [3, 0, 0, 2], [0, 9, 5, 2]]
################################################################

LLM answer:

output: [[3, 9, 5, 0], [3, 0, 5, 2], [3, 0, 0, 2], [0, 9, 5, 2]]

Constraints:
1 <= grid.length <= 100
1 <= grid[i].length <= 100
grid[i][j] is either 0 or a positive integer less than 100.
'''
from typing import List
class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        m = len(mat)
        n = len(mat[0])
        dist = [[float('inf') for _ in range(n)] for _ in range(m)]
        q = []
        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    dist[i][j] = 0
                    q.append((i, j))
        while q:
            x, y = q.pop()
            for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                newx, newy = x + dx, y + dy
                if 0 <= newx < m and 0 <= newy < n and dist[newx][newy] > dist[x][y] + 1:
                    dist[newx][newy] = dist[x][y] + 1
                    q.append((newx, newy))
        return dist
################################################################

Solution:
[[0, 0, 0, 0], [3, 0, 5, 2], [3, 9, 5, 2], [3, 9, 5, 2]]

