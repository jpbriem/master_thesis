Input token: 1948
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 7, 0], [7, 7, 0, 0], [0, 0, 7, 0], [7, 7, 0, 0], [0, 0, 7, 0], [0, 0, 0, 0], [0, 0, 7, 0], [0, 0, 0, 0]]
output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 7, 0], [7, 7, 5, 0], [5, 5, 7, 0], [7, 7, 5, 0], [0, 0, 7, 0], [0, 0, 5, 0], [0, 0, 7, 0], [0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [7, 7, 7, 0], [0, 0, 0, 0], [7, 7, 7, 0], [0, 0, 0, 0], [0, 0, 7, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [7, 7, 7, 0], [5, 5, 5, 0], [7, 7, 7, 0], [0, 0, 5, 0], [0, 0, 7, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 0, 0], [5, 0, 5, 0, 0, 0], [7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~89~~ 86 bytes

```
lambda a:[sum(a[i][j]for i in range(len(a)))%2*[0]*len(a)+a[::-1]]+[[0]+a[::-1]+[0]]*(len(a)-1)
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(n)`, where `n=len(a)`.

Comment: @KevinCruijssen Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 11 bytes

```
Ḷ€Ɗ⁼ịṖẎỤḢṪ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test-suite.

### How?

```
Ḷ€Ɗ⁼ịṖẎỤḢṪ - Link: list of lists, A
  Ɗ         - last two links as a dyad f(x,y):
    €       -   for each x in y:
    ⁼        -     equality comparison
     ị      -     index into x at position:
Ḷ            -       length of x
         Ẏ   - flatten
          Ụ  - uniqify
             - implicit print
              - implicit join with newlines
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=(a,b=[],c=[])=>a.map((r,i)=>b.push([...r].reduceRight((p,v)=>(p^v)?p:++c[i])),b)
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  a,                  //   a[][] as first argument
  b = [],             //   b[][] as second argument
  c = []              //   c[] as third argument
) =>                  //
a.map((               // map over each row r[] of a[][]:
  r,                  //   r[]
  i                   //   current row index i
) =>                  //
  b.push([            //   push on b[][] a new row:
   ...r              //     spread r[] to get its elements
  ].reduceRight((    //     reduce from right to left
    p,               //       accumulator p
    v                //       value v
  ) => (             //
    p ^ v?          //     if p XOR v is nonzero:
      p             //       return p
    : ++c[i]         //     else increment c[i] and return that
  ), 0)              //     start with 0
), b)                 // end of map()
```

## Answer (2)

# Haskell, 64 bytes

```
import Data.List
g l=l:zipWith(\a b->if a==b then 0 else 1)l$reverse l
```

Try it online!

## Answer (2)

# CJam, 17 bytes

```
q~{_e\:@/&}%{~}%
```

Try it online!

## Explanation

```
q~                 " Read input matrix.
 {               }% " For each row:
   _e             "   Duplicate.
     \            "   Swap.
      :           "   Push empty string.
       @/         "   Split by spaces.
        &         "   Reduce by bitwise AND.
                  " End.
{~}%               " Flatten result.
```

## Answer (2)

# R, ~~67~~ 66 bytes

```
function(m){t<-matrix(rep(0,prod(dim(m))),nrow=length(m));t[upper.tri(t)]<-m;t}
```

Try it online!

## Answer (2)

# Perl 5, 49 + 1 (-p) = 50 bytes

```
$_=$_;s/\d/$&^$_/ge;say"$_"x$F
```

Try it online!

## Answer (2)

# Pyth, 11 bytes

```
hQVGZTQYQM
```

Try it here!

## Answer (2)

# Ruby, 49 bytes

```
->a{(a<<a.transpose).flatten.each_slice(a.size).to_a}
```

Try it online!

## Answer (2)

# Retina 0.8.2, 37 bytes

```
O`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶
+`¶

################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 7, 0, 5, 0], [5, 0, 5, 0, 0, 5, 0, 7, 0], [7, 0, 7, 0, 0, 7, 0, 5, 0], [5, 0, 5, 0, 0, 0, 0, 7, 0], [7, 0, 7, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]

