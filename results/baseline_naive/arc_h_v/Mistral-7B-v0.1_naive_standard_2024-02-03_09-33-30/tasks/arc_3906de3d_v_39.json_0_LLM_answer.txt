Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [0, 7, 0, 0, 0, 7, 7, 0, 0, 0], [0, 7, 0, 0, 0, 0, 7, 0, 0, 0], [0, 7, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 8, 8, 0, 0, 0, 8, 0, 0], [8, 0, 8, 8, 0, 0, 0, 8, 0, 0]]
output: [[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 7, 7, 7, 7, 7, 7, 8, 0, 0], [7, 7, 7, 7, 7, 7, 7, 8, 0, 0], [7, 7, 7, 7, 7, 7, 7, 8, 0, 0], [8, 7, 8, 8, 0, 7, 7, 0, 0, 0], [0, 7, 8, 8, 0, 0, 7, 0, 0, 0], [0, 7, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 0, 7, 7, 0, 0], [7, 7, 7, 7, 7, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 8, 0, 0, 8, 8, 8, 0, 8, 0], [0, 8, 8, 0, 8, 8, 8, 0, 8, 0]]
output: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 8, 7, 7, 8, 0], [7, 7, 7, 7, 7, 8, 8, 7, 8, 0], [0, 8, 8, 0, 8, 0, 8, 7, 0, 0], [0, 8, 0, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 0, 7, 7, 7, 0, 0], [0, 0, 7, 7, 0, 7, 7, 7, 0, 0], [0, 0, 7, 0, 0, 7, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 8, 0, 0], [0, 0, 0, 0, 8, 0, 0, 8, 0, 0]]
output: [[0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 8, 7, 7, 7, 0, 0], [0, 0, 7, 7, 8, 7, 7, 7, 0, 0], [0, 0, 7, 0, 8, 7, 7, 7, 0, 0], [0, 0, 0, 0, 8, 0, 7, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 0, 7, 0, 7, 0, 0], [0, 0, 7, 0, 0, 7, 0, 7, 0, 0], [0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 0, 8, 0], [0, 0, 0, 8, 0, 0, 8, 0, 8, 0]]
################################################################

LLM answer:

output: [[0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 7, 0]]
```

## Answer (4)

# Python 3, ~~95~~ 94 bytes

```
lambda a:[[max(a[i][j]for i in range(len(a)))if j<len(a)-1else max(a[i][j+1]for i in range(len(a)))]for j in range(len(a[0]))]
```

Try it online!

Comment: `range(len(a))` can be replaced with `range(len(a[0]))`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 6 bytes

```
Ḷ⁼ƇṚẎ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ⁼ƇṚẎ - Link: list of lists, L
Ḷ      - length                    e.g. [1,2,3] -> 3
  Ƈ    - filter keep               e.g. [1,2,3] -> [1,2,3]
    Ṛ  - reverse                   e.g. [1,2,3] -> [3,2,1]
      Ẏ - last link (yields a list) e.g. [3,2,1] -> [1]
```

## Answer (3)

# JavaScript (ES6), 49 bytes

Expects an array of arrays as input. Returns an array of arrays as output.

```
f=([x])=>x,f=(a,b)=>(c=[...a],d=b.map((_,i)=>c[i]=Math.max(...c)),f(c,d))
```

Try it online!

### Commented

```
f = (             // f is a recursive function taking:
  [x]            //   x[][] as first argument and
  => x           //   returns x if x is empty
, b)              //   otherwise:
=> (              //
  c = [...a]      //   initialize c to a copy of a
, d = b.map((_, i)//   initialize d to a map over b:
  => c[i]         //     set c[i] to the maximum value in c
)                 //   end of map()
, f(c, d)         //   call f recursively on c and d
)                 // end of outer function
```

## Answer (2)

# Haskell, 44 bytes

```
import Data.List
t=transpose
f l=t$zipWith max t$l:t l
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*a){int*p;return p=a,*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*a++,p=*p>*--p?p:*p=*a++,p+=*
################################################################

Solution:
[[0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 7, 7, 7, 7, 7, 7, 8, 0], [0, 0, 7, 7, 7, 7, 7, 7, 8, 0], [0, 0, 7, 7, 7, 7, 7, 7, 8, 0], [0, 0, 7, 7, 0, 7, 8, 7, 0, 0], [0, 0, 7, 8, 0, 7, 8, 7, 0, 0], [0, 0, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

