Input token: 625
Output token: 411
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0], [0, 0, 9, 0, 0, 0], [0, 0, 2, 0, 0, 2], [8, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 8, 8, 8], [0, 4, 0, 4, 0], [2, 2, 2, 0, 0], [0, 0, 0, 0, 0], [0, 6, 0, 0, 0]]
output: [[8, 8, 8, 0, 0], [4, 4, 0, 0, 0], [2, 2, 2, 0, 0], [0, 0, 0, 0, 0], [6, 0, 0, 0, 0]]

Example_3:
input: [[1, 1, 0, 1, 0], [3, 0, 0, 0, 0], [0, 0, 4, 0, 0], [8, 0, 8, 0, 0], [0, 6, 6, 0, 0]]
output: [[1, 1, 1, 0, 0], [3, 0, 0, 0, 0], [4, 0, 0, 0, 0], [8, 8, 0, 0, 0], [6, 6, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 5], [0, 0, 7, 0], [6, 0, 6, 0], [1, 1, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 5], [0, 0, 7, 0], [6, 0, 6, 0], [1, 1, 0, 0]]

Constraints:
1 <= matrix.length == matrix[i].length <= 100
matrix[i][j] is an integer in range [-10^9, 10^9].
 */
public class SpiralMatrix {
    public int[][] spiralOrder(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return new int[0][];
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] res = new int[m * n][];
        int i = 0, j = 0, k = 0;
        while (k < m * n) {
            for (int l = j; l < n && k < m * n; ++l) {
                res[k++] = new int[]{i, l};
            }
            for (int l = i + 1; l < m && k < m * n; ++l) {
                res[k++] = new int[]{l, n - 1};
            }
            for (int l = n - 2; l >= j && k < m * n; --l) {
                res[k++] = new int[]{m - 1, l};
            }
            for (int l = m - 2; l > i && k < m * n; --l) {
                res[k++] = new int[]{l, j};
            }
            ++i;
            ++j;
        }
        return res;
    }
}
################################################################

Solution:
[[5, 0, 0, 0], [7, 0, 0, 0], [6, 6, 0, 0], [1, 1, 0, 0]]

