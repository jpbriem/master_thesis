Input token: 517
Output token: 387
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 5], [0, 2, 2, 2], [0, 3, 0, 0], [9, 0, 9, 9]]
output: [[5, 0, 0, 0], [2, 2, 2, 0], [3, 0, 0, 0], [9, 9, 9, 0]]

Example_2:
input: [[3, 3, 0, 3], [0, 5, 5, 0], [1, 1, 0, 0], [0, 2, 2, 2]]
output: [[3, 3, 3, 0], [5, 5, 0, 0], [1, 1, 0, 0], [2, 2, 2, 0]]

Example_3:
input: [[0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 8], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0], [0, 0, 0, 0, 1, 0]]
output: [[5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]

Test case:
input: [[6, 0, 0, 0], [0, 0, 3, 3], [8, 8, 8, 0], [0, 2, 2, 2]]
################################################################

LLM answer:

output: [[6, 0, 0, 0], [0, 0, 3, 3], [8, 8, 8, 0], [2, 2, 2, 0]]
'''
class Solution(object):
    def updateMatrix(self, mat):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        m = len(mat)
        n = len(mat[0])
        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    continue
                else:
                    mat[i][j] = min(self.dfs(mat, i - 1, j), self.dfs(mat, i + 1, j), self.dfs(mat, i, j - 1), self.dfs(mat, i, j + 1)) + 1
        return mat

    def dfs(self, mat, x, y):
        if x < 0 or x >= len(mat) or y < 0 or y >= len(mat[0]):
            return float('inf')
        elif mat[x][y]!= 0:
            return mat[x][y]
        else:
            mat[x][y] = 1
            return 1 + min(self.dfs(mat, x - 1, y), self.dfs(mat, x + 1, y), self.dfs(mat, x, y - 1), self.dfs(mat, x, y + 1))
################################################################

Solution:
[[6, 0, 0, 0], [3, 3, 0, 0], [8, 8, 8, 0], [2, 2, 2, 0]]

