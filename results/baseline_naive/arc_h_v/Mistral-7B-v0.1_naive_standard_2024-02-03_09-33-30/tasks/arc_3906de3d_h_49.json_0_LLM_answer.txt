Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 5, 5], [9, 9, 0, 0, 0, 0, 0, 0, 5, 5], [9, 9, 9, 0, 0, 0, 0, 0, 5, 5], [9, 9, 9, 9, 0, 0, 0, 0, 5, 5], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 5, 5, 0, 0, 0], [9, 9, 5, 5, 0, 0, 0, 0, 0, 0], [9, 9, 9, 5, 5, 0, 0, 0, 0, 0], [9, 9, 9, 9, 5, 5, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 5], [9, 9, 9, 0, 0, 0, 0, 0, 0, 5], [9, 9, 0, 0, 0, 5, 5, 5, 5, 5], [9, 0, 0, 0, 0, 0, 5, 5, 5, 5], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 5, 0, 0, 0], [9, 9, 9, 5, 0, 0, 0, 0, 0, 0], [9, 9, 5, 5, 5, 5, 5, 0, 0, 0], [9, 5, 5, 5, 5, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 5, 5, 5], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 5], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 5, 5, 5, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 9, 5, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 5], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 5, 5, 5, 5, 5], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 5, 5, 5], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 5, 5, 5], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 5, 5, 5], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 69 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j%2else min(x[i][j]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `min()` is a builtin function so you can save some bytes by using that instead of `sorted()[0]`. Also, I think you can use `range(len(x))` instead of `range(len(x)-1)`, since you're not actually using the last element anyway.

Comment: @JonathanFrech Thanks for the tips!

## Answer (3)

# Jelly, 11 bytes

```
Ṛ⁸ŒmƑẎỤṖ€ṀṂ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmƑẎỤṖ€ṀṂ - Link: list of lists
Ṛ           - reverse each row
  ⁸         - transpose
   Œm       - map over each column:
    Ƒ       - filter keep:
     Ẏ      - last two links as a dyad f(a,b):
       Ụ    -   uniqify a
          € - for each b:
       Ṗ    -   pop
            - implicit print
            Ṁ - maximum
             Ṃ - minimum
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays. Returns an array of arrays.

```
f=([_,...r])=>r.map((c,i)=>(c=[...c].sort(),c[i]=c[~i]),c=>c)
```

Try it online!

### Commented

```
f = (                 // f is a recursive function taking:
  [_,...r]          //   r[] = original matrix
) =>                  // return:
  r.map(              //   for each row c[]:
    (                //     - do:
      c,             //       c = current row
      i = >          //       i = index of c in r[]
    ) => (            //     end of block
      c = [...c].sort(), //   sort c[]
      c[i] = c[~i]     //   swap first and last elements
    ),                //   end of block
    c => c            // return c[]
  )                   // end of map()
```

## Answer (2)

# Haskell, 60 bytes

```
import Data.List
f l=(zipWith(\a->reverse$take 2$sortBy(compare`on`head)$a)l)[0..length l-1]
```

Try it online!

## Answer (2)

# C++ (gcc), 100 bytes

```
int main(){int n;scanf("%d",&n);while(n--){int m;scanf("%d",&m);char s[m];while(m--)scanf(" %c",&s[m]);puts(s);}}
```

Try it online!

## Answer (2)

# R, 56 bytes

```
function(x)t(apply(x,1,rev))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 24 bytes

```
+`\d+
¶
+`^(.)(.*?)(\1)(.*)
$2$4$3
```

Try it online! Explanation:

```
+`\d+
¶
```

Split on newlines.

```
+`^(.)(.*?)(\1)(.*)
$2$4$3
```

For each line, take the second half of the line and put it before the first half.

## Answer (2)

# Perl 5, 39 + 1 (-p) = 40 bytes

```
$_=join" ",@F;s/^(.).*?\1/$2$1/;say
```

Try it online!

## Answer (2)

# Pyth, 11 bytes

```
hQVG.TQ.SQ
```

Try it here!

## Answer (2)

# Ruby, 41 bytes

```
->a{a.map{|e|e.reverse.insert(0,e[-1])}}
```

Try it online!

## Answer (2)

# Vyxal, 10 bytes

```
R∇⌊↲⟜℅⌐⌽
```

Try it Online!

## Explained

```
R∇⌊↲⟜℅⌐⌽
R∇        # Reverse each row
  ⌊       # Take the first item from each reversed row
   ↲      # Swap the first and last items
    ⟜℅    # Rotate right by one
       ⌐  # Reverse
        ⌽ # Transpose
```

## Answer (2)

# Charcoal, 12 bytes

```
ＮθＥθＩ≔⪫ι⪪ι⪪ι⪪ι
```

Try it online! Link is to verbose version of code. Outputs each row on its own line. Explanation:

```
 Ｎθ
```

Input the number of rows.

```
 Ｅθ
```

Loop over all rows.

```
 Ｉ≔⪫ι⪪ι⪪ι⪪ι
```

Output the first half of the row followed by the last half of the row.

## Answer (2)

# APL (Dyalog Unicode), 15 bytes^{SBCS}

Anonymous tacit prefix function.

```
⍵⋄⍨⍣2⊃⍵⊢⍳⍴⍵
```

Try it online!

`⍳⍴⍵`

Get the indices of the first and last elements of each row.

`⍣2⊃⍵⊢`

Take the first and last elements of each row.

`⍵⋄⍨`

Swap them.

## Answer (2)

# Java 8, 100 bytes

```
void f(String[][]a){for(int i=0;i<a.length;i++)for(int j=0;j<a[i].length;j++){int
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 5, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 5, 5, 5, 5, 5, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 5, 5, 5, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

