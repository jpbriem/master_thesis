Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 9, 9], [1, 1, 1, 0, 0, 0, 0, 9, 9, 9], [1, 1, 0, 0, 0, 9, 9, 9, 9, 9], [1, 0, 0, 0, 9, 9, 9, 9, 9, 9], [1, 1, 1, 0, 0, 0, 0, 0, 9, 9], [1, 0, 0, 0, 0, 9, 9, 9, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 9, 9, 0, 0, 0], [1, 1, 1, 9, 9, 9, 0, 0, 0, 0], [1, 1, 9, 9, 9, 9, 9, 0, 0, 0], [1, 9, 9, 9, 9, 9, 9, 0, 0, 0], [1, 1, 1, 9, 9, 0, 0, 0, 0, 0], [1, 9, 9, 9, 9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 9, 9, 9, 9, 9], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 9, 9, 9], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 9, 9, 9, 9, 9], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 9, 9, 9, 9, 9, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 9, 9, 9, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 9, 9, 9, 9, 9, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 9, 9, 9, 9], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 9, 9, 9, 9], [1, 1, 1, 0, 0, 0, 0, 9, 9, 9], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 9, 9, 9, 9, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 9, 9, 9, 9, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 9, 9, 9, 9, 0, 0, 0, 0], [1, 1, 1, 9, 9, 9, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 9, 9, 9, 9, 9, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 9], [1, 1, 1, 0, 0, 0, 0, 9, 9, 9], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 9], [1, 1, 1, 0, 0, 0, 0, 9, 9, 9], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3, ~~78~~ 65 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j%2else min(x[i][j]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `min()` is a builtin function so you can save some bytes by using that instead of `sorted()[0]`. Also, I think you can use `range(len(x))` instead of `range(len(x)-1)`, since you're not actually using the last element anyway.

Comment: @JonathanFrech Thanks for the tips!

## Answer (3)

# Jelly, 10 bytes

```
Ḷ⁼€ƇṚẎỤḢṖ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ⁼€ƇṚẎỤḢṖ - Link: list of lists
Ḷ           - length of each row
   €        - for each:
   ⁼         -   compare to...
     Ƈ       - keep those where:
     €       -   for each:
      Ṛ      -     reverse
       Ẏ     -     flatten
         Ụ   -   uniqify
           Ḣ - head (first value)
              - implicit print
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
a=>a.map((r,y)=>(r=r.map(v=>Math.max(...r)),v=r[y]),r=[],r)
```

Try it online!

### Commented

```
a =>                 // a[] = input array of arrays
a.map((             // map over rows:
  r,                //   r[] = current row
  y =               //   y = index of current row
  >                 //   update r[] with:
  (r =               //     r[] = new row
    r.map(           //       map over columns:
      v =>           //         v = current column
      Math.max(      //           get maximum of:
       ...r,        //             all elements in r[]
        v            //             plus v itself
      )              //       end map()
    ),               //     end map()
    v = r[y])        //     set v to the value at position y in r[]
),                   // end map()
r = [],              // initialize result array r[]
r)                   // return r[]
```

## Answer (2)

# Haskell, 54 bytes

```
f l=(zipWith max<$>l++[maximum<$>transpose l])
```

Try it online!

## Answer (2)

# C (gcc), 100 bytes

```
f(int*a){int b[10];b[0]=a[0][0];for(;*a;a++)for(int c=0;c<10;c++){b[c+1]=a[c][0]<a[c][9]?a[c][0]:a[c][9];}return b;}
```

Try it online!

## Answer (2)

# R, 58 bytes

```
function(m)t(apply(m,1,max))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 27 bytes

```
\d
¶
^.*¶
$&
¶
$*
```

Try it online! Explanation:

```
\d
¶
```

Replace every digit with a line break.

```
^.*¶
$&
```

Remove the first line from each group of lines.

```
¶
$*
```

Join the remaining lines together.

## Answer (2)

# Perl 5, 41 + 1 (-p) = 42 bytes

```
$_=$_;s/(\d)/$1.$&\n/g;s/\n//g;say join"",@F
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQMzGQTQMz
```

Try it here!

## Answer (2)

# Java 8, ~~107~~ 106 bytes

```
m->{var t=new int[m.length][m[0].length];for(int i=0;i<m.length;i++)for(int j=0;j<m[0].length;j++)t[i][j]=Math.max(m[i][j],t[i][j]);return t;}
```

Try it online!

**Explanation:**

```
m->{                                                 // Method with integer matrix m as both parameter and return-type
  var t=new int[m.length][m[0].length];              //  Create a new empty matrix t of the same size as m
  for(int i=0;i<m.length;i++)                       //  Loop over all rows in m
    for(int j=0;j<m[0].length;j++)                  //   Inner loop over all columns in m
      t[i][j]=Math.max(m[i][j],t[i][j]);            //    Set the value at (i,j) in t to the maximum between the values at (i,j) in m and t
  return t;}                                        //  Return the created matrix t
```

--------------------

# Java 8, 105 bytes

```
m->{var t=new int[m.length][m[0].length];for(int i=0;i<m.length;i++)for(int j=0;j<m[0].length;j++)t[i][j]=Math.max(m[i][j],t[i][j]);return Arrays.stream(t).flatMapToInt(Arrays::stream).toArray();}
```

Try it online!

**Explanation:**

```
m->{                                                 // Method with integer matrix m as both parameter and return-type
  var t=new int[m.length][m[0].length];              //  Create a new empty matrix t of the same size as m
  for(int i=0;i<m.length;i++)                      //  Loop over all rows in m
    for(int j=0;j<m[0].length;j++)                 //   Inner loop over all columns in m
      t[i][j]=Math.max(m[i][j],t[i][j]);           //    Set the value at (i,j) in t to the maximum between the values
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 9, 0, 0, 0], [1, 1, 1, 9, 9, 9, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

