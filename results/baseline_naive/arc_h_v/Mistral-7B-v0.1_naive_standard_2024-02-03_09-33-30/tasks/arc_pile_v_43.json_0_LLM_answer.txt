Input token: 397
Output token: 343
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0], [0, 3, 2, 1], [0, 3, 0, 1], [8, 3, 0, 0]]
output: [[0, 0, 0, 0], [0, 3, 0, 0], [0, 3, 0, 1], [8, 3, 2, 1]]

Example_2:
input: [[0, 7, 0, 0], [0, 7, 0, 0], [0, 0, 0, 0], [2, 7, 0, 0]]
output: [[0, 0, 0, 0], [0, 7, 0, 0], [0, 7, 0, 0], [2, 7, 0, 0]]

Example_3:
input: [[4, 0, 0, 0], [4, 0, 5, 0], [4, 0, 5, 0], [0, 1, 0, 0]]
output: [[0, 0, 0, 0], [4, 0, 0, 0], [4, 0, 5, 0], [4, 1, 5, 0]]

Test case:
input: [[0, 6, 0, 0], [0, 6, 5, 0], [0, 6, 0, 3], [9, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0], [0, 6, 0, 0], [0, 6, 5, 0], [9, 6, 0, 3]]
'''
class Solution(object):
    def updateMatrix(self, mat):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        m = len(mat)
        n = len(mat[0])
        if not m or not n: return []
        queue = collections.deque()
        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    queue.append((i, j))
                else:
                    mat[i][j] = float('inf')
        while queue:
            x, y = queue.popleft()
            for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                newx, newy = x + dx, y + dy
                if 0 <= newx < m and 0 <= newy < n and mat[newx][newy] > mat[x][y] + 1:
                    mat[newx][newy] = mat[x][y] + 1
                    queue.append((newx, newy))
        return mat
################################################################

Solution:
[[0, 0, 0, 0], [0, 6, 0, 0], [0, 6, 0, 0], [9, 6, 5, 3]]

