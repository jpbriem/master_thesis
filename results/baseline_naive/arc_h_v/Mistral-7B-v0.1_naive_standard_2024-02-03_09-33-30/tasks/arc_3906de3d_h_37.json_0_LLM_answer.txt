Input token: 2161
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 6, 6, 6, 6], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 6, 6, 6], [9, 0, 0, 0, 0, 0, 0, 6, 6, 6], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0, 0, 0, 6, 6], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 6, 6, 6, 6, 6]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 6, 6, 6, 6, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 6, 6, 6, 0, 0, 0, 0, 0], [9, 6, 6, 6, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 6, 6, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 6, 6, 6, 6, 6, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 6, 6, 6, 6, 6], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 6], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 6, 6, 6, 6, 6, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 6, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0, 0, 0, 0, 6], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 0, 0, 0, 0, 0, 0, 6, 6, 6], [9, 0, 0, 0, 0, 6, 6, 6, 6, 6], [9, 0, 0, 0, 0, 0, 0, 6, 6, 6], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 6, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 6, 6, 6, 0, 0, 0, 0, 0, 0], [9, 6, 6, 6, 6, 6, 0, 0, 0, 0], [9, 6, 6, 6, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0, 0, 0, 0, 6], [9, 9, 0, 0, 0, 0, 0, 6, 6, 6], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0, 0, 0, 6, 6], [9, 9, 0, 0, 0, 0, 6, 6, 6, 6], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 6, 6, 6, 6, 6]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 6, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0, 0, 6, 6, 6], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0, 0, 0, 6, 6], [9, 9, 0, 0, 0, 0, 6, 6, 6, 6], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 6, 6, 6, 6, 6]]
```

## Answer (4)

# Python 3, ~~78~~ 58 bytes

```
lambda x:[[max(x[i][j]for i in range(len(x)))if j%2else min(x[i][j]for i in range(len(x)))]for j in range(len(x[0]))]
```

Try it online!

Comment: `min()` is a builtin function so you can save some bytes by using that instead of `sorted()[0]`. Also, I think you can use `range(len(x))` instead of `range(len(x)-1)`, since you're not actually using the last element anyway.

Comment: @JonathanFrech Thanks for the tips!

## Answer (3)

# Jelly, 11 bytes

```
Ṛ⁸ŒmƑẎỤṖ€ṀṂ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ṛ⁸ŒmƑẎỤṖ€ṀṂ - Link: list of lists
Ṛ           - reverse each row
  ⁸         - transpose
   Œm       - main link: list of lists
    Ƒ       - filter keep:
     Ẏ      - length of each
       Ụ    - uniques
         Ṗ€ - pop off each
         Ṁ  - maximum
           Ṃ - minimum
```

## Answer (3)

# JavaScript (ES6), 60 bytes

Expects an array of arrays as input. Returns an array of arrays.

```
a=>a.map((r,y)=>(r=r.map((_,x)=>Math.max(...r)),r[x^1]=Math.min(...r)))
```

Try it online!

### Commented

```
a =>                 // a[] = input array
a.map((             // map over rows:
  r,                //   r[] = current row
  y =               //   y = index of current row
  >                 //   increment y to get next row
  (                 // end of map block
    r =             //   set r[] to the result of:
    r.map((_, x) => //     map over columns:
      Math.max(...r) //       take max value from current row
    ),              //   end of map
    r[x ^ 1] =      //   set column at position x^1 to:
    Math.min(...r)  //     take min value from current row
  )                 // end of map block
))                  // end of map
```

## Answer (2)

# Haskell, 60 bytes

```
f l=[[maximum$l!!i|i<-[0..length l-1]]++[minimum$l!!i|i<-[0..length l-1]]]
```

Try it online!

## Answer (2)

# C (gcc), 104 bytes

```
f(int*a){int b[2];b[0]=b[1]=0;while(*a++)for(int c=0;c<2;c++){b[c]+=*a&1?*a>b[c]:*a<b[c];}return b;}
```

Try it online!

## Answer (2)

# R, 64 bytes

```
function(x)t(apply(x,1,max)+apply(x,1,min))
```

Try it online!

## Answer (2)

# Retina 0.8.2, 31 bytes

```
+`\d+
$*
O`$.
$*
```

Try it online! Explanation:

```
+`\d+
$*
```

Convert all numbers to stars.

```
O`$.
$*
```

Sort each line lexicographically.

## Answer (2)

# Perl 5, 48 + 1 (-p) = 49 bytes

```
say join"",@F=sort{$a[$_]<=>$b[$_]}0..$#F,$F[$_]=$a[$_]for@F
```

Try it online!

## Answer (2)

# Ruby, 49 bytes

```
->a{a.map{|e|[e.max,e.min].reverse}}
```

Try it online!

## Answer (2)

# Pyth, 11 bytes

```
hQGVQTQMQTQ
```

Try it online!

## Answer (2)

# Java 8, ~~107~~ 106 bytes

```
a->{var b=new int[a.length][a[0].length];for(int i=0;i<a.length;i++)for(int j=0;j<a[0].length;j++)b[i][j]=a[i][j]>b[i][j]?a[i][j]:b[i][j];return b;}
```

Try it online!

**Explanation:**

```
a->{                                                 // Method with integer-array parameter & integer-array return-type
  var b=                                             //  Result-matrix, initialized with the size of the input-matrix
    new int[a.length][a[0].length];                  //   (with every cell initially being zero)
  for(int i=0;i<a.length;i++)                        //  Loop over the rows of the input-matrix
    for(int j=0;j<a[0].length;j++)                   //   Inner loop over the columns of the input-matrix
      b[i][j]=                                       //    Set the corresponding cell in the result-matrix to:
        a[i][j]>b[i][j]?                             //     If the current cell is larger than its previous value:
          a[i][j]                                    //      Use the current cell
        :                                            //     Else:
          b[i][j];                                   //      Keep the previous value
  return b;}                                         //  Return the result-matrix
```

## Answer (2)

# Vyxal, 10 bytes

```
ṗ∩ṡṠṪṘṄṡṊ
```

Try it Online!

Port of my Python answer.

## Explained

```
ṗ∩ṡṠṪṘṄṡṊ
ṗ                 # Zip the matrix into a list of tuples
 ∩                # Take the intersection of each tuple
  ṡ               # Flatten the resulting list
   Ṡ              # Sort the flattened list
    Ṫ             # Pop the first item
     �
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 6, 0, 0, 0, 0, 0, 0], [9, 9, 6, 6, 6, 0, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0], [9, 9, 9, 6, 6, 0, 0, 0, 0, 0], [9, 9, 6, 6, 6, 6, 0, 0, 0, 0], [9, 9, 9, 9, 0, 0, 0, 0, 0, 0], [9, 9, 6, 6, 6, 6, 6, 0, 0, 0]]

