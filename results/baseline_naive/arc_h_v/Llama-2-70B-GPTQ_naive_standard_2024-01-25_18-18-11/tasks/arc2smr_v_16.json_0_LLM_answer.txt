Input token: 3097
Output token: 885
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [3, 0, 0, 0, 0], [0, 3, 0, 0, 0], [0, 0, 3, 0, 0], [3, 0, 0, 0, 0], [0, 3, 0, 0, 0], [0, 0, 3, 0, 0], [3, 0, 0, 0, 0], [0, 3, 0, 3, 0], [0, 0, 3, 0, 0], [3, 0, 0, 0, 0], [0, 3, 0, 3, 0], [0, 0, 3, 0, 0], [3, 0, 0, 0, 0], [0, 3, 0, 3, 0], [0, 0, 3, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 3, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [3, 0, 0, 0, 0], [7, 3, 0, 0, 0], [7, 7, 3, 0, 0], [3, 7, 7, 0, 0], [7, 3, 7, 0, 0], [7, 7, 3, 0, 0], [3, 7, 7, 0, 0], [7, 3, 7, 3, 0], [7, 7, 3, 7, 0], [3, 7, 7, 7, 0], [7, 3, 7, 3, 0], [7, 7, 3, 7, 0], [3, 7, 7, 7, 0], [0, 3, 7, 3, 0], [0, 0, 3, 7, 0], [0, 0, 0, 7, 0], [0, 0, 0, 3, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0], [7, 0, 3, 0, 0, 0, 0, 0], [7, 0, 7, 0, 0, 3, 0, 0], [3, 0, 7, 0, 0, 7, 0, 0], [7, 0, 3, 0, 0, 7, 0, 0], [7, 0, 7, 0, 0, 3, 0, 0], [3, 0, 7, 0, 0, 7, 0, 0], [7, 0, 3, 0, 0, 7, 0, 0], [7, 0, 7, 0, 0, 3, 0, 0], [3, 0, 7, 0, 0, 7, 0, 0], [7, 0, 3, 0, 0, 7, 3, 0], [7, 0, 7, 0, 0, 3, 7, 0], [3, 0, 7, 0, 0, 7, 7, 0], [0, 0, 3, 0, 0, 7, 3, 0], [0, 0, 0, 0, 0, 3, 7, 0], [0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0], [7, 0, 3, 0, 0, 0, 0], [7, 0, 7, 0, 3, 0, 0], [3, 0, 7, 0, 7, 0, 0], [7, 0, 3, 0, 7, 3, 0], [7, 0, 7, 0, 3, 7, 0], [3, 0, 7, 0, 7, 7, 0], [7, 0, 3, 0, 7, 3, 0], [7, 0, 7, 0, 3, 7, 0], [3, 0, 7, 0, 7, 7, 0], [7, 0, 3, 0, 7, 3, 0], [7, 0, 7, 0, 3, 7, 0], [3, 0, 7, 0, 7, 7, 0], [0, 0, 3, 0, 7, 3, 0], [0, 0, 0, 0, 3, 7, 0], [0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0], [3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0], [3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
"""

import collections

class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        """
        
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return
            
        m = len(matrix)
        n = len(matrix[0])
                    
        for i in range(m):
            for j in range(n):
                if matrix[i][j] > 0:
                    self._update(matrix, i, j, matrix[i][j])
                
    def _update(self, matrix, x, y, val):
        dx = [-1, -1, -1,  0,  0,  1,  1,  1]
        dy = [-1,  0,  1,  1,  1,  1,  0, -1]
        
        for k in range(8):
            xx = x + dx[k]
            yy = y + dy[k]
            if (xx >= 0 and xx < len(matrix)) and \
               (yy >= 0 and yy < len(matrix[0])):
                matrix[xx][yy] += val
                
if __name__ == "__main__":
    import sys
    f = open("test.txt", 'w')
    solution = Solution()
    for line in sys.stdin:
        testcase = int(line)
        for tc in range(testcase):
            f.write('-----\n')
            f.flush()
            print >>f, "Case #%d:" % (tc+1),
            A = []
            for line in sys.stdin:
                A.append([int(x) for x in line.strip().split()])
            solution.updateMatrix(A)
            for row in A:
                print >>f, ', '.join(map(str,row)),
            print >>f

################################################################

Solution:
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0], [7, 0, 7, 0, 0, 0], [7, 0, 7, 0, 0, 0], [3, 0, 3, 0, 0, 0], [7, 0, 7, 0, 0, 0], [7, 0, 7, 0, 3, 0], [3, 0, 3, 0, 7, 0], [0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]

