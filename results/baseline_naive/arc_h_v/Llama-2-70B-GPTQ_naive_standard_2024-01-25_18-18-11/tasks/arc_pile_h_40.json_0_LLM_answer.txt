Input token: 697
Output token: 633
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 6, 0], [4, 0, 0, 4], [1, 1, 0, 1], [0, 0, 0, 0]]
output: [[6, 0, 0, 0], [4, 4, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0]]

Example_2:
input: [[5, 0, 5, 5, 0, 0], [7, 0, 0, 7, 0, 7], [4, 0, 0, 4, 0, 0], [0, 0, 9, 9, 9, 0], [0, 0, 0, 0, 0, 8], [0, 2, 0, 0, 2, 0]]
output: [[5, 5, 5, 0, 0, 0], [7, 7, 7, 0, 0, 0], [4, 4, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0], [8, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0], [0, 0, 0, 6, 0, 6], [0, 0, 1, 0, 0, 0], [0, 5, 0, 5, 5, 0], [0, 0, 3, 0, 3, 0]]
output: [[0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0], [3, 3, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 7, 0, 0], [8, 8, 0, 0, 0, 8], [1, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[7, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]
"""

import numpy as np
from typing import List


class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int) -> None:
        """
        找到最小的矩形，然后遍历该矩形中每个元素进行赋值。

        :param image: 图像数组
        :param sr: 起始位置的行号
        :param sc: 起始位置的列号
        :return: 无返回值
        """
        if not image or len(image) == 0 or sr < 0 or sc < 0:
            return

        # 记录当前点是否已经被标记过了
        visited = set()
        queue = [(sr, sc)]
        while queue:
            row, col = queue.pop(0)
            if (row, col) in visited:
                continue
            visited.add((row, col))
            image[row][col] = image[sr][sc]
            for i in range(-1, 2):
                for j in range(-1, 2):
                    if -1 <= row + i < len(image) \
                            and -1 <= col + j < len(image[0]) \
                            and (row + i, col + j)!= (sr, sc) \
                            and image[row + i][col + j] > image[sr][sc]:
                        queue.append((row + i, col + j))


if __name__ == '__main__':
    solution = Solution()
    print(solution.floodFill([[0, 0, 0, 7, 0, 0], [8, 8, 0, 0, 0, 8], [1, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]], 0, 0))

################################################################

Solution:
[[7, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0], [1, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]

