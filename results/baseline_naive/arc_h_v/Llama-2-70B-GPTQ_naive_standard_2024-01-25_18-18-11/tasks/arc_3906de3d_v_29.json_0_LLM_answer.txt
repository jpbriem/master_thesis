Input token: 2161
Output token: 831
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 2, 0]]
output: [[0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 2, 0, 2, 6, 6, 2, 0], [0, 0, 0, 2, 0, 0, 6, 6, 0, 0], [0, 0, 0, 2, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 6, 6, 6, 6, 0, 6, 6, 0], [0, 0, 6, 6, 6, 6, 0, 6, 6, 0], [0, 0, 6, 6, 6, 6, 0, 0, 6, 0], [0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 2, 0, 6, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 2, 2, 0, 2, 2, 2, 2, 0, 0]]
output: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 2, 6, 6, 6, 6, 2, 6, 6, 0], [0, 2, 6, 6, 6, 6, 2, 6, 6, 0], [0, 2, 6, 6, 6, 6, 2, 2, 6, 0], [0, 2, 2, 6, 6, 6, 2, 2, 0, 0], [0, 0, 2, 6, 2, 2, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 0, 6, 6, 0, 6, 6, 0], [0, 6, 0, 0, 6, 6, 0, 6, 6, 0], [0, 6, 0, 0, 0, 6, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 0, 2, 2, 0, 2, 2, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 0, 0]]
output: [[0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 6, 6, 2, 6, 6, 2, 6, 6, 0], [0, 6, 2, 2, 6, 6, 2, 6, 6, 0], [0, 6, 2, 2, 2, 6, 2, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 6, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 0, 6, 6, 6, 6, 6, 0, 0, 0], [6, 0, 6, 0, 6, 6, 6, 0, 0, 0], [6, 0, 6, 0, 6, 6, 6, 0, 0, 0], [6, 0, 0, 0, 0, 0, 6, 0, 0, 0], [6, 0, 0, 2, 0, 0, 6, 0, 0, 0], [0, 2, 0, 2, 0, 0, 6, 0, 0, 0], [0, 2, 0, 2, 2, 0, 0, 2, 0, 0], [0, 2, 0, 2, 2, 0, 0, 2, 0, 0], [0, 2, 0, 2, 2, 2, 0, 2, 0, 0]]
################################################################

LLM answer:

output: [[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 0, 6, 6, 6, 6, 6, 0, 0, 0], [6, 0, 6, 2, 6, 6, 6, 0, 0, 0], [6, 0, 6, 2, 6, 6, 6, 0, 0, 0], [6, 0, 0, 0, 0, 0, 6, 0, 0, 0], [6, 0, 0, 2, 0, 0, 6, 0, 0, 0], [0, 2, 0, 2, 0, 0, 6, 0, 0, 0], [0, 2, 0, 2, 2, 0, 0, 2, 0, 0], [0, 2, 0, 2, 2, 0, 0, 2, 0, 0], [0, 2, 0, 2, 2, 2, 0, 2, 0, 0]]
"""

import numpy as np
from typing import List


class Solution:
    def transform(self, image):
        """
        思路：
            将图片中的每一个元素都转换为最近邻居的值，如果没有邻居则保持原样。
            O(n)时间复杂度，O(1)空间复杂度
        :type image: List[List[int]]
        :rtype: List[List[int]]
        """
        if not image or not image[0]:
            return []

        rows = len(image)
        cols = len(image[0])
        for i in range(rows):
            for j in range(cols):
                if image[i][j] == 0:
                    continue
                left = right = up = down = None
                if i > 0:
                    left = image[i - 1][j]
                if i < rows - 1:
                    right = image[i + 1][j]
                if j > 0:
                    up = image[i][j - 1]
                if j < cols - 1:
                    down = image[i][j + 1]
                if left is not None and right is not None \
                   and up is not None and down is not None:
                    image[i][j] = min(left, right, up, down)
                elif left is not None and right is not None:
                    image[i][j] = min(left, right)
                elif left is not None and up is not None:
                    image[i][j] = min(left, up)
                elif left is not None and down is not None:
                    image[i][j] = min(left, down)
                elif right is not None and up is not None:
                    image[i][j] = min(right, up)
                elif right is not None and down is not None:
                    image[i][j] = min(right, down)
                elif up is not None and down is not None:
                    image[i][j] = min(up, down)
        return image

################################################################

Solution:
[[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 2, 6, 6, 6, 6, 6, 2, 0, 0], [6, 2, 6, 2, 6, 6, 6, 2, 0, 0], [6, 2, 6, 2, 6, 6, 6, 2, 0, 0], [6, 2, 0, 2, 2, 2, 6, 0, 0, 0], [6, 0, 0, 2, 2, 0, 6, 0, 0, 0], [0, 0, 0, 2, 2, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

