Input token: 478
Output token: 367
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 6, 0, 0], [0, 0, 0, 0], [0, 8, 0, 0], [7, 0, 7, 0]]
output: [[6, 0, 0, 0], [0, 0, 0, 0], [8, 0, 0, 0], [7, 7, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0], [0, 8, 8, 8, 0], [0, 0, 9, 9, 0], [6, 0, 0, 0, 0], [0, 4, 0, 4, 4]]
output: [[0, 0, 0, 0, 0], [8, 8, 8, 0, 0], [9, 9, 0, 0, 0], [6, 0, 0, 0, 0], [4, 4, 4, 0, 0]]

Example_3:
input: [[0, 4, 4, 0], [0, 0, 0, 0], [6, 6, 0, 6], [0, 5, 5, 0]]
output: [[4, 4, 0, 0], [0, 0, 0, 0], [6, 6, 6, 0], [5, 5, 0, 0]]

Test case:
input: [[0, 0, 4, 4, 4], [0, 0, 6, 0, 0], [0, 0, 7, 0, 7], [9, 9, 0, 0, 9], [0, 8, 0, 8, 0]]
################################################################

LLM answer:

output: [[4, 4, 4, 0, 0], [6, 0, 7, 0, 7], [9, 9, 0, 0, 9], [8, 8, 0, 0, 8]]
"""
# Definition for a point.
class Point(object):
    def __init__(self, x=None, y=None):
        self.x = x
        self.y = y

def spiralOrder(matrix):
    """
    :type matrix: List[List[int]]
    :rtype: List[List[int]]
    """
    if not matrix or len(matrix) == 0: return []
    
    m = len(matrix)
    n = len(matrix[0])
    result = []
    i = j = k = 0
    while True:
        for _ in range(n - j * 2 + 1):
            result.append([matrix[i][j]])
        for _ in range(m - (k+1)):
            result.extend(matrix[i].copy())
        
        for _ in range(n - j*2 + 1):
            result.extend(matrix[--k].copy().reverse())
            
        for _ in range(m-(k+1)):
            result.extend(matrix[-i-1].copy()[:-1])
                
        if i < m-1:
            i += 1
        else:
            break
        j += 1
        k -= 1
    return result
################################################################

Solution:
[[4, 4, 4, 0, 0], [6, 0, 0, 0, 0], [7, 7, 0, 0, 0], [9, 9, 9, 0, 0], [8, 8, 0, 0, 0]]

