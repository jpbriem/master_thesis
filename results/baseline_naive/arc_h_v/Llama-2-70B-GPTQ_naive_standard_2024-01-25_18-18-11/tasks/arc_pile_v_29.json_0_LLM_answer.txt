Input token: 784
Output token: 966
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 5, 0, 0], [1, 0, 0, 5, 0, 0], [0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0], [0, 0, 0, 5, 0, 3]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 6, 5, 0, 0], [0, 0, 6, 5, 0, 0], [1, 0, 6, 5, 0, 3]]

Example_2:
input: [[0, 0, 0, 0, 7, 0], [0, 0, 9, 0, 0, 0], [0, 5, 0, 8, 0, 4], [0, 0, 0, 8, 0, 0], [0, 0, 0, 8, 7, 4], [0, 5, 9, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0], [0, 5, 9, 8, 7, 4], [0, 5, 9, 8, 7, 4]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0], [0, 1, 0, 9, 0, 0], [0, 1, 0, 9, 0, 6]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 1, 0, 9, 0, 0], [0, 1, 0, 9, 0, 0], [0, 1, 0, 9, 0, 6]]

Test case:
input: [[5, 2, 0, 0, 4], [0, 2, 0, 0, 0], [5, 2, 7, 3, 0], [0, 0, 7, 3, 0], [0, 0, 0, 0, 4]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
"""

import numpy as np
from typing import List

class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        m = len(matrix)
        n = len(matrix[0])
        
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 0:
                    continue
                else:
                    self._update(matrix, i, j, matrix[i][j])
    
    def _update(self, matrix: List[List[int]], i: int, j: int, val: int)->None:
        # print("i", i, "j", j, "val", val)
        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):
            return None
            
        if matrix[i][j] > val:
            matrix[i][j] = val
            return None
        
        if matrix[i][j] <= val:
            return None
        
        if i - 1 >= 0 and matrix[i - 1][j] > val:
            matrix[i - 1][j] = val
            self._update(matrix, i - 1, j, val)
        
        if i + 1 < len(matrix) and matrix[i + 1][j] > val:
            matrix[i + 1][j] = val
            self._update(matrix, i + 1, j, val)
        
        if j - 1 >= 0 and matrix[i][j - 1] > val:
            matrix[i][j - 1] = val
            self._update(matrix, i, j - 1, val)
        
        if j + 1 < len(matrix[0]) and matrix[i][j + 1] > val:
            matrix[i][j + 1] = val
            self._update(matrix, i, j + 1, val)
        
        if i - 1 >= 0 and j - 1 >= 0 and matrix[i - 1][j - 1] > val:
            matrix[i - 1][j - 1] = val
            self._update(matrix, i - 1, j - 1, val)
        
        if i + 1 < len(matrix) and j - 1 >= 0 and matrix[i + 1][j - 1] > val:
            matrix[i + 1][j - 1] = val
            self._update(matrix, i + 1, j - 1, val)
        
        if i - 1 >= 0 and j + 1 < len(matrix[0]) and matrix[i - 1][j + 1] > val:
            matrix[i - 1][j + 1] = val
            self._update(matrix, i - 1, j + 1, val)
        
        if i + 1 < len(matrix) and j + 1 < len(matrix[0]) and matrix[i + 1][j + 1] > val:
            matrix[i + 1][j + 1] = val
            self._update(matrix, i + 1, j + 1, val)
        
if __name__ == '__main__':
    solution = Solution()
    result = solution.updateMatrix([[5, 2, 0, 0, 4], [0, 2, 0, 0, 0], [5, 2, 7, 3, 0], [0, 0, 7, 3, 0], [0, 0, 0, 0, 4]])
    print(result)
################################################################

Solution:
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 0, 0], [5, 2, 7, 3, 4], [5, 2, 7, 3, 4]]

