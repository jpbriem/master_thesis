Input token: 577
Output token: 610
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[3, 0, 0, 0], [3, 0, 0, 0], [3, 9, 2, 0], [0, 9, 0, 0]]
output: [[0, 0, 0, 0], [3, 0, 0, 0], [3, 9, 0, 0], [3, 9, 2, 0]]

Example_2:
input: [[0, 2, 0, 9, 0, 1], [0, 0, 0, 9, 5, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 5, 0], [8, 2, 0, 9, 5, 1]]

Example_3:
input: [[0, 0, 0, 8], [6, 1, 0, 0], [0, 1, 0, 0], [6, 0, 0, 0]]
output: [[0, 0, 0, 0], [0, 0, 0, 0], [6, 1, 0, 0], [6, 1, 0, 8]]

Test case:
input: [[0, 0, 0, 0, 0, 3], [8, 0, 0, 0, 0, 0], [0, 1, 6, 0, 2, 0], [8, 0, 6, 7, 0, 3], [0, 0, 6, 0, 2, 0], [0, 1, 0, 7, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 1, 6, 0, 2, 0], [8, 0, 6, 7, 0, 3], [0, 0, 6, 0, 2, 0], [0, 1, 0, 7, 0, 0]]
"""
from typing import List
class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix or not len(matrix): return []
        
        m = len(matrix)
        n = len(matrix[0])
        dp = [[float('inf') for _ in range(n)] for __ in range(m)]
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 0: continue
                
                dp[i][j] = float('inf')
                for k in [-1, 0, 1]:
                    for l in [-1, 0, 1]:
                        if (k!= 0 or l!= 0) and \
                           (0 <= i + k < m and 0 <= j + l < n) and \
                           matrix[i+k][j+l] > matrix[i][j]:
                            
                            dp[i][j] = min(dp[i][j], matrix[i+k][j+l]+abs(i - i+k)+abs(j - j+l))
        ans = [[0 for _ in range(n)] for __ in range(m)]
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 0: continue
                
                ans[i][j] = matrix[i][j]
                for k in [-1, 0, 1]:
                    for l in [-1, 0, 1]:
                        if (k!= 0 or l!= 0) and \
                           (0 <= i + k < m and 0 <= j + l < n) and \
                           matrix[i+k][j+l] > matrix[i][j]:
                            
                            ans[i][j] = max(ans[i][j], matrix[i+k][j+l]+abs(i - i+k)+abs(j - j+l)-dp[i+k][j+l])
        return ans
################################################################

Solution:
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0], [8, 1, 6, 7, 2, 3], [8, 1, 6, 7, 2, 3]]

