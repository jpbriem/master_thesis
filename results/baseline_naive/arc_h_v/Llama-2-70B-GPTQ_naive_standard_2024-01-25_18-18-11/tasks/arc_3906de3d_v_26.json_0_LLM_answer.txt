Input token: 2161
Output token: 776
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 8, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]]
output: [[0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 8, 1, 0, 0], [0, 0, 0, 8, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 0, 8, 8, 8, 0], [0, 8, 8, 8, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 8, 0, 8, 0, 8, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [0, 0, 8, 0, 0, 1, 8, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0]]
output: [[0, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 8, 8, 8, 1, 8, 8, 8, 0], [0, 8, 8, 8, 8, 1, 8, 1, 8, 0], [0, 8, 8, 8, 8, 1, 8, 1, 8, 0], [0, 0, 8, 1, 0, 1, 8, 0, 1, 0], [0, 0, 8, 1, 0, 0, 8, 0, 1, 0], [0, 0, 8, 1, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [8, 8, 8, 8, 8, 0, 8, 8, 8, 0], [8, 8, 8, 8, 8, 0, 8, 8, 8, 0], [8, 8, 8, 8, 0, 0, 8, 8, 8, 0], [8, 8, 8, 0, 0, 1, 8, 0, 8, 0], [8, 0, 8, 0, 0, 1, 0, 0, 0, 0], [8, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0]]
output: [[8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [8, 8, 8, 8, 8, 1, 8, 8, 8, 0], [8, 8, 8, 8, 8, 1, 8, 8, 8, 0], [8, 8, 8, 8, 1, 1, 8, 8, 8, 0], [8, 8, 8, 0, 0, 1, 8, 0, 8, 0], [8, 0, 8, 0, 0, 1, 0, 0, 1, 0], [8, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0]]
"""

import collections

class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        """
        
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return
            
        m = len(matrix)
        n = len(matrix[0])
                    
        for i in range(m):
            for j in range(n):
                if matrix[i][j]!= 0:
                    self._update(matrix, i, j, m, n)
                    
        for i in range(m):
            for j in range(n):
                if matrix[i][j] > 0:
                    matrix[i][j] -= 1
                    
    def _update(self, matrix, i, j, m, n):
        queue = collections.deque()
        queue.append((i, j))
        while queue:
            x, y = queue.popleft()
            if (x - 1 >= 0 and matrix[x - 1][y] == 0) \
               or (x + 1 < m and matrix[x + 1][y] == 0) \
               or (y - 1 >= 0 and matrix[x][y - 1] == 0) \
               or (y + 1 < n and matrix[x][y + 1] == 0):
                matrix[x][y] += 1
                if x - 1 >= 0:
                    queue.append((x - 1, y))
                if x + 1 < m:
                    queue.append((x + 1, y))
                if y - 1 >= 0:
                    queue.append((x, y - 1))
                if y + 1 < n:
                    queue.append((x, y + 1))

################################################################

Solution:
[[0, 0, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 1, 8, 1, 1, 8, 8, 0, 0], [0, 0, 1, 8, 1, 1, 8, 8, 0, 0], [0, 0, 1, 1, 1, 1, 8, 1, 0, 0], [0, 0, 1, 0, 0, 0, 8, 1, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

