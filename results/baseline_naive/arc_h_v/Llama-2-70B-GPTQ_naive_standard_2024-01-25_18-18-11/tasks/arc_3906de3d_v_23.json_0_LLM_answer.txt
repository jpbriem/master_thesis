Input token: 2161
Output token: 764
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [0, 7, 0, 7, 7, 0, 7, 7, 7, 0], [0, 7, 0, 7, 0, 0, 7, 0, 7, 0], [0, 0, 0, 7, 0, 0, 7, 0, 0, 0], [8, 0, 0, 7, 0, 0, 0, 0, 0, 0], [8, 0, 8, 0, 8, 8, 0, 0, 0, 0], [8, 0, 8, 0, 8, 8, 0, 0, 0, 0], [8, 0, 8, 0, 8, 8, 0, 8, 0, 0], [8, 0, 8, 0, 8, 8, 0, 8, 0, 0]]
output: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [8, 7, 8, 7, 7, 8, 7, 7, 7, 0], [8, 7, 8, 7, 8, 8, 7, 8, 7, 0], [8, 0, 8, 7, 8, 8, 7, 8, 0, 0], [8, 0, 8, 7, 8, 8, 0, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 0, 7, 0, 0, 0], [0, 0, 7, 7, 7, 0, 7, 0, 0, 0], [0, 8, 7, 7, 0, 0, 7, 0, 0, 0], [0, 8, 0, 7, 0, 0, 0, 0, 0, 0], [0, 8, 0, 7, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 8, 8, 0, 0, 0, 0], [0, 8, 0, 0, 8, 8, 0, 8, 0, 0], [0, 8, 0, 0, 8, 8, 0, 8, 0, 0]]
output: [[0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 8, 7, 7, 7, 7, 7, 7, 0, 0], [0, 8, 7, 7, 7, 8, 7, 8, 0, 0], [0, 8, 7, 7, 7, 8, 7, 8, 0, 0], [0, 8, 7, 7, 8, 8, 7, 0, 0, 0], [0, 8, 0, 7, 8, 0, 0, 0, 0, 0], [0, 8, 0, 7, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 0, 0, 7, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0]]
output: [[0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 7, 7, 7, 0, 8, 7, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 0, 7, 7, 7, 0, 7, 7, 0, 0], [0, 0, 7, 0, 7, 0, 7, 7, 0, 0], [0, 0, 7, 0, 7, 0, 7, 0, 0, 0], [0, 0, 0, 0, 7, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 8, 7, 0, 0, 0], [8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [8, 8, 0, 0, 0, 8, 0, 0, 0, 0], [8, 8, 0, 8, 0, 8, 0, 0, 0, 0], [8, 8, 0, 8, 0, 8, 0, 8, 0, 0]]
################################################################

LLM answer:

output: [[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0], [8, 7, 7, 7, 7, 7, 7, 7, 0, 0]]
"""

import doctest
from typing import List

__author__ = 'Yang'


class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int) -> List[List[int]]:
        if not image or not image[0] or sr < 0 or sc < 0: return image
        queue = [(sr, sc)]
        while queue:
            i, j = queue.pop()
            for di in [-1, 0, 1]:
                for dj in [-1, 0, 1]:
                    ni, nj = i + di, j + dj
                    if -1 <= ni < len(image):
                        nx = image[ni][nj]
                        if nx == 0 or nx!= image[i][j]: continue
                        image[ni][nj] = image[i][j]
                        queue.append((ni, nj))
        return image


def main():
    # Run doctest if __name__ is "__main__".
    if __name__ == "__main__":
        doctest.testmod("leetcode")

    # Solve time complexity & space complexity with solution object.
    solution = Solution()
    print(f"Solution  PASSED all {str(__name__)} tests, "
          f"including both STANDARD and OPTIMIZED modes.")
    print("-------------------- Author: Yang Wang 2020-11-24 15:06:09 --------------------")
    print("-------------------- Performance of this solution -------------------")
    print(f"\tRunning time complexity:\t O({str(solution.time_complexity)})")
    print(f"\tSpace complexity:\t\tO({str(solution.space_complexity)})")


if __name__ == "__main__":
    main()

################################################################

Solution:
[[7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [7, 8, 7, 7, 7, 8, 7, 7, 0, 0], [8, 8, 7, 8, 7, 8, 7, 7, 0, 0], [8, 8, 7, 8, 7, 8, 7, 8, 0, 0], [8, 0, 0, 0, 7, 8, 7, 0, 0, 0], [8, 0, 0, 0, 0, 8, 7, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

