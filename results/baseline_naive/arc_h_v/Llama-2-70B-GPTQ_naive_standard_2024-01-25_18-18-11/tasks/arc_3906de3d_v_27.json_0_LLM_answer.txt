Input token: 2161
Output token: 638
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 0, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 0, 5, 5, 0, 5, 5, 9, 0], [0, 0, 9, 5, 0, 0, 0, 5, 9, 0], [0, 0, 9, 0, 0, 0, 0, 0, 9, 0], [0, 0, 9, 0, 0, 0, 0, 0, 9, 0], [0, 0, 9, 0, 0, 0, 0, 0, 9, 0]]
output: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 9, 0], [0, 5, 9, 5, 5, 5, 5, 5, 9, 0], [0, 0, 9, 5, 5, 0, 5, 5, 9, 0], [0, 0, 9, 5, 5, 0, 5, 5, 9, 0], [0, 0, 9, 5, 0, 0, 0, 5, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 0, 5, 5, 0, 0, 0, 0], [0, 9, 5, 0, 5, 0, 0, 0, 0, 0], [0, 9, 0, 0, 5, 0, 0, 0, 9, 0], [0, 9, 0, 0, 0, 0, 0, 0, 9, 0], [0, 9, 0, 0, 0, 9, 0, 0, 9, 0], [0, 9, 0, 0, 0, 9, 0, 0, 9, 0]]
output: [[0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 9, 5, 5, 5, 5, 5, 5, 5, 0], [0, 9, 5, 5, 5, 5, 5, 5, 5, 0], [0, 9, 5, 5, 5, 5, 5, 5, 9, 0], [0, 9, 5, 0, 5, 5, 0, 0, 9, 0], [0, 9, 5, 0, 5, 9, 0, 0, 9, 0], [0, 0, 0, 0, 5, 9, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 0, 5, 5, 5, 5, 0, 0], [0, 5, 5, 0, 0, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 0, 0], [9, 0, 0, 0, 0, 5, 0, 5, 0, 0], [9, 0, 0, 9, 0, 5, 0, 5, 0, 0], [9, 9, 0, 9, 0, 0, 0, 0, 0, 0], [9, 9, 0, 9, 9, 0, 0, 0, 0, 0], [9, 9, 0, 9, 9, 0, 0, 0, 0, 0]]
output: [[5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [9, 5, 5, 5, 5, 5, 5, 5, 0, 0], [9, 5, 5, 9, 5, 5, 5, 5, 0, 0], [9, 5, 5, 9, 9, 5, 5, 5, 0, 0], [9, 9, 0, 9, 9, 5, 5, 5, 0, 0], [9, 9, 0, 9, 0, 5, 0, 5, 0, 0], [0, 9, 0, 0, 0, 5, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 0, 0], [0, 5, 5, 5, 5, 0, 5, 0, 0, 0], [0, 0, 5, 5, 5, 0, 5, 0, 0, 0], [0, 0, 5, 0, 5, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 9, 5, 0, 0, 0], [0, 0, 0, 9, 0, 9, 0, 9, 0, 0], [0, 9, 0, 9, 9, 9, 0, 9, 0, 0], [0, 9, 9, 9, 9, 9, 0, 9, 0, 0]]
################################################################

LLM answer:

output: [[0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
"""

import doctest
from typing import List

__author__ = 'Yang'


class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int) -> List[List[int]]:
        if not image or not image[0] or sr < 0 or sc < 0: return image
        queue = [(sr, sc)]
        while queue:
            i, j = queue.pop()
            if image[i][j] == -1: continue
            image[i][j] = -1
            for di in [-1, 0, 1]:
                for dj in [-1, 0, 1]:
                    x, y = i + di, j + dj
                    if (x >= 0 and x < len(image)) and (y >= 0 and y < len(image[0])) \
                            and image[x][y]!= -1 and image[x][y]!= 0:
                        queue.append((x, y))
        return image


def main():
    # Run doctest if __name__ is "__main__".
    if __name__ == "__main__":
        doctest.testmod()

    # Solve time complexity & space complexity with solution `solution`.
    pass


if __name__ == "__main__":
    main()

################################################################

Solution:
[[0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 9, 5, 5, 0, 0], [0, 5, 5, 5, 5, 9, 5, 9, 0, 0], [0, 9, 5, 5, 5, 9, 5, 9, 0, 0], [0, 9, 5, 9, 5, 9, 5, 9, 0, 0], [0, 0, 9, 9, 9, 0, 5, 0, 0, 0], [0, 0, 0, 9, 9, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

