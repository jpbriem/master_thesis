Input token: 619
Output token: 494
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0], [0, 7, 7, 7, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [7, 7, 7, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Example_2:
input: [[4, 0, 0, 4, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [8, 0, 8, 8, 0], [0, 0, 0, 0, 0]]
output: [[4, 4, 4, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [8, 8, 8, 0, 0], [0, 0, 0, 0, 0]]

Example_3:
input: [[4, 0, 0, 0, 4], [3, 0, 0, 0, 0], [8, 0, 0, 0, 0], [9, 0, 0, 9, 0], [1, 1, 0, 0, 0]]
output: [[4, 4, 0, 0, 0], [3, 0, 0, 0, 0], [8, 0, 0, 0, 0], [9, 9, 0, 0, 0], [1, 1, 0, 0, 0]]

Test case:
input: [[0, 9, 9, 0, 0, 0], [0, 0, 0, 3, 3, 3], [0, 0, 0, 7, 0, 7], [0, 0, 4, 4, 0, 4], [0, 0, 2, 0, 2, 0], [6, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 9, 9, 0, 0, 0], [0, 0, 0, 3, 3, 3], [0, 0, 0, 7, 0, 7], [0, 0, 4, 4, 0, 4], [0, 0, 2, 0, 2, 0], [6, 6, 6, 0, 0, 0]]
"""

import numpy as np
from typing import List


class Solution:
    def floodFill(self, image: List[List[int]], i: int, j: int) -> None:
        """
        找到最小值的位置，然后从这个点开始向四周填充。
        :param image:
        :param i:
        :param j:
        :return:
        """
        if not self._isValid(image, i - 1, j):
            return
        min_value = image[i][j]
        queue = [(i, j)]
        while len(queue) > 0:
            x, y = queue.pop()
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    new_x = x + dx
                    new_y = y + dy
                    if (new_x >= 0 and new_x < len(image)) \
                            and (new_y >= 0 and new_y < len(image[0])) \
                            and image[new_x][new_y] == min_value:
                        queue.append((new_x, new_y))
                        image[new_x][new_y] = image[i][j]
        return

    @staticmethod
    def _isValid(image: List[List[int]], i: int, j: int) -> bool:
        return i >= 0 and i < len(image) and j >= 0 and j < len(image[0])

################################################################

Solution:
[[9, 9, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0], [7, 7, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0], [2, 2, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0]]

