Input token: 625
Output token: 393
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0], [0, 0, 9, 0, 0, 0], [0, 0, 2, 0, 0, 2], [8, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 8, 8, 8], [0, 4, 0, 4, 0], [2, 2, 2, 0, 0], [0, 0, 0, 0, 0], [0, 6, 0, 0, 0]]
output: [[8, 8, 8, 0, 0], [4, 4, 0, 0, 0], [2, 2, 2, 0, 0], [0, 0, 0, 0, 0], [6, 0, 0, 0, 0]]

Example_3:
input: [[1, 1, 0, 1, 0], [3, 0, 0, 0, 0], [0, 0, 4, 0, 0], [8, 0, 8, 0, 0], [0, 6, 6, 0, 0]]
output: [[1, 1, 1, 0, 0], [3, 0, 0, 0, 0], [4, 0, 0, 0, 0], [8, 8, 0, 0, 0], [6, 6, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 5], [0, 0, 7, 0], [6, 0, 6, 0], [1, 1, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 5, 0], [0, 0, 7, 0], [6, 0, 6, 0], [1, 1, 0, 0]]
"""

import numpy as np
from typing import List

class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        
        Time complexity: O(m*n) where m is number of rows and n is number of columns.
        Space complexity: O(1).
        """
        if not matrix or not any([len(row) for row in matrix]):
            return

        m = len(matrix)
        n = len(matrix[0])
        directions = [(i, j) for i in range(-1, 2)] + [(j, -i) for j in range(-1, 2)]
        queue = collections.deque()
        for i in range(m):
            for j in range(n):
                if matrix[i][j]:
                    queue.append((i, j))
        while queue:
            (i, j), direction = queue.popleft(), directions.pop()
            x, y = i+direction[0], j+direction[1]
            if 0 <= x < m and 0 <= y < n and matrix[x][y] == 0:
                matrix[x][y] = matrix[i][j]+1
                queue.extend([(x, y), (x+direction[0], y+direction[1]), (x-direction[0], y-direction[1])])

################################################################

Solution:
[[5, 0, 0, 0], [7, 0, 0, 0], [6, 6, 0, 0], [1, 1, 0, 0]]

