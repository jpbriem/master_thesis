Input token: 685
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[9, 0, 9, 9, 0, 0], [0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 7], [0, 2, 0, 0, 2, 2], [0, 0, 6, 0, 6, 0], [0, 0, 0, 1, 1, 0]]
output: [[9, 9, 9, 0, 0, 0], [8, 8, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0], [6, 6, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0]]

Example_2:
input: [[0, 8, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [4, 4, 4, 0, 0], [0, 0, 0, 0, 0]]
output: [[8, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0], [4, 4, 4, 0, 0], [0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 5, 5, 0, 5], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [5, 5, 5, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0]]

Test case:
input: [[3, 0, 3, 0, 3, 0], [0, 0, 9, 9, 0, 0], [4, 4, 0, 0, 0, 4], [0, 5, 0, 5, 0, 0], [7, 7, 7, 0, 0, 0], [8, 8, 0, 8, 0, 0]]
################################################################

LLM answer:

output: [[3, 3, 3, 0, 0, 0], [9, 9, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0], [8, 8, 0, 8, 0, 0]]
"""

import numpy as np
from typing import List

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        
        Time complexity: O(n^2) where n is the number of rows/columns in the matrix.
        Space complexity: O(1).
        """
        # check if matrix has even or odd number of columns
        num_cols = len(matrix[0])
        if (num_cols % 2 == 0):
            # even number of columns
            
            # transpose the matrix
            for i in range(len(matrix)):
                for j in range(i+1, len(matrix[0])):
                    temp = matrix[j][i]
                    matrix[j][i] = matrix[i][j]
                    matrix[i][j] = temp
            
            # reverse each row from left to right
            for i in range(len(matrix)):
                matrix[i].reverse()
            
            # reverse each column from top to bottom
            for i in range(len(matrix[0])):
                matrix.reverse()
        else:
            # odd number of columns
            
            # transpose the matrix
            for i in range(len(matrix)):
                for j in range(i+1, len(matrix[0])):
                    temp = matrix[j][i]
                    matrix[j][i] = matrix[i][j]
                    matrix[i][j] = temp
            
            # reverse each row from left to right
            for i in range(len(matrix)):
                matrix[i].reverse()
            
            # reverse each column from top to bottom
            for i in range(len(matrix[0])):
                matrix.append([])
                matrix[-1].extend(reversed(matrix[i]))
                del matrix[i]
    
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        
        Time complexity: O(n^2) where n is the number of rows/columns in the matrix.
        Space complexity: O(1).
        """
        # check if matrix has even or odd number of columns
        num_rows = len(matrix)
        num_cols = len(matrix[0])
        if (num_cols % 2 == 0):
            # even number of columns
            
            # transpose the matrix
            for i in range(len(matrix)):
                for j in range(i+1, len(matrix[0])):
                    temp = matrix[j][i]
                    matrix[j][i] = matrix[i][j]
                    matrix[i][j] = temp
            
            # reverse each row from left to right
            for i in range(len(matrix)):
                matrix[i].reverse()
            
            # reverse each column from top to bottom
            for i in range(len(matrix[0])):
                matrix.reverse()
        else:
            # odd number of columns
            
            # transpose the matrix
            for i in range(len(matrix)):
                for j in range(i+1, len(matrix[0])):
                    temp = matrix[j][i]
                    matrix[j][i] = matrix[i][j]
                    matrix[i][j] = temp
            
            # reverse each row from left to right
            for i in range(len(matrix)):
                matrix[i].reverse()
            
            # reverse each column from top to bottom
            for i in range(len(matrix[0])):
                matrix.append([])
                matrix[-1].extend(reversed(matrix[i]))
                del matrix[i]
    
    def rotate(self, matrix: List[List[int]]) ->
################################################################

Solution:
[[3, 3, 3, 0, 0, 0], [9, 9, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0], [5, 5, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0], [8, 8, 8, 0, 0, 0]]

