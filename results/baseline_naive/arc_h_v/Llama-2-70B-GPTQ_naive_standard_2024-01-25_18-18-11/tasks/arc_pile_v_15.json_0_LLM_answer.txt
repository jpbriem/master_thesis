Input token: 598
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 6, 0, 0, 0], [0, 6, 5, 7, 0], [0, 0, 0, 0, 0], [0, 6, 0, 7, 0], [0, 0, 0, 7, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 6, 0, 7, 0], [0, 6, 0, 7, 0], [0, 6, 5, 7, 0]]

Example_2:
input: [[4, 0, 0, 5], [4, 0, 0, 0], [4, 3, 0, 5], [0, 3, 2, 5]]
output: [[0, 0, 0, 0], [4, 0, 0, 5], [4, 3, 0, 5], [4, 3, 2, 5]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 5], [9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 6, 0, 0, 2, 0], [9, 0, 0, 0, 0, 5]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [9, 6, 0, 0, 0, 5], [9, 6, 0, 0, 2, 5]]

Test case:
input: [[9, 0, 0, 0, 0], [9, 0, 0, 7, 2], [9, 6, 0, 7, 0], [0, 6, 4, 0, 0], [0, 6, 4, 7, 2]]
################################################################

LLM answer:

output: [[9, 0, 0, 0, 0], [9, 0, 0, 7, 2], [9, 6, 0, 7, 0], [0, 6, 4, 0, 0], [9, 6, 4, 7, 2]]
"""
# Definition for a point.
class Point(object):
    def __init__(self, x=None, y=None):
        self.x = x
        self.y = y

def get_max_point(points):
    max_point = None
    for p in points:
        if not max_point or (p[0] > max_point[0] and p[1] >= max_point[1]):
            max_point = p
    return max_point

def get_min_point(points):
    min_point = None
    for p in points:
        if not min_point or (p[0] < min_point[0] and p[1] <= min_point[1]):
            min_point = p
    return min_point

def get_leftmost_point(points):
    leftmost_point = None
    for p in points:
        if not leftmost_point or p[0] < leftmost_point[0]:
            leftmost_point = p
    return leftmost_point

def get_rightmost_point(points):
    rightmost_point = None
    for p in points:
        if not rightmost_point or p[0] > rightmost_point[0]:
            rightmost_point = p
    return rightmost_point

def get_topmost_point(points):
    topmost_point = None
    for p in points:
        if not topmost_point or p[1] > topmost_point[1]:
            topmost_point = p
    return topmost_point

def get_bottommost_point(points):
    bottommost_point = None
    for p in points:
        if not bottommost_point or p[1] < bottommost_point[1]:
            bottommost_point = p
    return bottommost_point

def get_bottom_right_corner(points):
    bottom_right_corner = None
    for p in points:
        if not bottom_right_corner or \
                (p[0] > bottom_right_corner[0] and p[1] > bottom_right_corner[1]):
            bottom_right_corner = p
    return bottom_right_corner

def get_bottom_left_corner(points):
    bottom_left_corner = None
    for p in points:
        if not bottom_left_corner or \
                (p[0] < bottom_left_corner[0] and p[1] > bottom_left_corner[1]):
            bottom_left_corner = p
    return bottom_left_corner

def get_top_right_corner(points):
    top_right_corner = None
    for p in points:
        if not top_right_corner or \
                (p[0] > top_right_corner[0] and p[1] < top_right_corner[1]):
            top_right_corner = p
    return top_right_corner

def get_top_left_corner(points):
    top_left_corner = None
    for p in points:
        if not top_left_corner or \
                (p[0] < top_left_corner[0] and p[1] < top_left_corner[1]):
            top_left_corner = p
    return top_left_corner

def get_all_corners(points):
    corners = []
    corners.append(get_top_left_corner(points))
    corners.append(get_top_right_corner(points))
    corners.append(get_bottom_left_corner(points))
    corners.append(get_bottom_right_corner(points)))
    return corners

def get_all_edges(points):
    edges = []
    edges.append([get_leftmost_point
################################################################

Solution:
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [9, 6, 0, 7, 0], [9, 6, 4, 7, 2], [9, 6, 4, 7, 2]]

