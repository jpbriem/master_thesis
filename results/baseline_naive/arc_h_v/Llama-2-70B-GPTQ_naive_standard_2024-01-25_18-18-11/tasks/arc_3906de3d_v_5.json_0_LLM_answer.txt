Input token: 2161
Output token: 687
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 6, 6, 6, 6, 6, 6, 0, 0], [0, 0, 6, 6, 6, 0, 6, 6, 0, 0], [0, 0, 6, 6, 6, 0, 6, 6, 0, 0], [0, 0, 6, 6, 6, 0, 6, 6, 0, 0], [0, 0, 6, 0, 6, 0, 0, 6, 0, 0], [0, 0, 6, 0, 6, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0]]
output: [[0, 0, 6, 6, 6, 6, 6, 6, 0, 0], [0, 0, 6, 6, 6, 2, 6, 6, 0, 0], [0, 0, 6, 6, 6, 2, 6, 6, 0, 0], [0, 0, 6, 6, 6, 2, 6, 6, 0, 0], [0, 0, 6, 2, 6, 2, 0, 6, 0, 0], [0, 0, 6, 0, 6, 0, 0, 0, 0, 0], [0, 0, 6, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 0, 0, 0], [0, 0, 0, 2, 0, 6, 0, 0, 0, 0], [0, 0, 0, 2, 0, 6, 0, 2, 0, 0], [0, 0, 0, 2, 2, 0, 0, 2, 2, 0], [0, 0, 0, 2, 2, 0, 0, 2, 2, 0], [0, 0, 0, 2, 2, 0, 0, 2, 2, 0]]
output: [[0, 0, 0, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 6, 2, 2, 0], [0, 0, 0, 2, 6, 6, 6, 2, 2, 0], [0, 0, 0, 2, 6, 6, 6, 2, 2, 0], [0, 0, 0, 2, 2, 6, 6, 2, 0, 0], [0, 0, 0, 2, 2, 6, 0, 0, 0, 0], [0, 0, 0, 2, 2, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_3:
input: [[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 6, 6, 6, 6, 0, 6, 6, 0, 0], [6, 6, 6, 6, 6, 0, 0, 6, 0, 0], [6, 6, 6, 0, 6, 0, 0, 6, 0, 0], [6, 6, 0, 0, 6, 0, 0, 6, 0, 0], [6, 0, 0, 0, 6, 2, 0, 6, 0, 0], [6, 0, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 2, 0, 2, 2, 0, 0, 0], [0, 0, 0, 2, 0, 2, 2, 0, 0, 0], [0, 0, 0, 2, 0, 2, 2, 0, 0, 0]]
output: [[6, 6, 6, 6, 6, 6, 6, 6, 0, 0], [6, 6, 6, 6, 6, 2, 6, 6, 0, 0], [6, 6, 6, 6, 6, 2, 2, 6, 0, 0], [6, 6, 6, 2, 6, 2, 2, 6, 0, 0], [6, 6, 0, 2, 6, 2, 2, 6, 0, 0], [6, 0, 0, 2, 6, 2, 2, 6, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 6, 0, 6, 0], [0, 0, 0, 6, 0, 0, 6, 0, 6, 0], [0, 0, 0, 6, 0, 0, 6, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 2, 2, 2, 0, 2, 2, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 6, 2, 6, 0], [0, 0, 0, 6, 6, 6, 6, 2, 6, 0], [0, 0, 0, 6, 6, 6, 6, 2, 0, 0], [0, 0, 0, 6, 6, 6, 0, 2, 0, 0], [0, 0, 0, 6, 6, 0, 0, 2, 0, 0], [0, 0, 0, 6, 6, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0]]
"""

import collections

class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        """
        
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return
            
        m = len(matrix)
        n = len(matrix[0])
                    
        for i in range(m):
            for j in range(n):
                if matrix[i][j]!= 0:
                    self._update(matrix, i, j, m, n)
                    
        for i in range(m):
            for j in range(n):
                if matrix[i][j] > 0:
                    matrix[i][j] -= 1
                    
    def _update(self, matrix, i, j, m, n):
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        queue = collections.deque()
        queue.append((i, j))
        while queue:
            x, y = queue.popleft()
            for dx, dy in directions:
                newx = x + dx
                newy = y + dy
                if newx >= 0 and newx < m and newy >= 0 and newy < n \
                   and matrix[newx][newy] > 0:
                    matrix[newx][newy] -= 1
                    queue.append((newx, newy))

################################################################

Solution:
[[0, 0, 0, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 6, 6, 6, 6, 2, 6, 0], [0, 0, 0, 6, 2, 2, 6, 2, 6, 0], [0, 0, 0, 6, 2, 2, 6, 2, 2, 0], [0, 0, 0, 6, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 0, 0, 0, 2, 2, 0], [0, 0, 0, 2, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

