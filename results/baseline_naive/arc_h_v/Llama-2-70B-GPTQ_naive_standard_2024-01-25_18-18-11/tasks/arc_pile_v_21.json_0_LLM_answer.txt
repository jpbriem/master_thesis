Input token: 685
Output token: 454
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 5, 0, 0, 4], [0, 5, 7, 0, 4], [6, 0, 0, 0, 0], [0, 5, 0, 9, 0], [6, 0, 0, 0, 4]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 5, 0, 0, 4], [6, 5, 0, 0, 4], [6, 5, 7, 9, 4]]

Example_2:
input: [[0, 8, 0, 7, 0, 0], [3, 0, 0, 7, 0, 0], [0, 8, 1, 0, 0, 9], [3, 0, 0, 0, 0, 9], [3, 8, 0, 7, 0, 0], [0, 0, 0, 0, 5, 9]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 8, 0, 7, 0, 9], [3, 8, 0, 7, 0, 9], [3, 8, 1, 7, 5, 9]]

Example_3:
input: [[0, 7, 4, 0, 1], [0, 0, 0, 0, 1], [2, 0, 4, 0, 0], [2, 7, 4, 0, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0], [2, 7, 4, 0, 1], [2, 7, 4, 0, 1]]

Test case:
input: [[3, 8, 5, 9, 2, 7], [0, 0, 5, 0, 2, 0], [0, 0, 0, 9, 0, 7], [0, 0, 5, 9, 0, 0], [0, 0, 0, 0, 2, 7], [0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
"""

import numpy as np
from typing import List

class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix or not len(matrix): return []
        
        m = len(matrix)
        n = len(matrix[0])
        dp = np.zeros((m+1,n+1))
        for i in range(len(dp)):
            for j in range(len(dp[i])):
                dp[i][j] = float('inf')
                
        for i in range(m):
            for j in range(n):
                if matrix[i][j]:
                    dp[i+1][j+1] = 0
                    
        for k in range(m):
            for l in range(n):
                if matrix[k][l]: continue
                for i in range(max(0,k-1),min(m,k+2)+1):
                    for j in range(max(0,l-1),min(n,l+2)+1):
                        if (i==k and j==l) or matrix[i][j]: continue
                        else:
                            dp[i+1][j+1] = min(dp[i+1][j+1], dp[k+1][l+1]+1)
        return dp[:m, :n].tolist()
################################################################

Solution:
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 5, 9, 2, 7], [0, 0, 5, 9, 2, 7], [3, 8, 5, 9, 2, 7]]

