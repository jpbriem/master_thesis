Input token: 664
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 9, 0, 4], [0, 6, 0, 9, 0, 0], [2, 0, 0, 0, 0, 0], [0, 6, 0, 0, 3, 0], [2, 0, 0, 9, 3, 0], [2, 0, 7, 0, 0, 4]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [2, 0, 0, 9, 0, 0], [2, 6, 0, 9, 3, 4], [2, 6, 7, 9, 3, 4]]

Example_2:
input: [[0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0], [0, 0, 7, 0, 0, 0], [5, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0], [5, 0, 7, 0, 0, 0], [5, 8, 7, 0, 0, 4]]

Example_3:
input: [[0, 0, 5, 0], [9, 6, 5, 7], [0, 6, 0, 7], [0, 6, 5, 7]]
output: [[0, 0, 0, 0], [0, 6, 5, 7], [0, 6, 5, 7], [9, 6, 5, 7]]

Test case:
input: [[8, 7, 0, 9, 0], [0, 7, 5, 0, 3], [0, 0, 0, 0, 0], [0, 0, 0, 9, 0], [0, 0, 0, 9, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
"""

# Definition for a point.
class Point(object):
    def __init__(self, x=None, y=None):
        self.x = x
        self.y = y

def spiralOrder(matrix):
    """
    :type matrix: List[List[int]]
    :rtype: List[List[int]]
    """
    if not matrix or len(matrix) == 0: return []
    
    m = len(matrix)
    n = len(matrix[0])
    result = [[0] * (n + 1)] * (m + 1)
    i, j = 0, 0
    while True:
        for k in range(j - i, min(i + 1, n), 1):
            result[i][k] += 1
            
        for l in range(i - j, max(-j, -(m)), -1):
            result[l][j] += 1
        
        for p in range(j + 1, min((i + 1), n)):
            result[p][j] -= 1
            
        for q in range(i + 1, min((i + 1), m)):
            result[q][j] -= 1
        
        i += 1
        j += 1
        if i > j: break
        
        for r in range(min(i, m), max(i - 1, -1), -1):
            result[r][i] -= 1
            
        for s in range(max(j, 0), min(j + 1, n) - 1, -1):
            result[i][s] -= 1
        
        i -= 1
        j -= 1
        if i < j: break
        
        for t in range(max(j, 0), min(j + 1, n) - 1, -1):
            result[t][j] += 1
            
        for u in range(min(i, m), max(i - 1, -1), -1):
            result[u][j] += 1
        
        i -= 1
        j -= 1
        if i <= j: break
        
        for v in range(max(i, 0), min(i + 1, n) - 1, -1):
            result[v][i] += 1
            
        for w in range(min(j, m), max(j - 1, -1), -1):
            result[w][i] += 1
        
        i += 1
        j += 1
        if i >= j: break
        
        for x in range(min(j, m), max(j - 1, -1), -1):
            result[x][j] -= 1
            
        for y in range(max(i, 0), min(i + 1, n) - 1, -1):
            result[j][y] -= 1
        
        i += 1
        j += 1
        if i >= j: break
        
        for z in range(max(i, 0), min(i + 1, n) - 1, -1):
            result[z][i] -= 1
            
        for aa in range(min(j, m), max(j - 1, -1), -1):
            result[aa][i] -= 1
        
        i += 1
        j += 1
        if i >= j: break
        
        for bb in range(max(i, 0), min(i + 1, n) - 1, -1):
            result[bb][j] += 1
            
        for cc in range(min(j, m), max(j - 1, -1), -1):
            result[cc][j] += 1
        
        i += 1
        j += 1
        if i >= j: break
        
       
################################################################

Solution:
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 9, 0], [0, 7, 0, 9, 0], [8, 7, 5, 9, 3]]

