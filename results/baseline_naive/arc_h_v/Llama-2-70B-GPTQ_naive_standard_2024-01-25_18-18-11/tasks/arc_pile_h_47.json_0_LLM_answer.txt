Input token: 757
Output token: 483
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[4, 0, 0, 0, 0, 0], [7, 0, 0, 7, 7, 0], [0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0], [8, 8, 8, 0, 0, 0], [0, 5, 5, 0, 0, 5]]
output: [[4, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0], [8, 8, 8, 0, 0, 0], [5, 5, 5, 0, 0, 0]]

Example_2:
input: [[0, 9, 0, 0, 0, 9], [0, 8, 0, 0, 0, 8], [0, 2, 0, 0, 0, 2], [0, 3, 0, 3, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 0]]
output: [[9, 9, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0], [7, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0]]

Test case:
input: [[8, 0, 0, 0], [0, 1, 1, 0], [5, 5, 5, 0], [9, 0, 0, 0]]
################################################################

LLM answer:

output: [[8, 8, 0, 0], [1, 1, 0, 0], [5, 5, 5, 0], [9, 9, 0, 0]]
"""

# Definition for a point.
class Point(object):
    def __init__(self, x=None, y=None):
        self.x = x
        self.y = y

def spiralOrder(matrix):
    """
    :type matrix: List[List[int]]
    :rtype: List[List[int]]
    """
    if not matrix or len(matrix) == 0: return []
    
    m = len(matrix)
    n = len(matrix[0])
    result = []
    i = j = k = 0
    while True:
        for _ in range(n - j * 2 + 1):
            result.append([matrix[i][j]])
            
        for _ in range(m - (k+1)*2 + 1):
            result.extend(matrix[i].copy())
        
        for _ in range(n - j*2 + 1):
            result.extend(matrix[-i-1::-1].copy().reverse())
        
        for _ in range(m-(k+1)*2+1):
            result.extend(matrix[:,-i-1:-i-1:-1].copy()[::-1])
        
        for _ in range(n-j*2+1):
            result.extend(matrix[:(-i-1)-(-i-1)][-i-1:-i-1:-1].copy()[::-1])
        
        if i < m - 1:
            i += 1
        else:
            break
        
        if j < n - 1:
            j += 1
        else:
            break
        
        if k < m - 1:
            k += 1
        else:
            break
        
        # print(result)
    return result

################################################################

Solution:
[[8, 0, 0, 0], [1, 1, 0, 0], [5, 5, 5, 0], [9, 0, 0, 0]]

