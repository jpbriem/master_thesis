Input token: 397
Output token: 396
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[8, 0, 0, 0], [3, 3, 3, 0], [0, 0, 2, 0], [0, 1, 1, 0]]
output: [[8, 0, 0, 0], [3, 3, 3, 0], [2, 0, 0, 0], [1, 1, 0, 0]]

Example_2:
input: [[2, 0, 0, 0], [7, 0, 7, 7], [0, 0, 0, 0], [0, 0, 0, 0]]
output: [[2, 0, 0, 0], [7, 7, 7, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

Example_3:
input: [[0, 4, 4, 4], [1, 0, 0, 0], [0, 5, 5, 0], [0, 0, 0, 0]]
output: [[4, 4, 4, 0], [1, 0, 0, 0], [5, 5, 0, 0], [0, 0, 0, 0]]

Test case:
input: [[9, 0, 0, 0], [0, 6, 6, 6], [0, 0, 5, 0], [0, 3, 0, 0]]
################################################################

LLM answer:

output: [[9, 0, 0, 0], [6, 6, 6, 0], [5, 0, 0, 0], [3, 0, 0, 0]]
"""
# Definition for a point.
class Point(object):
    def __init__(self, x=None, y=None):
        self.x = x
        self.y = y

def spiralOrder(matrix):
    """
    :type matrix: List[List[int]]
    :rtype: List[List[int]]
    """
    if not matrix or len(matrix) == 0: return []
    
    m = len(matrix)
    n = len(matrix[0])
    result = []
    i = j = k = 0
    while True:
        for _ in range(n - j * 2 + 1):
            result.append([matrix[i][j], matrix[k][j]])
            
        for _ in range(m - (i+k)*2 + 1):
            result.extend(matrix[i:i+k*2+1])
        
        for _ in range(n-(j+k)*2+1):
            result.append([matrix[i][n-j-k], matrix[m-i-k][n-j-k]])
        
        for _ in range((m-i-k)*2+1):
            result.extend(reversed(matrix[-i-k:-i]))
        
        if i >= m/2 and j >= n/2: break
        else:
            i += 1; j += 1; k += 1
    return result
################################################################

Solution:
[[9, 0, 0, 0], [6, 6, 6, 0], [5, 0, 0, 0], [3, 0, 0, 0]]

