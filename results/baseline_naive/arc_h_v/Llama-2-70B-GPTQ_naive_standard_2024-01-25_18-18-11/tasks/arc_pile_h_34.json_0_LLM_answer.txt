Input token: 718
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 0, 0], [5, 5, 5, 0, 0], [0, 0, 4, 0, 0], [7, 0, 0, 0, 7], [0, 0, 1, 0, 0]]
output: [[0, 0, 0, 0, 0], [5, 5, 5, 0, 0], [4, 0, 0, 0, 0], [7, 7, 0, 0, 0], [1, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0], [8, 8, 0, 8, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0]]

Example_3:
input: [[0, 0, 6, 0, 0, 6], [4, 0, 0, 4, 4, 0], [5, 5, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0]]
output: [[6, 6, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0], [5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 7, 0], [0, 2, 0, 2, 2], [0, 0, 9, 0, 0], [0, 3, 0, 0, 0], [0, 0, 0, 6, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 7, 0], [2, 2, 2, 0, 0], [9, 0, 9, 0, 0], [3, 0, 0, 0, 0], [0, 0, 0, 6, 0]]
"""

import numpy as np
from typing import List


class Solution:
    def floodFill(self, image: List[List[int]], i: int, j: int) -> None:
        """
        找到最小值的位置，然后从这个点开始向四周填充。
        :param image:
        :param i:
        :param j:
        :return:
        """
        if not self._isValid(image, i - 1, j):
            return
        if image[i][j] > image[i - 1][j]:
            image[i][j] = image[i - 1][j]
        else:
            return
        self.floodFill(image, i - 1, j)

    def _isValid(self, image: List[List[int]], i: int, j: int) -> bool:
        """
        判断是否越界
        :param image:
        :param i:
        :param j:
        :return:
        """
        return (0 <= i < len(image)) and (0 <= j < len(image[0]))

    def floodFill2(self, image: List[List[int]], i: int, j: int) -> None:
        """
        找到最大值的位置，然后从这个点开始向四周填充。
        :param image:
        :param i:
        :param j:
        :return:
        """
        if not self._isValid(image, i + 1, j):
            return
        if image[i][j] < image[i + 1][j]:
            image[i][j] = image[i + 1][j]
        else:
            return
        self.floodFill2(image, i + 1, j)

    def floodFill3(self, image: List[List[int]], i: int, j: int) -> None:
        """
        找到最小值的位置，然后从这个点开始向四周填充。
        :param image:
        :param i:
        :param j:
        :return:
        """
        if not self._isValid(image, i, j - 1):
            return
        if image[i][j] > image[i][j - 1]:
            image[i][j] = image[i][j - 1]
        else:
            return
        self.floodFill3(image, i, j - 1)

    def floodFill4(self, image: List[List[int]], i: int, j: int) -> None:
        """
        找到最大值的位置，然后从这个点开始向四周填充。
        :param image:
        :param i:
        :param j:
        :return:
        """
        if not self._isValid(image, i, j + 1):
            return
        if image[i][j] < image[i][j + 1]:
            image[i][j] = image[i][j + 1]
        else:
            return
        self.floodFill4(image, i, j + 1)

    def floodFill5(self, image: List[List[int]], i: int, j: int) -> None:
        """
        找到最小值的位置，然后从这个点开始向四周填充。
        :param image:
        :param i:
        :param j:
        :return:
        """
        if not self._isValid(image, i - 1, j - 1):
            return
        if image[i][j] > image[i - 1][j - 1]:
            image[i][j
################################################################

Solution:
[[7, 0, 0, 0, 0], [2, 2, 2, 0, 0], [9, 0, 0, 0, 0], [3, 0, 0, 0, 0], [6, 0, 0, 0, 0]]

