Input token: 571
Output token: 830
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[5, 0, 0, 0], [0, 0, 0, 0], [0, 7, 7, 7], [8, 0, 8, 0]]
output: [[5, 0, 0, 0], [0, 0, 0, 0], [7, 7, 7, 0], [8, 8, 0, 0]]

Example_2:
input: [[0, 7, 0, 0, 0], [0, 0, 0, 0, 5], [0, 0, 4, 0, 0], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0]]
output: [[7, 0, 0, 0, 0], [5, 0, 0, 0, 0], [4, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 9], [0, 4, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 3]]
output: [[9, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0]]

Test case:
input: [[5, 5, 0, 5], [0, 7, 0, 0], [4, 0, 0, 4], [0, 6, 0, 0]]
################################################################

LLM answer:

output: [[5, 5, 0, 5], [0, 7, 0, 0], [4, 0, 0, 4], [0, 6, 0, 0]]
"""

import unittest
from typing import List

class Solution:
    def sortArrayByParityII(self, nums: List[int]) -> None:
        """
        Time complexity: O(n)
        Space complexity: O(n)
        """
        if not nums or len(nums) == 1: return
        
        # find odd number in array
        odd = False
        for i in range(len(nums)):
            if nums[i] % 2!= 0:
                odd = True
                break
            
        # swap even numbers to left of odd number
        if odd:
            while True:
                j = i + 1
                while j < len(nums):
                    if nums[j] % 2 == 0:
                        nums[i], nums[j] = nums[j], nums[i]
                        break
                    else:
                        j += 1
                else:
                    break
                i += 1

# Your Solution object will be instantiated and called as such:
# obj = Solution()
# obj.sortArrayByParityII(nums)

class TestSolution(unittest.TestCase):
    def test_solution(self):
        solution = Solution()
        self.assertEqual([5, 5, 0, 5], solution.sortArrayByParityII([5, 5, 0, 5]))
        self.assertEqual([0, 7, 0, 0], solution.sortArrayByParityII([0, 7, 0, 0]))
        self.assertEqual([4, 0, 0, 4], solution.sortArrayByParityII([4, 0, 0, 4]))
        self.assertEqual([0, 6, 0, 0], solution.sortArrayByParityII([0, 6, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 9], solution.sortArrayByParityII([0, 0, 0, 0, 0, 9]))
        self.assertEqual([0, 4, 0, 0, 0, 0], solution.sortArrayByParityII([0, 4, 0, 0, 0, 0]))
        self.assertEqual([5, 0, 0, 0, 0, 0], solution.sortArrayByParityII([5, 0, 0, 0, 0, 0]))
        self.assertEqual([7, 7, 0, 0, 0, 0], solution.sortArrayByParityII([7, 7, 0, 0, 0, 0]))
        self.assertEqual([0, 0, 0, 0, 0, 0], solution.sortArrayByParityII([0, 0, 0, 0, 0, 0]))
        self.assertEqual([3, 3, 3, 0, 0, 0], solution.sortArrayByParityII([3, 3, 3, 0, 0, 0]))

if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[[5, 5, 5, 0], [7, 0, 0, 0], [4, 4, 0, 0], [6, 0, 0, 0]]

