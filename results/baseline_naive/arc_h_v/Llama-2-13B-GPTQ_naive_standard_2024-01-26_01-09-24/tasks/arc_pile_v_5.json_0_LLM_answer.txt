Input token: 457
Output token: 860
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 1, 4], [0, 0, 0, 0], [0, 8, 1, 4], [0, 0, 0, 4]]
output: [[0, 0, 0, 0], [0, 0, 0, 4], [0, 0, 1, 4], [0, 8, 1, 4]]

Example_2:
input: [[7, 0, 0, 3], [7, 9, 5, 0], [7, 0, 5, 0], [0, 0, 5, 0]]
output: [[0, 0, 0, 0], [7, 0, 5, 0], [7, 0, 5, 0], [7, 9, 5, 3]]

Example_3:
input: [[8, 0, 9, 0], [0, 6, 0, 0], [8, 0, 0, 0], [8, 0, 9, 0]]
output: [[0, 0, 0, 0], [8, 0, 0, 0], [8, 0, 9, 0], [8, 6, 9, 0]]

Test case:
input: [[7, 0, 3, 0, 0, 0], [0, 9, 0, 0, 0, 0], [0, 0, 0, 4, 2, 8], [7, 0, 0, 0, 2, 0], [0, 0, 0, 4, 0, 8], [7, 0, 3, 4, 0, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0, 0], [0, 9, 0, 0, 0, 0], [0, 0, 0, 4, 2, 8], [0, 0, 0, 4, 0, 8], [7, 0, 0, 0, 2, 0], [7, 0, 3, 4, 0, 0]]
"""

import unittest
from typing import List

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not write additional code.
        
        Descripton:
            Given an array nums of n integers where n > 0;
            
            Before calling your function, for each valid index i in range(n), nums[i] is guaranteed to be a non-negative integer.
            
            After calling your function, for each valid index i in range(n), nums[i] will still be a non-negative integer.
            
            Return nothing about the array nums.
            
            Example:
                Input: nums = [0,1,0,3,12]
                     Output: [1,3,12,0,0]
        """
        if len(nums) == 0: return
        left = 0
        right = len(nums)-1
        while True:
            if nums[left]!= 0:
                break
            else:
                left += 1
            if nums[right]!= 0:
                break
            else:
                right -= 1
            if left < right:
                temp = nums[left]
                nums[left] = nums[right]
                nums[right] = temp
                left += 1
                right -= 1

# Your Codec object will be instantiated and called as such:
# myCodec = Solution()
# myCodec.moveZeroes([0,1,0,3,12])

class TestCase(unittest.TestCase):
    def test_Solution(self):
        self.assertEqual(Solution().moveZeroes([0,1,0,3,12]), [1,3,12,0,0])
        self.assertEqual(Solution().moveZeroes([7, 0, 3, 0, 0, 0]), [0, 0, 0, 0, 0, 0])
        self.assertEqual(Solution().moveZeroes([0, 9, 0, 0, 0, 0]), [0, 9, 0, 0, 0, 0])
        self.assertEqual(Solution().moveZeroes([0, 0, 0, 4, 2, 8]), [0, 0, 0, 4, 2, 8])
        self.assertEqual(Solution().moveZeroes([7, 0, 0, 0, 2, 0]), [0, 0, 0, 0, 2, 0])
        self.assertEqual(Solution().moveZeroes([0, 0, 0, 4, 0, 8]), [0, 0, 0, 4, 0, 8])
        self.assertEqual(Solution().moveZeroes([7, 0, 3, 4, 0, 0]), [0, 0, 0, 4, 0, 8])

if __name__ == '__main__':
    unittest.main()
################################################################

Solution:
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [7, 0, 0, 4, 0, 0], [7, 0, 3, 4, 2, 8], [7, 9, 3, 4, 2, 8]]

