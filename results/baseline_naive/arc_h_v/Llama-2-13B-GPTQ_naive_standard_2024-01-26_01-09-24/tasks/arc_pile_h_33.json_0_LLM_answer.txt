Input token: 637
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 0, 0, 6, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 5, 0, 5], [0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [3, 0, 0, 3, 0, 0]]
output: [[6, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0]]

Example_2:
input: [[3, 3, 3, 0, 0, 0], [5, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0], [0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 9, 9]]
output: [[3, 3, 3, 0, 0, 0], [5, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0], [7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 9, 9, 0]]
output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [9, 9, 0, 0]]

Test case:
input: [[0, 3, 0, 3], [6, 6, 6, 0], [0, 0, 5, 5], [0, 8, 8, 8]]
################################################################

LLM answer:

output: [[0, 3, 0, 3], [6, 6, 6, 0], [0, 0, 5, 5], [0, 8, 8, 8]]
"""
from typing import List
import re

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not read beyond this line.

        :param matrix:
        :return:
        """
        if len(matrix) == 0 or len(matrix[0]) == 0: return
        n = len(matrix)
        m = len(matrix[0])
        for i in range(n):
            for j in range(m):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if matrix[i][j]!= 0:
                    break
            else:
                continue
            break
        for i in range(n
################################################################

Solution:
[[3, 3, 0, 0], [6, 6, 6, 0], [5, 5, 0, 0], [8, 8, 8, 0]]

