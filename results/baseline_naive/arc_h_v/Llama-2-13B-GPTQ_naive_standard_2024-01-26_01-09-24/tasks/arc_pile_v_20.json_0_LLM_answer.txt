Input token: 478
Output token: 785
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[7, 0, 0, 9], [0, 0, 2, 9], [0, 0, 0, 9], [0, 0, 2, 0]]
output: [[0, 0, 0, 0], [0, 0, 0, 9], [0, 0, 2, 9], [7, 0, 2, 9]]

Example_2:
input: [[0, 4, 0, 0], [0, 0, 0, 0], [0, 4, 0, 0], [0, 4, 0, 0]]
output: [[0, 0, 0, 0], [0, 4, 0, 0], [0, 4, 0, 0], [0, 4, 0, 0]]

Example_3:
input: [[0, 2, 0, 0, 4], [8, 0, 0, 9, 4], [8, 2, 0, 9, 4], [8, 0, 0, 0, 0], [0, 0, 0, 9, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [8, 0, 0, 9, 4], [8, 2, 0, 9, 4], [8, 2, 0, 9, 4]]

Test case:
input: [[7, 0, 2, 5, 0], [0, 4, 0, 0, 0], [7, 4, 2, 0, 6], [0, 0, 0, 5, 0], [0, 4, 0, 5, 6]]
################################################################

LLM answer:

output: [[0, 0, 0, 0, 0], [0, 4, 0, 0, 0], [0, 4, 0, 0, 0], [0, 4, 0, 0, 0], [0, 4, 0, 0, 0]]
"""

import unittest
from typing import List

class Solution:
    def toIncreasingOrder(self, nums: List[List[int]]) -> None:
        """
        Do not write additional code here.
        
        Pre-condition:
            Input is a list of lists where each inner list contains at most 1 integer.
            
        Post-condition:
            Return an array that has been sorted in increasing order.
        """
        if len(nums) == 0: return
        for i in range(len(nums)):
            if len(nums[i]) > 1:
                self._sort_list(nums, i)
        return
    
    def _sort_list(self, nums: List[List[int]], index: int):
        """
        Sorts the subarray starting from index.
        """
        # Base case
        if len(nums[index]) <= 1: return
        # Find the largest number in the subarray
        max_number = nums[index][0]
        for j in range(1, len(nums[index])):
            if nums[index][j] > max_number:
                max_number = nums[index][j]
        # Swap the largest number with the first element
        temp = nums[index][0]
        nums[index][0] = max_number
        nums[index].pop()
        # Recursively sort the rest of the subarray
        self._sort_list(nums, index + 1)
        # Put back the largest number
        nums[index][0] = temp

if __name__ == '__main__':
    testcase = [
        ([7, 0, 0, 9], [0, 0, 2, 9], [0, 0, 0, 9], [0, 0, 2, 0]),
        ([0, 4, 0, 0], [0, 0, 0, 0], [0, 4, 0, 0], [0, 4, 0, 0]),
        ([0, 2, 0, 0, 4], [8, 0, 0, 9, 4], [8, 2, 0, 9, 4], [8, 0, 0, 0, 0], [0, 0, 0, 9, 0]),
        ([7, 0, 2, 5, 0], [0, 4, 0, 0, 0], [7, 4, 2, 0, 6], [0, 0, 0, 5, 0], [0, 4, 0, 5, 6]),
    ]
    solution = Solution()
    for tc in testcase:
        print("Input:", tc[0])
        print("Output:", solution.toIncreasingOrder(tc[1]))

################################################################

Solution:
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 4, 0, 5, 0], [7, 4, 2, 5, 6], [7, 4, 2, 5, 6]]

