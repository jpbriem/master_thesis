
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'h', 'h', 'h', 'a'], ['b', 'b', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['h', 'h', 'h', 'a', 'a'], ['b', 'b', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['e', 'a', 'a', 'e', 'e'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['i', 'a', 'i', 'i', 'a'], ['a', 'a', 'a', 'a', 'a']]
output: [['e', 'e', 'e', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['i', 'i', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['e', 'a', 'a', 'a', 'e'], ['d', 'a', 'a', 'a', 'a'], ['i', 'a', 'a', 'a', 'a'], ['j', 'a', 'a', 'j', 'a'], ['b', 'b', 'a', 'a', 'a']]
output: [['e', 'e', 'a', 'a', 'a'], ['d', 'a', 'a', 'a', 'a'], ['i', 'a', 'a', 'a', 'a'], ['j', 'j', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a']]

Test case:
input: [['a', 'j', 'j', 'a', 'a', 'a'], ['a', 'a', 'a', 'd', 'd', 'd'], ['a', 'a', 'a', 'h', 'a', 'h'], ['a', 'a', 'e', 'e', 'a', 'e'], ['a', 'a', 'c', 'a', 'c', 'a'], ['g', 'a', 'a', 'a', 'a', 'a']]

###########################################################
Sample Outputs:
output: [['a', 'j', 'j', 'a', 'a', 'a'], ['a', 'a', 'a', 'd', 'd', 'd'], ['a', 'a', 'a', 'h', 'a', 'h'], ['a', 'a', 'e', 'e', 'a', 'e'], ['a', 'a', 'c', 'c', 'a', 'a'], ['g', 'g', 'a', 'a', 'a', 'a']]
*/

public class Solution {
    public String[][] expand(String[][] matrix) {
        if (matrix == null || matrix.length == 0) return matrix;
        int m = matrix.length, n = matrix[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j].equals("a")) continue;
                char c = matrix[i][j];
                // up
                for (int k = i - 1; k >= 0 && matrix[k][j].equals("a"); --k);
                if (k >= 0 && matrix[k][j]!= c) matrix[k + 1][j] = c;
                // down
                for (int k = i + 1; k < m && matrix[k][j].equals("a"); ++k);
                if (k < m && matrix[k][j]!= c) matrix[i][j] = c;
                // left
                for (int k = j - 1; k >= 0 && matrix[i][k].equals("a"); --k);
                if (k >= 0 && matrix[i][k]!= c) matrix[i][k + 1] = c;
                // right
                for (int k = j + 1; k < n && matrix[i][k].equals("a"); ++k);
                if (k < n && matrix[i][k]!= c) matrix[i][j] = c;
            }
        }
        return matrix;
    }
}


###########################################################
Result:
solution: [['j', 'j', 'a', 'a', 'a', 'a'], ['d', 'd', 'd', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a', 'a'], ['e', 'e', 'e', 'a', 'a', 'a'], ['c', 'c', 'a', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.00881057268722467

cat_success_cnt: 1

cat_success_rate: 0.037037037037037035

