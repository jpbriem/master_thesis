
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['h', 'a', 'a', 'j'], ['a', 'a', 'a', 'j'], ['a', 'a', 'a', 'j'], ['h', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j'], ['h', 'a', 'a', 'j'], ['h', 'a', 'a', 'j']]

Example_2:
input: [['a', 'c', 'g', 'a', 'a'], ['f', 'c', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a'], ['a', 'c', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['f', 'c', 'a', 'a', 'a'], ['f', 'c', 'a', 'a', 'a'], ['f', 'c', 'g', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'h'], ['a', 'a', 'a', 'h'], ['j', 'a', 'a', 'a'], ['j', 'a', 'a', 'h']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h'], ['j', 'a', 'a', 'h'], ['j', 'a', 'a', 'h']]

Test case:
input: [['a', 'j', 'h', 'a'], ['a', 'a', 'h', 'g'], ['b', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]

###########################################################
Sample Outputs:
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['b', 'a', 'a', 'a'], ['a', 'j', 'h', 'g']]
*/

public class Solution {
    public char[][] merge(char[][] grid) {
        if (grid == null || grid.length == 0) return new char[0][];
        int m = grid.length, n = grid[0].length;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j + 1 < n; ) {
                if (grid[i][j]!= '\u0000' && grid[i][j] == grid[i][j+1]) {
                    int k = j + 1;
                    while (k + 1 < n && grid[i][k] == grid[i][k+1]) ++k;
                    grid[i][j] += (char)(k - j);
                    for (int l = j + 1; l <= k; ++l) grid[i][l] = '\u0000';
                    j = k + 1;
                } else ++j;
            }
        }
        List<String> list = new ArrayList<>();
        for (int i = 0; i < m; ++i) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < n; ++j) {
                if (grid[i][j]!= '\u0000') sb.append(grid[i][j]);
            }
            list.add(sb.toString());
        }
        String[] res = new String[list.size()];
        for (int i = 0; i < res.length; ++i) res[i] = list.get(i);
        return Arrays.stream(res).map(s -> s.toCharArray()).toArray(char[][]::new);
    }
}


###########################################################
Result:
solution: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'h', 'a'], ['b', 'j', 'h', 'g']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.013559322033898305

cat_success_cnt: 0

cat_success_rate: 0.0

