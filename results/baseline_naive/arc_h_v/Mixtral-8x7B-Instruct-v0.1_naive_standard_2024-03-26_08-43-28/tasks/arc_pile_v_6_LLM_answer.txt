
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h'], ['g', 'a', 'i', 'a'], ['a', 'a', 'a', 'h']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h'], ['g', 'a', 'i', 'h']]

Example_2:
input: [['a', 'a', 'a', 'a', 'e'], ['a', 'i', 'j', 'a', 'e'], ['a', 'i', 'j', 'a', 'a'], ['a', 'i', 'a', 'a', 'e'], ['a', 'a', 'a', 'g', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'e'], ['a', 'i', 'j', 'a', 'e'], ['a', 'i', 'j', 'g', 'e']]

Example_3:
input: [['a', 'a', 'g', 'a'], ['e', 'a', 'a', 'f'], ['e', 'a', 'g', 'f'], ['a', 'a', 'g', 'a']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'g', 'a'], ['e', 'a', 'g', 'f'], ['e', 'a', 'g', 'f']]

Test case:
input: [['e', 'a', 'h', 'j', 'a'], ['e', 'a', 'a', 'a', 'i'], ['e', 'g', 'h', 'a', 'a'], ['a', 'a', 'a', 'j', 'i'], ['a', 'a', 'a', 'j', 'a']]

###########################################################
Sample Outputs:
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'i'], ['e', 'g', 'h', 'a', 'a'], ['e', 'g', 'h', 'j', 'i']]
*/

public class Solution {
    public String[][] expand(String[][] mat) {
        if (mat == null || mat.length == 0 || mat[0].length == 0) return mat;
        int m = mat.length, n = mat[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!visited[i][j]) dfs(mat, visited, i, j);
            }
        }
        return mat;
    }

    private void dfs(String[][] mat, boolean[][] visited, int x, int y) {
        if (x < 0 || x >= mat.length || y < 0 || y >= mat[0].length || visited[x][y] || mat[x][y].equals(".")) return;
        char c = mat[x][y];
        visited[x][y] = true;
        dfs(mat, visited, x - 1, y);
        dfs(mat, visited, x + 1, y);
        dfs(mat, visited, x, y - 1);
        dfs(mat, visited, x, y + 1);
        // replace all the same characters with "a" in this area
        for (int i = 0; i < mat.length; ++i) {
            for (int j = 0; j < mat[0].length; ++j) {
                if (visited[i][j] && mat[i][j].equals(c)) mat[i][j] = "a";
            }
        }
    }
}


###########################################################
Result:
solution: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'j', 'a'], ['e', 'a', 'h', 'j', 'i'], ['e', 'g', 'h', 'j', 'i']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.013468013468013467

cat_success_cnt: 0

cat_success_rate: 0.0

