{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'c', 'a', 'j'], ['a', 'a', 'c', 'h', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h', 'a']]\noutput: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'c', 'h', 'a'], ['a', 'a', 'c', 'h', 'j']]\n\nExample_2:\ninput: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['h', 'a', 'a', 'a', 'f', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'a']]\noutput: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['h', 'a', 'a', 'a', 'f', 'i']]\n\nExample_3:\ninput: [['a', 'b', 'j', 'a', 'a'], ['h', 'b', 'a', 'f', 'a'], ['a', 'a', 'a', 'f', 'a'], ['a', 'b', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'a']]\noutput: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'b', 'a', 'f', 'a'], ['a', 'b', 'a', 'f', 'a'], ['h', 'b', 'j', 'f', 'a']]\n\nTest case:\ninput: [['h', 'g', 'd', 'a'], ['a', 'g', 'd', 'a'], ['h', 'a', 'a', 'c'], ['h', 'a', 'd', 'a']]\n\n###########################################################\nSample Outputs:\noutput: [['h', 'g', 'd', 'a'], ['h', 'a', 'a', 'c'], ['h', 'a', 'd', 'a'], ['a', 'g', 'd', 'a']]\n*/\n\npublic class Solution {\n    public int[][] updateMatrix(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return new int[0][];\n        Queue<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[0].length; j++) {\n                if (matrix[i][j] == 0) {\n                    queue.offer(i * matrix[0].length + j);\n                } else {\n                    matrix[i][j] = Integer.MAX_VALUE;\n                }\n            }\n        }\n        int[] dirs = {-1, 0, 1, 0, -1};\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            int x = cur / matrix[0].length;\n            int y = cur % matrix[0].length;\n            for (int k = 0; k < 4; k++) {\n                int nx = x + dirs[k];\n                int ny = y + dirs[k+1];\n                if (nx >= 0 && nx < matrix.length && ny >= 0 && ny < matrix[0].length && matrix[nx][ny] > matrix[x][y] + 1) {\n                    matrix[nx][ny] = matrix[x][y] + 1;\n                    queue.offer(nx * matrix[0].length + ny);\n                }\n            }\n        }\n        return matrix;\n    }\n}"
        }
    ],
    "idx": 286,
    "task": "arc_pile_v_41",
    "category": "pile_v",
    "ys": [
        "arc_pile_v_41.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[['a', 'a', 'a', 'a'], ['h', 'a', 'd', 'a'], ['h', 'g', 'd', 'a'], ['h', 'g', 'd', 'c']]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.013937282229965157,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 270003,
        "prompt_tokens": 539270,
        "cost": null
    }
}