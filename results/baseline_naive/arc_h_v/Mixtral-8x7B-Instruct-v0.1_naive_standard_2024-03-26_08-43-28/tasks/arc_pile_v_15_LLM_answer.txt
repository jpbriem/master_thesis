
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'g', 'a', 'a', 'a'], ['a', 'g', 'f', 'h', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'g', 'a', 'h', 'a'], ['a', 'a', 'a', 'h', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'g', 'a', 'h', 'a'], ['a', 'g', 'a', 'h', 'a'], ['a', 'g', 'f', 'h', 'a']]

Example_2:
input: [['e', 'a', 'a', 'f'], ['e', 'a', 'a', 'a'], ['e', 'd', 'a', 'f'], ['a', 'd', 'c', 'f']]
output: [['a', 'a', 'a', 'a'], ['e', 'a', 'a', 'f'], ['e', 'd', 'a', 'f'], ['e', 'd', 'c', 'f']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'g', 'a', 'a', 'a', 'f'], ['j', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['j', 'g', 'a', 'a', 'c', 'a'], ['j', 'a', 'a', 'a', 'a', 'f']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['j', 'a', 'a', 'a', 'a', 'a'], ['j', 'g', 'a', 'a', 'a', 'f'], ['j', 'g', 'a', 'a', 'c', 'f']]

Test case:
input: [['j', 'a', 'a', 'a', 'a'], ['j', 'a', 'a', 'h', 'c'], ['j', 'g', 'a', 'h', 'a'], ['a', 'g', 'e', 'a', 'a'], ['a', 'g', 'e', 'h', 'c']]

###########################################################
Sample Outputs:
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h', 'c'], ['a', 'g', 'a', 'h', 'a'], ['j', 'g', 'a', 'h', 'a'], ['j', 'g', 'e', 'h', 'c']]
*/

// Solution 1:
class Solution {
    public String[][] solve(String[][] board) {
        if (board == null || board.length < 1 || board[0].length < 1) return board;

        int m = board.length, n = board[0].length;
        boolean hasO = false;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j].equals("O")) {
                    dfs(board, i, j);
                    hasO = true;
                }
            }
        }

        // change all "O" to "X", and then change the boundary back to "O".
        if (!hasO) return new String[][]{};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j].equals("T")) board[i][j] = "O";
                else board[i][j] = "X";
            }
        }

        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length || board[x][y].equals("X") || board[x][y].equals("T")) return;

        board[x][y] = "T";
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
}

// Solution 2:
class Solution {
    public String[][] solve(String[][] board) {
        if (board == null || board.length < 1 || board[0].length < 1) return board;

        int m = board.length, n = board[0].length;
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            if (board[i][0].equals("O")) queue.offerLast(i * n);
            if (board[i][n-1].equals("O")) queue.offerLast((i+1)*n - 1);
        }
        for (int j = 0; j < n; j++) {
            if (board[0][j].equals("O")) queue.offerLast(j);
            if (board[m-1][j].equals("O")) queue.offerLast(m*n - j - 1);
        }

        while (!queue.isEmpty()) {
            int idx = queue.pollFirst();
            int r = idx / n, c = idx % n;
            if (r >= 0 && r < m && c >= 0 && c < n && board[r][c].equals("O")) {
                board[r][c] = "T";
                queue.offerLast(idx + n);
                queue.offerLast(idx - n);
                queue.offerLast(idx + 1);
                queue.offerLast(idx - 1);
            }
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j].equals("O")) board[i][j] = "X";
                else if (board[i][j].equals("T")) board[i][j] = "O";
            }
        }

        return board;
    }
}


###########################################################
Result:
solution: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['j', 'g', 'a', 'h', 'a'], ['j', 'g', 'e', 'h', 'c'], ['j', 'g', 'e', 'h', 'c']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.015503875968992248

cat_success_cnt: 0

cat_success_rate: 0.0

