
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['d', 'a', 'e', 'a', 'a'], ['a', 'a', 'e', 'a', 'a'], ['a', 'g', 'a', 'a', 'a'], ['d', 'g', 'e', 'a', 'b'], ['a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'a', 'a'], ['d', 'g', 'e', 'a', 'a'], ['d', 'g', 'e', 'a', 'b']]

Example_2:
input: [['e', 'd', 'a', 'g'], ['a', 'a', 'a', 'a'], ['a', 'd', 'a', 'g'], ['e', 'd', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['a', 'd', 'a', 'a'], ['e', 'd', 'a', 'g'], ['e', 'd', 'a', 'g']]

Example_3:
input: [['a', 'a', 'i', 'b'], ['d', 'g', 'i', 'b'], ['d', 'g', 'a', 'a'], ['d', 'a', 'i', 'b']]
output: [['a', 'a', 'a', 'a'], ['d', 'a', 'i', 'b'], ['d', 'g', 'i', 'b'], ['d', 'g', 'i', 'b']]

Test case:
input: [['g', 'a', 'a', 'c'], ['a', 'f', 'b', 'a'], ['g', 'a', 'a', 'a'], ['a', 'a', 'a', 'c']]

###########################################################
Sample Outputs:
output: [['a', 'a', 'a', 'a'], ['a', 'f', 'b', 'a'], ['g', 'a', 'a', 'a'], ['g', 'a', 'a', 'c']]
*/

public class Solution {
    public String[][] removeInvalid(String[][] input) {
        Stack<String> stack = new Stack<>();
        for (int i = 0; i < input.length; ++i) {
            if (!stack.isEmpty() &&!isValid(stack.peek(), input[i][0])) {
                return new String[0][];
            }
            for (int j = 0; j < input[i].length; ++j) {
                if (j > 0 &&!isValid(input[i][j - 1], input[i][j])) {
                    while (!stack.isEmpty()) {
                        stack.pop();
                    }
                    break;
                }
                stack.push(input[i][j]);
            }
        }
        int size = stack.size();
        String[][] output = new String[input.length][size];
        for (int i = 0; i < input.length; ++i) {
            System.arraycopy(stack.toArray(), 0, output[i], 0, size);
        }
        return output;
    }

    private boolean isValid(String a, String b) {
        if (a.equals("?")) {
            return true;
        } else if (b.equals("?")) {
            return false;
        } else {
            return a.charAt(0) == b.charAt(0);
        }
    }
}


###########################################################
Result:
solution: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['g', 'a', 'a', 'c'], ['g', 'f', 'b', 'c']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.015625

cat_success_cnt: 0

cat_success_rate: 0.0

