
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['f', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'h', 'h', 'h'], ['i', 'a', 'i', 'a']]
output: [['f', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['h', 'h', 'h', 'a'], ['i', 'i', 'a', 'a']]

Example_2:
input: [['a', 'h', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'f'], ['a', 'a', 'e', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'b', 'b', 'a', 'a']]
output: [['h', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'j'], ['a', 'e', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'd', 'd', 'a', 'd']]
output: [['j', 'a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['d', 'd', 'd', 'a', 'a', 'a']]

Test case:
input: [['f', 'f', 'a', 'f'], ['a', 'h', 'a', 'a'], ['e', 'a', 'a', 'e'], ['a', 'g', 'a', 'a']]

###########################################################
Sample Outputs:
output: [['f', 'f', 'a', 'f'], ['h', 'h', 'a', 'a'], ['e', 'e', 'a', 'e'], ['g', 'g', 'a', 'a']]
*/

public class Solution {
    public String[][] replace(String[][] board) {
        if (board == null || board.length == 0) return board;
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j].equals("f")) {
                    dfs(board, i, j);
                }
            }
        }
        return board;
    }

    private void dfs(String[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length ||!board[x][y].equals("f")) return;
        board[x][y] = "h";
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
}


###########################################################
Result:
solution: [['f', 'f', 'f', 'a'], ['h', 'a', 'a', 'a'], ['e', 'e', 'a', 'a'], ['g', 'a', 'a', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.004739336492890996

cat_success_cnt: 0

cat_success_rate: 0.0

