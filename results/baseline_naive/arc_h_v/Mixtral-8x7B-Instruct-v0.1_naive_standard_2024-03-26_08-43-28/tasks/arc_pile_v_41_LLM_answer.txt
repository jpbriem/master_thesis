
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'c', 'a', 'j'], ['a', 'a', 'c', 'h', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'c', 'h', 'a'], ['a', 'a', 'c', 'h', 'j']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['h', 'a', 'a', 'a', 'f', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['h', 'a', 'a', 'a', 'f', 'i']]

Example_3:
input: [['a', 'b', 'j', 'a', 'a'], ['h', 'b', 'a', 'f', 'a'], ['a', 'a', 'a', 'f', 'a'], ['a', 'b', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'b', 'a', 'f', 'a'], ['a', 'b', 'a', 'f', 'a'], ['h', 'b', 'j', 'f', 'a']]

Test case:
input: [['h', 'g', 'd', 'a'], ['a', 'g', 'd', 'a'], ['h', 'a', 'a', 'c'], ['h', 'a', 'd', 'a']]

###########################################################
Sample Outputs:
output: [['h', 'g', 'd', 'a'], ['h', 'a', 'a', 'c'], ['h', 'a', 'd', 'a'], ['a', 'g', 'd', 'a']]
*/

public class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return new int[0][];
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == 0) {
                    queue.offer(i * matrix[0].length + j);
                } else {
                    matrix[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        int[] dirs = {-1, 0, 1, 0, -1};
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            int x = cur / matrix[0].length;
            int y = cur % matrix[0].length;
            for (int k = 0; k < 4; k++) {
                int nx = x + dirs[k];
                int ny = y + dirs[k+1];
                if (nx >= 0 && nx < matrix.length && ny >= 0 && ny < matrix[0].length && matrix[nx][ny] > matrix[x][y] + 1) {
                    matrix[nx][ny] = matrix[x][y] + 1;
                    queue.offer(nx * matrix[0].length + ny);
                }
            }
        }
        return matrix;
    }
}


###########################################################
Result:
solution: [['a', 'a', 'a', 'a'], ['h', 'a', 'd', 'a'], ['h', 'g', 'd', 'a'], ['h', 'g', 'd', 'c']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.013937282229965157

cat_success_cnt: 0

cat_success_rate: 0.0

