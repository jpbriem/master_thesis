
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'a', 'j', 'a', 'e'], ['a', 'g', 'a', 'j', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a'], ['a', 'g', 'a', 'a', 'd', 'a'], ['c', 'a', 'a', 'j', 'd', 'a'], ['c', 'a', 'h', 'a', 'a', 'e']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['c', 'a', 'a', 'j', 'a', 'a'], ['c', 'g', 'a', 'j', 'd', 'e'], ['c', 'g', 'h', 'j', 'd', 'e']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a', 'e'], ['f', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'h', 'a', 'a', 'a'], ['a', 'a', 'h', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'h', 'a', 'a', 'a'], ['f', 'i', 'h', 'a', 'a', 'e']]

Example_3:
input: [['a', 'a', 'f', 'a'], ['j', 'g', 'f', 'h'], ['a', 'g', 'a', 'h'], ['a', 'g', 'f', 'h']]
output: [['a', 'a', 'a', 'a'], ['a', 'g', 'f', 'h'], ['a', 'g', 'f', 'h'], ['j', 'g', 'f', 'h']]

Test case:
input: [['i', 'h', 'a', 'j', 'a'], ['a', 'h', 'f', 'a', 'd'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a'], ['a', 'a', 'a', 'j', 'a']]

###########################################################
Sample Outputs:
output: [['i', 'h', 'a', 'a', 'a'], ['a', 'h', 'f', 'a', 'd'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a'], ['a', 'a', 'a', 'j', 'a']]
*/

public class Solution {
    public String[][] expand(String[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return matrix;
        int m = matrix.length, n = matrix[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!visited[i][j]) dfs(matrix, visited, i, j);
            }
        }
        return matrix;
    }

    private void dfs(String[][] matrix, boolean[][] visited, int x, int y) {
        if (x < 0 || x >= matrix.length || y < 0 || y >= matrix[0].length || visited[x][y] || matrix[x][y].equals(".")) return;
        char c = matrix[x][y];
        visited[x][y] = true;
        matrix[x][y] = ".";
        dfs(matrix, visited, x + 1, y);
        dfs(matrix, visited, x - 1, y);
        dfs(matrix, visited, x, y + 1);
        dfs(matrix, visited, x, y - 1);
        for (int i = x + 1; i > 0 && matrix[i][y].equals(c); --i) matrix[i][y] = c;
        for (int i = x - 1; i < matrix.length - 1 && matrix[i][y].equals(c); ++i) matrix[i][y] = c;
        for (int j = y + 1; j > 0 && matrix[x][j].equals(c); --j) matrix[x][j] = c;
        for (int j = y - 1; j < matrix[0].length - 1 && matrix[x][j].equals(c); ++j) matrix[x][j] = c;
    }
}


###########################################################
Result:
solution: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a'], ['a', 'h', 'a', 'j', 'a'], ['i', 'h', 'f', 'j', 'd']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.014134275618374558

cat_success_cnt: 0

cat_success_rate: 0.0

