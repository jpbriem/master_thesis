
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'a', 'g', 'a', 'a'], ['a', 'a', 'c', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'a', 'f'], ['a', 'a', 'b', 'a', 'b', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['d', 'a', 'a', 'd', 'a', 'a']]
output: [['g', 'a', 'a', 'a', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a'], ['f', 'f', 'a', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['d', 'd', 'a', 'a', 'a', 'a']]

Example_2:
input: [['d', 'd', 'd', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['a', 'c', 'c', 'c', 'a', 'a'], ['a', 'a', 'h', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'j', 'j']]
output: [['d', 'd', 'd', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['c', 'c', 'c', 'a', 'a', 'a'], ['h', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['j', 'j', 'j', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'j', 'j', 'a']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['j', 'j', 'a', 'a']]

Test case:
input: [['a', 'd', 'a', 'd'], ['g', 'g', 'g', 'a'], ['a', 'a', 'f', 'f'], ['a', 'i', 'i', 'i']]

###########################################################
Sample Outputs:
output: [['a', 'd', 'a', 'd'], ['g', 'g', 'g', 'a'], ['f', 'f', 'a', 'a'], ['i', 'i', 'i', 'a']]
*/

public class Solution {
    public String[][] replace(String[][] board) {
        if (board == null || board.length == 0) return board;
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j].equals("a")) continue;
                boolean flag = true;
                // check row
                for (int k = 0; k < n && flag; k++) {
                    if (!board[i][k].equals(board[i][j])) flag = false;
                }
                if (flag) {
                    for (int k = 0; k < n; k++) {
                        board[i][k] = board[i][j];
                    }
                    continue;
                }
                // check col
                flag = true;
                for (int k = 0; k < m && flag; k++) {
                    if (!board[k][j].equals(board[i][j])) flag = false;
                }
                if (flag) {
                    for (int k = 0; k < m; k++) {
                        board[k][j] = board[i][j];
                    }
                }
            }
        }
        return board;
    }
}


###########################################################
Result:
solution: [['d', 'd', 'a', 'a'], ['g', 'g', 'g', 'a'], ['f', 'f', 'a', 'a'], ['i', 'i', 'i', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.008771929824561403

cat_success_cnt: 1

cat_success_rate: 0.03571428571428571

