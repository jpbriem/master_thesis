
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'b', 'a', 'a', 'a'], ['a', 'a', 'g', 'a', 'a'], ['a', 'a', 'a', 'a', 'd'], ['a', 'a', 'a', 'a', 'a'], ['c', 'c', 'a', 'a', 'a']]
output: [['b', 'a', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a'], ['d', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['c', 'c', 'a', 'a', 'a']]

Example_2:
input: [['c', 'a', 'a', 'c'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]
output: [['c', 'c', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'f'], ['g', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a'], ['d', 'a', 'a', 'a', 'd']]
output: [['a', 'a', 'a', 'a', 'a'], ['f', 'f', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a'], ['j', 'a', 'a', 'a', 'a'], ['d', 'd', 'a', 'a', 'a']]

Test case:
input: [['i', 'a', 'i', 'a', 'i'], ['a', 'c', 'a', 'c', 'a'], ['a', 'a', 'h', 'h', 'a'], ['a', 'a', 'a', 'a', 'b'], ['a', 'a', 'j', 'a', 'a']]

###########################################################
Sample Outputs:
output: [['i', 'a', 'i', 'a', 'i'], ['a', 'c', 'a', 'c', 'a'], ['a', 'a', 'h', 'h', 'a'], ['a', 'a', 'a', 'a', 'b'], ['a', 'a', 'j', 'a', 'a']]
*/

public class Solution {
    public String[][] setZeroes(String[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return matrix;
        int m = matrix.length, n = matrix[0].length;
        boolean firstRowHasZero = false, firstColHasZero = false;
        for (int i = 0; i < m; ++i) {
            if (matrix[i][0].equals("0")) {
                firstColHasZero = true;
                break;
            }
        }
        for (int j = 0; j < n; ++j) {
            if (matrix[0][j].equals("0")) {
                firstRowHasZero = true;
                break;
            }
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 1; j < n; ++j) {
                if (matrix[i][j].equals("0")) {
                    matrix[i][0] = "0";
                    matrix[0][j] = "0";
                }
            }
        }
        for (int i = 1; i < m; ++i) {
            if (matrix[i][0].equals("0")) {
                Arrays.fill(matrix[i], "0");
            }
        }
        for (int j = 1; j < n; ++j) {
            if (matrix[0][j].equals("0")) {
                for (int i = 0; i < m; ++i) {
                    matrix[i][j] = "0";
                }
            }
        }
        if (firstRowHasZero) {
            Arrays.fill(matrix[0], "0");
        }
        if (firstColHasZero) {
            for (int i = 0; i < m; ++i) {
                matrix[i][0] = "0";
            }
        }
        return matrix;
    }
}


###########################################################
Result:
solution: [['i', 'i', 'i', 'a', 'a'], ['c', 'c', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a'], ['b', 'a', 'a', 'a', 'a'], ['j', 'a', 'a', 'a', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.004464285714285714

cat_success_cnt: 0

cat_success_rate: 0.0

