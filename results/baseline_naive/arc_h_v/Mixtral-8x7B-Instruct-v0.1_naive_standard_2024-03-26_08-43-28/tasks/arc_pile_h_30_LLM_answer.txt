
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'a', 'f', 'a', 'a'], ['d', 'd', 'd', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'b', 'b', 'a'], ['a', 'e', 'a', 'a', 'a']]
output: [['f', 'a', 'a', 'a', 'a'], ['d', 'd', 'd', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'j', 'a', 'j'], ['f', 'f', 'a', 'f', 'a'], ['d', 'a', 'a', 'd', 'd'], ['a', 'a', 'a', 'b', 'a'], ['a', 'i', 'a', 'a', 'a']]
output: [['j', 'j', 'a', 'a', 'a'], ['f', 'f', 'f', 'a', 'a'], ['d', 'd', 'd', 'a', 'a'], ['b', 'a', 'a', 'a', 'a'], ['i', 'a', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'c', 'a', 'c'], ['a', 'g', 'a', 'g', 'g'], ['a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['c', 'c', 'a', 'a', 'a'], ['g', 'g', 'g', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]

Test case:
input: [['a', 'a', 'i', 'a'], ['g', 'g', 'a', 'g'], ['f', 'a', 'f', 'f'], ['a', 'd', 'a', 'a']]

###########################################################
Sample Outputs:
output: [['i', 'i', 'a', 'a'], ['g', 'g', 'g', 'g'], ['f', 'f', 'f', 'f'], ['a', 'a', 'a', 'a']]
*/

public class Solution {
    public String[][] replace(String[][] matrix) {
        if (matrix == null || matrix.length == 0) return matrix;
        int m = matrix.length, n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j].equals("a")) continue;
                boolean isFirstRow = i == 0;
                boolean isLastRow = i == m - 1;
                boolean isFirstCol = j == 0;
                boolean isLastCol = j == n - 1;
                // check left and up
                if (!isFirstCol &&!isFirstRow && matrix[i-1][j-1].equals("a") && matrix[i][j-1].equals("a") && matrix[i-1][j].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
                // check right and up
                if (!isLastCol &&!isFirstRow && matrix[i-1][j+1].equals("a") && matrix[i][j+1].equals("a") && matrix[i-1][j].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
                // check left and down
                if (!isFirstCol &&!isLastRow && matrix[i+1][j-1].equals("a") && matrix[i][j-1].equals("a") && matrix[i+1][j].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
                // check right and down
                if (!isLastCol &&!isLastRow && matrix[i+1][j+1].equals("a") && matrix[i][j+1].equals("a") && matrix[i+1][j].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
                // check top
                if (isFirstRow && matrix[i-1][j].equals("a") && matrix[i-1][j-1].equals("a") && matrix[i-1][j+1].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
                // check bottom
                if (isLastRow && matrix[i+1][j].equals("a") && matrix[i+1][j-1].equals("a") && matrix[i+1][j+1].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
                // check left
                if (isFirstCol && matrix[i][j-1].equals("a") && matrix[i-1][j-1].equals("a") && matrix[i+1][j-1].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
                // check right
                if (isLastCol && matrix[i][j+1].equals("a") && matrix[i-1][j+1].equals("a") && matrix[i+1][j+1].equals("a")) {
                    matrix[i][j] = "a";
                    continue;
                }
            }
        }
        return matrix;
    }
}


###########################################################
Result:
solution: [['i', 'a', 'a', 'a'], ['g', 'g', 'g', 'a'], ['f', 'f', 'f', 'a'], ['d', 'a', 'a', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0044444444444444444

cat_success_cnt: 0

cat_success_rate: 0.0

