
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 0], [0, 5, 0, 5], [1, 0, 1, 0], [8, 0, 0, 0]]
output: [[0, 0, 0, 0], [5, 5, 0, 0], [1, 1, 0, 0], [8, 0, 0, 0]]

Example_2:
input: [[0, 0, 9, 0], [0, 1, 0, 0], [0, 0, 0, 0], [2, 0, 0, 0]]
output: [[9, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [2, 0, 0, 0]]

Example_3:
input: [[0, 3, 3, 0], [8, 8, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
output: [[3, 3, 0, 0], [8, 8, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

Test case:
input: [[5, 0, 0, 5], [7, 7, 0, 7], [0, 2, 0, 0], [3, 3, 3, 0]]



###########################################################
Sample Outputs:
```python
class Solution:
    def findMaxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        n = len(arr)
        
        left = []
        right = []
        
        for i in range(n):
            if i == 0 or arr[i] >= arr[i - 1]:
                left.append(i)
            
            if i == n - 1 or arr[i] <= arr[i + 1]:
                right.append(i)
                
        res = max(len(left), len(right)) - 1
        
        if len(left) > 0 and len(right) > 0:
            res += min(max(left[-1] - right[0], right[-1] - left[0]), (right[-1] - left[-1]) // 2)
        
        return res
```


###########################################################
Result:
solution: [[5, 5, 0, 0], [7, 7, 7, 0], [2, 0, 0, 0], [3, 3, 3, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

