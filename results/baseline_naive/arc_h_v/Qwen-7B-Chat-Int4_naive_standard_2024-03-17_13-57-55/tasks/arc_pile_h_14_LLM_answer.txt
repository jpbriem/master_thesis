
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[5, 5, 5, 0], [0, 0, 0, 0], [4, 4, 0, 4], [0, 2, 2, 2]]
output: [[5, 5, 5, 0], [0, 0, 0, 0], [4, 4, 4, 0], [2, 2, 2, 0]]

Example_2:
input: [[3, 0, 0, 0, 0], [0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 4, 4, 0, 0], [1, 0, 0, 0, 1]]
output: [[3, 0, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [4, 4, 0, 0, 0], [1, 1, 0, 0, 0]]

Example_3:
input: [[0, 9, 0, 0, 9], [0, 5, 5, 5, 0], [4, 0, 4, 0, 4], [0, 3, 0, 0, 3], [0, 0, 0, 0, 0]]
output: [[9, 9, 0, 0, 0], [5, 5, 5, 0, 0], [4, 4, 4, 0, 0], [3, 3, 0, 0, 0], [0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 8, 0, 0], [7, 0, 7, 7, 0], [2, 0, 0, 0, 0], [0, 5, 0, 0, 0], [0, 0, 9, 9, 0]]



###########################################################
Sample Outputs:
```python
class Solution:
    def fourSum(self, nums: List[int]) -> List[List[int]]:
        if len(nums) < 4:
            return []
        
        d = {}
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                k = abs(nums[i] - nums[j])
                l = abs(nums[i] - nums[-1])
                m = abs(nums[j] - nums[-1])

                if (k,l,m) not in d:
                    d[(k,l,m)] = [[i,j]]
                else:
                    d[(k,l,m)].append([i,j])

        result = []
        for key in d.keys():
            nums.sort()
            result.extend([[nums[0]] + d[key][0]])
            for num in d[key]:
                nums.pop(0)
                result.extend([[num[0]] + d[key]])

        return result
```


###########################################################
Result:
solution: [[8, 0, 0, 0, 0], [7, 7, 7, 0, 0], [2, 0, 0, 0, 0], [5, 0, 0, 0, 0], [9, 9, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

