
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[3, 0, 4, 0, 0], [0, 0, 4, 0, 0], [0, 6, 0, 0, 0], [3, 6, 4, 0, 1], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0], [3, 6, 4, 0, 0], [3, 6, 4, 0, 1]]

Example_2:
input: [[4, 3, 0, 6], [0, 0, 0, 0], [0, 3, 0, 6], [4, 3, 0, 0]]
output: [[0, 0, 0, 0], [0, 3, 0, 0], [4, 3, 0, 6], [4, 3, 0, 6]]

Example_3:
input: [[0, 0, 8, 1], [3, 6, 8, 1], [3, 6, 0, 0], [3, 0, 8, 1]]
output: [[0, 0, 0, 0], [3, 0, 8, 1], [3, 6, 8, 1], [3, 6, 8, 1]]

Test case:
input: [[6, 0, 0, 2], [0, 5, 1, 0], [6, 0, 0, 0], [0, 0, 0, 2]]



###########################################################
Sample Outputs:
```python
class Solution:
    def islands(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: List[List[int]]
        """
        if not grid or len(grid) == 0:
            return []
        
        m = len(grid)
        n = len(grid[0])
        visited = [[False] * n for _ in range(m)]
        
        result = []
        for i in range(m):
            for j in range(n):
                if grid[i][j]:
                    stack = [(i,j)]
                    while stack:
                        x,y = stack.pop()
                        visited[x][y] = True
                        for dx,dy in [(0,-1),(-1,0),(0,1),(1,0)]:
                            nx = x + dx
                            ny = y + dy
                            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] and not visited[nx][ny]:
                                stack.append((nx,ny))
                        result.append([grid[x][y]])
                    
        return result
```


###########################################################
Result:
solution: [[0, 0, 0, 0], [0, 0, 0, 0], [6, 0, 0, 2], [6, 5, 1, 2]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

