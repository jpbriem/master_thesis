Input token: 591
Output token: 350
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'g', 'b', 'i'], ['a', 'a', 'e', 'g', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'j', 'e', 'a', 'a', 'i'], ['a', 'j', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'b', 'i']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'j', 'e', 'g', 'b', 'i'], ['a', 'j', 'e', 'g', 'b', 'i']]

Example_2:
input: [['a', 'd', 'b', 'e'], ['a', 'a', 'b', 'a'], ['a', 'a', 'b', 'a'], ['a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'b', 'a'], ['a', 'a', 'b', 'a'], ['a', 'd', 'b', 'e']]

Example_3:
input: [['h', 'b', 'a', 'a'], ['a', 'b', 'a', 'f'], ['h', 'b', 'a', 'a'], ['h', 'a', 'a', 'f']]
output: [['a', 'a', 'a', 'a'], ['h', 'b', 'a', 'a'], ['h', 'b', 'a', 'f'], ['h', 'b', 'a', 'f']]

Test case:
input: [['i', 'a', 'd', 'a', 'a', 'e'], ['i', 'h', 'a', 'a', 'a', 'e'], ['i', 'h', 'd', 'a', 'a', 'e'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'g', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare sorted strings to find anagram groups
        3. return a list of lists with all anagrams grouped together
        :param strs: list of strings
        :return: list of lists containing anagrams
        """
        # O(n) time | O(n) space - where n is number of elements in strs
        if not strs or len(strs) == 0:
            return []

        result = {}
        for word in strs:
            sorted_word = "".join(sorted(word))
            if sorted_word in result:
                result[sorted_word].append(word)
            else:
                result[sorted_word] = [word]

        return list(result.values())

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['i', 'a', 'a', 'a', 'a', 'e'], ['i', 'h', 'd', 'a', 'a', 'e'], ['i', 'h', 'd', 'f', 'g', 'e']]

