Input token: 519
Output token: 334
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'g'], ['d', 'd', 'a', 'd', 'a'], ['j', 'j', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a'], ['d', 'd', 'd', 'a', 'a'], ['j', 'j', 'a', 'a', 'a']]

Example_2:
input: [['h', 'a', 'h', 'h'], ['f', 'f', 'a', 'a'], ['a', 'i', 'a', 'a'], ['a', 'a', 'e', 'a']]
output: [['h', 'h', 'h', 'a'], ['f', 'f', 'a', 'a'], ['i', 'a', 'a', 'a'], ['e', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'c', 'a', 'a', 'a'], ['a', 'e', 'a', 'a', 'a'], ['i', 'i', 'a', 'a', 'i'], ['a', 'd', 'd', 'a', 'd']]
output: [['a', 'a', 'a', 'a', 'a'], ['c', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'a'], ['i', 'i', 'i', 'a', 'a'], ['d', 'd', 'd', 'a', 'a']]

Test case:
input: [['a', 'a', 'a', 'b'], ['a', 'h', 'a', 'a'], ['e', 'e', 'a', 'e'], ['a', 'g', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a'], ['h', 'a', 'a', 'a'], ['e', 'a', 'a', 'a'], ['g', 'a', 'a', 'a']]
"""
from typing import List, Optional


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[Optional[List[str]]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted strings into a dictionary with key as first char
            and value as list of sorted strings
        4. return list of values from dict
        :param strs: list of lists of strings
        :return: list of lists of strings
        """
        # O(n) time | O(n) space - where n is len(strs)
        if not strs or not strs[0]:
            return []

        d = {}  # type: ignore
        for s in strs:
            ss = "".join(sorted(s))
            if ss not in d:
                d[ss] = []
            d[ss].append(s)

        res = []
        for k, v in d.items():
            res += [[k + ""] * (len(v) // len(set(v))) + list(set(v))]

        return res

################################################################

Solution:
[['b', 'a', 'a', 'a'], ['h', 'a', 'a', 'a'], ['e', 'e', 'e', 'a'], ['g', 'a', 'a', 'a']]

