Input token: 798
Output token: 377
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'f', 'a', 'a'], ['b', 'a', 'a', 'f', 'a', 'a'], ['a', 'a', 'g', 'a', 'a', 'a'], ['a', 'a', 'g', 'a', 'a', 'a'], ['a', 'a', 'g', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'a', 'd']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'g', 'f', 'a', 'a'], ['a', 'a', 'g', 'f', 'a', 'a'], ['b', 'a', 'g', 'f', 'a', 'd']]

Example_2:
input: [['a', 'a', 'a', 'a', 'h', 'a'], ['a', 'a', 'j', 'a', 'a', 'a'], ['a', 'f', 'a', 'i', 'a', 'e'], ['a', 'a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'i', 'h', 'e'], ['a', 'f', 'j', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'i', 'a', 'a'], ['a', 'f', 'j', 'i', 'h', 'e'], ['a', 'f', 'j', 'i', 'h', 'e']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'b', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'b', 'a', 'j', 'a', 'a'], ['a', 'b', 'a', 'j', 'a', 'g']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'b', 'a', 'j', 'a', 'a'], ['a', 'b', 'a', 'j', 'a', 'a'], ['a', 'b', 'a', 'j', 'a', 'g']]

Test case:
input: [['f', 'c', 'a', 'a', 'e'], ['a', 'c', 'a', 'a', 'a'], ['f', 'c', 'h', 'd', 'a'], ['a', 'a', 'h', 'd', 'a'], ['a', 'a', 'a', 'a', 'e']]
################################################################

LLM answer:

output: [['f', 'c', 'a', 'a', 'e'], ['a', 'c', 'a', 'a', 'a'], ['f', 'c', 'h', 'd', 'a'], ['a', 'a', 'h', 'd', 'a'], ['a', 'a', 'a', 'a', 'e']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted strings into a dictionary with key as first char
            and value as list of sorted strings
        4. return values from dictionary
        :param strs:
        :return:
        """
        if not strs or len(strs) == 0:
            return []

        # create a dictionary for storing anagrams
        d = {}

        # loop through all strings
        for s in strs:
            # sort current string
            s.sort()

            # get first letter of sorted string
            k = s[0]

            # check if we have seen this key before
            if k in d:
                # append sorted string to existing list
                d[k].append(s)
            else:
                # store new list of sorted strings under key
                d[k] = [s]

        # return lists of sorted strings
        return list(map(lambda x: x[1], d.items()))

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'c', 'a', 'a', 'a'], ['f', 'c', 'h', 'd', 'e'], ['f', 'c', 'h', 'd', 'e']]

