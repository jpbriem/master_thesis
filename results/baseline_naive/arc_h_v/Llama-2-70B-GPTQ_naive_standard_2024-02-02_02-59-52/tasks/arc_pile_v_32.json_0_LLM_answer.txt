Input token: 633
Output token: 326
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'h', 'a', 'a', 'a'], ['a', 'h', 'a', 'a', 'a'], ['a', 'h', 'b', 'a', 'a'], ['a', 'a', 'b', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'h', 'a', 'a', 'a'], ['a', 'h', 'b', 'a', 'a'], ['a', 'h', 'b', 'a', 'a']]

Example_2:
input: [['e', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'i', 'a'], ['a', 'a', 'a', 'i', 'a'], ['a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'i', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'i', 'a'], ['e', 'a', 'a', 'i', 'a'], ['e', 'a', 'a', 'i', 'a']]

Example_3:
input: [['e', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'b'], ['e', 'd', 'i', 'j', 'b']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'j', 'b'], ['e', 'd', 'i', 'j', 'b']]

Test case:
input: [['a', 'd', 'h', 'e', 'a', 'a'], ['a', 'd', 'a', 'a', 'c', 'a'], ['a', 'd', 'h', 'e', 'a', 'a'], ['j', 'a', 'a', 'e', 'c', 'a'], ['j', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'g']]
################################################################

LLM answer:

output: [['a', 'd', 'h', 'e', 'a', 'a'], ['a', 'd', 'a', 'a', 'c', 'a'], ['a', 'd', 'h', 'e', 'a', 'a'], ['j', 'a', 'a', 'e', 'c', 'a'], ['j', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'g']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare sorted strings to find anagram groups
        3. return a list of lists with grouped anagrams
        :param strs: list of strings
        :return: list of lists with grouped anagrams
        """
        # TODO: implement your solution here
        if not strs or len(strs) == 0:
            return []

        result = {}
        for word in strs:
            key = "".join(sorted(word))
            if key in result:
                result[key].append(word)
            else:
                result[key] = [word]

        return list(result.values())

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'd', 'a', 'e', 'a', 'a'], ['j', 'd', 'h', 'e', 'c', 'a'], ['j', 'd', 'h', 'e', 'c', 'g']]

