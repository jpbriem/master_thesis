Input token: 651
Output token: 293
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'e', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'g', 'a', 'a', 'a', 'a'], ['i', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'f', 'f', 'a', 'f'], ['a', 'a', 'a', 'a', 'a', 'a']]
output: [['e', 'e', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a', 'a'], ['i', 'i', 'a', 'a', 'a', 'a'], ['f', 'f', 'f', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'a'], ['c', 'c', 'c', 'a'], ['a', 'h', 'a', 'a'], ['a', 'a', 'a', 'b']]
output: [['a', 'a', 'a', 'a'], ['c', 'c', 'c', 'a'], ['h', 'a', 'a', 'a'], ['b', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'b', 'b'], ['j', 'a', 'j', 'a', 'j', 'a'], ['a', 'a', 'a', 'h', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'c', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a', 'a'], ['j', 'j', 'j', 'a', 'a', 'a'], ['h', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a']]

Test case:
input: [['a', 'i', 'i', 'i'], ['d', 'd', 'd', 'a'], ['e', 'e', 'e', 'a'], ['a', 'a', 'g', 'g']]
################################################################

LLM answer:

output: [['a', 'i', 'i', 'i'], ['d', 'd', 'd', 'a'], ['e', 'e', 'e', 'a'], ['g', 'g', 'g', 'a']]
"""

import re
from typing import List, Optional


class Solution:
    def transform(self, arr: List[List[str]]) -> List[Optional[List[str]]]:
        """
        1. 先找出所有的字符串，然后再去比较每一个字符串中的元素是否相等。
            如果不相等，则将该字符串中的元素全部变成最大值的元素。
            O(n) time complexity, n is the number of strings in the list.
            O(m) space complexity, m is the length of each string.
        """
        for i in range(len(arr)):
            if len(set([x for x in arr[i][0:-1]])) > 1:
                arr[i][0:-1] = max(list(set([x for x in arr[i][0:-1]]))) * (len(arr[i]) - 1)
        return arr

################################################################

Solution:
[['i', 'i', 'i', 'a'], ['d', 'd', 'd', 'a'], ['e', 'e', 'e', 'a'], ['g', 'g', 'a', 'a']]

