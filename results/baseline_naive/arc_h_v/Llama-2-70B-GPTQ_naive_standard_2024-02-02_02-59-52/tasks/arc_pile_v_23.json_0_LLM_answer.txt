Input token: 519
Output token: 260
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'c', 'a', 'i', 'a'], ['a', 'a', 'a', 'i', 'a'], ['a', 'c', 'a', 'a', 'a'], ['a', 'a', 'e', 'i', 'a'], ['a', 'c', 'e', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'c', 'a', 'i', 'a'], ['a', 'c', 'e', 'i', 'a'], ['a', 'c', 'e', 'i', 'a']]

Example_2:
input: [['a', 'd', 'a', 'b'], ['a', 'a', 'a', 'a'], ['a', 'd', 'a', 'b'], ['h', 'a', 'a', 'b']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'b'], ['a', 'd', 'a', 'b'], ['h', 'd', 'a', 'b']]

Example_3:
input: [['a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'b'], ['a', 'a', 'a', 'a', 'a'], ['a', 'e', 'i', 'a', 'b'], ['a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'i', 'a', 'b'], ['a', 'e', 'i', 'a', 'b']]

Test case:
input: [['d', 'j', 'f', 'a'], ['d', 'a', 'f', 'c'], ['d', 'a', 'a', 'c'], ['a', 'j', 'f', 'c']]
################################################################

LLM answer:

output: [['d', 'a', 'f', 'a'], ['d', 'a', 'f', 'c'], ['d', 'a', 'a', 'c'], ['a', 'j', 'f', 'c']]
"""
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare sorted strings to find anagram groups
            - if they match then add them to a new list
                  - if not found then create a new list with that element
        3. return all lists
        :param strs:
        :return:
        """
        # O(n) time | O(n) space - where n is number of elements in strs
        result = []
        for s in strs:
            temp = "".join(sorted(s))
            if temp in result:
                result[temp].append(s)
            else:
                result[temp] = [s]
        return result

################################################################

Solution:
[['a', 'a', 'a', 'a'], ['d', 'a', 'f', 'c'], ['d', 'j', 'f', 'c'], ['d', 'j', 'f', 'c']]

