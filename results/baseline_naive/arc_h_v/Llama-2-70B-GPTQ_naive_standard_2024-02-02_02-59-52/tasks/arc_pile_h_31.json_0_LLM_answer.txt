Input token: 612
Output token: 330
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'f'], ['a', 'a', 'a', 'a', 'a', 'b'], ['a', 'a', 'a', 'a', 'a', 'a'], ['e', 'e', 'a', 'a', 'a', 'a'], ['a', 'a', 'h', 'a', 'h', 'a']]
output: [['i', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['b', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['e', 'e', 'a', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a', 'a']]

Example_2:
input: [['h', 'a', 'h', 'a', 'h'], ['a', 'a', 'a', 'a', 'b'], ['j', 'a', 'j', 'a', 'j'], ['a', 'a', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]
output: [['h', 'h', 'h', 'a', 'a'], ['b', 'a', 'a', 'a', 'a'], ['j', 'j', 'j', 'a', 'a'], ['i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['a', 'j', 'a', 'a'], ['h', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['g', 'g', 'g', 'a']]
output: [['j', 'a', 'a', 'a'], ['h', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['g', 'g', 'g', 'a']]

Test case:
input: [['a', 'g', 'a', 'a', 'a'], ['a', 'a', 'i', 'i', 'i'], ['a', 'j', 'j', 'a', 'j'], ['a', 'b', 'b', 'b', 'a'], ['a', 'c', 'a', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a', 'a'], ['i', 'i', 'i', 'i', 'i'], ['j', 'j', 'j', 'a', 'j'], ['b', 'b', 'b', 'b', 'b'], ['c', 'a', 'a', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare each sorted string with all other sorted strings to find anagram groups
            - if two strings have same length and characters then they belong to same group
                  (anagrams)
            - else they don't belong to same group
        3. return list of lists where each inner list contains a group of anagrams
        :param strs: list of lists of strings
        :return: list of lists of strings
        """
        # TODO: implement your solution here
        result = []
        for s in strs:
            temp = "".join(sorted(s))
            if not temp in result:
                result.append([])
            result[-1].append("".join(temp))
        return [[list(x)[0][::-1] for x in y] for y in result]

################################################################

Solution:
[['g', 'a', 'a', 'a', 'a'], ['i', 'i', 'i', 'a', 'a'], ['j', 'j', 'j', 'a', 'a'], ['b', 'b', 'b', 'a', 'a'], ['c', 'a', 'a', 'a', 'a']]

