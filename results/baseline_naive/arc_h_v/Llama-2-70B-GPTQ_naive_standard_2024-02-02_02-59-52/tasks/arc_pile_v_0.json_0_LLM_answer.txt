Input token: 531
Output token: 241
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['f', 'c', 'a', 'j'], ['a', 'c', 'a', 'j'], ['a', 'c', 'd', 'a'], ['a', 'a', 'a', 'j']]
output: [['a', 'a', 'a', 'a'], ['a', 'c', 'a', 'j'], ['a', 'c', 'a', 'j'], ['f', 'c', 'd', 'j']]

Example_2:
input: [['d', 'a', 'a', 'c'], ['a', 'f', 'a', 'c'], ['d', 'f', 'b', 'c'], ['d', 'a', 'b', 'a']]
output: [['a', 'a', 'a', 'a'], ['d', 'a', 'a', 'c'], ['d', 'f', 'b', 'c'], ['d', 'f', 'b', 'c']]

Example_3:
input: [['f', 'a', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'b'], ['a', 'a', 'i', 'a', 'e', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'e', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'i', 'a', 'e', 'a'], ['f', 'a', 'i', 'a', 'e', 'b']]

Test case:
input: [['a', 'd', 'a', 'c'], ['a', 'd', 'i', 'c'], ['a', 'a', 'i', 'c'], ['g', 'a', 'i', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a'], ['a', 'd', 'i', 'c'], ['a', 'a', 'i', 'c'], ['g', 'a', 'i', 'a']]
"""
from typing import List, Optional


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[Optional[List[str]]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted strings into a new list for each group
        :param strs:
        :return:
        """
        if not strs or len(strs) == 0:
            return []
        result = {}
        for s in strs:
            ss = "".join(sorted(s))
            if ss in result:
                result[ss].append(s)
            else:
                result[ss] = [s]
        return list(result.values())

################################################################

Solution:
[['a', 'a', 'a', 'a'], ['a', 'a', 'i', 'c'], ['a', 'd', 'i', 'c'], ['g', 'd', 'i', 'c']]

