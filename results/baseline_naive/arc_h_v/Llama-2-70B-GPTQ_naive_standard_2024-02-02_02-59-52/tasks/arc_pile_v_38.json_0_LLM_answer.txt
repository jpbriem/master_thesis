Input token: 678
Output token: 322
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'j', 'a', 'e'], ['a', 'g', 'a', 'j', 'a', 'a'], ['c', 'a', 'a', 'a', 'a', 'a'], ['a', 'g', 'a', 'a', 'd', 'a'], ['c', 'a', 'a', 'j', 'd', 'a'], ['c', 'a', 'h', 'a', 'a', 'e']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['c', 'a', 'a', 'j', 'a', 'a'], ['c', 'g', 'a', 'j', 'd', 'e'], ['c', 'g', 'h', 'j', 'd', 'e']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a', 'e'], ['f', 'a', 'a', 'a', 'a', 'a'], ['a', 'i', 'h', 'a', 'a', 'a'], ['a', 'a', 'h', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'h', 'a', 'a', 'a'], ['f', 'i', 'h', 'a', 'a', 'e']]

Example_3:
input: [['a', 'a', 'f', 'a'], ['j', 'g', 'f', 'h'], ['a', 'g', 'a', 'h'], ['a', 'g', 'f', 'h']]
output: [['a', 'a', 'a', 'a'], ['a', 'g', 'f', 'h'], ['a', 'g', 'f', 'h'], ['j', 'g', 'f', 'h']]

Test case:
input: [['i', 'h', 'a', 'j', 'a'], ['a', 'h', 'f', 'a', 'd'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a'], ['a', 'a', 'a', 'j', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare sorted strings to find anagram groups
        3. return a new list with all anagrams grouped together
        :param strs:
        :return:
        """
        if not strs or len(strs) == 0:
            return []

        # create dictionary that maps sorted strings to lists of original strings
        d = {}
        for s in strs:
            key = "".join(sorted(s))
            if key not in d:
                d[key] = []
            d[key].append(s)

        # create output list by iterating over keys in dict
        res = []
        for k in d:
            res.extend([list(v)] for v in zip(*d[k]))
        return res

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'j', 'a'], ['a', 'h', 'a', 'j', 'a'], ['i', 'h', 'f', 'j', 'd']]

