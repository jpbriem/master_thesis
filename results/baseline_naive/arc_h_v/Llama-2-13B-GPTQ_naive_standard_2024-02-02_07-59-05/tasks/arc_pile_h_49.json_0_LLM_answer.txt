Input token: 465
Output token: 703
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['h', 'a', 'a', 'h'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'j', 'j', 'j']]
output: [['h', 'h', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['j', 'j', 'j', 'a']]

Example_2:
input: [['a', 'f', 'f', 'f', 'a'], ['c', 'a', 'a', 'c', 'c'], ['a', 'a', 'a', 'a', 'g'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]
output: [['f', 'f', 'f', 'a', 'a'], ['c', 'c', 'c', 'a', 'a'], ['g', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['j', 'j', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['h', 'a', 'h', 'h']]
output: [['j', 'j', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['h', 'h', 'h', 'a']]

Test case:
input: [['a', 'b', 'a', 'a'], ['a', 'a', 'a', 'j'], ['a', 'a', 'h', 'h'], ['a', 'a', 'g', 'a']]
################################################################

LLM answer:

output: [['b', 'a', 'a', 'a'], ['a', 'a', 'a', 'j'], ['h', 'h', 'h', 'a'], ['g', 'a', 'a', 'a']]
"""

import unittest
from typing import List, Tuple

class Solution:
    def transform(self, nums: List[List[str]]) -> None:
        """
        Do not modify the input list. Instead, in place replace each element to build a new list.
        """
        if len(nums) == 0: return
        for i in range(len(nums)):
            if nums[i][0]!= 'a': continue
            j = i + 1
            while j < len(nums):
                if nums[j][0]!= 'a' or nums[j - 1][0]!= 'a': break
                nums[j], nums[j - 1] = nums[j - 1], nums[j]
                j += 1


class TestSolution(unittest.TestCase):
    def test_example_1(self):
        self.assertEqual([['h','h','a','a'],['a','a','a','a'],['a','a','a','a'],['j','j','j','a']], Solution().transform([['h','a','a','h'],['a','a','a','a'],['a','a','a','a'],['a','j','j','j']]))

    def test_example_2(self):
        self.assertEqual([['f','f','f','a','a'],['c','c','c','a','a'],['g','a','a','a','a'],['a','a','a','a','a'],['a','a','a','a','a']], Solution().transform([['a','f','f','f','a'],['c','a','a','c','c'],['a','a','a','a','g'],['a','a','a','a','a'],['a','a','a','a','a']]))

    def test_example_3(self):
        self.assertEqual([['j','j','a','a'],['a','a','a','a'],['a','a','a','a'],['h','h','h','a']], Solution().transform([['j','j','a','a'],['a','a','a','a'],['a','a','a','a'],['h','a','h','h']]))

    def test_solution(self):
        self.assertEqual([['b','a','a','a'],['a','a','a','j'],['h','h','h','a'],['g','a','a','a']], Solution().transform([['a','b','a','a'],['a','a','a','j'],['a','a','h','h'],['a','a','g','a']]))

if __name__ == "__main__":
    unittest.main()
################################################################

Solution:
[['b', 'a', 'a', 'a'], ['j', 'a', 'a', 'a'], ['h', 'h', 'a', 'a'], ['g', 'a', 'a', 'a']]

