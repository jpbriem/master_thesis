Input token: 519
Output token: 1945
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'g', 'a', 'a'], ['a', 'a', 'a', 'd', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'd', 'j'], ['a', 'a', 'a', 'd', 'j']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'd', 'a'], ['a', 'a', 'a', 'd', 'j'], ['a', 'a', 'g', 'd', 'j']]

Example_2:
input: [['h', 'a', 'a', 'a'], ['h', 'a', 'a', 'e'], ['a', 'f', 'i', 'a'], ['h', 'f', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['h', 'a', 'a', 'a'], ['h', 'f', 'a', 'a'], ['h', 'f', 'i', 'e']]

Example_3:
input: [['a', 'a', 'a', 'i', 'd'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'd'], ['a', 'c', 'e', 'i', 'd'], ['a', 'a', 'a', 'i', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'i', 'd'], ['a', 'a', 'a', 'i', 'd'], ['a', 'c', 'e', 'i', 'd']]

Test case:
input: [['b', 'a', 'e', 'a'], ['a', 'a', 'a', 'a'], ['a', 'h', 'e', 'g'], ['a', 'a', 'e', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'h', 'e', 'g'], ['a', 'a', 'e', 'a']]
"""

import unittest
from typing import List, Tuple

class Solution:
    def sortArrayByIndex(self, nums: List[List[str]]) -> None:
        """
        Do not write additional code.
        
        Pre-condition:
            - 0 <= len(nums) <= 50000
            - 0 <= len(nums[i]) <= 10000
            - All elements in nums[i] are lowercase letters.
            
        Post-condition:
            Return a sorted array of lists.
        """
        for i in range(len(nums)):
            if nums[i][0] == "a":
                nums[i].sort()
            else:
                nums[i].reverse()


if __name__ == "__main__":
    solution = Solution()
    testcases = [
        ([[], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], []),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
        ([["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"], ["a", "a", "a", "a"]], [[], [], [], []]),
    ]
    
    for t in testcases:
        print("Testcase {}".format(t))
        solution.sortArrayByIndex(*t)
        assert solution.sortArrayByIndex(*t) == expected_result

################################################################

Solution:
[['a', 'a', 'a', 'a'], ['a', 'a', 'e', 'a'], ['a', 'a', 'e', 'a'], ['b', 'h', 'e', 'g']]

