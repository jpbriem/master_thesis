Input token: 705
Output token: 222
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['b', 'a', 'a', 'h', 'a', 'j'], ['a', 'a', 'e', 'h', 'f', 'j'], ['a', 'a', 'e', 'a', 'a', 'j'], ['b', 'g', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'h', 'f', 'a'], ['a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'h', 'a', 'j'], ['b', 'a', 'e', 'h', 'f', 'j'], ['b', 'g', 'e', 'h', 'f', 'j']]

Example_2:
input: [['a', 'a', 'a', 'f', 'a', 'a'], ['a', 'a', 'a', 'f', 'g', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'g', 'h'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'g', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'g', 'a'], ['a', 'a', 'a', 'f', 'g', 'a'], ['a', 'a', 'a', 'f', 'g', 'h']]

Example_3:
input: [['g', 'a', 'f', 'h', 'e'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h', 'e'], ['g', 'a', 'f', 'a', 'a'], ['a', 'j', 'f', 'h', 'e']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'f', 'h', 'e'], ['g', 'a', 'f', 'h', 'e'], ['g', 'j', 'f', 'h', 'e']]

Test case:
input: [['j', 'i', 'b', 'a'], ['j', 'i', 'a', 'h'], ['a', 'a', 'b', 'a'], ['a', 'i', 'b', 'h']]
################################################################

LLM answer:

output: [['j', 'i', 'a', 'h'], ['j', 'i', 'a', 'h'], ['a', 'a', 'b', 'a'], ['a', 'i', 'b', 'h']]
"""
from typing import List, Tuple
import re

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        # Write your code here
        if not strs: return []
        
        anagram = {}
        for s in strs:
            key = tuple([len(c) for c in s.lower()])
            anagram[key] = anagram.get(key, []) + [s]
            
        ans = []
        for k, v in sorted(anagram.items(), key=lambda x: len(x[0])):
            ans += [[v[0]] * len(k)]
        return ans

################################################################

Solution:
[['a', 'a', 'a', 'a'], ['a', 'i', 'b', 'a'], ['j', 'i', 'b', 'h'], ['j', 'i', 'b', 'h']]

