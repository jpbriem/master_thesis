Input token: 411
Output token: 882
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a'], ['a', 'f', 'a', 'f'], ['b', 'a', 'b', 'a'], ['i', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['f', 'f', 'a', 'a'], ['b', 'b', 'a', 'a'], ['i', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'j', 'a'], ['a', 'b', 'a', 'a'], ['a', 'a', 'a', 'a'], ['c', 'a', 'a', 'a']]
output: [['j', 'a', 'a', 'a'], ['b', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['c', 'a', 'a', 'a']]

Example_3:
input: [['a', 'd', 'd', 'a'], ['i', 'i', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]
output: [['d', 'd', 'a', 'a'], ['i', 'i', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]

Test case:
input: [['f', 'a', 'a', 'f'], ['h', 'h', 'a', 'h'], ['a', 'c', 'a', 'a'], ['d', 'd', 'd', 'a']]
################################################################

LLM answer:

output: [['f', 'a', 'a', 'f'], ['h', 'h', 'a', 'h'], ['a', 'c', 'a', 'a'], ['d', 'd', 'd', 'a']]

Constraints:
1 <= A.length, B.length <= 50
1 <= A[i].length, B[i].length <= 10
A[i][j], B[i][j] = 'a' or 'z'.
*/
class Solution {
    public String[][] updateBoard(String[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return new String[0][];
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j].equals("M")) continue;
                if (i == click[0] && j == click[1]) {
                    board[i][j] = "X";
                    queue.offer(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0];
            int y = cur[1];
            int count = getCount(x, y, board);
            if (count > 0) {
                board[x][y] = Integer.toString(count);
                for (int i = -1; i <= 1; ++i) {
                    for (int j = -1; j <= 1; ++j) {
                        if (i == 0 && j == 0) continue;
                        int nextX = x + i;
                        int nextY = y + j;
                        if (nextX >= 0 && nextX < m && nextY >= 0 && nextY < n &&!visited[nextX][nextY]) {
                            if (board[nextX][nextY].equals("E")) {
                                board[nextX][nextY] = "B";
                                queue.add(new int[]{nextX, nextY});
                                visited[nextX][nextY] = true;
                            } else if (board[nextX][nextY].equals("M")) {
                                board[nextX][nextY] = "X";
                                queue.add(new int[]{nextX, nextY});
                                visited[nextX][nextY] = true;
                            }
                        }
                    }
                }
            }
        }
        return board;
    }

    private int getCount(int x, int y, String[][] board) {
        int count = 0;
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                int nextX = x + i;
                int nextY = y + j;
                if (nextX >= 0 && nextX < board.length && nextY >= 0 && nextY < board[0].length) {
                    if (board[nextX][nextY].equals("M")) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}
################################################################

Solution:
[['f', 'f', 'a', 'a'], ['h', 'h', 'h', 'a'], ['c', 'a', 'a', 'a'], ['d', 'd', 'd', 'a']]

