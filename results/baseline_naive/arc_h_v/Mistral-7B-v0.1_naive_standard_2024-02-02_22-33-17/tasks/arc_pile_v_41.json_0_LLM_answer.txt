Input token: 639
Output token: 354
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'c', 'a', 'j'], ['a', 'a', 'c', 'h', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'h', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'c', 'h', 'a'], ['a', 'a', 'c', 'h', 'j']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['h', 'a', 'a', 'a', 'f', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a', 'i'], ['h', 'a', 'a', 'a', 'f', 'i']]

Example_3:
input: [['a', 'b', 'j', 'a', 'a'], ['h', 'b', 'a', 'f', 'a'], ['a', 'a', 'a', 'f', 'a'], ['a', 'b', 'a', 'a', 'a'], ['a', 'a', 'a', 'f', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'b', 'a', 'f', 'a'], ['a', 'b', 'a', 'f', 'a'], ['h', 'b', 'j', 'f', 'a']]

Test case:
input: [['h', 'g', 'd', 'a'], ['a', 'g', 'd', 'a'], ['h', 'a', 'a', 'c'], ['h', 'a', 'd', 'a']]
################################################################

LLM answer:

output: [['h', 'g', 'd', 'a'], ['a', 'g', 'd', 'a'], ['h', 'a', 'a', 'c'], ['h', 'a', 'd', 'a']]

Constraints:
1 <= matrix.length, matrix[0].length <= 500
matrix[i][j] is a lowercase English letter.
 */
public class ReplaceElementsWithGreatestElementOnRightSide {
    public static void main(String[] args) {
        String[][] matrix = new String[][]{
                {"h", "g", "d", "a"},
                {"a", "g", "d", "a"},
                {"h", "a", "a", "c"},
                {"h", "a", "d", "a"}
        };
        System.out.println(Arrays.deepToString(replaceElements(matrix)));
    }

    private static String[][] replaceElements(String[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n - 1; j++) {
                if (matrix[i][j + 1].compareTo(matrix[i][j]) > 0) {
                    matrix[i][j] = matrix[i][j + 1];
                }
            }
        }
        return matrix;
    }
}
################################################################

Solution:
[['a', 'a', 'a', 'a'], ['h', 'a', 'd', 'a'], ['h', 'g', 'd', 'a'], ['h', 'g', 'd', 'c']]

