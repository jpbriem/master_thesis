Input token: 492
Output token: 400
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'g', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'i', 'a', 'a'], ['h', 'a', 'h', 'a']]
output: [['g', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['i', 'a', 'a', 'a'], ['h', 'h', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'i', 'i', 'i', 'a'], ['a', 'a', 'j', 'j', 'a'], ['g', 'a', 'a', 'a', 'a'], ['a', 'e', 'a', 'e', 'e']]
output: [['a', 'a', 'a', 'a', 'a'], ['i', 'i', 'i', 'a', 'a'], ['j', 'j', 'a', 'a', 'a'], ['g', 'a', 'a', 'a', 'a'], ['e', 'e', 'e', 'a', 'a']]

Example_3:
input: [['a', 'e', 'e', 'a'], ['a', 'a', 'a', 'a'], ['g', 'g', 'a', 'g'], ['a', 'f', 'f', 'a']]
output: [['e', 'e', 'a', 'a'], ['a', 'a', 'a', 'a'], ['g', 'g', 'g', 'a'], ['f', 'f', 'a', 'a']]

Test case:
input: [['a', 'a', 'e', 'e', 'e'], ['a', 'a', 'g', 'a', 'a'], ['a', 'a', 'h', 'a', 'h'], ['j', 'j', 'a', 'a', 'j'], ['a', 'i', 'a', 'i', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'e', 'e', 'e'], ['a', 'a', 'g', 'a', 'a'], ['a', 'a', 'h', 'a', 'h'], ['j', 'j', 'a', 'a', 'j'], ['i', 'i', 'a', 'a', 'i']]
*/
public class Solution {
    public List<List<String>> replaceWords(List<List<String>> dictionary, String sentence) {
        // Write your solution here
        if (dictionary == null || dictionary.size() == 0) return new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < dictionary.size(); ++i) {
            int len = dictionary.get(i).size();
            if (!map.containsKey(len)) map.put(len, i);
            else {
                while (map.get(len)!= i &&!map.containsKey(len + 1)) ++len;
                map.put(len + 1, i);
            }
        }
        String[] words = sentence.split(" ");
        List<List<String>> res = new ArrayList<>();
        for (String word : words) {
            int index = 0;
            while (index < word.length()) {
                if (map.containsKey(word.length())) break;
                index++;
            }
            if (index >= word.length()) res.add(Arrays.asList(word));
            else res.add(Arrays.asList(dictionary.get(map.get(word.length())).get(0)));
        }
        return res;
    }
}
################################################################

Solution:
[['e', 'e', 'e', 'a', 'a'], ['g', 'a', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a'], ['j', 'j', 'j', 'a', 'a'], ['i', 'i', 'a', 'a', 'a']]

