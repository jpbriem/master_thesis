Input token: 519
Output token: 384
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a'], ['c', 'a', 'c', 'a', 'c'], ['e', 'e', 'a', 'a', 'a'], ['a', 'i', 'a', 'i', 'i'], ['a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['c', 'c', 'c', 'a', 'a'], ['e', 'e', 'a', 'a', 'a'], ['i', 'i', 'i', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['h', 'a', 'a', 'a'], ['a', 'd', 'a', 'd'], ['a', 'a', 'a', 'a'], ['b', 'b', 'a', 'b']]
output: [['h', 'a', 'a', 'a'], ['d', 'd', 'a', 'a'], ['a', 'a', 'a', 'a'], ['b', 'b', 'b', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a'], ['a', 'e', 'a', 'a', 'a'], ['a', 'i', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a'], ['a', 'b', 'a', 'b', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'a'], ['i', 'i', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['b', 'b', 'a', 'a', 'a']]

Test case:
input: [['a', 'd', 'd', 'd'], ['j', 'a', 'a', 'j'], ['f', 'a', 'f', 'f'], ['c', 'c', 'c', 'a']]
################################################################

LLM answer:

output: [['a', 'd', 'd', 'd'], ['j', 'a', 'a', 'j'], ['f', 'f', 'f', 'f'], ['c', 'c', 'c', 'a']]
*/
public class Solution {
    public List<List<String>> replaceWords(List<List<String>> dictionary, String sentence) {
        // Write your solution here
        if (sentence == null || sentence.length() == 0) return new ArrayList<>();
        Set<String> set = new HashSet<>(dictionary);
        for (int i = 0; i < sentence.length(); ++i) {
            StringBuilder sb = new StringBuilder();
            while (i + sb.length() <= sentence.length()) {
                sb.append(sentence.charAt(i));
                if (!set.contains(sb.toString())) break;
                i++;
            }
            if (sb.length() > 0 &&!set.contains(sb.toString())) {
                sentence = sentence.substring(0, i - sb.length() + 1) + sb.toString() + sentence.substring(i);
            } else {
                break;
            }
        }
        List<List<String>> res = new ArrayList<>();
        int start = 0;
        while (start < sentence.length()) {
            int end = sentence.indexOf(' ', start);
            if (end == -1) end = sentence.length();
            res.add(Arrays.asList(sentence.substring(start, end)));
            start = end + 1;
        }
        return res;
    }
}
################################################################

Solution:
[['d', 'd', 'd', 'a'], ['j', 'j', 'a', 'a'], ['f', 'f', 'f', 'a'], ['c', 'c', 'c', 'a']]

