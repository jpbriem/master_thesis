Input token: 585
Output token: 386
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'h', 'a'], ['a', 'a', 'h', 'i'], ['a', 'a', 'h', 'a'], ['f', 'a', 'a', 'i']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'h', 'a'], ['a', 'a', 'h', 'i'], ['f', 'a', 'h', 'i']]

Example_2:
input: [['a', 'f', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'a', 'b'], ['h', 'a', 'a', 'a', 'b'], ['a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'b'], ['h', 'f', 'e', 'a', 'b']]

Example_3:
input: [['j', 'a', 'a', 'a', 'a', 'd'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'd'], ['a', 'a', 'a', 'a', 'a', 'd'], ['a', 'e', 'a', 'h', 'a', 'a'], ['a', 'a', 'f', 'h', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'd'], ['a', 'a', 'a', 'h', 'a', 'd'], ['j', 'e', 'f', 'h', 'a', 'd']]

Test case:
input: [['f', 'a', 'e', 'a'], ['a', 'a', 'a', 'a'], ['f', 'h', 'a', 'g'], ['f', 'a', 'e', 'a']]
################################################################

LLM answer:

output: [['f', 'a', 'e', 'a'], ['a', 'a', 'a', 'a'], ['f', 'h', 'a', 'g'], ['f', 'a', 'e', 'a']]

Constraints:
0 <= len(arr) <= 5 * 10^4
0 <= arr[i].length <= 5 * 10^4
0 <= arr[i][j].length <= 10
arr[i][j] consists of lowercase English letters only.
 */
public class Solution {
    public List<String> findAndReplacePattern(List<String> words, String pattern) {
        List<String> res = new ArrayList<>();
        for (int i = 0; i < words.size(); i++) {
            if (isMatch(words.get(i), pattern)) {
                res.add(words.get(i));
            }
        }
        return res;
    }

    private boolean isMatch(String word, String pattern) {
        int[] map = new int[26];
        Arrays.fill(map, -1);
        char[] chars = word.toCharArray();
        char[] pChars = pattern.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (map[chars[i] - 'a']!= pChars[i] - 'a') {
                return false;
            } else {
                map[chars[i] - 'a'] = pChars[i] - 'a';
            }
        }
        return true;
    }
}
################################################################

Solution:
[['a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a'], ['f', 'a', 'e', 'a'], ['f', 'h', 'e', 'g']]

