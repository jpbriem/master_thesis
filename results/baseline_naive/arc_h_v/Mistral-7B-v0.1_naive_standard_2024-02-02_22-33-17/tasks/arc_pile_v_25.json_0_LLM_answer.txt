Input token: 411
Output token: 485
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'f', 'a', 'a'], ['a', 'a', 'b', 'a'], ['a', 'f', 'a', 'a'], ['a', 'a', 'b', 'i']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'f', 'b', 'a'], ['a', 'f', 'b', 'i']]

Example_2:
input: [['a', 'a', 'a', 'a'], ['j', 'a', 'a', 'a'], ['a', 'b', 'a', 'a'], ['a', 'a', 'a', 'c']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['j', 'b', 'a', 'c']]

Example_3:
input: [['a', 'a', 'a', 'a'], ['d', 'a', 'a', 'a'], ['d', 'i', 'a', 'a'], ['a', 'i', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['d', 'i', 'a', 'a'], ['d', 'i', 'a', 'a']]

Test case:
input: [['f', 'h', 'a', 'a'], ['a', 'a', 'a', 'd'], ['a', 'h', 'c', 'd'], ['f', 'h', 'a', 'd']]
################################################################

LLM answer:

output: [['f', 'h', 'a', 'a'], ['a', 'a', 'a', 'd'], ['a', 'h', 'c', 'd'], ['f', 'h', 'a', 'd']]

Constraints:
1 <= N <= 50,000 where N is the length of the input list.
1 <= M <= 50,000 where M is the number of elements in each sublist.
All characters in the input string will be lowercase English letters ('a' to 'z').
*/

class Solution {
    public List<List<String>> removeAnagrams(List<List<String>> A) {
        if (A == null || A.size() == 0) return new ArrayList<>();
        int i = 0;
        while (i < A.size()) {
            boolean flag = true;
            for (int j = i + 1; j < A.size(); ++j) {
                if (!isAnagram(A.get(i), A.get(j))) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                A.remove(i);
            } else {
                ++i;
            }
        }
        return A;
    }

    private boolean isAnagram(List<String> a, List<String> b) {
        if (a.size()!= b.size()) return false;
        Map<Character, Integer> map = new HashMap<>();
        for (char c : a.get(0).toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for (char c : b.get(0).toCharArray()) {
            if (!map.containsKey(c)) return false;
            map.put(c, map.get(c) - 1);
            if (map.get(c) == 0) map.remove(c);
        }
        return map.isEmpty();
    }
}
################################################################

Solution:
[['a', 'a', 'a', 'a'], ['a', 'h', 'a', 'd'], ['f', 'h', 'a', 'd'], ['f', 'h', 'c', 'd']]

