Input token: 558
Output token: 437
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'b', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'f', 'a', 'a', 'a'], ['a', 'c', 'c', 'a', 'c', 'a'], ['h', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a'], ['b', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['f', 'a', 'a', 'a', 'a', 'a'], ['c', 'c', 'c', 'a', 'a', 'a'], ['h', 'a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'b', 'a', 'a'], ['a', 'a', 'c', 'a'], ['a', 'a', 'a', 'd'], ['a', 'a', 'a', 'a']]
output: [['b', 'a', 'a', 'a'], ['c', 'a', 'a', 'a'], ['d', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]

Example_3:
input: [['d', 'a', 'd', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['f', 'a', 'f', 'f']]
output: [['d', 'd', 'a', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['f', 'f', 'f', 'a']]

Test case:
input: [['j', 'a', 'j', 'j', 'a'], ['a', 'b', 'b', 'b', 'a'], ['a', 'f', 'a', 'f', 'a'], ['h', 'a', 'h', 'a', 'h'], ['a', 'a', 'e', 'a', 'a']]
################################################################

LLM answer:

output: [['j', 'a', 'j', 'j', 'a'], ['b', 'b', 'b', 'b', 'a'], ['f', 'f', 'a', 'f', 'a'], ['h', 'h', 'a', 'h', 'h'], ['e', 'a', 'a', 'a', 'a']]

Constraints:
1 <= arr.length, arr[i].length <= 50
arr[i][j] is a lowercase English letter.
 */
public class ReplaceElementsWithGreatestElementOnRightSide {
    public static void main(String[] args) {
        String[][] arr = new String[][]{
                {"j", "a", "j", "j", "a"},
                {"a", "b", "b", "b", "a"},
                {"a", "f", "a", "f", "a"},
                {"h", "a", "h", "a", "h"},
                {"a", "a", "e", "a", "a"}
        };
        System.out.println(Arrays.deepToString(replaceElements(arr)));
    }

    private static String[][] replaceElements(String[][] arr) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int m = arr[i].length;
            for (int j = 0; j < m - 1; j++) {
                if (arr[i][j + 1].compareTo(arr[i][j]) > 0) {
                    char temp = arr[i][j];
                    arr[i][j] = arr[i][j + 1];
                    arr[i][j + 1] = temp;
                }
            }
        }
        return arr;
    }
}
################################################################

Solution:
[['j', 'j', 'j', 'a', 'a'], ['b', 'b', 'b', 'a', 'a'], ['f', 'f', 'a', 'a', 'a'], ['h', 'h', 'h', 'a', 'a'], ['e', 'a', 'a', 'a', 'a']]

