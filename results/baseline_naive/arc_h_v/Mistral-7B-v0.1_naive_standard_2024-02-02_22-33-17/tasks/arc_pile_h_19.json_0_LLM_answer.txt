Input token: 465
Output token: 371
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a'], ['b', 'a', 'b', 'b'], ['a', 'a', 'c', 'a'], ['a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['b', 'b', 'b', 'a'], ['c', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'b', 'b', 'b'], ['a', 'a', 'a', 'a'], ['a', 'a', 'c', 'a'], ['a', 'f', 'f', 'a']]
output: [['b', 'b', 'b', 'a'], ['a', 'a', 'a', 'a'], ['c', 'a', 'a', 'a'], ['f', 'f', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'i'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'j', 'a', 'j', 'a'], ['a', 'a', 'e', 'a', 'a']]
output: [['i', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['j', 'j', 'a', 'a', 'a'], ['e', 'a', 'a', 'a', 'a']]

Test case:
input: [['a', 'f', 'a', 'a'], ['a', 'd', 'd', 'd'], ['h', 'a', 'a', 'a'], ['a', 'a', 'a', 'g']]
################################################################

LLM answer:

output: [['f', 'a', 'a', 'a'], ['d', 'd', 'd', 'a'], ['h', 'a', 'a', 'a'], ['a', 'a', 'a', 'g']]

Constraints:
1 <= arr.length <= 500
1 <= arr[i].length <= 500
arr[i][j] is a lowercase English letter.
 */
public class ReplaceElementsWithGreatestElementOnRightSide {
    public static void main(String[] args) {
        String[][] arr = new String[][]{
                {"a", "a", "a", "a"},
                {"b", "a", "b", "b"},
                {"a", "a", "c", "a"},
                {"a", "a", "a", "a"}
        };
        System.out.println(Arrays.deepToString(replaceElements(arr)));
    }

    private static String[][] replaceElements(String[][] arr) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int m = arr[i].length - 1;
            while (m >= 0 && arr[i][m].equals("a")) {
                m--;
            }
            if (m == -1) {
                arr[i][m + 1] = "a";
            } else {
                arr[i][m + 1] = arr[i][m];
            }
        }
        return arr;
    }
}
################################################################

Solution:
[['f', 'a', 'a', 'a'], ['d', 'd', 'd', 'a'], ['h', 'a', 'a', 'a'], ['g', 'a', 'a', 'a']]

