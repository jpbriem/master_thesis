
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 6, 0], [4, 0, 0, 4], [1, 1, 0, 1], [0, 0, 0, 0]]
output: [[6, 0, 0, 0], [4, 4, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0]]

Example_2:
input: [[5, 0, 5, 5, 0, 0], [7, 0, 0, 7, 0, 7], [4, 0, 0, 4, 0, 0], [0, 0, 9, 9, 9, 0], [0, 0, 0, 0, 0, 8], [0, 2, 0, 0, 2, 0]]
output: [[5, 5, 5, 0, 0, 0], [7, 7, 7, 0, 0, 0], [4, 4, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0], [8, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0], [0, 0, 0, 6, 0, 6], [0, 0, 1, 0, 0, 0], [0, 5, 0, 5, 5, 0], [0, 0, 3, 0, 3, 0]]
output: [[0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0], [3, 3, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 7, 0, 0], [8, 8, 0, 0, 0, 8], [1, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]



###########################################################
Sample Outputs:
Here is a Python solution for the problem:

```python
def max_matrix(matrix):
    n = len(matrix)
    m = len(matrix[0])
    
    # Create an empty result matrix of the same size as input matrix
    result = [[0] * m for _ in range(n)]
    
    for i in range(n):
        for j in range(m):
            if matrix[i][j] != 0:
                max_val = float('-inf')
                for k in range(i, n):
                    for l in range(j, m):
                        if matrix[k][l] > max_val and (k == i or matrix[k-1][l] == 0) and (l == j or matrix[k][l-1] == 0):
                            max_val = matrix[k][l]
                            row = k
                            col = l
                
                result[row][col] = max_val
    
    return result

# Test cases
print(max_matrix([[0, 0, 6, 0], [4, 0, 0, 4], [1, 1, 0, 1], [0, 0, 0, 0]])) 
print(max_matrix([[5, 0, 5, 5, 0, 0], [7, 0, 0, 7, 0, 7], [4, 0, 0, 4, 0, 0], [0, 0, 9, 9, 9, 0], [0, 0, 0, 0, 0, 8], [0, 2, 0, 0, 2, 0]]))
print(max_matrix([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0], [0, 0, 0, 6, 0, 6], [0, 0, 1, 0, 0, 0], [0, 5, 0, 5, 5, 0], [0, 0, 3, 0, 3, 0]]))

# Your test case
print(max_matrix([[0, 0, 0, 7, 0, 0], [8, 8, 0, 0, 0, 8], [1, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]))
```

The function `max_matrix` takes a square matrix as input and returns a new matrix where each cell contains the maximum value that can be obtained by moving only right or down from the corresponding cell in the original matrix. The algorithm works by iterating over all cells in the matrix and finding the maximum value that can be reached from each cell using dynamic programming.

The time complexity of this algorithm is O(N^2), where N is the number of rows (or columns) in the matrix. The space complexity is also O(N^2) because we need to store the result matrix.


###########################################################
Result:
solution: [[7, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0], [1, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.038135593220338986

cat_success_cnt: 5

cat_success_rate: 0.1388888888888889

