
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 0], [0, 8, 0, 0], [0, 1, 0, 1], [4, 4, 0, 4]]
output: [[0, 0, 0, 0], [8, 0, 0, 0], [1, 1, 0, 0], [4, 4, 4, 0]]

Example_2:
input: [[0, 7, 7, 7], [0, 0, 9, 0], [5, 5, 5, 0], [0, 0, 0, 3]]
output: [[7, 7, 7, 0], [9, 0, 0, 0], [5, 5, 5, 0], [3, 0, 0, 0]]

Example_3:
input: [[8, 8, 0, 8], [0, 0, 6, 0], [9, 0, 0, 9], [0, 0, 0, 0]]
output: [[8, 8, 8, 0], [6, 0, 0, 0], [9, 9, 0, 0], [0, 0, 0, 0]]

Test case:
input: [[7, 0, 7, 0, 0, 7], [0, 0, 0, 0, 9, 0], [3, 0, 0, 0, 0, 3], [4, 4, 0, 4, 0, 0], [0, 0, 2, 2, 0, 0], [0, 8, 0, 8, 0, 0]]



###########################################################
Sample Outputs:
Here's a Python solution for the given problem:

```python
def find_max_columns(matrix):
    max_values = []
    for i in range(len(matrix)):
        max_value = float('-inf')
        for j in range(len(matrix[i])):
            if matrix[i][j] > max_value and matrix[j][i] == 0:
                max_value = matrix[i][j]
        max_values.append(max_value)
    
    return max_values

def update_matrix(input_matrix):
    output_matrix = input_matrix.copy()
    max_values = find_max_columns(input_matrix)

    for i in range(len(input_matrix)):
        for j in range(len(input_matrix[0])):
            if input_matrix[j][i] != 0:
                output_matrix[j][i] = max_values[j]

    return output_matrix

# Test case
input_matrix = [
    [7, 0, 7, 0, 0, 7],
    [0, 0, 0, 0, 9, 0],
    [3, 0, 0, 0, 0, 3],
    [4, 4, 0, 4, 0, 0],
    [0, 0, 2, 2, 0, 0],
    [0, 8, 0, 8, 0, 0]
]

print(update_matrix(input_matrix))
```

This code defines two functions: `find_max_columns` to compute the maximum value of each column and `update_matrix` to replace non-zero elements with their corresponding maximum values.

The test case is provided at the end of the script. The expected output for this test case is:
```
[[7, 0, 7, 0, 0, 7], 
 [0, 0, 0, 0, 9, 0], 
 [3, 0, 0, 0, 0, 3], 
 [4, 4, 4, 4, 0, 4], 
 [0, 0, 2, 2, 0, 0], 
 [0, 8, 0, 8, 0, 8]]
```


###########################################################
Result:
solution: [[7, 7, 7, 0, 0, 0], [9, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0], [2, 2, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.044715447154471545

cat_success_cnt: 7

cat_success_rate: 0.15217391304347827

