Input token: 651
Output token: 272
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'f', 'a', 'a', 'a], ['a', 'a', 'a', 'b', 'a', 'a], ['g', 'a', 'f', 'a', 'a', 'd], ['a', 'c', 'a', 'b', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'd']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'f', 'b', 'a', 'd], ['g', 'c', 'f', 'b', 'a', 'd']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a', 'j], ['a', 'a', 'a', 'a', 'a', 'j], ['a', 'a', 'c', 'a', 'a', 'j], ['d', 'a', 'c', 'h', 'a', 'a], ['d', 'a', 'c', 'a', 'a', 'a], ['d', 'f', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['d', 'a', 'c', 'a', 'a', 'j], ['d', 'a', 'c', 'a', 'a', 'j], ['d', 'f', 'c', 'h', 'a', 'j']]

Example_3:
input: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'j], ['a', 'a', 'a', 'j], ['a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['a', 'a', 'a', 'j], ['a', 'a', 'a', 'j']]

Test case:
input: [['d', 'a', 'f', 'i], ['a', 'g', 'f', 'i], ['d', 'g', 'a', 'i], ['a', 'g', 'a', 'a']]
################################################################

LLM answer:

output: [['d', 'a', 'f', 'i'], ['a', 'g', 'f', 'i'], ['d', 'g', 'a', 'i'], ['a', 'g', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare each sorted string with all other sorted strings to find anagram groups
            - if two strings have different lengths then they cannot be anagrams
            - if two strings have the same length but do not match character by character then they cannot be anagrams
                  - this is a O(n) operation where n = len(string)
        3. return list of lists containing anagram groups

        Time complexity: O(m * n^2), m = number of strings, n = max length of any string
        Space complexity: O(m + n), m = number of strings, n = max length of any string
        """
        # TODO: implement solution here
        pass

################################################################

Solution:
[['a', 'a', 'a', 'a], ['a', 'g', 'a', 'i], ['d', 'g', 'f', 'i], ['d', 'g', 'f', 'i']]

