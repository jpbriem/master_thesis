Input token: 585
Output token: 179
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'g', 'a', 'g', 'a], ['a', 'a', 'a', 'i', 'i], ['a', 'a', 'a', 'a', 'a], ['j', 'a', 'j', 'j', 'a], ['a', 'a', 'a', 'f', 'f']]
output: [['g', 'g', 'a', 'a', 'a], ['i', 'i', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['j', 'j', 'j', 'a', 'a], ['f', 'f', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'b], ['a', 'i', 'i', 'a], ['c', 'a', 'a', 'a], ['g', 'a', 'a', 'a']]
output: [['b', 'a', 'a', 'a], ['i', 'i', 'a', 'a], ['c', 'a', 'a', 'a], ['g', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'e', 'a', 'e', 'e], ['a', 'i', 'a', 'a', 'i', 'a], ['a', 'f', 'f', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'g], ['a', 'h', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['e', 'e', 'e', 'a', 'a', 'a], ['i', 'i', 'a', 'a', 'a', 'a], ['f', 'f', 'a', 'a', 'a', 'a], ['g', 'a', 'a', 'a', 'a', 'a], ['h', 'a', 'a', 'a', 'a', 'a']]

Test case:
input: [['h', 'h', 'a', 'h], ['c', 'a', 'a', 'a], ['a', 'd', 'd', 'a], ['f', 'f', 'a', 'a']]
################################################################

LLM answer:

output: [['h', 'h', 'a', 'h'], ['a', 'a', 'a', 'a'], ['d', 'd', 'a', 'a'], ['f', 'f', 'a', 'a']]
"""
# 0ms 100%
class Solution(object):
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        from collections import defaultdict
        d = defaultdict(list)
        for s in strs:
            t = tuple(sorted(s))
            d[t].append(s)
        return list(map(lambda x: sorted(x), d.values()))

################################################################

Solution:
[['h', 'h', 'h', 'a], ['c', 'a', 'a', 'a], ['d', 'd', 'a', 'a], ['f', 'f', 'a', 'a']]

