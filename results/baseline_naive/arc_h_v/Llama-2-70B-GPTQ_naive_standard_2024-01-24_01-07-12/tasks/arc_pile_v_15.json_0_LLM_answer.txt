Input token: 612
Output token: 396
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'g', 'a', 'a', 'a], ['a', 'g', 'f', 'h', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'g', 'a', 'h', 'a], ['a', 'a', 'a', 'h', 'a']]
output: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'g', 'a', 'h', 'a], ['a', 'g', 'a', 'h', 'a], ['a', 'g', 'f', 'h', 'a']]

Example_2:
input: [['e', 'a', 'a', 'f], ['e', 'a', 'a', 'a], ['e', 'd', 'a', 'f], ['a', 'd', 'c', 'f']]
output: [['a', 'a', 'a', 'a], ['e', 'a', 'a', 'f], ['e', 'd', 'a', 'f], ['e', 'd', 'c', 'f']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'g', 'a', 'a', 'a', 'f], ['j', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['j', 'g', 'a', 'a', 'c', 'a], ['j', 'a', 'a', 'a', 'a', 'f']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['j', 'a', 'a', 'a', 'a', 'a], ['j', 'g', 'a', 'a', 'a', 'f], ['j', 'g', 'a', 'a', 'c', 'f']]

Test case:
input: [['j', 'a', 'a', 'a', 'a], ['j', 'a', 'a', 'h', 'c], ['j', 'g', 'a', 'h', 'a], ['a', 'g', 'e', 'a', 'a], ['a', 'g', 'e', 'h', 'c']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a'], ['j', 'a', 'a', 'h', 'c'], ['j', 'g', 'a', 'h', 'a'], ['a', 'g', 'e', 'a', 'a'], ['a', 'g', 'e', 'h', 'c']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare each sorted string with all other sorted strings to find anagram groups
            - if two strings have same length and characters then they belong to same group
                  (i.e., they are anagrams)
        3. return a list of lists where each inner list contains all words that are anagrams

        Time complexity: O(nlogn + m^2), where n is number of unique letters and m is number of words
        Space complexity: O(m), where m is number of words
        """
        # Sort each word in list of words
        for i in range(len(strs)):
            strs[i].sort()

        # Compare each word with every other word to determine which ones are anagrams
        result = []
        for j in range(0, len(strs)):
            temp = []
            for k in range(j+1, len(strs)):
                if strs[k][::-1] == strs[j][::-1]:
                    temp.append(strs[k])
            result.append(temp)
        return result

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['j', 'g', 'a', 'h', 'a], ['j', 'g', 'e', 'h', 'c], ['j', 'g', 'e', 'h', 'c']]

