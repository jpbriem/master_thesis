Input token: 666
Output token: 359
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'e], ['a', 'a', 'b', 'a', 'a], ['a', 'a', 'c', 'a', 'c], ['g', 'a', 'a', 'a', 'a], ['a', 'h', 'a', 'a', 'a']]
output: [['e', 'a', 'a', 'a', 'a], ['b', 'a', 'a', 'a', 'a], ['c', 'c', 'a', 'a', 'a], ['g', 'a', 'a', 'a', 'a], ['h', 'a', 'a', 'a', 'a']]

Example_2:
input: [['f', 'a', 'a', 'f', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['c', 'a', 'a', 'c', 'a], ['a', 'e', 'a', 'e', 'e']]
output: [['f', 'f', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['c', 'c', 'a', 'a', 'a], ['e', 'e', 'e', 'a', 'a']]

Example_3:
input: [['a', 'c', 'a', 'a', 'a', 'c], ['j', 'a', 'j', 'a', 'a', 'j], ['a', 'a', 'g', 'a', 'g', 'g], ['a', 'a', 'a', 'a', 'a', 'a], ['d', 'a', 'a', 'a', 'd', 'a], ['e', 'e', 'a', 'a', 'a', 'a']]
output: [['c', 'c', 'a', 'a', 'a', 'a], ['j', 'j', 'j', 'a', 'a', 'a], ['g', 'g', 'g', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['d', 'd', 'a', 'a', 'a', 'a], ['e', 'e', 'a', 'a', 'a', 'a']]

Test case:
input: [['a', 'a', 'd', 'd', 'd], ['f', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'e', 'a], ['a', 'c', 'c', 'a', 'a], ['a', 'a', 'j', 'j', 'j']]
################################################################

LLM answer:

output: [['d', 'd', 'd', 'd', 'd'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'e', 'a'], ['c', 'c', 'a', 'a', 'a'], ['j', 'j', 'j', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted strings into a dictionary with key as first char
            and value as list of sorted strings
        4. return values from dictionary
        :param strs: list of lists of strings
        :return: list of lists of strings
        """
        if not strs or len(strs) == 0:
            return []

        # create a dictionary where keys are first characters of sorted strings
        # and values are lists of sorted strings
        d = {}
        for s in strs:
            ss = "".join(sorted(s))
            if ss not in d:
                d[ss] = []
            d[ss].append(s)

        # convert back to original order
        res = []
        for k, v in d.items():
            res += [[k + "".join(sorted(i))] for i in v]
        return res

################################################################

Solution:
[['d', 'd', 'd', 'a', 'a], ['f', 'a', 'a', 'a', 'a], ['e', 'a', 'a', 'a', 'a], ['c', 'c', 'a', 'a', 'a], ['j', 'j', 'j', 'a', 'a']]

