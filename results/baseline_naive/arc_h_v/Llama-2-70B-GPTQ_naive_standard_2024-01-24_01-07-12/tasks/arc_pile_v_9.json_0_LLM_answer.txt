Input token: 612
Output token: 289
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['h', 'a', 'd', 'a], ['h', 'c', 'a', 'i], ['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['h', 'a', 'a', 'a], ['h', 'c', 'd', 'i']]

Example_2:
input: [['a', 'c', 'a', 'a', 'a', 'a], ['b', 'a', 'd', 'a', 'a', 'a], ['b', 'a', 'a', 'a', 'a', 'g], ['a', 'a', 'a', 'a', 'a', 'g], ['a', 'a', 'a', 'a', 'a', 'g], ['a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'g], ['b', 'a', 'a', 'a', 'a', 'g], ['b', 'c', 'd', 'a', 'a', 'g']]

Example_3:
input: [['c', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['c', 'a', 'g', 'j', 'f], ['c', 'a', 'g', 'a', 'f], ['a', 'a', 'a', 'a', 'f']]
output: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['c', 'a', 'a', 'a', 'f], ['c', 'a', 'g', 'a', 'f], ['c', 'a', 'g', 'j', 'f']]

Test case:
input: [['a', 'a', 'a', 'a', 'a], ['h', 'a', 'j', 'a', 'e], ['a', 'c', 'a', 'a', 'a], ['h', 'a', 'a', 'i', 'e], ['a', 'a', 'a', 'i', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare each sorted string with all other sorted strings to find anagram groups
            - if two strings have same length and characters then they belong to same group
                  (anagrams)
            - else they don't belong to same group
        3. return list of lists where each inner list contains a group of anagrams

        Time complexity: O(nlogn + m^2), where n is number of elements in strs and m is average size of each element in strs
        Space complexity: O(m), where m is average size of each element in strs
        """
        # TODO: implement solution here
        pass

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['h', 'a', 'a', 'i', 'e], ['h', 'c', 'j', 'i', 'e']]

