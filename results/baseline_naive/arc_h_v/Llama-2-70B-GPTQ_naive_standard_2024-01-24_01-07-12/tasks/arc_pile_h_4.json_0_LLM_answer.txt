Input token: 612
Output token: 330
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'c], ['j', 'j', 'j', 'a', 'a', 'a], ['e', 'a', 'a', 'a', 'e', 'e], ['i', 'a', 'a', 'i', 'i', 'a], ['a', 'g', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['c', 'a', 'a', 'a', 'a', 'a], ['j', 'j', 'j', 'a', 'a', 'a], ['e', 'e', 'e', 'a', 'a', 'a], ['i', 'i', 'i', 'a', 'a', 'a], ['g', 'a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'd', 'a', 'a], ['a', 'a', 'a', 'a], ['h', 'h', 'h', 'a], ['a', 'g', 'g', 'g']]
output: [['d', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['h', 'h', 'h', 'a], ['g', 'g', 'g', 'a']]

Example_3:
input: [['b', 'a', 'a', 'a', 'b], ['a', 'a', 'a', 'a', 'j], ['f', 'a', 'f', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'a', 'd', 'd', 'd']]
output: [['b', 'b', 'a', 'a', 'a], ['j', 'a', 'a', 'a', 'a], ['f', 'f', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['d', 'd', 'd', 'a', 'a']]

Test case:
input: [['e', 'e', 'a', 'e', 'a], ['a', 'i', 'i', 'a', 'a], ['a', 'd', 'a', 'a', 'a], ['c', 'a', 'c', 'c', 'a], ['a', 'a', 'a', 'a', 'b']]
################################################################

LLM answer:

output: [['e', 'e', 'a', 'e', 'a'], ['i', 'i', 'a', 'i', 'a'], ['d', 'a', 'a', 'a', 'a'], ['c', 'c', 'c', 'c', 'a'], ['a', 'a', 'a', 'a', 'b']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted string to dictionary with key as first char
            if not found then create new entry for that key
            
        Time complexity: O(nlogn) where n is number of elements in list of lists
                          (sorting time complexity)
        Space complexity: O(n) where n is number of elements in list of lists
                           (storage space required by dictionary)
        """
        d = {}  # type: Dict[Tuple[int,...], List[List[str]]]
        for s in strs:
            s.sort()
            k = tuple(s)
            if k not in d:
                d[k] = []
            d[k].append(s)
        return list(d.values())

################################################################

Solution:
[['e', 'e', 'e', 'a', 'a], ['i', 'i', 'a', 'a', 'a], ['d', 'a', 'a', 'a', 'a], ['c', 'c', 'c', 'a', 'a], ['b', 'a', 'a', 'a', 'a']]

