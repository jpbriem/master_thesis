Input token: 645
Output token: 318
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'h], ['i', 'e', 'b', 'a', 'a', 'a], ['a', 'e', 'a', 'a', 'c', 'a], ['a', 'e', 'a', 'd', 'a', 'h], ['a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'e', 'a', 'a', 'a', 'a], ['a', 'e', 'a', 'a', 'a', 'h], ['i', 'e', 'b', 'd', 'c', 'h']]

Example_2:
input: [['a', 'a', 'a', 'e], ['a', 'j', 'a', 'a], ['a', 'j', 'a', 'e], ['a', 'j', 'a', 'e']]
output: [['a', 'a', 'a', 'a], ['a', 'j', 'a', 'e], ['a', 'j', 'a', 'e], ['a', 'j', 'a', 'e']]

Example_3:
input: [['a', 'g', 'a', 'h', 'a], ['a', 'a', 'i', 'a', 'a], ['a', 'a', 'i', 'a', 'a], ['a', 'g', 'a', 'h', 'a], ['a', 'a', 'i', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'a', 'i', 'a', 'a], ['a', 'g', 'i', 'h', 'a], ['a', 'g', 'i', 'h', 'a']]

Test case:
input: [['h', 'a', 'c', 'a', 'a', 'a], ['h', 'd', 'a', 'j', 'a', 'a], ['a', 'd', 'a', 'j', 'i', 'e], ['a', 'a', 'c', 'a', 'a', 'a], ['h', 'd', 'c', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'e']]
################################################################

LLM answer:

output: [['h', 'a', 'c', 'a', 'a', 'a'], ['h', 'd', 'a', 'j', 'a', 'a'], ['a', 'd', 'a', 'j', 'i', 'e'], ['a', 'a', 'c', 'a', 'a', 'a'], ['h', 'd', 'c', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'e']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list
        2. compare two strings to see if they have the same length
        3. add them into a dictionary with key as tuple of sorted string
            and value as original string
        4. return values from dictionary
        :param strs:
        :return:
        """
        d = {}
        for s in strs:
            tup = tuple(''.join(sorted(x)) for x in zip(*s))
            if tup not in d:
                d[tup] = []
            d[tup].append(s)
        return list(map(lambda x: list(x), d.values()))

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['h', 'd', 'c', 'a', 'a', 'a], ['h', 'd', 'c', 'j', 'a', 'e], ['h', 'd', 'c', 'j', 'i', 'e']]

