Input token: 732
Output token: 348
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'e', 'a', 'a', 'e', 'e], ['a', 'a', 'a', 'b', 'a', 'a], ['a', 'a', 'a', 'f', 'f', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'g', 'a', 'a', 'g', 'g']]
output: [['e', 'e', 'e', 'a', 'a', 'a], ['b', 'a', 'a', 'a', 'a', 'a], ['f', 'f', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['g', 'g', 'g', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'd', 'a', 'a', 'a', 'd], ['a', 'a', 'g', 'g', 'a', 'g], ['a', 'a', 'a', 'a', 'a', 'a], ['e', 'a', 'a', 'e', 'e', 'a], ['a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['d', 'd', 'a', 'a', 'a', 'a], ['g', 'g', 'g', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['e', 'e', 'e', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['j', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'g', 'a], ['a', 'e', 'e', 'e', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'i', 'a', 'a', 'i']]
output: [['j', 'a', 'a', 'a', 'a], ['g', 'a', 'a', 'a', 'a], ['e', 'e', 'e', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['i', 'i', 'a', 'a', 'a']]

Test case:
input: [['e', 'a', 'a', 'a', 'a], ['j', 'a', 'j', 'a', 'a], ['b', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'f', 'a], ['a', 'g', 'g', 'a', 'a']]
################################################################

LLM answer:

output: [['e', 'a', 'a', 'a', 'a'], ['j', 'a', 'j', 'a', 'a'], ['b', 'b', 'b', 'a', 'a'], ['f', 'a', 'a', 'a', 'a'], ['g', 'g', 'g', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare first character of sorted string with other strings' first characters
            if they match then add to a new list
                   else create a new list for that string
        3. return all lists
        :param strs:
        :return:
        """
        # O(n) time | O(n) space - where n is len(strs)
        anagram_groups = []  # type: ignore
        for s in strs:
            sorted_string = "".join(sorted(s))
            found = False
            for i, g in enumerate(anagram_groups):
                if sorted_string == "".join(sorted(g[0])):
                    anagram_groups[i].append(s)
                    found = True
                    break
            if not found:
                anagram_groups.append([s])
        return anagram_groups

################################################################

Solution:
[['e', 'a', 'a', 'a', 'a], ['j', 'j', 'a', 'a', 'a], ['b', 'a', 'a', 'a', 'a], ['f', 'a', 'a', 'a', 'a], ['g', 'g', 'a', 'a', 'a']]

