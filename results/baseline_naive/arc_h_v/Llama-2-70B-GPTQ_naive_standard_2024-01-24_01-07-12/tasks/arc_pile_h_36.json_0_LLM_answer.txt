Input token: 519
Output token: 286
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'g], ['d', 'd', 'a', 'd', 'a], ['j', 'j', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['g', 'a', 'a', 'a', 'a], ['d', 'd', 'd', 'a', 'a], ['j', 'j', 'a', 'a', 'a']]

Example_2:
input: [['h', 'a', 'h', 'h], ['f', 'f', 'a', 'a], ['a', 'i', 'a', 'a], ['a', 'a', 'e', 'a']]
output: [['h', 'h', 'h', 'a], ['f', 'f', 'a', 'a], ['i', 'a', 'a', 'a], ['e', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a], ['a', 'c', 'a', 'a', 'a], ['a', 'e', 'a', 'a', 'a], ['i', 'i', 'a', 'a', 'i], ['a', 'd', 'd', 'a', 'd']]
output: [['a', 'a', 'a', 'a', 'a], ['c', 'a', 'a', 'a', 'a], ['e', 'a', 'a', 'a', 'a], ['i', 'i', 'i', 'a', 'a], ['d', 'd', 'd', 'a', 'a']]

Test case:
input: [['a', 'a', 'a', 'b], ['a', 'h', 'a', 'a], ['e', 'e', 'a', 'e], ['a', 'g', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a'], ['h', 'a', 'a', 'a'], ['e', 'e', 'e', 'e'], ['g', 'a', 'a', 'a']]
"""
from typing import List, Optional

class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[Optional[List[str]]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted strings into a new list for each group
        Time complexity: O(nlogn) where n is number of strings
                       O(mlogm) where m is length of longest string
        Space complexity: O(n) where n is number of strings
        """
        if not strs or len(strs) == 0: return []
        result = {} # type: ignore
        for s in strs:
            sorted_string = "".join(sorted(s))
            if sorted_string in result:
                result[sorted_string].append(s)
            else:
                result[sorted_string] = [s]
        return list(result.values())

################################################################

Solution:
[['b', 'a', 'a', 'a], ['h', 'a', 'a', 'a], ['e', 'e', 'e', 'a], ['g', 'a', 'a', 'a']]

