Input token: 531
Output token: 297
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'f], ['a', 'c', 'c', 'c], ['a', 'd', 'a', 'a], ['j', 'a', 'j', 'j']]
output: [['f', 'a', 'a', 'a], ['c', 'c', 'c', 'a], ['d', 'a', 'a', 'a], ['j', 'j', 'j', 'a']]

Example_2:
input: [['d', 'd', 'a', 'd], ['a', 'f', 'f', 'a], ['b', 'b', 'a', 'a], ['a', 'c', 'c', 'c']]
output: [['d', 'd', 'd', 'a], ['f', 'f', 'a', 'a], ['b', 'b', 'a', 'a], ['c', 'c', 'c', 'a']]

Example_3:
input: [['a', 'a', 'f', 'a', 'a', 'f], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'i', 'a', 'i], ['a', 'a', 'a', 'a', 'a', 'a], ['e', 'a', 'a', 'e', 'a', 'a], ['a', 'a', 'a', 'a', 'b', 'a']]
output: [['f', 'f', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['i', 'i', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['e', 'e', 'a', 'a', 'a', 'a], ['b', 'a', 'a', 'a', 'a', 'a']]

Test case:
input: [['g', 'a', 'a', 'a], ['a', 'a', 'd', 'd], ['i', 'i', 'i', 'a], ['a', 'c', 'c', 'c']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a'], ['d', 'd', 'a', 'a'], ['i', 'i', 'i', 'a'], ['c', 'c', 'c', 'a']]
"""
from typing import List, Optional


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[Optional[List[str]]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted strings into a dictionary with key as first char
            and value as list of sorted strings
        4. return list of values from dict
        :param strs: list of lists of strings
        :return: list of lists of strings
        """
        # O(n) time | O(n) space - where n is len(strs)
        if not strs or not strs[0]:
            return []

        d = {}  # type: ignore
        for s in strs:
            ss = "".join(sorted(s))
            if ss not in d:
                d[ss] = []
            d[ss].append(s)

        return [v for v in d.values()]

################################################################

Solution:
[['g', 'a', 'a', 'a], ['d', 'd', 'a', 'a], ['i', 'i', 'i', 'a], ['c', 'c', 'c', 'a']]

