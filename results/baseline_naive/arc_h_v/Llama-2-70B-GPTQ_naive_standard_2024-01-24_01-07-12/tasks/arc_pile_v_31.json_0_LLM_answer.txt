Input token: 612
Output token: 295
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'f', 'b', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'h], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'h], ['i', 'a', 'a', 'a', 'e', 'a], ['a', 'a', 'a', 'a', 'e', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'e', 'h], ['i', 'f', 'b', 'a', 'e', 'h']]

Example_2:
input: [['h', 'b', 'j', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['h', 'a', 'j', 'i', 'a], ['a', 'a', 'a', 'a', 'a], ['h', 'a', 'j', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['h', 'a', 'j', 'a', 'a], ['h', 'a', 'j', 'a', 'a], ['h', 'b', 'j', 'i', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'g], ['j', 'a', 'a', 'g], ['a', 'h', 'a', 'g']]
output: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'g], ['a', 'a', 'a', 'g], ['j', 'h', 'a', 'g']]

Test case:
input: [['a', 'i', 'j', 'a', 'a], ['a', 'i', 'a', 'b', 'a], ['a', 'i', 'j', 'b', 'a], ['g', 'a', 'j', 'b', 'c], ['a', 'a', 'a', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['g', 'a', 'j', 'b', 'c'], ['a', 'a', 'a', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare each sorted string with all other sorted strings to find anagram
        3. if found, add it to a dictionary keyed by sorted string value
        4. return values from dictionary as list of lists
        :param strs:
        :return:
        """
        # O(n) time | O(n) space - where n is len(strs)
        d = {}  # type: dict
        for s in strs:
            ss = "".join(sorted(s))
            if not ss in d:
                d[ss] = []
            d[ss].append(s)
        return list(d.values())

################################################################

Solution:
[['a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a], ['a', 'i', 'j', 'b', 'a], ['a', 'i', 'j', 'b', 'a], ['g', 'i', 'j', 'b', 'c']]

