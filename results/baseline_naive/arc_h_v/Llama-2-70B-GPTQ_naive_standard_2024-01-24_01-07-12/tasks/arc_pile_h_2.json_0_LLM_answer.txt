Input token: 591
Output token: 365
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'd', 'd', 'd], ['j', 'j', 'a', 'a], ['a', 'c', 'a', 'a], ['a', 'a', 'a', 'a']]
output: [['d', 'd', 'd', 'a], ['j', 'j', 'a', 'a], ['c', 'a', 'a', 'a], ['a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'i', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'c], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'j', 'j], ['a', 'f', 'a', 'a', 'f', 'a], ['a', 'a', 'a', 'a', 'a', 'b']]
output: [['i', 'a', 'a', 'a', 'a', 'a], ['c', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['j', 'j', 'a', 'a', 'a', 'a], ['f', 'f', 'a', 'a', 'a', 'a], ['b', 'a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['g', 'a', 'g', 'a], ['a', 'b', 'b', 'a], ['a', 'a', 'a', 'a], ['a', 'a', 'a', 'i']]
output: [['g', 'g', 'a', 'a], ['b', 'b', 'a', 'a], ['a', 'a', 'a', 'a], ['i', 'a', 'a', 'a']]

Test case:
input: [['a', 'a', 'i', 'a', 'i', 'a], ['b', 'a', 'a', 'b', 'a', 'a], ['a', 'g', 'g', 'g', 'a', 'a], ['h', 'a', 'h', 'a', 'a', 'a], ['a', 'c', 'a', 'c', 'a', 'a], ['a', 'a', 'd', 'a', 'a', 'd']]
################################################################

LLM answer:

output: [['i', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a'], ['g', 'g', 'a', 'a', 'a', 'a'], ['h', 'h', 'a', 'a', 'a', 'a'], ['c', 'c', 'a', 'a', 'a', 'a'], ['d', 'd', 'a', 'a', 'a', 'a']]
"""

import collections
from typing import List, Tuple


class Solution:
    def groupAnagrams(self, strs: List[List[str]]) -> List[List[str]]:
        """
        1. sort each string in list of strings
        2. compare first character to find anagram groups
        3. add sorted strings into a dictionary with key as first char
            and value as list of original unsorted strings
        4. return values from dictionary
        :param strs:
        :return:
        """
        # O(n) time | O(n) space - where n is len(strs)
        d = {}  # type: dict
        for s in strs:
            if not s or not s[0]:
                continue
            k = s[0]
            v = "".join(sorted(s))
            if k not in d:
                d[k] = []
            d[k].append(v)
        return [[x[::-1] for x in v] for k, v in d.items()]

################################################################

Solution:
[['i', 'i', 'a', 'a', 'a', 'a], ['b', 'b', 'a', 'a', 'a', 'a], ['g', 'g', 'g', 'a', 'a', 'a], ['h', 'h', 'a', 'a', 'a', 'a], ['c', 'c', 'a', 'a', 'a', 'a], ['d', 'd', 'a', 'a', 'a', 'a']]

