Input token: 651
Output token: 329
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'g', 'a', 'a], ['a', 'a', 'c', 'a', 'a', 'a], ['a', 'a', 'a', 'f', 'a', 'f], ['a', 'a', 'b', 'a', 'b', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['d', 'a', 'a', 'd', 'a', 'a']]
output: [['g', 'a', 'a', 'a', 'a', 'a], ['c', 'a', 'a', 'a', 'a', 'a], ['f', 'f', 'a', 'a', 'a', 'a], ['b', 'b', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['d', 'd', 'a', 'a', 'a', 'a']]

Example_2:
input: [['d', 'd', 'd', 'a', 'a', 'a], ['f', 'a', 'a', 'a', 'a', 'a], ['a', 'c', 'c', 'c', 'a', 'a], ['a', 'a', 'h', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'j', 'j', 'j']]
output: [['d', 'd', 'd', 'a', 'a', 'a], ['f', 'a', 'a', 'a', 'a', 'a], ['c', 'c', 'c', 'a', 'a', 'a], ['h', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['j', 'j', 'j', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['a', 'j', 'j', 'a']]
output: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['j', 'j', 'a', 'a']]

Test case:
input: [['a', 'd', 'a', 'd], ['g', 'g', 'g', 'a], ['a', 'a', 'f', 'f], ['a', 'i', 'i', 'i']]
################################################################

LLM answer:

output: [['a', 'd', 'a', 'd'], ['g', 'g', 'g', 'a'], ['f', 'f', 'a', 'a'], ['i', 'i', 'i', 'i']]
"""

import collections
from typing import List, Tuple


class Solution:
    def transform(self, arr):
        """
        Do not return anything, modify arr in-place instead.

        :type arr: List[List[str]]
        :rtype: None
        """
        if len(arr) == 0 or len(arr[0]) == 0:
            return

        # find all unique characters
        uniques = set()
        for row in arr:
            for char in row:
                uniques.add(char)

        # sort by frequency of appearance
        freqs = collections.Counter(uniques).items()
        freqs = sorted(freqs, key=lambda x: -x[1])

        # get the most frequent character
        max_freq = freqs[0][1]
        max_char = freqs[0][0]

        # replace all other chars with the most frequent one
        for i, row in enumerate(arr):
            for j, char in enumerate(row):
                if char!= max_char:
                    arr[i][j] = max_char

################################################################

Solution:
[['d', 'd', 'a', 'a], ['g', 'g', 'g', 'a], ['f', 'f', 'a', 'a], ['i', 'i', 'i', 'a']]

