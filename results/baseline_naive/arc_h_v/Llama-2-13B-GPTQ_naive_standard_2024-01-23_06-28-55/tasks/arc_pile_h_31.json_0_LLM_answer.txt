Input token: 502
Output token: 976
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', 'h', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'e], ['.', '.', '.', '.', '.', 'a], ['.', '.', '.', '.', '.', '.], ['d', 'd', '.', '.', '.', '.], ['.', '.', 'g', '.', 'g', '.']]
output: [['h', '.', '.', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['a', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['d', 'd', '.', '.', '.', '.], ['g', 'g', '.', '.', '.', '.']]

Example_2:
input: [['g', '.', 'g', '.', 'g], ['.', '.', '.', '.', 'a], ['i', '.', 'i', '.', 'i], ['.', '.', 'h', '.', '.], ['.', '.', '.', '.', '.']]
output: [['g', 'g', 'g', '.', '.], ['a', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.], ['h', '.', '.', '.', '.], ['.', '.', '.', '.', '.']]

Example_3:
input: [['.', 'i', '.', '.], ['g', '.', '.', '.], ['.', '.', '.', '.], ['f', 'f', 'f', '.']]
output: [['i', '.', '.', '.], ['g', '.', '.', '.], ['.', '.', '.', '.], ['f', 'f', 'f', '.']]

Test case:
input: [['.', 'f', '.', '.', '.], ['.', '.', 'h', 'h', 'h], ['.', 'i', 'i', '.', 'i], ['.', 'a', 'a', 'a', '.], ['.', 'b', '.', '.', '.']]
################################################################

LLM answer:

output: [['f', '.', '.', '.', '.], ['h', 'h', 'h', '.', '.], ['i', 'i', 'i', '.', '.], ['a', 'a', 'a', '.', '.'], ['b', '.', '.', '.', '.']]
'''

def test(self):
    self._test()

def _test():
    # Test cases from above
    for tc in (Example_1, Example_2, Example_3):
        assert Solution().moveZeroes(tc[0]) == tc[1]

    # Test cases generated by this function
    s = Solution()
    assert s.moveZeroes([]) == []
    assert s.moveZeroes(['']) == ['']
    assert s.moveZeroes(['.', '.']) == ['.', '.' ]
    assert s.moveZeroes(['.', '.','0']) == ['.', '.','0']
    assert s.moveZeroes(['.', '0', '.' ]) == ['.', '0', '.' ]
    assert s.moveZeroes(['.', '0', '.','0']) == ['.', '0', '.','0']
    assert s.moveZeroes(['.', '0', '.','0', '0']) == ['.', '0', '.','0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0']) == ['.', '0', '.','0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']) == ['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
    assert s.moveZeroes(['.', '0', '.','0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']) == ['
################################################################

Solution:
[['f', '.', '.', '.', '.], ['h', 'h', 'h', '.', '.], ['i', 'i', 'i', '.', '.], ['a', 'a', 'a', '.', '.], ['b', '.', '.', '.', '.']]

