Input token: 488
Output token: 380
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['c', '.', '.', '.], ['c', '.', '.', '.], ['c', 'i', 'b', '.], ['.', 'i', '.', '.']]
output: [['.', '.', '.', '.], ['c', '.', '.', '.], ['c', 'i', '.', '.], ['c', 'i', 'b', '.']]

Example_2:
input: [['.', 'b', '.', 'i', '.', 'a], ['.', '.', '.', 'i', 'e', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['h', '.', '.', '.', 'e', '.], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'i', 'e', '.], ['h', 'b', '.', 'i', 'e', 'a']]

Example_3:
input: [['.', '.', '.', 'h], ['f', 'a', '.', '.], ['.', 'a', '.', '.], ['f', '.', '.', '.']]
output: [['.', '.', '.', '.], ['.', '.', '.', '.], ['f', 'a', '.', '.], ['f', 'a', '.', 'h']]

Test case:
input: [['.', '.', '.', '.', '.', 'c], ['h', '.', '.', '.', '.', '.], ['.', 'a', 'f', '.', 'b', '.], ['h', '.', 'f', 'g', '.', 'c], ['.', '.', 'f', '.', 'b', '.], ['.', 'a', '.', 'g', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', 'c], ['h', '.', '.', '.', '.', '.], ['.', 'a', 'f', '.', 'b', '.], ['h', '.', 'f', 'g', '.', 'c], ['.', '.', 'f', '.', 'b', '.], ['.', 'a', '.', 'g', '.', '.']]
'''

def test_case():
    return [
        (test_case_0, expected_result_0),
        (test_case_1, expected_result_1),
        (test_case_2, expected_result_2),
        (test_case_3, expected_result_3)
    ]

# -----------------------------------------------------------------------------

class Solution:
    def transform(self, s):
        if not s or len(s[0]) == 0:
            return []
        
        result = []
        for i in range(len(s)):
            row = []
            
            for j in range(len(s[0])):
                if s[i][j]!= '.':
                    row.append('.')
                else:
                    row.append('*')
                    
            result.append(row)
        
        return result

# -----------------------------------------------------------------------------

for test_case in test_case():
    print('\n--- Test Case #%d ---' % (test_case[0]))
    solution = Solution()
    actual_result = solution.transform(test_case[1])
    assert actual_result == test_case[2]
################################################################

Solution:
[['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', 'f', '.', '.', '.], ['h', 'a', 'f', 'g', 'b', 'c], ['h', 'a', 'f', 'g', 'b', 'c']]

