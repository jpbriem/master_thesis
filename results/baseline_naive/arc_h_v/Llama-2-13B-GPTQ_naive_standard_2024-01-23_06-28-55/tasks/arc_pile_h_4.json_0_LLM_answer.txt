Input token: 510
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b], ['i', 'i', 'i', '.', '.', '.], ['d', '.', '.', '.', 'd', 'd], ['h', '.', '.', 'h', 'h', '.], ['.', 'f', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['f', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', 'c', '.', '.], ['.', '.', '.', '.], ['g', 'g', 'g', '.], ['.', 'f', 'f', 'f']]
output: [['c', '.', '.', '.], ['.', '.', '.', '.], ['g', 'g', 'g', '.], ['f', 'f', 'f', '.']]

Example_3:
input: [['a', '.', '.', '.', 'a], ['.', '.', '.', '.', 'i], ['e', '.', 'e', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', 'c', 'c', 'c']]
output: [['a', 'a', '.', '.', '.], ['i', '.', '.', '.', '.], ['e', 'e', '.', '.', '.], ['.', '.', '.', '.', '.], ['c', 'c', 'c', '.', '.']]

Test case:
input: [['d', 'd', '.', 'd', '.], ['.', 'h', 'h', '.', '.], ['.', 'c', '.', '.', '.], ['b', '.', 'b', 'b', '.], ['.', '.', '.', '.', 'a']]
################################################################

LLM answer:

output: [['d', 'd', '.', 'd', '.], ['.', 'h', 'h', '.', '.], ['.', 'c', '.', '.', '.], ['b', 'b', 'b', 'b', '.], ['.', '.', '.', '.', 'a']]
'''

def test(self):
    self._test()

def _test():
    # Test cases from above
    for t in (Example_1, Example_2, Example_3):
        assert Solution().moveZeroes(t[0]) == t[1]

    # Test cases generated by this function
    s = Solution()
    assert s.moveZeroes([[0]]) == [[0]]
    assert s.moveZeroes([[0, 0]]) == [[0, 0]]
    assert s.moveZeroes([[0, 0, 0]]) == [[0, 0, 0]]
    assert s.moveZeroes([[0, 0, 0, 0]]) == [[0, 0, 0, 0]]
    assert s.moveZeroes([[0, 0, 0, 0, 0]]) == [[0, 0, 0, 0, 0]]
    assert s.moveZeroes([[0, 0, 0, 0, 0, 0]]) == [[0, 0, 0, 0, 0, 0]]
    assert s.moveZeroes([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
################################################################

Solution:
[['d', 'd', 'd', '.', '.], ['h', 'h', '.', '.', '.], ['c', '.', '.', '.', '.], ['b', 'b', 'b', '.', '.], ['a', '.', '.', '.', '.']]

