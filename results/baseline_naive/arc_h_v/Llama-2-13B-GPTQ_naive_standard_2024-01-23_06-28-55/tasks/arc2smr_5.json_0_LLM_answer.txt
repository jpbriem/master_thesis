Input token: 1340
Output token: 515
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'd', 'e', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', 'd', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'd', 'e', 'd', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'd', 'e', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', '.', 'd', '.', 'd', '.', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'd', '.', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'd', '.', 'd', '.', 'd', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', 'e', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', 'd', 'e', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', '.', 'd', '.', 'd', '.', 'd', '.', 'd', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', '.', 'd', '.', 'd', '.', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', 'd', '.', 'd', '.', 'd', '.', 'd', '.', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', 'e', 'd', 'e', 'd', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', 'e', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', '.', '.', '.', '.', '.']]
'''

# This is a generated testcase. Please delete after execution.
from decimal import Decimal

import pytest

import _codec as codec


@pytest.mark.parametrize("input_, output", [([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]]), ([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]]), ([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]]), ([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]]), ([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]]), ([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]]), ([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]]), ([[Decimal('0'), Decimal('0')]], [[Decimal('0'), Decimal('0')]])])
def test_decimal(input_, output):
    assert codec.decode(codec.encode(input_)) == output

################################################################

Solution:
[['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', 'e', 'd', 'e', 'd', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', 'e', 'd', 'e', 'd', 'e', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', 'd', 'e', 'd', 'e', 'd', 'e', 'd', '.', '.', '.', '.', '.']]

