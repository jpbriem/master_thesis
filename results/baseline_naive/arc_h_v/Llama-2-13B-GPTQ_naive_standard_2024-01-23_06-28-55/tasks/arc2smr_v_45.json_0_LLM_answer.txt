Input token: 2029
Output token: 846
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', 'b', '.', 'b', 'b', '.], ['b', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', 'b', '.', 'b', 'b', '.], ['b', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', 'b', '.', 'b', 'b', '.], ['b', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.], ['a', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.], ['a', '.', '.', 'b', '.', 'b', 'b', '.], ['b', '.', '.', 'a', '.', 'a', 'a', '.], ['a', '.', '.', 'b', '.', 'b', 'b', '.], ['b', '.', '.', 'a', '.', 'a', 'a', '.], ['a', '.', '.', 'b', '.', 'b', 'b', '.], ['b', '.', '.', '.', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', 'b', '.', 'b', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', 'b', '.', 'b', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', 'b', '.', 'b', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['a', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['a', '.', '.', 'b', '.', 'b', '.', '.', '.], ['b', '.', '.', 'a', '.', 'a', '.', '.', '.], ['a', '.', '.', 'b', '.', 'b', '.', '.', '.], ['b', '.', '.', 'a', '.', 'a', '.', 'b', '.], ['a', '.', '.', 'b', '.', 'b', '.', 'a', '.], ['b', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['.', 'b', '.', '.', 'b', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['.', 'b', '.', '.', 'b', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['.', 'b', '.', '.', 'b', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['a', '.', '.', '.', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', '.', '.], ['a', 'b', '.', '.', 'b', '.', '.', '.', '.], ['b', 'a', '.', '.', 'a', '.', '.', '.', '.], ['a', 'b', '.', '.', 'b', '.', '.', '.', '.], ['b', 'a', '.', '.', 'a', '.', '.', '.', '.], ['a', 'b', '.', '.', 'b', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', '.', '.], ['.', '.', 'b', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', '.', '.], ['.', '.', 'b', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', '.', '.], ['.', '.', 'b', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', '.', '.], ['.', '.', 'b', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.]]
'''


# Definition for an Intersection Node.
class IntersectionNode(int, int):
    def __init__(self, val: int, key: int) -> None:
        self.val = val
        self.key = key

# Returns a list of lists of integer tuples ranging from 0-98, representing different road types.
# Each list will have length n where n == len(adjacencies).
# For example, if roads[0] = [[1, 2], [3]], roads[1] = [] means that there is a road starting at node 0 and ending at node 1 or 2 with cost 1, and another road starting at node 0 and ending at node 3 with no cost.
def read_map():
    with open('day5/input.txt') as f:
        content = f.read()

    adjacencies = {}
    nodes = set()
    for line in content.splitlines():
        line = line.strip().replace('.', '#').replace('#', '.')
        row = line.split(', ')
        for i in range(len(row)):
            row[i] = int(row[i])
        nodes.add(row[0])
        adjacencies[row[0]] = row[1:]
    return adjacencies, nodes


def get_intersections(nodes, adjacencies):
    intersections = defaultdict(list)
    for node in nodes:
        for neighbor in adjacencies[node]:
            intersections[neighbor].append(IntersectionNode(cost=0, key=node))
    return intersections


def find_lowest_common_ancestor(intersections, target):
    visited = set()
    queue = deque([target])
    while True:
        current = queue.popleft()
        if current not in visited:
            visited.add(current)
            for neighbor in intersections[current]:
                if neighbor not in visited:
                    queue.append(neighbor)
                    break
    return current


def solve(intersections, target):
    lowest_common_ancestor = find_lowest_common_ancestor(intersections, target)
    return lowest_common_ancestor.key


if __name__ == "__main__":
    adjacencies, nodes = read_map()
    intersections = get_intersections(nodes, adjacencies)
    print("Part One")
    print(solve(intersections, 2))
    print("Part Two")
    print(solve(intersections, 7))
################################################################

Solution:
[['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', 'a', '.], ['a', '.', 'b', '.', '.', 'b', '.], ['b', '.', 'a', '.', '.', 'a', '.], ['a', '.', 'b', '.', '.', 'b', '.], ['b', '.', '.', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', 'b', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.']]

