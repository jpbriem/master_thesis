Input token: 541
Output token: 808
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.'], ['.', '.', 'b', '.', 'i'], ['.', '.', 'b', 'g', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'g', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'b', 'g', '.'], ['.', '.', 'b', 'g', 'i']]

Example_2:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['g', '.', '.', '.', 'e', 'h'], ['.', '.', '.', '.', '.', 'h'], ['.', '.', '.', '.', '.', 'h'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'h'], ['.', '.', '.', '.', '.', 'h'], ['g', '.', '.', '.', 'e', 'h']]

Example_3:
input: [['.', 'a', 'i', '.', '.'], ['g', 'a', '.', 'e', '.'], ['.', '.', '.', 'e', '.'], ['.', 'a', '.', '.', '.'], ['.', '.', '.', 'e', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'a', '.', 'e', '.'], ['.', 'a', '.', 'e', '.'], ['g', 'a', 'i', 'e', '.']]

Test case:
input: [['g', 'f', 'c', '.'], ['.', 'f', 'c', '.'], ['g', '.', '.', 'b'], ['g', '.', 'c', '.']]
################################################################

LLM answer:

output: [['g', 'f', 'c', '.'], ['.', 'f', 'c', '.'], ['g', '.', '.', 'b'], ['g', '.', 'c', '.']]
*/
public class Solution {
    public int[][] updateBoard(int[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == MINE) {
                    q.offer(i * n + j);
                } else if (board[i][j] > 0 && board[i][j]!= -1) {
                    --board[i][j];
                }
            }
        }
        while (!q.isEmpty()) {
            int x = q.poll();
            int i = x / n, j = x % n;
            if (board[i][j] == -1) continue;
            board[i][j] = -1;
            if (i > 0) {
                if (board[i - 1][j] > 0) {
                    q.offer((i - 1) * n + j);
                }
            }
            if (i < m - 1) {
                if (board[i + 1][j] > 0) {
                    q.offer((i + 1) * n + j);
                }
            }
            if (j > 0) {
                if (board[i][j - 1] > 0) {
                    q.offer(i * n + j - 1);
                }
            }
            if (j < n - 1) {
                if (board[i][j + 1] > 0) {
                    q.offer(i * n + j + 1);
                }
            }
            if (i > 0 && j > 0) {
                if (board[i - 1][j - 1] > 0) {
                    q.offer((i - 1) * n + j - 1);
                }
            }
            if (i > 0 && j < n - 1) {
                if (board[i - 1][j + 1] > 0) {
                    q.offer((i - 1) * n + j + 1);
                }
            }
            if (i < m - 1 && j > 0) {
                if (board[i + 1][j - 1] > 0) {
                    q.offer((i + 1) * n + j - 1);
                }
            }
            if (i < m - 1 && j < n - 1) {
                if (board[i + 1][j + 1] > 0) {
                    q.offer((i + 1) * n + j + 1);
                }
            }
        }
        return board;
    }
}
################################################################

Solution:
[['.', '.', '.', '.'], ['g', '.', 'c', '.'], ['g', 'f', 'c', '.'], ['g', 'f', 'c', 'b']]

