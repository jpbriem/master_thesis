Input token: 1863
Output token: 763
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', '.', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', 'd', '.', 'd', 'd', '.', 'd', '.', '.'], ['.', '.', 'd', '.', 'd', '.', '.', 'd', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', 'g', '.', 'g', '.', '.', 'g', '.', '.', '.'], ['.', 'g', '.', 'g', '.', '.', 'g', '.', '.', '.']]
output: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'g', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'g', 'd', 'g', 'd', 'd', 'g', 'd', '.', '.'], ['.', 'g', 'd', '.', 'd', '.', 'g', 'd', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', '.', '.', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', '.', '.', 'd', 'd', '.', '.'], ['.', 'd', '.', 'd', '.', '.', 'd', 'd', '.', '.'], ['.', 'd', '.', '.', '.', '.', '.', 'd', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'g', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', 'g', 'g', '.', '.', '.', '.'], ['.', '.', 'g', '.', 'g', 'g', '.', 'g', '.', '.']]
output: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'g', 'g', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'g', 'g', 'd', 'd', '.', '.'], ['.', 'd', 'g', 'd', 'g', 'g', 'd', 'd', '.', '.'], ['.', 'd', '.', '.', 'g', '.', '.', 'd', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'g', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', '.', 'd', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', '.', 'd', '.', '.'], ['d', 'd', 'd', '.', 'd', 'd', '.', '.', '.', '.'], ['.', 'd', '.', '.', '.', 'd', '.', '.', '.', '.'], ['.', 'd', '.', '.', '.', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', 'g', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', 'g', '.', 'g', 'g', '.', '.']]
output: [['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'g', 'd', '.', '.'], ['d', 'd', 'd', 'd', 'd', 'd', 'g', 'd', '.', '.'], ['d', 'd', 'd', '.', 'd', 'd', 'g', 'g', '.', '.'], ['.', 'd', '.', '.', 'g', 'd', '.', '.', '.', '.'], ['.', 'd', '.', '.', 'g', 'd', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', '.', 'd', 'd', '.', '.'], ['.', '.', '.', 'd', 'd', '.', 'd', 'd', '.', '.'], ['.', '.', 'g', '.', 'd', '.', 'd', '.', '.', '.'], ['.', '.', 'g', '.', '.', '.', 'd', '.', '.', '.'], ['.', '.', 'g', '.', '.', '.', 'd', '.', '.', '.'], ['.', 'g', 'g', '.', '.', '.', '.', '.', '.', '.'], ['.', 'g', 'g', '.', '.', 'g', '.', '.', '.', '.'], ['.', 'g', 'g', 'g', '.', 'g', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.']]

Constraints:
0 <= len(grid) <= 50
0 <= grid[i].length <= 50
'.' is a valid character in grid.
All other characters in grid are either 'd' or 'g'.
*/

class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        int m = board.size(), n = board[0].size();
        queue<pair<int, int>> q;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'M') continue;
                else if (board[i][j] == 'E') {
                    board[i][j] = 'X';
                    q.push({i, j});
                }
            }
        }
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int x = p.first, y = p.second;
            int cnt = 0;
            for (int dx = -1; dx <= 1; ++dx) {
                for (int dy = -1; dy <= 1; ++dy) {
                    if (x + dx >= 0 && x + dx < m && y + dy >= 0 && y + dy < n && board[x + dx][y + dy]!= 'M') {
                        if (board[x + dx][y + dy] == 'E') {
                            board[x + dx][y + dy] = 'B';
                            q.push({x + dx, y + dy});
                        }
                        else ++cnt;
                    }
                }
            }
            if (cnt > 0) board[p.first][p.second] = char('0' + cnt);
        }
        return board;
    }
};
################################################################

Solution:
[['.', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'g', 'g', 'd', 'd', 'd', 'd', 'd', '.', '.'], ['.', 'g', 'g', 'd', 'd', 'g', 'd', 'd', '.', '.'], ['.', 'g', 'g', 'd', 'd', 'g', 'd', 'd', '.', '.'], ['.', '.', 'g', 'g', 'd', '.', 'd', '.', '.', '.'], ['.', '.', 'g', '.', '.', '.', 'd', '.', '.', '.'], ['.', '.', 'g', '.', '.', '.', 'd', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

