Input token: 608
Output token: 516
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['f', '.', 'f', '.', '.'], ['.', 'e', '.', 'e', 'e'], ['.', '.', '.', 'g', '.'], ['.', 'i', '.', '.', '.'], ['d', '.', '.', 'd', 'd']]
output: [['f', 'f', '.', '.', '.'], ['e', 'e', 'e', '.', '.'], ['g', '.', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.']]

Example_2:
input: [['.', 'c', 'c', '.', 'c', '.'], ['.', 'h', '.', 'h', '.', 'h'], ['.', '.', '.', 'a', '.', '.'], ['.', 'g', '.', '.', 'g', 'g'], ['e', '.', '.', '.', '.', '.'], ['i', '.', 'i', 'i', '.', '.']]
output: [['c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['a', '.', '.', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.', '.']]

Example_3:
input: [['.', 'b', 'b', '.', '.'], ['.', 'g', '.', '.', 'g'], ['.', 'd', 'd', '.', 'd'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'a']]
output: [['b', 'b', '.', '.', '.'], ['g', 'g', '.', '.', '.'], ['d', 'd', 'd', '.', '.'], ['.', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', 'c'], ['.', '.', '.', '.', '.', 'h'], ['.', '.', 'e', '.', 'e', 'e'], ['.', '.', 'i', 'i', '.', 'i'], ['.', 'b', '.', '.', 'b', 'b'], ['.', 'g', '.', 'g', '.', 'g']]
################################################################

LLM answer:

output: [['c', 'c', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['e', 'e', 'e', '.', '.', '.'], ['i', 'i', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.']]

Constraints:
1 <= matrix.length, matrix[0].length <= 500
matrix[i][j] is either '.' or a lowercase English letter.
 */
public class FlattenMatrix {
    public static void main(String[] args) {
        String[][] matrix = new String[][]{
                {".", ".", ".", ".", ".", "c"},
                {".", ".", ".", ".", ".", "h"},
                {".", ".", "e", ".", "e", "e"},
                {".", ".", "i", "i", ".", "i"},
                {".", "b", ".", ".", "b", "b"},
                {".", "g", ".", "g", ".", "g"}
        };
        System.out.println(Arrays.deepToString(flatten(matrix)));
    }

    private static String[][] flatten(String[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!Character.isLetter(matrix[i][j])) continue;
                char c = matrix[i][j];
                for (int k = i + 1; k < m && Character.isLetter(matrix[k][j]); k++) {
                    matrix[k][j] += c;
                }
                for (int k = j + 1; k < n && Character.isLetter(matrix[i][k]); k++) {
                    matrix[i][k] += c;
                }
            }
        }
        return matrix;
    }
}
################################################################

Solution:
[['c', '.', '.', '.', '.', '.'], ['h', '.', '.', '.', '.', '.'], ['e', 'e', 'e', '.', '.', '.'], ['i', 'i', 'i', '.', '.', '.'], ['b', 'b', 'b', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.']]

