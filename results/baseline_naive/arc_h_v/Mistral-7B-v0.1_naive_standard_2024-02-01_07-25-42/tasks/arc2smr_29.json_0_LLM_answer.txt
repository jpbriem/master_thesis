Input token: 1419
Output token: 987
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'a', '.', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'a', 'b', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', 'b', 'a', 'b', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'b', 'a', 'b', 'a', 'b', 'a', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'a', '.', 'a', '.', 'a', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'a', 'b', 'a', 'b', 'a', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', 'b', 'a', 'b', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'b', 'a', 'b', 'a', 'b', 'a', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', 'b', 'a', 'b', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'b', 'a', 'b', 'a', 'b', 'a', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', '.', 'a', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.', 'a', '.', 'a', '.', 'a', '.', '.', '.']]
################################################################

LLM answer:

output
*/

// 思路：
// 1. 先将输入的二维数组转换为一维数组，然后再进行处理。
// 2. 遍历一维数组，如果当前元素是'.'，则直接跳过；否则，将其替换为'a'和'b'之间的随机字符。
// 3. 最后将一维数组转换回二维数组并返回。

class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n));
        queue<pair<int, int>> q;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'M') {
                    visited[i][j] = true;
                } else if (board[i][j] == 'E') {
                    q.push({i, j});
                }
            }
        }
        while (!q.empty()) {
            auto cur = q.front();
            q.pop();
            int x = cur.first, y = cur.second;
            if (visited[x][y]) continue;
            visited[x][y] = true;
            int count = 0;
            for (int dx = -1; dx <= 1; ++dx) {
                for (int dy = -1; dy <= 1; ++dy) {
                    if (dx || dy) {
                        int newX = x + dx, newY = y + dy;
                        if (newX >= 0 && newX < m && newY >= 0 && newY < n &&!visited[newX][newY]) {
                            if (board[newX][newY] == 'M') {
                                ++count;
                            }
                        }
                    }
                }
            }
            if (count > 0) {
                board[cur.first][cur.second] = char('0' + count);
            } else {
                board[cur.first][cur.second] = 'B';
                for (int dx = -1; dx <= 1; ++dx) {
                    for (int dy = -1; dy <= 1; ++dy) {
                        if (dx || dy) {
                            int newX = cur.first + dx, newY = cur.second + dy;
                            if (newX >= 0 && newX < m && newY >= 0 && newY < n &&!visited[newX][newY]) {
                                q.push({newX, newY});
                            }
                        }
                    }
                }
            }
        }
        return board;
    }
};
################################################################

Solution:
[['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', 'b', 'a', 'b', 'a', 'b', 'a', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'b', 'a', 'b', 'a', 'b', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'a', 'b', 'a', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'b', 'a', 'b', 'a', 'b', 'a', '.', '.', '.']]

