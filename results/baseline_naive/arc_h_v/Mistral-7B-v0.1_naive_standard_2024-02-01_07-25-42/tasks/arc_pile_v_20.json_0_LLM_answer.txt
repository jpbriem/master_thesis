Input token: 434
Output token: 237
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['g', '.', '.', 'i'], ['.', '.', 'b', 'i'], ['.', '.', '.', 'i'], ['.', '.', 'b', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', 'i'], ['.', '.', 'b', 'i'], ['g', '.', 'b', 'i']]

Example_2:
input: [['.', 'd', '.', '.'], ['.', '.', '.', '.'], ['.', 'd', '.', '.'], ['.', 'd', '.', '.']]
output: [['.', '.', '.', '.'], ['.', 'd', '.', '.'], ['.', 'd', '.', '.'], ['.', 'd', '.', '.']]

Example_3:
input: [['.', 'b', '.', '.', 'd'], ['h', '.', '.', 'i', 'd'], ['h', 'b', '.', 'i', 'd'], ['h', '.', '.', '.', '.'], ['.', '.', '.', 'i', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['h', '.', '.', 'i', 'd'], ['h', 'b', '.', 'i', 'd'], ['h', 'b', '.', 'i', 'd']]

Test case:
input: [['g', '.', 'b', 'e', '.'], ['.', 'd', '.', '.', '.'], ['g', 'd', 'b', '.', 'f'], ['.', '.', '.', 'e', '.'], ['.', 'd', '.', 'e', 'f']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Constraints:
1 <= board.length, board[i].length <= 50
board[i][j] is either 'W' or 'B'.
 */
public class Solution {
    public char[][] flipAndInvertImage(char[][] A) {
        int n = A.length;
        for (int i=0; i<n; ++i){
            for (int j=0; j<n/2; ++j){
                if (A[i][j] == 'W'){
                    A[i][j] = 'B';
                } else {
                    A[i][j] = 'W';
                }
            }
        }
        return A;
    }
}
################################################################

Solution:
[['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'd', '.', 'e', '.'], ['g', 'd', 'b', 'e', 'f'], ['g', 'd', 'b', 'e', 'f']]

