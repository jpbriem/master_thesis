Input token: 403
Output token: 271
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.'], ['a', '.', 'a', 'a'], ['.', '.', 'b', '.'], ['.', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['a', 'a', 'a', '.'], ['b', '.', '.', '.'], ['.', '.', '.', '.']]

Example_2:
input: [['.', 'a', 'a', 'a'], ['.', '.', '.', '.'], ['.', '.', 'b', '.'], ['.', 'e', 'e', '.']]
output: [['a', 'a', 'a', '.'], ['.', '.', '.', '.'], ['b', '.', '.', '.'], ['e', 'e', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', 'h'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'i', '.', 'i', '.'], ['.', '.', 'd', '.', '.']]
output: [['h', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['i', 'i', '.', '.', '.'], ['d', '.', '.', '.', '.']]

Test case:
input: [['.', 'e', '.', '.'], ['.', 'c', 'c', 'c'], ['g', '.', '.', '.'], ['.', '.', '.', 'f']]
################################################################

LLM answer:

output: [['e', '.', '.', '.'], ['.', 'c', 'c', 'c'], ['g', '.', '.', '.'], ['.', '.', '.', 'f']]

Constraints:
1 <= board.length, board[i].length <= 50
board[i][j] is either a lowercase English letter or '.'.
 */
public class RotateImage {
    public void rotate(char[][] board) {
        int n = board.length;
        for (int i=0; i<n/2; ++i){
            for (int j=i; j<n-i-1; ++j){
                char tmp = board[i][j];
                board[i][j] = board[n-j-1][i];
                board[n-j-1][i] = board[n-i-1][n-j-1];
                board[n-i-1][n-j-1] = board[j][n-i-1];
                board[j][n-i-1] = tmp;
            }
        }
    }
}
################################################################

Solution:
[['e', '.', '.', '.'], ['c', 'c', 'c', '.'], ['g', '.', '.', '.'], ['f', '.', '.', '.']]

