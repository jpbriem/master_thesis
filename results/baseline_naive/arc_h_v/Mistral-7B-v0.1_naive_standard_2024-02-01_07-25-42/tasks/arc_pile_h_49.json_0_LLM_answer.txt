Input token: 409
Output token: 270
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['g', '.', '.', 'g'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', 'i', 'i', 'i']]
output: [['g', 'g', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['i', 'i', 'i', '.']]

Example_2:
input: [['.', 'e', 'e', 'e', '.'], ['b', '.', '.', 'b', 'b'], ['.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]
output: [['e', 'e', 'e', '.', '.'], ['b', 'b', 'b', '.', '.'], ['f', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Example_3:
input: [['i', 'i', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['g', '.', 'g', 'g']]
output: [['i', 'i', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['g', 'g', 'g', '.']]

Test case:
input: [['.', 'a', '.', '.'], ['.', '.', '.', 'i'], ['.', '.', 'g', 'g'], ['.', '.', 'f', '.']]
################################################################

LLM answer:

output: [['.', 'a', '.', '.'], ['.', '.', '.', 'i'], ['.', '.', 'g', 'g'], ['.', '.', 'f', '.']]

Constraints:
1 <= board.length, board[i].length <= 50
board[i][j] is either '.' or a lowercase English letter.
 */
public class RotateImage {
    public void rotate(char[][] board) {
        int n = board.length;
        for (int i=0; i<n/2; i++) {
            for (int j=i; j<n-i-1; j++) {
                char temp = board[i][j];
                board[i][j] = board[n-j-1][i];
                board[n-j-1][i] = board[n-i-1][n-j-1];
                board[n-i-1][n-j-1] = board[j][n-i-1];
                board[j][n-i-1] = temp;
            }
        }
    }
}
################################################################

Solution:
[['a', '.', '.', '.'], ['i', '.', '.', '.'], ['g', 'g', '.', '.'], ['f', '.', '.', '.']]

