Input token: 583
Output token: 278
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['b', 'b', '.', 'b', '.', '.'], ['.', '.', 'f', '.', 'f', '.'], ['g', '.', '.', '.', '.', '.'], ['.', 'i', '.', '.', 'i', 'i'], ['.', 'c', 'c', '.', '.', '.'], ['d', '.', '.', '.', '.', 'd']]
output: [['b', 'b', 'b', '.', '.', '.'], ['f', 'f', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.']]

Example_2:
input: [['e', 'e', '.', '.', 'e', '.'], ['.', '.', '.', 'h', '.', '.'], ['.', '.', 'g', 'g', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'd']]
output: [['e', 'e', 'e', '.', '.', '.'], ['h', '.', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', 'i', '.'], ['f', 'f', 'f', '.'], ['e', '.', 'e', 'e'], ['g', 'g', 'g', '.']]
output: [['i', '.', '.', '.'], ['f', 'f', 'f', '.'], ['e', 'e', 'e', '.'], ['g', 'g', 'g', '.']]

Test case:
input: [['.', '.', '.', '.', 'h'], ['.', '.', '.', 'g', 'g'], ['.', '.', '.', 'e', '.'], ['i', 'i', '.', '.', 'i'], ['.', '.', '.', 'c', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', 'h'], ['.', '.', '.', 'g', 'g'], ['.', '.', '.', 'e', '.'], ['i', 'i', '.', '.', 'i'], ['.', '.', '.', 'c', '.']]

Constraints:
1 <= grid.length, grid[0].length <= 50
grid[i][j] is either '.' or a lowercase English letter.
 */
public class _485_MaxConsecutiveOnes {
    public int findMaxConsecutiveOnes(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i]!= 0) {
                int count = 0;
                while (i + count < nums.length && nums[i+count] == 1) {
                    count++;
                }
                max = Math.max(max, count);
            }
        }
        return max;
    }
}
################################################################

Solution:
[['h', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.'], ['e', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.'], ['c', '.', '.', '.', '.']]

