Input token: 524
Output token: 268
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'g', 'g'], ['.', '.', 'b', '.'], ['.', '.', '.', 'c'], ['.', '.', 'h', '.']]
output: [['g', 'g', '.', '.'], ['b', '.', '.', '.'], ['c', '.', '.', '.'], ['h', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', 'a', 'a', '.'], ['.', '.', '.', '.', '.', 'b'], ['.', '.', '.', '.', 'c', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'f', 'f', 'f', '.', '.']]
output: [['a', 'a', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['c', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['f', 'f', 'f', '.', '.', '.']]

Example_3:
input: [['.', 'b', 'b', '.', 'b'], ['.', '.', '.', '.', '.'], ['.', 'f', 'f', '.', '.'], ['.', '.', 'i', '.', '.'], ['e', 'e', 'e', '.', '.']]
output: [['b', 'b', 'b', '.', '.'], ['.', '.', '.', '.', '.'], ['f', 'f', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['e', 'e', 'e', '.', '.']]

Test case:
input: [['.', 'g', '.', 'g', '.'], ['.', '.', 'b', '.', '.'], ['.', '.', '.', 'i', '.'], ['h', 'h', '.', '.', '.'], ['.', 'd', '.', 'd', '.']]
################################################################

LLM answer:

output: [['g', '.', '.', 'g', '.'], ['.', 'b', '.', '.', '.'], ['.', '.', 'i', '.', '.'], ['h', 'h', '.', '.', '.'], ['.', 'd', '.', 'd', '.']]
'''
class Solution(object):
    def rotateGrid(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: None Do not return anything, modify grid in-place instead.
        """
        n = len(grid)
        for i in range(n//2):
            for j in range(n//2):
                tmp = grid[j][i]
                grid[j][i] = grid[n - 1 - i][j]
                grid[n - 1 - i][j] = grid[n - 1 - j][n - 1 - i]
                grid[n - 1 - j][n - 1 - i] = grid[i][n - 1 - j]
                grid[i][n - 1 - j] = tmp
################################################################

Solution:
[['g', 'g', '.', '.', '.'], ['b', '.', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.'], ['d', 'd', '.', '.', '.']]

