Input token: 583
Output token: 543
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'i', 'c', '.', '.'], ['.', 'f', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['h', '.', '.', 'c', '.', '.'], ['h', '.', 'i', 'c', '.', 'g'], ['h', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['h', '.', '.', 'c', '.', '.'], ['h', '.', 'i', 'c', '.', '.'], ['h', 'f', 'i', 'c', '.', 'g']]

Example_2:
input: [['.', '.', '.', 'f'], ['.', '.', '.', '.'], ['.', '.', '.', 'f'], ['.', '.', 'e', 'f']]
output: [['.', '.', '.', '.'], ['.', '.', '.', 'f'], ['.', '.', '.', 'f'], ['.', '.', 'e', 'f']]

Example_3:
input: [['.', 'c', 'h', 'i', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'h', 'i', 'g', 'd'], ['.', 'c', 'h', '.', '.', 'd'], ['.', '.', '.', '.', 'g', '.'], ['.', '.', '.', '.', '.', 'd']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'h', '.', '.', 'd'], ['.', 'c', 'h', 'i', 'g', 'd'], ['.', 'c', 'h', 'i', 'g', 'd']]

Test case:
input: [['b', '.', 'a', '.', '.'], ['b', '.', 'a', 'i', '.'], ['.', '.', '.', 'i', 'e'], ['.', '.', '.', '.', '.'], ['b', 'd', 'a', 'i', 'e']]
################################################################

LLM answer:

output: [['b', '.', 'a', '.', '.'], ['b', '.', 'a', 'i', '.'], ['.', '.', '.', 'i', 'e'], ['.', '.', '.', '.', '.'], ['b', 'd', 'a', 'i', 'e']]

Explanation:
The first two rows of the output matrix are identical to the first two rows of the input matrix, while the last three rows are all filled with '.'.
*/
class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'M') continue;
                else if (board[i][j] == 'E' && i == click[0] && j == click[1]) {
                    board[i][j] = 'B';
                    q.offer(new int[]{i - 1, j});
                    q.offer(new int[]{i + 1, j});
                    q.offer(new int[]{i, j - 1});
                    q.offer(new int[]{i, j + 1});
                }
            }
        }
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int x = cur[0], y = cur[1];
            if (x >= 0 && x < m && y >= 0 && y < n && board[x][y]!= 'X') {
                board[x][y] = 'X';
                q.offer(new int[]{x - 1, y});
                q.offer(new int[]{x + 1, y});
                q.offer(new int[]{x, y - 1});
                q.offer(new int[]{x, y + 1});
            }
        }
        return board;
    }
}
################################################################

Solution:
[['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['b', '.', 'a', 'i', '.'], ['b', '.', 'a', 'i', 'e'], ['b', 'd', 'a', 'i', 'e']]

