Input token: 396
Output token: 674
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['g', '.', '.', 'i'], ['.', '.', '.', 'i'], ['.', '.', '.', 'i'], ['g', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', 'i'], ['g', '.', '.', 'i'], ['g', '.', '.', 'i']]

Example_2:
input: [['.', 'b', 'f', '.', '.'], ['e', 'b', '.', '.', '.'], ['e', '.', '.', '.', '.'], ['e', '.', '.', '.', '.'], ['.', 'b', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['e', 'b', '.', '.', '.'], ['e', 'b', '.', '.', '.'], ['e', 'b', 'f', '.', '.']]

Example_3:
input: [['.', '.', '.', 'g'], ['.', '.', '.', 'g'], ['i', '.', '.', '.'], ['i', '.', '.', 'g']]
output: [['.', '.', '.', '.'], ['.', '.', '.', 'g'], ['i', '.', '.', 'g'], ['i', '.', '.', 'g']]

Test case:
input: [['.', 'i', 'g', '.'], ['.', '.', 'g', 'f'], ['a', '.', '.', '.'], ['.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.']]

Constraints:
1 <= board.length, board[i].length <= 50
board[i][j] is either '.', 'i' or 'g'.
 */
public class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        if (board == null || board.length == 0 || board[0].length == 0) return board;
        int m = board.length, n = board[0].length;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'M') continue;
                else if (board[i][j] == 'E') {
                    board[i][j] = 'X';
                    queue.offer(new int[]{i, j});
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            int count = getCount(x - 1, y - 1, board) + getCount(x - 1, y, board) + getCount(x - 1, y + 1, board) + getCount(x, y - 1, board) + getCount(x, y + 1, board) + getCount(x + 1, y - 1, board) + getCount(x + 1, y, board) + getCount(x + 1, y + 1, board);
            if (count > 0) {
                board[cur[0]][cur[1]] = (char)(count + '0');
                for (int i = 0; i < m; ++i) {
                    for (int j = 0; j < n; ++j) {
                        if (board[i][j]!= 'E') continue;
                        if (Math.abs(i - cur[0]) + Math.abs(j - cur[1]) == 1 && board[i][j] == 'E') {
                            board[i][j] = 'B';
                            queue.add(new int[]{i, j});
                        }
                    }
                }
            }
        }
        return board;
    }

    private int getCount(int x, int y, char[][] board) {
        if (x >= 0 && x < board.length && y >= 0 && y < board[0].length && board[x][y] == 'M') return 1;
        return 0;
    }
}
################################################################

Solution:
[['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', 'g', '.'], ['a', 'i', 'g', 'f']]

