Input token: 599
Output token: 323
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['i', '.', 'i', 'i', '.', '.'], ['.', '.', 'h', 'h', '.', '.'], ['.', '.', '.', '.', '.', 'g'], ['.', 'b', '.', '.', 'b', 'b'], ['.', '.', 'f', '.', 'f', '.'], ['.', '.', '.', 'a', 'a', '.']]
output: [['i', 'i', 'i', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.'], ['b', 'b', 'b', '.', '.', '.'], ['f', 'f', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.', '.']]

Example_2:
input: [['.', 'h', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'a', 'a'], ['d', 'd', 'd', '.', '.'], ['.', '.', '.', '.', '.']]
output: [['h', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.'], ['d', 'd', 'd', '.', '.'], ['.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'e', 'e', '.', 'e'], ['.', '.', '.', '.', '.'], ['.', '.', 'a', 'a', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['e', 'e', 'e', '.', '.'], ['.', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.']]

Test case:
input: [['c', '.', 'c', '.', 'c', '.'], ['.', '.', 'i', 'i', '.', '.'], ['d', 'd', '.', '.', '.', 'd'], ['.', 'e', '.', 'e', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['h', 'h', '.', 'h', '.', '.']]
################################################################

LLM answer:

output: [['c', 'c', 'c', '.', '.', '.'], ['.', 'i', 'i', '.', '.', '.'], ['d', '.', '.', '.', 'd', 'd'], ['.', 'e', 'e', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['h', 'h', '.', 'h', '.', '.']]

Constraints:
1 <= grid.length, grid[0].length <= 50
grid[i][j] is either a lowercase English letter or '.'.
 */
public class RotateImage {
    public void rotate(char[][] grid) {
        int n = grid.length;
        for (int i=0; i<n/2; ++i){
            for (int j=i; j<n-i-1; ++j){
                char tmp = grid[i][j];
                grid[i][j] = grid[n-j-1][i];
                grid[n-j-1][i] = grid[n-i-1][n-j-1];
                grid[n-i-1][n-j-1] = grid[j][n-i-1];
                grid[j][n-i-1] = tmp;
            }
        }
    }
}
################################################################

Solution:
[['c', 'c', 'c', '.', '.', '.'], ['i', 'i', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['e', 'e', '.', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.']]

