Input token: 493
Output token: 235
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'e', '.', '.'], ['c', 'c', 'c', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'a', 'a', '.'], ['.', 'd', '.', '.', '.']]
output: [['e', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.'], ['.', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.'], ['d', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', 'i', '.', 'i'], ['e', 'e', '.', 'e', '.'], ['c', '.', '.', 'c', 'c'], ['.', '.', '.', 'a', '.'], ['.', 'h', '.', '.', '.']]
output: [['i', 'i', '.', '.', '.'], ['e', 'e', 'e', '.', '.'], ['c', 'c', 'c', '.', '.'], ['a', '.', '.', '.', '.'], ['h', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'b', '.', 'b'], ['.', 'f', '.', 'f', 'f'], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.'], ['f', 'f', 'f', '.', '.'], ['.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'h', '.'], ['f', 'f', '.', 'f'], ['e', '.', 'e', 'e'], ['.', 'c', '.', '.']]
################################################################

LLM answer:

output: [['h', '.', '.', '.'], ['f', 'f', 'f', '.'], ['e', 'e', 'e', 'e'], ['.', 'c', '.', '.']]
*/
public class RotateImage {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for (int i=0; i<n/2; i++) {
            for (int j=i; j<n-i-1; j++) {
                int temp = matrix[j][i];
                matrix[j][i] = matrix[n-i-1][j];
                matrix[n-i-1][j] = matrix[n-j-1][n-i-1];
                matrix[n-j-1][n-i-1] = matrix[i][n-j-1];
                matrix[i][n-j-1] = temp;
            }
        }
    }
}
################################################################

Solution:
[['h', '.', '.', '.'], ['f', 'f', 'f', '.'], ['e', 'e', 'e', '.'], ['c', '.', '.', '.']]

