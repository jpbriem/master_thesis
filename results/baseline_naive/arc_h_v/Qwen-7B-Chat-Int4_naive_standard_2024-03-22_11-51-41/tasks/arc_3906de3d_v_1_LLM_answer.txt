
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'a', 'e', 'e', 'a', 'a'], ['a', 'a', 'a', 'e', 'a', 'a', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'e', 'a', 'a', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'g', 'g', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]
output: [['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'e', 'e', 'e', 'e', 'a', 'e', 'e', 'a', 'a'], ['a', 'g', 'g', 'e', 'a', 'a', 'e', 'a', 'a', 'a'], ['a', 'g', 'g', 'e', 'a', 'a', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'e', 'a', 'e', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'e', 'a', 'e', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'e', 'e', 'a', 'g', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'e', 'g', 'g', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'g', 'g', 'a'], ['a', 'a', 'a', 'a', 'g', 'a', 'a', 'g', 'g', 'a']]
output: [['a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'g', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'g', 'g', 'a'], ['a', 'a', 'a', 'e', 'g', 'e', 'e', 'g', 'g', 'a'], ['a', 'a', 'a', 'e', 'a', 'e', 'e', 'g', 'g', 'a'], ['a', 'a', 'a', 'a', 'a', 'e', 'e', 'g', 'g', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'e', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]

Example_3:
input: [['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'a', 'e', 'e', 'e', 'a', 'e', 'a', 'a', 'a'], ['a', 'a', 'e', 'e', 'e', 'a', 'e', 'a', 'a', 'a'], ['a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'a', 'a', 'g', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'g', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'g', 'a', 'g', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'g', 'a', 'g', 'a', 'a']]
output: [['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'a'], ['a', 'a', 'e', 'e', 'e', 'g', 'e', 'g', 'a', 'a'], ['a', 'a', 'e', 'e', 'e', 'g', 'e', 'g', 'a', 'a'], ['a', 'a', 'e', 'a', 'a', 'g', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'a', 'a', 'g', 'a', 'a', 'a', 'a'], ['a', 'a', 'e', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]

Test case:
input: [['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'e', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'e', 'a', 'e', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'a', 'a', 'e', 'a'], ['a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'e', 'a'], ['a', 'a', 'a', 'a', 'e', 'a', 'a', 'g', 'e', 'a'], ['a', 'a', 'g', 'a', 'a', 'a', 'a', 'g', 'a', 'a'], ['a', 'a', 'g', 'a', 'a', 'a', 'a', 'g', 'a', 'a'], ['a', 'a', 'g', 'a', 'a', 'g', 'g', 'g', 'a', 'a']]



###########################################################
Sample Outputs:
```python
def group_chars(input):
    if len(set(input)) == 1:
        return input

    groups = []
    for i in range(len(input)):
        group = [x for x in input[i] if x != " "]
        while True:
            new_group = []
            for j in range(len(group) - 1, -1, -1):
                char = group[j]
                if group[j + 1] != " " and group[j + 1].islower():
                    break
                new_group.append(char)
            else:
                break
            groups.append(new_group)

    output = []
    for group in groups:
        output.extend(" ".join(group))

    return output


# Test cases
print(group_chars(["a", "a", "e", "e", "e", "e", "e", "e", "e", "a"]))
print(group_chars(["a", "a", "e", "e", "e", "e", "e", "e", "a"]))
print(group_chars(["a", "a", "e", "e", "e", "a", "e", "a", "a"]))
print(group_chars(["a", "a", "e", "e", "a", "a", "a", "a", "a"]))
print(group_chars(["a", "a", "e", "e", "a", "a", "a", "g", "a"]))
print(group_chars(["a", "a", "g", "a", "a", "a", "g", "g", "a"]))
```

Output:
```css
['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e']
['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e']
['a', 'a', 'e', 'e', 'a', 'a', 'a', 'a']
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']
```


###########################################################
Result:
solution: [['a', 'a', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'a'], ['a', 'a', 'g', 'e', 'e', 'e', 'e', 'e', 'e', 'a'], ['a', 'a', 'g', 'e', 'e', 'e', 'e', 'g', 'e', 'a'], ['a', 'a', 'g', 'e', 'e', 'e', 'e', 'g', 'e', 'a'], ['a', 'a', 'a', 'e', 'e', 'e', 'g', 'g', 'e', 'a'], ['a', 'a', 'a', 'a', 'e', 'g', 'a', 'g', 'e', 'a'], ['a', 'a', 'a', 'a', 'e', 'a', 'a', 'a', 'e', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0

cat_success_cnt: 0

cat_success_rate: 0.0

