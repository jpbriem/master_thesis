Input token: 492
Output token: 391
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'h'], ['a', 'a', 'a', 'a'], ['c', 'a', 'c', 'a'], ['a', 'j', 'j', 'j']]
output: [['h', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['c', 'c', 'a', 'a'], ['j', 'j', 'j', 'a']]

Example_2:
input: [['a', 'a', 'a', 'a'], ['e', 'e', 'a', 'e'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]
output: [['a', 'a', 'a', 'a'], ['e', 'e', 'e', 'a'], ['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a']]

Example_3:
input: [['a', 'i', 'i', 'i', 'a'], ['a', 'a', 'c', 'a', 'c'], ['a', 'a', 'a', 'a', 'a'], ['j', 'a', 'j', 'j', 'a'], ['a', 'a', 'e', 'e', 'e']]
output: [['i', 'i', 'i', 'a', 'a'], ['c', 'c', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['j', 'j', 'j', 'a', 'a'], ['e', 'e', 'e', 'a', 'a']]

Test case:
input: [['a', 'a', 'h', 'a', 'h'], ['e', 'a', 'e', 'e', 'a'], ['a', 'a', 'c', 'a', 'c'], ['f', 'f', 'a', 'a', 'f'], ['g', 'a', 'g', 'a', 'a']]
################################################################

LLM answer:

output: [['h', 'a', 'a', 'a', 'a'], ['e', 'e', 'e', 'a', 'a'], ['c', 'c', 'a', 'a', 'a'], ['f', 'f', 'a', 'a', 'a'], ['g', 'g', 'a', 'a', 'a']]
"""
import collections
from typing import List, Optional, Tuple


def get_transformed(inputs: List[str], output: str) -> int:
    """
    :param inputs: a list of strings to be transformed
    :type inputs: List[str]
    :param output: an expected string as result
    :type output: str
    :return: 0 if the input is correct or -1 otherwise
    """
    def _get_result() -> None:
        for i in range(len(inputs)):
            if not (inputs[i].startswith('a') and outputs[i].endswith('a')):
                return False
        return True

    if len(inputs)!= len(output):
        return -1

    for i in range(len(inputs)):
        if not (inputs[i].startswith('a') and outputs[i].endswith('a')):
            return -1

    return _get_result()


if __name__ == "__main__":
    print("Input:")
    print("\t", "\n".join([line for line in open("./test/input.txt")]))
    print("Output:")
    print("\t", "\n".join([line for line in open("./test/output.txt")]))

################################################################

Solution:
[['h', 'h', 'a', 'a', 'a'], ['e', 'e', 'e', 'a', 'a'], ['c', 'c', 'a', 'a', 'a'], ['f', 'f', 'f', 'a', 'a'], ['g', 'g', 'a', 'a', 'a']]

