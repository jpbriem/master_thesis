Input token: 650
Output token: 552
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['d', '.', '.', '.', '.', '.'], ['g', '.', '.', 'g', 'g', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['.', 'e', 'e', '.', '.', 'e']]
output: [['d', '.', '.', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['e', 'e', 'e', '.', '.', '.']]

Example_2:
input: [['.', 'i', '.', '.', '.', 'i'], ['.', 'h', '.', '.', '.', 'h'], ['.', 'b', '.', '.', '.', 'b'], ['.', 'c', '.', 'c', 'c', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.']]
output: [['i', 'i', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['i', '.', '.', 'i', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'd', '.'], ['g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['i', 'i', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['h', '.', '.', '.'], ['.', 'a', 'a', '.'], ['e', 'e', 'e', '.'], ['i', '.', '.', '.']]
################################################################

LLM answer:

output: [['h', '.', '.', '.'], ['.', 'a', 'a', '.'], ['e', 'e', 'e', '.'], ['i', 'i', 'i', '.']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "aei":
        return current_state[:-1], -1
    else:
        return current_state + ".", -1


class StateMachine:
    def __init__(self):
        self._states = [""] * 5
        self._transitions = []
        self._indexes = {}
        for i in range(len(self._states)):
            self._indexes["".join([char for char in self._states[i]])] = i

    @property
    def states(self) -> List[Tuple[str, int]]:
        return list(self._indexes.keys())

    def add_transition(self, from_state: str, to_state: str, action: str) -> None:
        self._transitions.append((from_state, to_state, action))

    def run(self, input: str) -> None:
        current_state = ""
        while True:
            (new_state, new_idx) = get_next(current_state)
            if new_idx < 0:
                break
            current_state = new_state
            self._transitions[new_idx][1].append(current_state)

    def is_valid(self, input: str) -> bool:
        return all(map(lambda x: x[0]!= x[1], self._transitions))


if __name__ == "__main__":
    sm = StateMachine()
    sm.add_transition(".", "i", ".")
    sm.add_transition(".", "h", ".")
    sm.add_transition(".", "e", ".")
    sm.add_transition(".", "a", ".")
    sm.run(input="ihae")

################################################################

Solution:
[['h', '.', '.', '.'], ['a', 'a', '.', '.'], ['e', 'e', 'e', '.'], ['i', '.', '.', '.']]

