Input token: 542
Output token: 2051
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'b', 'b', '.'], ['g', '.', 'g', '.', '.'], ['.', '.', '.', 'i', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.'], ['g', 'g', '.', '.', '.'], ['i', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', 'g', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'e', '.', '.'], ['.', 'h', 'h', 'h', '.', '.']]
output: [['g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', 'g', '.'], ['.', 'a', '.', 'a', 'a'], ['.', '.', '.', '.', 'i'], ['e', '.', 'e', 'e', '.'], ['.', '.', '.', '.', '.']]
output: [['g', '.', '.', '.', '.'], ['a', 'a', 'a', '.', '.'], ['i', '.', '.', '.', '.'], ['e', 'e', 'e', '.', '.'], ['.', '.', '.', '.', '.']]

Test case:
input: [['g', 'g', '.', 'g'], ['.', '.', 'f', 'f'], ['c', '.', 'c', 'c'], ['.', 'b', '.', '.']]
################################################################

LLM answer:

output: [['g', 'g', '.', 'g'], ['.', '.', 'f', 'f'], ['c', 'c', 'c', 'c'], ['.', 'b', '.', '.']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "ae":
        return current_state[:-1], -1
    else:
        return current_state + "e", -1


class StateMachine:
    def __init__(self):
        self._states = [""] * 5
        self._indexes = defaultdict(int)
        for i in range(len(self._states)):
            self._indexes[self._states[i]] += 1

    @property
    def states(self) -> List[Tuple[str, int]]:
        return list(self._indexes.keys())

    def add_transition(self, transition: Tuple[str, int]) -> None:
        self._states[transition[1]] = transition[0]

    def remove_transition(self, transition: Tuple[str, int]) -> None:
        self._states[transition[1]] = ""

    def is_valid(self, state: str) -> bool:
        return state in self.states

    def run(self, input: List[str]) -> List[str]:
        current_state = ""
        indexes = []
        for char in input:
            if not self.is_valid(char):
                continue
            if char == ".":
                current_state = ""
                indexes.append(-1)
            elif char == " ":
                current_state = ""
                indexes.append(-1)
            elif char == "!":
                current_state = ""
                indexes.append(-1)
            elif char == "#":
                current_state = ""
                indexes.append(-1)
            elif char == "%":
                current_state = ""
                indexes.append(-1)
            elif char == "+":
                current_state = ""
                indexes.append(-1)
            elif char == "-":
                current_state = ""
                indexes.append(-1)
            elif char == "*":
                current_state = ""
                indexes.append(-1)
            elif char == "/":
                current_state = ""
                indexes.append(-1)
            elif char == "<":
                current_state = ""
                indexes.append(-1)
            elif char == ">":
                current_state = ""
                indexes.append(-1)
            elif char == "^":
                current_state = ""
                indexes.append(-1)
            elif char == "_":
                current_state = ""
                indexes.append(-1)
            elif char == "`":
                current_state = ""
                indexes.append(-1)
            elif char == "@":
                current_state = ""
                indexes.append(-1)
            elif char == "&":
                current_state = ""
                indexes.append(-1)
            elif char == "$":
                current_state = ""
                indexes.append(-1)
            elif char == "{":
                current_state = ""
                indexes.append(-1)
            elif char == "}":
                current_state = ""
                indexes.append(-1)
            elif char == "(":
                current_state = ""
                indexes.append(-1)
            elif char == ")":
                current_state = ""
                indexes.append(-1)
            elif char == "[":
                current_state = ""
                indexes.append(-1)
            elif char == "]":
                current_state = ""
                indexes.append(-1)
            elif char == ",":
                current_state = ""
                indexes.append(-1)
            elif char == ";":
                current_state = ""
                indexes.append(-1)
            elif char == ":":
                current_state = ""
                indexes.append(-1)
            elif char == "'":
                current_state = ""
                indexes.append(-1)
            elif char == "?":
                current_state = ""
                indexes.append(-1)
            elif char == "~":
                current_state = ""
                indexes.append(-1)
            elif char == "!":
                current_state = ""
                indexes.append(-1)
            elif char == "|":
                current_state = ""
                indexes.append(-1)
            elif char == "=":
                current_state = ""
                indexes.append(-1)
            elif char == "A":
                current_state = ""
                indexes.append(-1)
            elif char == "B":
                current_state = ""
                indexes.append(-1)
            elif char == "C":
                current_state = ""
                indexes.append(-1)
            elif char == "D":
                current_state = ""
                indexes.append(-1)
            elif char == "E":
                current_state = ""
                indexes.append(-1)
            elif char == "F":
                current_state = ""
                indexes.append(-1)
            elif char == "G":
                current_state = ""
                indexes.append(-1)
            elif char == "H":
                current_state = ""
                indexes.append(-1)
            elif char == "I":
                current_state = ""
                indexes.append(-1)
            elif char == "J":
                current_state = ""
                indexes.append(-1)
            elif char == "K":
                current_state = ""
                indexes.append(-1)
            elif char == "L":
                current_state = ""
                indexes.append(-1)
            elif char == "M":
                current_state = ""
                indexes.append(-1)
            elif char == "N":
                current_state = ""
                indexes.append(-1)
            elif char == "O":
                current_state = ""
                indexes.append(-1)
            elif char == "P":
                current_state = ""
                indexes.append(-1)
            elif char == "Q":
                current_state = ""
                indexes.append(-1)
            elif char == "R":
                current_state = ""
                indexes.append(-1)
            elif char == "S":
                current_state = ""
                indexes.append(-1)
            elif char == "T":
                current_state = ""
                indexes.append(-1)
            elif char == "U":
                current_state = ""
                indexes.append(-1)
            elif char == "V":
                current_state = ""
                indexes.append(-1)
            elif char == "W":
                current_state = ""
                indexes.append(-1)
            elif char == "X":
                current_state = ""
                indexes.append(-1)
            elif char == "Y":
                current_state = ""
                indexes.append(-1)
            elif char == "Z":
                current_state = ""
                indexes.append(-1)
            elif char == "\\":
                current_state = ""
                indexes.append(-1)
            elif char == "[" or char == "]":
                current_state = ""
                indexes.append(-1)
            elif char == "(" or char == ")":
                current_state = ""
                indexes.append(-1)
            elif char == "\"":
                current_state = ""
                indexes.append(-1)
            elif char == "?":
                current_state = ""
                indexes.append(-1)
            elif char == "~":
                current_state = ""
                indexes.append(-1)
            elif char == "!":
                current_state = ""
                indexes.append(-1)
            elif char == "|":
                current_state = ""
                indexes.append(-1)
            elif char == "=":
                current_state = ""
                indexes.append(-1)
            elif char == "A":
                current_state = ""
                indexes.append(-1)
            elif char == "B":
                current_state = ""
                indexes.append(-1)
            elif char == "C":
                current_state = ""
                indexes.append(-1)
            elif char == "D":
                current_state = ""
                indexes.append(-1)
            elif char == "E
################################################################

Solution:
[['g', 'g', 'g', '.'], ['f', 'f', '.', '.'], ['c', 'c', 'c', '.'], ['b', '.', '.', '.']]

