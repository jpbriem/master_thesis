Input token: 545
Output token: 428
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'd', '.', '.', '.'], ['.', '.', 'i', '.', '.', '.'], ['.', '.', 'b', '.', '.', 'b'], ['h', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', '.'], ['i', '.', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.', '.'], ['h', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', 'h', 'h', 'h'], ['.', 'd', '.', 'd', '.'], ['b', 'b', 'b', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'f', '.', '.', '.']]
output: [['h', 'h', 'h', '.', '.'], ['d', 'd', '.', '.', '.'], ['b', 'b', 'b', '.', '.'], ['.', '.', '.', '.', '.'], ['f', '.', '.', '.', '.']]

Example_3:
input: [['a', 'a', '.', 'a', '.'], ['c', '.', '.', '.', '.'], ['.', '.', 'd', '.', '.'], ['h', '.', 'h', '.', '.'], ['.', 'f', 'f', '.', '.']]
output: [['a', 'a', 'a', '.', '.'], ['c', '.', '.', '.', '.'], ['d', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.'], ['f', 'f', '.', '.', '.']]

Test case:
input: [['.', '.', '.', 'e'], ['.', '.', 'g', '.'], ['f', '.', 'f', '.'], ['a', 'a', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', 'e'], ['.', '.', 'g', '.'], ['f', '.', 'f', '.'], ['a', 'a', '.', '.']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "bd":
        return current_state[:-1], -1
    else:
        return current_state + ".", 0


class StateMachine:
    def __init__(self):
        self._states = [""] * 5
        self._indexes = defaultdict(int)
        for i in range(len(self._states)):
            self._indexes[self._states[i]] += 1

    @property
    def states(self) -> List[Tuple[str, int]]:
        return list(self._indexes.keys())

    def add_transition(self, new_state: str, old_state: str, index: int) -> None:
        self._states[old_state] = new_state
        self._indexes[new_state] = index

    def run(self, input: str) -> None:
        while True:
            current_state, index = get_next(input)
            if not current_state:
                break
            self.add_transition(current_state, input[:index].strip(), index)


if __name__ == "__main__":
    sm = StateMachine()
    sm.run("".join([char for char in input]))

################################################################

Solution:
[['e', '.', '.', '.'], ['g', '.', '.', '.'], ['f', 'f', '.', '.'], ['a', 'a', '.', '.']]

