Input token: 596
Output token: 525
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', 'a', '.', '.'], ['.', '.', 'c', '.', 'c', '.'], ['h', '.', '.', '.', '.', '.'], ['.', 'g', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'e'], ['.', 'b', 'b', 'b', '.', '.']]
output: [['a', '.', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.'], ['h', '.', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['b', 'b', 'b', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.'], ['.', 'b', 'b', '.', '.', '.'], ['.', 'g', 'g', 'g', '.', '.'], ['.', '.', 'd', '.', 'd', 'd'], ['.', '.', '.', 'e', '.', 'e'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['e', 'e', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.'], ['d', 'd', '.', 'd', '.'], ['.', '.', 'b', '.', '.'], ['.', '.', '.', '.', 'i'], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.'], ['b', '.', '.', '.', '.'], ['i', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Test case:
input: [['a', '.', 'a', '.'], ['.', '.', 'i', 'i'], ['.', '.', '.', 'c'], ['.', '.', '.', 'g']]
################################################################

LLM answer:

output: [['a', '.', 'a', '.'], ['.', '.', 'i', 'i'], ['.', '.', '.', 'c'], ['.', '.', '.', 'g']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state):
    """Returns next state given current state."""
    if len(current_state) == 0:
        return "."
    elif current_state[0][0]!= ".":
        return "." + get_next(current_state[1:])
    else:
        return ""


class StateMachine:
    def __init__(self, initial_state=None):
        self._initial = initial_state or [""]
        self._states = {}
        for i in range(len(self._initial)):
            self._states[(self._initial[i],)] = (i,)

    def add_transition(self, from_, to, symbol="."):
        """Add transition between states."""
        if not isinstance(to, tuple):
            to = (to,)
        self._states[tuple((from_,))].append(symbol)
        self._states[tuple((to_,))] = (from_,)

    def run(self, input_str=""):
        """Run state machine on string."""
        current_state = self._initial
        while True:
            if input_str == "":
                break
            new_state = get_next(current_state)
            if new_state in self._states:
                current_state = self._states[new_state]
            else:
                raise ValueError("Invalid state")
        return current_state


if __name__ == "__main__":
    sm = StateMachine()
    sm.add_transition(".", "a", "a")
    sm.add_transition(".", "i", "i")
    sm.add_transition(".", ".", "")
    sm.add_transition(".", "c", "c")
    sm.add_transition(".", "g", "g")
    print(sm.run("".join([char for char in input().strip()])))
################################################################

Solution:
[['a', 'a', '.', '.'], ['i', 'i', '.', '.'], ['c', '.', '.', '.'], ['g', '.', '.', '.']]

