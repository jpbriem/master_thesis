Input token: 523
Output token: 563
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', 'h', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'e'], ['.', '.', '.', '.', '.', 'a'], ['.', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.'], ['.', '.', 'g', '.', 'g', '.']]
output: [['h', '.', '.', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['a', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.']]

Example_2:
input: [['g', '.', 'g', '.', 'g'], ['.', '.', '.', '.', 'a'], ['i', '.', 'i', '.', 'i'], ['.', '.', 'h', '.', '.'], ['.', '.', '.', '.', '.']]
output: [['g', 'g', 'g', '.', '.'], ['a', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.'], ['h', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']]

Example_3:
input: [['.', 'i', '.', '.'], ['g', '.', '.', '.'], ['.', '.', '.', '.'], ['f', 'f', 'f', '.']]
output: [['i', '.', '.', '.'], ['g', '.', '.', '.'], ['.', '.', '.', '.'], ['f', 'f', 'f', '.']]

Test case:
input: [['.', 'f', '.', '.', '.'], ['.', '.', 'h', 'h', 'h'], ['.', 'i', 'i', '.', 'i'], ['.', 'a', 'a', 'a', '.'], ['.', 'b', '.', '.', '.']]
################################################################

LLM answer:

output: [['f', '.', '.', '.', '.'], ['h', 'h', 'h', '.', '.'], ['i', 'i', 'i', '.', '.'], ['a', 'a', 'a', 'a', '.'], ['b', '.', '.', '.', '.']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "ae":
        return current_state[:-1], -1
    else:
        return current_state + ".", -1


class StateMachine:
    def __init__(self):
        self._states = [""] * 5
        self._transitions = []
        self._indexes = {}
        for i in range(len(self._states)):
            self._indexes["".join([char for char in self._states[i]]).lower()] = i

    @property
    def states(self) -> List[Tuple[str, int]]:
        return list(self._indexes.keys())

    def add_transition(self, from_state: str, to_state: str, action: str) -> None:
        self._transitions.append((from_state, to_state, action))

    def run(self, input: str) -> None:
        current_state = ""
        while True:
            current_state, idx = get_next(current_state)
            if not current_state or (idx < 0):
                break
            self._transitions[idx][1].append(current_state)

    def is_valid(self, input: str) -> bool:
        return all(map(lambda x: x[0]!= x[1], self._transitions))


if __name__ == "__main__":
    sm = StateMachine()
    sm.add_transition(".", "h", ".")
    sm.add_transition(".", "i", ".")
    sm.add_transition(".", "a", ".")
    sm.add_transition(".", "b", ".")
    sm.run(input=".ihai.")

################################################################

Solution:
[['f', '.', '.', '.', '.'], ['h', 'h', 'h', '.', '.'], ['i', 'i', 'i', '.', '.'], ['a', 'a', 'a', '.', '.'], ['b', '.', '.', '.', '.']]

