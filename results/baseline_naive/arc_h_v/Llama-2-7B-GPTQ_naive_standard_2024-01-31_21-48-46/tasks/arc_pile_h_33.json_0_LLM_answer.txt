Input token: 558
Output token: 530
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', 'f', '.', '.'], ['.', '.', 'b', '.', '.', '.'], ['.', '.', '.', 'e', '.', 'e'], ['.', '.', 'a', '.', 'a', '.'], ['.', '.', '.', '.', '.', '.'], ['c', '.', '.', 'c', '.', '.']]
output: [['f', '.', '.', '.', '.', '.'], ['b', '.', '.', '.', '.', '.'], ['e', 'e', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.']]

Example_2:
input: [['c', 'c', 'c', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['.', 'b', 'b', 'b', '.', '.'], ['.', '.', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'i', 'i', 'i']]
output: [['c', 'c', 'c', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['b', 'b', 'b', '.', '.', '.'], ['g', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', 'i', 'i', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['i', 'i', '.', '.']]

Test case:
input: [['.', 'c', '.', 'c'], ['f', 'f', 'f', '.'], ['.', '.', 'e', 'e'], ['.', 'h', 'h', 'h']]
################################################################

LLM answer:

output: [['c', 'c', 'c', '.'], ['f', 'f', 'f', '.'], ['.', 'e', 'e', '.'], ['h', 'h', 'h', '.']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "bcdf":
        return current_state[:-1], -1
    else:
        return current_state + ".", -1


class StateMachine:
    def __init__(self):
        self._states = [""] * 5
        self._indexes = defaultdict(int)
        for i in range(len(self._states)):
            self._indexes[self._states[i]] += 1

    @property
    def states(self) -> List[Tuple[str, int]]:
        return list(self._indexes.keys())

    def add_transition(self, transition: Tuple[str, int]) -> None:
        self._states[transition[1]] = transition[0]

    def remove_transition(self, transition: Tuple[str, int]) -> None:
        self._states[transition[1]] = ""

    def is_valid(self, state: str) -> bool:
        return state in self.states

    def run(self, input: List[str]) -> List[str]:
        current_state = ""
        indexes = []
        for char in input:
            if not self.is_valid(char):
                continue
            if char == ".":
                current_state = ""
                indexes.append(-1)
            elif char == " ":
                current_state = ""
                indexes.append(-1)
            elif char in "bcdf":
                current_state = current_state + char
                indexes.append(-1)
            else:
                current_state = current_state + char
                indexes.append()
        return [current_state] + indexes

################################################################

Solution:
[['c', 'c', '.', '.'], ['f', 'f', 'f', '.'], ['e', 'e', '.', '.'], ['h', 'h', 'h', '.']]

