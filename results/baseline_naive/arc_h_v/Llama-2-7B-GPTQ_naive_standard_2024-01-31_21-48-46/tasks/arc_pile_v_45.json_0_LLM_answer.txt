Input token: 620
Output token: 2050
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['d', '.', '.', '.', '.', 'f'], ['d', '.', 'e', '.', '.', 'f'], ['.', 'a', 'e', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', 'f'], ['d', '.', 'e', '.', '.', 'f'], ['d', 'a', 'e', '.', '.', 'f']]

Example_2:
input: [['.', 'c', 'f', '.', '.', '.'], ['.', '.', '.', '.', 'd', '.'], ['.', '.', 'f', '.', 'd', '.'], ['.', '.', 'f', '.', '.', '.'], ['.', 'c', '.', '.', '.', '.'], ['.', '.', '.', '.', 'd', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'f', '.', 'd', '.'], ['.', 'c', 'f', '.', 'd', '.'], ['.', 'c', 'f', '.', 'd', '.']]

Example_3:
input: [['.', '.', '.', '.', 'h'], ['.', 'f', 'd', '.', '.'], ['.', '.', 'd', '.', '.'], ['.', '.', 'd', '.', 'h'], ['i', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'd', '.', '.'], ['.', '.', 'd', '.', 'h'], ['i', 'f', 'd', '.', 'h']]

Test case:
input: [['.', '.', '.', '.', '.'], ['.', '.', '.', 'e', '.'], ['.', 'i', '.', '.', 'f'], ['.', '.', '.', '.', 'f'], ['d', 'i', 'a', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.'], ['.', '.', '.', 'e', '.'], ['.', 'i', '.', '.', 'f'], ['.', '.', '.', '.', 'f'], ['d', 'i', 'a', '.', 'f']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "ae":
        return current_state[:-1], -1
    else:
        return current_state + ".", -1


class StateMachine:
    def __init__(self):
        self._states = [""] * 5
        self._transitions = []
        self._indexes = {}
        for i in range(len(self._states)):
            self._indexes["".join([char for char in self._states[i]]).lower()] = i

    @property
    def states(self) -> List[Tuple[str, int]]:
        return list(self._indexes.keys())

    def add_transition(self, from_state: str, to_state: str, action: str) -> None:
        self._transitions.append((from_state, to_state, action))

    def run(self, input: str) -> Tuple[List[str], int]:
        current_state = ""
        indexes = set()
        while True:
            current_state += input[0]
            indexes.add(".")
            if not input or input[0]!= ".":
                break
            (to_state, _, _) = self._transitions.popleft()
            if to_state in indexes:
                continue
            indexes.remove(to_state)
            yield current_state, len(current_state)
            current_state = ""

    def parse(self, input: str) -> None:
        self._transitions = [(s, t, a) for s, t, a in self._parse_transitions(input)]

    def _parse_transitions(self, input: str) -> Iterable[Tuple[str, str, str]]:
        for line in input.split("\n"):
            if line == "\n":
                continue
            if line == "":
                continue
            if line.startswith("."):
                continue
            if line.strip().isdigit():
                continue
            if line.startswith("#"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):
                continue
            if line.startswith(";"):

################################################################

Solution:
[['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'i', '.', '.', 'f'], ['d', 'i', 'a', 'e', 'f']]

