Input token: 691
Output token: 418
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', 'b', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'f'], ['.', 'd', '.', '.', '.', '.'], ['i', '.', '.', '.', '.', '.']]
output: [['b', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['f', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', '.'], ['i', '.', '.', '.', '.', '.']]

Example_2:
input: [['a', '.', '.', 'a', '.', 'a'], ['g', '.', '.', '.', 'g', '.'], ['.', '.', 'c', '.', 'c', 'c'], ['.', 'h', '.', 'h', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'f', '.']]
output: [['a', 'a', 'a', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['f', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'c', '.', 'c', '.', '.'], ['.', '.', '.', 'g', 'g', '.'], ['.', '.', '.', '.', 'e', '.'], ['.', '.', 'a', '.', '.', 'a']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'g', '.', 'g', '.'], ['d', 'd', '.', '.', 'd', '.'], ['.', 'a', 'a', '.', '.', '.'], ['f', 'f', '.', '.', '.', 'f'], ['.', 'h', '.', '.', '.', 'h'], ['c', '.', '.', '.', 'c', 'c']]
################################################################

LLM answer:

output: [['g', 'g', '.', '.', '.', '.'], ['d', 'd', '.', '.', '.', '.'], ['a', 'a', '.', '.', '.', '.'], ['f', 'f', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', 'c']]
"""

import collections
from typing import List, Tuple


class Solution:
    def findIslands(self, grid: List[List[str]]) -> int:
        if not grid or not any(grid):
            return 0

        islands = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == "." or (i, j) in islands:
                    continue
                self._find_island(grid, i, j, islands)
        return len(islands)

    @staticmethod
    def _find_island(grid: List[List[str]], i: int, j: int, islands: set) -> None:
        if grid[i][j]!= ".":
            islands.add((i, j))
            for dx, dy in ((0, -1), (-1, 0), (0, 1), (1, 0)):
                x, y = i + dx, j + dy
                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) \
                        and grid[x][y]!= "." and (x, y) not in islands:
                    islands.add((x, y))
                    Solution._find_island(grid, x, y, islands)

################################################################

Solution:
[['g', 'g', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['a', 'a', '.', '.', '.', '.'], ['f', 'f', 'f', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.']]

