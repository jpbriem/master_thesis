Input token: 650
Output token: 292
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['d', '.', '.', '.', '.', '.'], ['g', '.', '.', 'g', 'g', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['.', 'e', 'e', '.', '.', 'e']]
output: [['d', '.', '.', '.', '.', '.'], ['g', 'g', 'g', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', '.', '.', '.'], ['e', 'e', 'e', '.', '.', '.']]

Example_2:
input: [['.', 'i', '.', '.', '.', 'i'], ['.', 'h', '.', '.', '.', 'h'], ['.', 'b', '.', '.', '.', 'b'], ['.', 'c', '.', 'c', 'c', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'g', 'g', '.']]
output: [['i', 'i', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['b', 'b', '.', '.', '.', '.'], ['c', 'c', 'c', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['g', 'g', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['i', '.', '.', 'i', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'd', '.'], ['g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['i', 'i', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['d', '.', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['h', '.', '.', '.'], ['.', 'a', 'a', '.'], ['e', 'e', 'e', '.'], ['i', '.', '.', '.']]
################################################################

LLM answer:

output: [['h', 'h', '.', '.'], ['.', 'a', 'a', '.'], ['e', 'e', 'e', '.'], ['i', 'i', '.', '.']]
"""
from typing import List, Optional

class Solution:
    def findIsland(self, grid: List[List[str]]) -> int:
        if not grid or not any(grid): return 0
        
        def dfs(r:int, c:int) -> None:
            if r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]) or grid[r][c] == '.': return
            
            grid[r][c] = '.'
            for dr, dc in ((-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)):
                dfs(r+dr, c+dc)
                
        count = 0
        for i, row in enumerate(grid):
            for j, col in enumerate(row):
                if col!= '.':
                    dfs(i,j)
                    count += 1
        return count
################################################################

Solution:
[['h', '.', '.', '.'], ['a', 'a', '.', '.'], ['e', 'e', 'e', '.'], ['i', '.', '.', '.']]

