Input token: 616
Output token: 442
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', 'i', '.'], ['.', 'h', '.', '.', '.', '.'], ['.', 'h', '.', 'e', 'i', '.'], ['f', '.', '.', 'e', '.', 'a'], ['.', '.', '.', '.', 'i', '.'], ['.', '.', 'b', 'e', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'e', 'i', '.'], ['.', 'h', '.', 'e', 'i', '.'], ['f', 'h', 'b', 'e', 'i', 'a']]

Example_2:
input: [['.', 'a', '.', '.', '.', '.'], ['.', '.', 'f', '.', '.', '.'], ['.', '.', 'f', 'b', '.', '.'], ['.', 'a', '.', '.', '.', '.'], ['.', '.', 'f', '.', '.', '.'], ['.', 'a', '.', '.', '.', 'e']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'a', 'f', '.', '.', '.'], ['.', 'a', 'f', '.', '.', '.'], ['.', 'a', 'f', 'b', '.', 'e']]

Example_3:
input: [['.', '.', '.', '.', 'e'], ['.', '.', 'h', '.', 'e'], ['.', '.', '.', 'i', '.'], ['.', 'b', '.', 'i', '.'], ['.', '.', '.', 'i', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'i', '.'], ['.', '.', '.', 'i', 'e'], ['.', 'b', 'h', 'i', 'e']]

Test case:
input: [['g', 'a', 'e', 'b'], ['.', 'a', 'e', '.'], ['.', 'a', '.', '.'], ['.', '.', 'e', '.']]
################################################################

LLM answer:

output: [['g', 'a', 'e', 'b'], ['.', 'a', 'e', '.'], ['.', 'a', '.', '.'], ['.', '.', 'e', '.']]
"""
from typing import List, Optional

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        if not board or not words: return []
        
        m = len(board)
        n = len(board[0])
        wordDict = {}
        for w in words:
            wordDict[w] = 0
            
        for i in range(m):
            for j in range(n):
                if board[i][j] == '.': continue
                
                for k in range(len(words)):
                    if board[i][j]!= words[k][0]: break
                    
                    # check if all characters of this word is valid
                    flag = True
                    for l in range(1, len(words[k])):
                        x = i + (l - 1) // 2 * (-1) ** ((l - 1) % 2)
                        y = j + (l - 1) // 2 * (-1) ** (((l - 1) + 1) % 2)
                        if x < 0 or x >= m or y < 0 or y >= n \
                           or board[x][y]!= words[k][l]:
                            flag = False
                            break
                        
                    if flag:
                        wordDict[words[k]] += 1
                        break
                
        res = []
        for w in words:
            if wordDict[w] > 0:
                res.append(w)
                wordDict[w] -= 1
        return res
################################################################

Solution:
[['.', '.', '.', '.'], ['.', 'a', 'e', '.'], ['.', 'a', 'e', '.'], ['g', 'a', 'e', 'b']]

