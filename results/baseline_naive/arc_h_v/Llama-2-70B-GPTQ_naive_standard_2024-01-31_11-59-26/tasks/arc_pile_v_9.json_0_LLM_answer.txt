Input token: 518
Output token: 365
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['g', '.', 'c', '.'], ['g', 'b', '.', 'h'], ['.', '.', '.', '.'], ['.', '.', '.', '.']]
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['g', '.', '.', '.'], ['g', 'b', 'c', 'h']]

Example_2:
input: [['.', 'b', '.', '.', '.', '.'], ['a', '.', 'c', '.', '.', '.'], ['a', '.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.', 'f'], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'f'], ['a', '.', '.', '.', '.', 'f'], ['a', 'b', 'c', '.', '.', 'f']]

Example_3:
input: [['b', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['b', '.', 'f', 'i', 'e'], ['b', '.', 'f', '.', 'e'], ['.', '.', '.', '.', 'e']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['b', '.', '.', '.', 'e'], ['b', '.', 'f', '.', 'e'], ['b', '.', 'f', 'i', 'e']]

Test case:
input: [['.', '.', '.', '.', '.'], ['g', '.', 'i', '.', 'd'], ['.', 'b', '.', '.', '.'], ['g', '.', '.', 'h', 'd'], ['.', '.', '.', 'h', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'h', 'd'], ['.', '.', '.', 'h', '.']]
"""
from typing import List, Optional

class Solution:
    def reconstructQueue(self, people: List[List[str]]) -> List[List[str]]:
        """
        思路：
            1、找到所有的人，并且按照顺序排列起来。
            2、对于每一个人，如果他在前面的人中出现过了，那么就将这两个人交换位置。
                因为我们知道了这两个人之间的关系，即后者在前者的后面。
            3、最后返回结果。
        """
        # 记录每个人的位置信息
        position = {}
        for i in range(len(people)):
            if not people[i]: continue
            person = "".join(people[i])
            position[person] = i

        # 根据人名从小到大进行排序
        sorted_names = sorted(position)
        result = []
        for name in sorted_names:
            index = position[name]
            result += people[index][::-1]
            del people[index]
        return result

################################################################

Solution:
[['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['g', '.', '.', 'h', 'd'], ['g', 'b', 'i', 'h', 'd']]

