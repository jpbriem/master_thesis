Input token: 480
Output token: 394
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', 'e', '.', '.', '.'], ['.', 'b', 'b', '.', 'b', '.'], ['g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['a', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['e', '.', '.', '.', '.', '.'], ['b', 'b', 'b', '.', '.', '.'], ['g', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', 'a', '.', '.'], ['.', '.', 'b', '.'], ['.', '.', '.', 'c'], ['.', '.', '.', '.']]
output: [['a', '.', '.', '.'], ['b', '.', '.', '.'], ['c', '.', '.', '.'], ['.', '.', '.', '.']]

Example_3:
input: [['c', '.', 'c', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['e', '.', 'e', 'e']]
output: [['c', 'c', '.', '.'], ['.', '.', '.', '.'], ['.', '.', '.', '.'], ['e', 'e', 'e', '.']]

Test case:
input: [['i', '.', 'i', 'i', '.'], ['.', 'a', 'a', 'a', '.'], ['.', 'e', '.', 'e', '.'], ['g', '.', 'g', '.', 'g'], ['.', '.', 'd', '.', '.']]
################################################################

LLM answer:

output: [['i', 'i', 'i', 'i', '.'], ['.', 'a', 'a', 'a', '.'], ['.', 'e', 'e', 'e', '.'], ['g', 'g', 'g', 'g', '.'], ['.', '.', 'd', '.', '.']]
"""
from typing import List, Optional

class Solution:
    def findWords(self, board: List[List[str]]) -> List[Optional[str]]:
        if not board or len(board) == 0: return []
        
        m = len(board)
        n = len(board[0])
        directions = [(x, y) for x in range(-1, 2)] + [(y, -x) for y in range(-1, 2)]
        words = [[None]*n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if board[i][j]!= '.':
                    self._dfs(words, board, i, j, directions)
        return ["".join([w for w in word if w is not None]).upper() for word in words]
    
    def _dfs(self, words, board, i, j, directions):
        if (i < 0 or i >= len(board)) or (j < 0 or j >= len(board[0])) or board[i][j] == '.' or words[i][j]:
            return
        words[i][j] = board[i][j].lower()
        for dx, dy in directions:
            self._dfs(words, board, i+dx, j+dy, directions)
################################################################

Solution:
[['i', 'i', 'i', '.', '.'], ['a', 'a', 'a', '.', '.'], ['e', 'e', '.', '.', '.'], ['g', 'g', 'g', '.', '.'], ['d', '.', '.', '.', '.']]

