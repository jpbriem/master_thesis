Input token: 528
Output token: 284
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', 'e', 'a', '.', '.', '.'], ['.', '.', '.', '.', '.', 'g'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'g'], ['h', '.', '.', '.', 'd', '.'], ['.', '.', '.', '.', 'd', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'd', 'g'], ['h', 'e', 'a', '.', 'd', 'g']]

Example_2:
input: [['g', 'a', 'i', '.', '.'], ['.', '.', '.', '.', '.'], ['g', '.', 'i', 'h', '.'], ['.', '.', '.', '.', '.'], ['g', '.', 'i', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['g', '.', 'i', '.', '.'], ['g', '.', 'i', '.', '.'], ['g', 'a', 'i', 'h', '.']]

Example_3:
input: [['.', '.', '.', '.'], ['.', '.', '.', 'f'], ['i', '.', '.', 'f'], ['.', 'g', '.', 'f']]
output: [['.', '.', '.', '.'], ['.', '.', '.', 'f'], ['.', '.', '.', 'f'], ['i', 'g', '.', 'f']]

Test case:
input: [['.', 'h', 'i', '.', '.'], ['.', 'h', '.', 'a', '.'], ['.', 'h', 'i', 'a', '.'], ['f', '.', 'i', 'a', 'b'], ['.', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['f', 'h', 'i', 'a', 'b']]
"""
from typing import List, Optional

class Solution:
    def reconstructQueue(self, people: List[List[str]]) -> List[List[str]]:
        """
        1. 从后往前扫描，记录每个人的位置和顺序。
        2. 根据顺序重新组装队列。
        """
        if not people or len(people) == 0: return []
        queue = collections.deque() # 双端队列
        for i in range(len(people)):
            row = list(map(lambda x: x if x!= "." else None, people[-i - 1]))
            queue.appendleft(row)
        result = []
        while queue:
            person = queue.popleft()
            result.insert(0, person)
        return result

################################################################

Solution:
[['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'h', 'i', 'a', '.'], ['.', 'h', 'i', 'a', '.'], ['f', 'h', 'i', 'a', 'b']]

