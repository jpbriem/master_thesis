Input token: 1821
Output token: 684
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', 'c', 'c'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', 'c', 'c'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', 'c'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', 'c', 'c'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', 'c'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', 'h', 'c', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'c', 'c', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', 'c', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.', 'c', 'c', 'c', 'c'], ['h', '.', '.', '.', '.', '.', 'c', 'c', 'c', 'c'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', 'c'], ['h', 'h', 'h', 'h', '.', '.', '.', 'c', 'c', 'c'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['h', 'c', 'c', 'c', 'c', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'c', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'c', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.', 'c', 'c', 'c', 'c'], ['h', '.', '.', '.', '.', '.', '.', 'c', 'c', 'c'], ['h', 'h', '.', '.', '.', '.', '.', '.', 'c', 'c'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['h', 'h', 'c', 'c', 'c', 'c', '.', '.', '.', '.'], ['h', 'c', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'c', 'c', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', 'c', 'c'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', 'c'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', 'c', 'c'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', 'c'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']]
"""

__author__ = "Ziang Xie"


# Definition for a Node.
class Node(object):
    def __init__(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []  # default value


class Solution(object):
    def orangesSquaring(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: List[List[str]]
        """
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        hs = [[x == 'h' for x in row] for row in grid]
        cs = [[x == 'c' for x in row] for row in grid]
        result = [[False for _ in range(len(grid))] for _ in range(len(hs))]
        q = collections.deque()
        for i in range(len(hs)):
            for j in range(len(hs[0])):
                if hs[i][j]:
                    q.append((i, j))
        while len(q) > 0:
            size = len(q)
            for _ in range(size):
                cur = q.popleft()
                i, j = cur
                for di, dj in directions:
                    ni, nj = i + di, j + dj
                    if 0 <= ni < len(result) and 0 <= nj < len(result[0]) \
                            and not result[ni][nj] and hs[ni][nj]:
                        result[ni][nj] = True
                        q.append((ni, nj))
        return ["".join([('h' if r[i] else '.') for i in range(len(r))]) for r in result]

################################################################

Solution:
[['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'c', 'c', '.', '.', '.'], ['h', 'h', 'h', 'h', '.', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', 'h', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'c', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.'], ['h', 'h', 'h', 'h', 'h', '.', '.', '.', '.', '.']]

