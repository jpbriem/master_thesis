Input token: 506
Output token: 444
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', 'f', '.', 'f', '.'], ['.', '.', '.', 'h', 'h'], ['.', '.', '.', '.', '.'], ['i', '.', 'i', 'i', '.'], ['.', '.', '.', 'e', 'e']]
output: [['f', 'f', '.', '.', '.'], ['h', 'h', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['i', 'i', 'i', '.', '.'], ['e', 'e', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', 'a'], ['.', 'h', 'h', '.'], ['b', '.', '.', '.'], ['f', '.', '.', '.']]
output: [['a', '.', '.', '.'], ['h', 'h', '.', '.'], ['b', '.', '.', '.'], ['f', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.'], ['.', '.', 'd', '.', 'd', 'd'], ['.', 'h', '.', '.', 'h', '.'], ['.', 'e', 'e', '.', '.', '.'], ['.', '.', '.', '.', '.', 'f'], ['.', 'g', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.'], ['e', 'e', '.', '.', '.', '.'], ['f', '.', '.', '.', '.', '.'], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['g', 'g', '.', 'g'], ['b', '.', '.', '.'], ['.', 'c', 'c', '.'], ['e', 'e', '.', '.']]
################################################################

LLM answer:

output: [['g', 'g', '.', 'g'], ['b', '.', '.', '.'], ['.', 'c', 'c', '.'], ['e', 'e', '.', '.']]
"""
from typing import List, Optional

class Solution:
    def findIsland(self, grid: List[List[str]]) -> int:
        if not grid or not any(grid): return 0
        
        m = len(grid)
        n = len(grid[0])
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        count = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "." and self._isValid(grid, i, j):
                    count += 1
                    self._dfs(grid, i, j)
        return count
    
    def _isValid(self, grid: List[List[str]], x: int, y: int) -> bool:
        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[x]): return False
        return grid[x][y]!= "."
    
    def _dfs(self, grid: List[List[str]], x: int, y: int) -> None:
        if grid[x][y] == ".": return
        grid[x][y] = "."
        for dx, dy in self.directions:
            self._dfs(grid, x + dx, y + dy)
            
if __name__ == "__main__":
    solution = Solution()
    print("The number of islands is", solution.findIsland([["g","g".,"g"], ["b",".",".","."], [".","c","c","."], ["e","e",".","."]]))
################################################################

Solution:
[['g', 'g', 'g', '.'], ['b', '.', '.', '.'], ['c', 'c', '.', '.'], ['e', 'e', '.', '.']]

