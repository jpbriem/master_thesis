Input token: 422
Output token: 550
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.'], ['.', 'h', '.', '.'], ['.', 'a', '.', 'a'], ['d', 'd', '.', 'd']]
output: [['.', '.', '.', '.'], ['h', '.', '.', '.'], ['a', 'a', '.', '.'], ['d', 'd', 'd', '.']]

Example_2:
input: [['.', 'g', 'g', 'g'], ['.', '.', 'i', '.'], ['e', 'e', 'e', '.'], ['.', '.', '.', 'c']]
output: [['g', 'g', 'g', '.'], ['i', '.', '.', '.'], ['e', 'e', 'e', '.'], ['c', '.', '.', '.']]

Example_3:
input: [['h', 'h', '.', 'h'], ['.', '.', 'f', '.'], ['i', '.', '.', 'i'], ['.', '.', '.', '.']]
output: [['h', 'h', 'h', '.'], ['f', '.', '.', '.'], ['i', 'i', '.', '.'], ['.', '.', '.', '.']]

Test case:
input: [['g', '.', 'g', '.', '.', 'g'], ['.', '.', '.', '.', 'i', '.'], ['c', '.', '.', '.', '.', 'c'], ['d', 'd', '.', 'd', '.', '.'], ['.', '.', 'b', 'b', '.', '.'], ['.', 'h', '.', 'h', '.', '.']]
################################################################

LLM answer:

output: [['g', 'g', 'g', '.'], ['.', '.', '.', '.'], ['c', 'c', 'c', '.'], ['d', 'd', 'd', '.'], ['b', 'b', 'b', '.'], ['.', 'h', 'h', '.']]
"""
from typing import List, Tuple

class Solution:
    def findWords(self, board: List[List[str]]) -> List[Tuple[int, int]]:
        words = []
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == ".": continue
                
                # check left to right
                word = self._findWord(board, (i, j), 0)
                if len(word): words += [(i, j)] + list(enumerate(word))
                
                # check top to bottom
                word = self._findWord(board, (i, j), 90)
                if len(word): words += [(i, j)] + list(enumerate(word))
                
                # check right to left
                word = self._findWord(board, (i, j), -90)
                if len(word): words += [(i, j)] + list(enumerate(word))
                
                # check bottom to top
                word = self._findWord(board, (i, j), 180)
                if len(word): words += [(i, j)] + list(enumerate(word))
        
        return words
    
    def _findWord(self, board: List[List[str]], start: tuple, angle: int):
        x, y = start
        direction = {0: (-1, 0), 90: (0, 1), -90: (0, -1), 180: (1, 0)}
        dx, dy = direction[angle]
        word = []
        
        while True:
            x -= dx; y -= dy
            
            if not (0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y]!= "."): break
            word.append((x, y))
            x -= dx; y -= dy
        
        return word[::-1]

################################################################

Solution:
[['g', 'g', 'g', '.', '.', '.'], ['i', '.', '.', '.', '.', '.'], ['c', 'c', '.', '.', '.', '.'], ['d', 'd', 'd', '.', '.', '.'], ['b', 'b', '.', '.', '.', '.'], ['h', 'h', '.', '.', '.', '.']]

