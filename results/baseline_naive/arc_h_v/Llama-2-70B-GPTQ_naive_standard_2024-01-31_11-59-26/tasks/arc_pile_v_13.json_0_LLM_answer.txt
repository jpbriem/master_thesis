Input token: 421
Output token: 337
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['c', '.', 'd', '.', '.'], ['.', '.', 'd', '.', '.'], ['.', 'f', '.', '.', '.'], ['c', 'f', 'd', '.', 'a'], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', 'd', '.', '.'], ['c', 'f', 'd', '.', '.'], ['c', 'f', 'd', '.', 'a']]

Example_2:
input: [['d', 'c', '.', 'f'], ['.', '.', '.', '.'], ['.', 'c', '.', 'f'], ['d', 'c', '.', '.']]
output: [['.', '.', '.', '.'], ['.', 'c', '.', '.'], ['d', 'c', '.', 'f'], ['d', 'c', '.', 'f']]

Example_3:
input: [['.', '.', 'h', 'a'], ['c', 'f', 'h', 'a'], ['c', 'f', '.', '.'], ['c', '.', 'h', 'a']]
output: [['.', '.', '.', '.'], ['c', '.', 'h', 'a'], ['c', 'f', 'h', 'a'], ['c', 'f', 'h', 'a']]

Test case:
input: [['f', '.', '.', 'b'], ['.', 'e', 'a', '.'], ['f', '.', '.', '.'], ['.', '.', '.', 'b']]
################################################################

LLM answer:

output: [['.', '.', '.', '.'], ['.', 'e', 'a', '.'], ['f', '.', '.', '.'], ['.', '.', '.', 'b']]
"""
from typing import List, Optional

class Solution:
    def reconstructQueue(self, people: List[List[str]]) -> List[List[str]]:
        """
        1. 从后往前扫描，记录每个人的位置和颜色。
        2. 根据顺序重新组装输出数组。
        """
        if not people or len(people) == 0: return []
        # 记录每个人的位置和颜色
        pos = {}
        for i in range(len(people)):
            for j in range(len(people[i])):
                if people[i][j]!= '.':
                    pos[(i, j)] = people[i][j]
        # 按照顺序重新组装输出数组
        output = [['.' for _ in range(5)] for _ in range(len(people))]
        for k, v in sorted(pos.items(), key=lambda x: (x[0][0], -x[0][1]), reverse=True):
            output[k[0]][k[1]] = v
        return output

################################################################

Solution:
[['.', '.', '.', '.'], ['.', '.', '.', '.'], ['f', '.', '.', 'b'], ['f', 'e', 'a', 'b']]

