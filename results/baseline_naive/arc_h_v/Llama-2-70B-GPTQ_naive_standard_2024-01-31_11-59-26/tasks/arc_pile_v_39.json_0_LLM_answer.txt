Input token: 486
Output token: 335
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', 'b', '.', '.', '.'], ['.', 'b', '.', '.', 'e'], ['d', '.', 'f', 'a', 'e'], ['.', '.', '.', 'a', '.'], ['.', 'b', '.', 'a', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', 'b', '.', 'a', '.'], ['.', 'b', '.', 'a', 'e'], ['d', 'b', 'f', 'a', 'e']]

Example_2:
input: [['b', '.', '.', '.'], ['.', '.', '.', '.'], ['b', 'a', '.', 'g'], ['.', '.', 'f', 'g']]
output: [['.', '.', '.', '.'], ['.', '.', '.', '.'], ['b', '.', '.', 'g'], ['b', 'a', 'f', 'g']]

Example_3:
input: [['.', '.', '.', 'd', 'f'], ['b', 'i', '.', 'd', 'f'], ['.', '.', '.', 'd', '.'], ['.', '.', 'a', '.', '.'], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'd', '.'], ['.', '.', '.', 'd', 'f'], ['b', 'i', 'a', 'd', 'f']]

Test case:
input: [['h', '.', '.', 'a', 'd'], ['h', '.', 'i', '.', '.'], ['.', '.', 'i', 'a', '.'], ['.', 'b', '.', '.', '.'], ['.', '.', '.', 'a', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.'], ['.', 'b', '.', 'a', '.'], ['h', 'i', 'a', 'd', '.']]
"""
from typing import List, Optional

class Solution:
    def reconstructQueue(self, people: List[List[str]]) -> List[List[str]]:
        """
        1. 从后往前扫描，记录每个人的位置和颜色。
        2. 根据顺序重新组装列表。
        """
        if not people or len(people) == 0: return []
        # 记录每个人的位置和颜色
        pos = {}
        for i in range(len(people)):
            for j in range(len(people[i])):
                if people[i][j]!= '.':
                    pos[(i, j)] = people[i][j]
        # 按照顺序重新组装列表
        res = [['.' for _ in range(5)] for _ in range(6)]
        for k, v in sorted(pos.items()):
            res[k[0] - 1][k[1]] = v
        return res

################################################################

Solution:
[['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', 'a', '.'], ['h', '.', 'i', 'a', '.'], ['h', 'b', 'i', 'a', 'd']]

