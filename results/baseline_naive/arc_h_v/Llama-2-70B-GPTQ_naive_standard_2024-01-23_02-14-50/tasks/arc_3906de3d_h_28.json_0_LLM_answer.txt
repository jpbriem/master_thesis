Input token: 1794
Output token: 659
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', 'i', 'i], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', 'i], ['d', 'd', 'd', '.', '.', '.', '.', 'i', 'i', 'i], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'i], ['d', 'd', 'd', '.', '.', '.', '.', '.', '.', 'i], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'i', 'i', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'i', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'i', 'i', 'i', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', 'i', '.', '.', '.], ['d', 'd', 'd', 'i', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.], ['d', '.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', 'i', 'i], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', 'i', 'i], ['d', 'd', 'd', '.', '.', '.', '.', '.', '.', 'i], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.], ['d', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', 'i', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', 'i', 'i', 'i], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['d', '.', '.', '.', '.', '.', '.', 'i', 'i', 'i], ['d', 'd', 'd', '.', '.', '.', '.', '.', 'i', 'i], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', 'i], ['d', '.', '.', '.', '.', '.', 'i', 'i', 'i', 'i], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'i', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['d', 'i', 'i', 'i', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'i', 'i', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', 'i', '.', '.', '.], ['d', 'i', 'i', 'i', 'i', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.', '.', '.', '.', 'i', 'i], ['d', 'd', '.', '.', '.', '.', 'i', 'i', 'i', 'i], ['d', 'd', 'd', 'd', '.', '.', '.', 'i', 'i', 'i], ['d', 'd', 'd', '.', '.', '.', '.', '.', '.', 'i], ['d', '.', '.', '.', 'i', 'i', 'i', 'i', 'i', 'i], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'i', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', 'd', 'i', 'i', 'i', '.', '.', '.'], ['d', 'd', 'd', 'd', 'i', 'i', 'i', '.', '.', '.'], ['d', 'd', 'd', 'i', 'i', 'i', 'i', 'i', 'i', 'i'], ['d', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i'], ['d', 'd', 'd', 'd', 'd', 'd', 'd', '.', '.', '.'], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']]
"""

__author__ = "Ziang Xie"


# Definition for a Node.
class Node(object):
    def __init__(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []  # default value


class Solution(object):
    def orangesSquaring(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: List[List[str]]
        """
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        queue = deque()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '.' and \
                   all([x!= 'd' for x in grid[max(0, i - 1)][min(j + 1, len(grid[0]) - 1)]]):
                    queue.append((i, j))

        while queue:
            size = len(queue)
            for _ in range(size):
                node = queue.popleft()
                i, j = node
                for direction in directions:
                    ni, nj = i + direction[0], j + direction[1]
                    if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] == '.':
                        queue.append((ni, nj))
                        grid[ni][nj] = 'd'

        return grid

################################################################

Solution:
[['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.], ['d', 'd', 'd', 'i', 'i', '.', '.', '.', '.', '.], ['d', 'd', 'i', 'i', 'i', 'i', '.', '.', '.', '.], ['d', 'd', 'd', 'd', 'i', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', 'i', '.', '.', '.', '.', '.', '.], ['d', 'i', 'i', 'i', 'i', 'i', 'i', '.', '.', '.], ['d', 'd', 'd', 'd', 'd', 'd', '.', '.', '.', '.], ['d', 'd', 'd', 'd', '.', '.', '.', '.', '.', '.']]

