Input token: 599
Output token: 436
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', '.', '.', 'g', '.', 'i], ['.', '.', 'd', 'g', 'e', 'i], ['.', '.', 'd', '.', '.', 'i], ['a', 'f', '.', '.', '.', '.], ['.', '.', 'd', 'g', 'e', '.], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', 'd', 'g', '.', 'i], ['a', '.', 'd', 'g', 'e', 'i], ['a', 'f', 'd', 'g', 'e', 'i']]

Example_2:
input: [['.', '.', '.', 'e', '.', '.], ['.', '.', '.', 'e', 'f', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'f', 'g], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'e', 'f', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'e', 'f', '.], ['.', '.', '.', 'e', 'f', '.], ['.', '.', '.', 'e', 'f', 'g']]

Example_3:
input: [['f', '.', 'e', 'g', 'd], ['.', '.', '.', '.', '.], ['.', '.', '.', 'g', 'd], ['f', '.', 'e', '.', '.], ['.', 'i', 'e', 'g', 'd']]
output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', 'e', 'g', 'd], ['f', '.', 'e', 'g', 'd], ['f', 'i', 'e', 'g', 'd']]

Test case:
input: [['i', 'h', 'a', '.], ['i', 'h', '.', 'g], ['.', '.', 'a', '.], ['.', 'h', 'a', 'g']]
################################################################

LLM answer:

output: [['.', '.', '.', '.], ['.', '.', '.', '.], ['.', '.', 'a', '.], ['.', 'h', 'a', 'g']]
"""
from typing import List, Optional

class Solution:
    def updateMatrix(self, matrix: List[List[str]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        
        Time complexity: O(m*n) where m is number of rows and n is number of columns.
        Space complexity: O(m+n).
        """
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return
            
        m = len(matrix)
        n = len(matrix[0])
        for i in range(m):
            for j in range(n):
                if matrix[i][j]!= ".":
                    self._update(matrix, i, j, int(matrix[i][j]))
    
    def _update(self, matrix: List[List[str]], i: int, j: int, value: int) -> None:
        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):
            return
        if matrix[i][j]!= "." and matrix[i][j]!= str(value):
            raise ValueError("Invalid input.")
        matrix[i][j] = str(value)
        self._update(matrix, i - 1, j + 1, value + 1)
        self._update(matrix, i - 1, j - 1, value + 1)
        self._update(matrix, i + 1, j + 1, value + 1)
        self._update(matrix, i + 1, j - 1, value + 1)
################################################################

Solution:
[['.', '.', '.', '.], ['.', 'h', 'a', '.], ['i', 'h', 'a', 'g], ['i', 'h', 'a', 'g']]

