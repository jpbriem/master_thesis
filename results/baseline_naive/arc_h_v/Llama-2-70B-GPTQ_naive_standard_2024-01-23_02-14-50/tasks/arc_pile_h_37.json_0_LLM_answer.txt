Input token: 671
Output token: 427
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['e', '.', '.', 'e', '.', '.], ['.', 'i', '.', 'i', '.', 'i], ['.', '.', '.', '.', '.', '.], ['g', 'g', '.', '.', '.', '.], ['d', '.', '.', '.', 'd', 'd], ['.', 'a', '.', 'a', 'a', '.']]
output: [['e', 'e', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['g', 'g', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.', '.], ['a', 'a', 'a', '.', '.', '.']]

Example_2:
input: [['.', 'd', '.', '.', '.', 'd], ['.', 'e', '.', '.', 'e', '.], ['.', '.', '.', 'f', 'f', '.], ['.', '.', '.', '.', 'g', '.], ['.', '.', '.', 'b', '.', '.], ['.', 'a', 'a', 'a', '.', '.']]
output: [['d', 'd', '.', '.', '.', '.], ['e', 'e', '.', '.', '.', '.], ['f', 'f', '.', '.', '.', '.], ['g', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.], ['a', 'a', 'a', '.', '.', '.']]

Example_3:
input: [['f', 'f', '.', '.', '.', 'f], ['.', '.', '.', 'h', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'a], ['g', '.', '.', '.', '.', '.']]
output: [['f', 'f', 'f', '.', '.', '.], ['h', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['a', '.', '.', '.', '.', '.], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'f', '.', '.', 'f], ['.', 'g', '.', '.', 'g', '.], ['.', '.', '.', '.', '.', 'e], ['.', '.', '.', '.', 'd', '.], ['h', '.', '.', 'h', '.', 'h], ['.', '.', 'c', '.', 'c', '.']]
################################################################

LLM answer:

output: [['f', 'f', 'f', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['.', '.', 'c', 'c', 'c', '.']]
"""

import collections
from typing import List, Tuple


class Solution:
    def findIslands(self, grid: List[List[str]]) -> int:
        if not grid or not any(grid):
            return 0

        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        islands = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == "." and (i, j) not in islands:
                    self._dfs(grid, i, j, directions, islands)
        return len(islands)

    @staticmethod
    def _dfs(grid: List[List[str]], x: int, y: int, directions: List[Tuple[int, int]], islands: set):
        if grid[x][y]!= ".":
            return
        grid[x][y] = "#"
        islands.add((x, y))
        for dx, dy in directions:
            nx = x + dx
            ny = y + dy
            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) \
               and grid[nx][ny] == "." and (nx, ny) not in islands:
                Solution._dfs(grid, nx, ny, directions, islands)

################################################################

Solution:
[['f', 'f', '.', '.', '.', '.], ['g', 'g', '.', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['d', '.', '.', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['c', 'c', '.', '.', '.', '.']]

