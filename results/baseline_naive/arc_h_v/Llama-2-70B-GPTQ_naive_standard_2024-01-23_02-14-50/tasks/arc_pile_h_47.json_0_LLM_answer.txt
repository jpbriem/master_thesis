Input token: 620
Output token: 757
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['d', '.', '.', '.', '.', '.], ['g', '.', '.', 'g', 'g', '.], ['.', '.', '.', '.', '.', '.], ['c', 'c', 'c', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['.', 'e', 'e', '.', '.', 'e']]
output: [['d', '.', '.', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['c', 'c', 'c', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['e', 'e', 'e', '.', '.', '.']]

Example_2:
input: [['.', 'i', '.', '.', '.', 'i], ['.', 'h', '.', '.', '.', 'h], ['.', 'b', '.', '.', '.', 'b], ['.', 'c', '.', 'c', 'c', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'g', 'g', '.']]
output: [['i', 'i', '.', '.', '.', '.], ['h', 'h', '.', '.', '.', '.], ['b', 'b', '.', '.', '.', '.], ['c', 'c', 'c', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['g', 'g', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', '.', '.', 'i', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', '.], ['g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', 'i', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['d', '.', '.', '.', '.', '.], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['h', '.', '.', '.], ['.', 'a', 'a', '.], ['e', 'e', 'e', '.], ['i', '.', '.', '.']]
################################################################

LLM answer:

output: [['h', '.', '.', '.], ['.', 'a', 'a', '.'], ['.', 'e', 'e', '.], ['.', '.', '.', '.']]
"""
from typing import List, Optional

class Solution:
    def islandPerimeter(self, grid: List[List[str]]) -> int:
        """
        1. 找到所有的岛屿，并且记录下来。
        2. 对于每个岛屿，计算周边的海洋数量。
        3. 返回最大值。
        """
        if not grid or not grid[0]: return 0
        m = len(grid)
        n = len(grid[0])
        islands = [] # 存放所有的岛屿
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "I":
                    islands.append([i, j])
        perimeters = {} # 存放每个岛屿的周长
        for (x, y), count in zip(islands, self._get_perimeters(islands)):
            perimeters[(x, y)] = count
        return max(perimeters.values())
    
    def _get_perimeters(self, islands: List[Tuple[int, int]]):
        """
        获取每个岛屿的周界
        :param islands: 所有的岛屿
        :return: 每个岛屿的周界
        """
        m = len(islands)
        perimeters = {(x, y): 0 for x, y in islands}
        for (x, y), count in zip(islands, self._get_counts(islands)):
            perimeters[(x, y)] += count
        return perimeters
    
    def _get_counts(self, islands: List[Tuple[int, int]]):
        """
        获取每个岛屿的周界
        :param islands: 所有的岛屿
        :return: 每个岛屿的周界
        """
        m = len(islands)
        counts = {(x, y): 0 for x, y in islands}
        for (x, y) in islands:
            for dx, dy in [(0, -1), (-1, 0), (0, 1), (1, 0)]:
                new_y = y + dy * m
                new_x = x + dx
                if 0 <= new_x < m and 0 <= new_y < m:
                    counts[(new_x, new_y)] -= 1
        return counts

if __name__ == "__main__":
    solution = Solution()
    assert solution.islandPerimeter([["h", ".", ".", "."], [".", "a", "a", "."], ["e", "e", "e", "."], ["i", ".", ".", "."]]) == 4

################################################################

Solution:
[['h', '.', '.', '.], ['a', 'a', '.', '.], ['e', 'e', 'e', '.], ['i', '.', '.', '.']]

