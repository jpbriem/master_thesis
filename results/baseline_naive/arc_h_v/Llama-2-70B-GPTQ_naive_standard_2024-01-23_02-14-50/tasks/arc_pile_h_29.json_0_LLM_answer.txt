Input token: 641
Output token: 407
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', '.], ['.', 'f', 'f', 'f', '.', '.], ['e', '.', '.', '.', 'e', 'e], ['.', '.', '.', '.', '.', '.], ['c', '.', '.', '.', '.', '.']]
output: [['a', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['f', 'f', 'f', '.', '.', '.], ['e', 'e', 'e', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['c', '.', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.], ['e', '.', '.', 'e', '.', '.], ['i', '.', '.', '.', 'i', '.], ['.', 'h', 'h', 'h', '.', '.], ['.', 'g', '.', '.', '.', 'g], ['.', 'd', '.', 'd', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['e', 'e', '.', '.', '.', '.], ['i', 'i', '.', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['g', 'g', '.', '.', '.', '.], ['d', 'd', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.], ['a', 'a', '.', '.', 'a', '.], ['.', '.', '.', '.', '.', '.], ['i', 'i', '.', 'i', '.', '.], ['.', '.', '.', '.', '.', '.], ['f', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['a', 'a', 'a', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['f', '.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'e', '.', 'e], ['.', '.', 'b', 'b', 'b], ['.', 'g', 'g', '.', '.], ['.', 'c', 'c', '.', '.], ['d', '.', '.', '.', 'd']]
################################################################

LLM answer:

output: [['.', '.', 'e', 'e', 'e'], ['.', '.', 'b', 'b', 'b'], ['.', 'g', 'g', 'g', '.'], ['.', 'c', 'c', 'c', '.'], ['d', 'd', 'd', 'd', 'd']]
"""

import re
from typing import List, Optional


class Solution:
    def findIslands(self, grid: List[List[str]]) -> int:
        if not grid or not any(grid):
            return 0

        m = len(grid)
        n = len(grid[0])
        directions = [(x, y + 1), (x - 1, y), (x + 1, y)]
        islands = set()
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "." and (i, j) not in islands:
                    self._dfs(grid, i, j, directions, islands)
        return len(islands)

    def _dfs(self, grid: List[List[str]], x: int, y: int, directions: list, islands: set):
        if grid[x][y]!= ".":
            return
        grid[x][y] = "#"
        islands.add((x, y))
        for dx, dy in directions:
            newX, newY = x + dx, y + dy
            if 0 <= newX < len(grid) and 0 <= newY < len(grid[0]) \
               and grid[newX][newY] == ".":
                self._dfs(grid, newX, newY, directions, islands)

################################################################

Solution:
[['e', 'e', '.', '.', '.], ['b', 'b', 'b', '.', '.], ['g', 'g', '.', '.', '.], ['c', 'c', '.', '.', '.], ['d', 'd', '.', '.', '.']]

