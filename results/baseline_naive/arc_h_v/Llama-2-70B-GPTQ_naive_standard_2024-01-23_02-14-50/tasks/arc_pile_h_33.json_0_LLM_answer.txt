Input token: 532
Output token: 410
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', 'f', '.', '.], ['.', '.', 'b', '.', '.', '.], ['.', '.', '.', 'e', '.', 'e], ['.', '.', 'a', '.', 'a', '.], ['.', '.', '.', '.', '.', '.], ['c', '.', '.', 'c', '.', '.']]
output: [['f', '.', '.', '.', '.', '.], ['b', '.', '.', '.', '.', '.], ['e', 'e', '.', '.', '.', '.], ['a', 'a', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['c', 'c', '.', '.', '.', '.']]

Example_2:
input: [['c', 'c', 'c', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['.', 'b', 'b', 'b', '.', '.], ['.', '.', 'g', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'i', 'i', 'i']]
output: [['c', 'c', 'c', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['b', 'b', 'b', '.', '.', '.], ['g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.], ['.', '.', '.', '.], ['.', '.', '.', '.], ['.', 'i', 'i', '.']]
output: [['.', '.', '.', '.], ['.', '.', '.', '.], ['.', '.', '.', '.], ['i', 'i', '.', '.']]

Test case:
input: [['.', 'c', '.', 'c], ['f', 'f', 'f', '.], ['.', '.', 'e', 'e], ['.', 'h', 'h', 'h']]
################################################################

LLM answer:

output: [['.', 'c', '.', 'c'], ['f', 'f', 'f', '.'], ['.', '.', 'e', 'e'], ['.', 'h', 'h', 'h']]
"""
from typing import List, Optional


class Solution:
    def findIsland(self, grid: List[List[str]]) -> int:
        if not grid or not any(grid):
            return 0

        m = len(grid)
        n = len(grid[0])
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        visited = [[False for _ in range(n)] for __ in range(m)]
        count = 0

        for i in range(m):
            for j in range(n):
                if grid[i][j] == "." and not visited[i][j]:
                    self._dfs(grid, i, j, visited, directions)
                    count += 1

        return count

    def _dfs(self, grid: List[List[str]], x: int, y: int, visited: List[List[bool]], directions: List[tuple[int, int]]):
        if not grid or not any(grid):
            return

        if not 0 <= x < len(grid) or not 0 <= y < len(grid[0]) or grid[x][y]!= ".":
            return

        if visited[x][y]:
            return

        visited[x][y] = True
        grid[x][y] = "#"

        for dx, dy in directions:
            self._dfs(grid, x + dx, y + dy, visited, directions)

################################################################

Solution:
[['c', 'c', '.', '.], ['f', 'f', 'f', '.], ['e', 'e', '.', '.], ['h', 'h', 'h', '.']]

