Input token: 345
Output token: 630
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.], ['.', 'e', '.', 'e], ['a', '.', 'a', '.], ['h', '.', '.', '.']]
output: [['.', '.', '.', '.], ['e', 'e', '.', '.], ['a', 'a', '.', '.], ['h', '.', '.', '.']]

Example_2:
input: [['.', '.', 'i', '.], ['.', 'a', '.', '.], ['.', '.', '.', '.], ['b', '.', '.', '.']]
output: [['i', '.', '.', '.], ['a', '.', '.', '.], ['.', '.', '.', '.], ['b', '.', '.', '.']]

Example_3:
input: [['.', 'c', 'c', '.], ['h', 'h', '.', '.], ['.', '.', '.', '.], ['.', '.', '.', '.']]
output: [['c', 'c', '.', '.], ['h', 'h', '.', '.], ['.', '.', '.', '.], ['.', '.', '.', '.']]

Test case:
input: [['e', '.', '.', 'e], ['g', 'g', '.', 'g], ['.', 'b', '.', '.], ['c', 'c', 'c', '.']]
################################################################

LLM answer:

output: [['e', '.', '.', 'e'], ['g', 'g', '.', 'g'], ['.', 'b', '.', '.'], ['c', 'c', 'c', '.']]
"""

# Definition for a Node.
class Node(object):
    def __init__(self, char):
        self.char = char
        self.left = None
        self.right = None

def isValidWord(word):
    if word == "": return False
    for i in range(len(word)):
        if not (word[0].isalpha() or word[0].isdigit()) or \
                not (word[-1].isalpha() or word[-1].isdigit()):
            return False
    return True

class Solution(object):
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        # 1. Build tree from board
        root = Node("")
        queue = []
        for row in range(len(board)):
            for col in range(len(board[row])):
                if board[row][col]:
                    node = Node(board[row][col])
                    root.addChild(node)
                    queue.append((node, row, col))
        
        # 2. BFS to check whether each word exists in the tree
        result = []
        for word in words:
            if isValidWord(word):
                found = self._bfs(root, word, len(words), result)
                if found: break
        return result
    
    def _bfs(self, root, word, maxLen, result):
        if not root: return False
        if len(word) > maxLen: return False
        if word == root.char:
            if root.left or root.right:
                return True
            else:
                return False
            
        queue = [(root, 0)]
        while queue:
            curNode, index = queue.pop(0)
            if curNode.left and curNode.left.char == word[index]:
                queue.append((curNode.left, index + 1))
            elif curNode.right and curNode.right.char == word[index]:
                queue.append((curNode.right, index + 1))
            elif index < len(word)-1:
                queue.append((curNode.left, index+1))
                queue.append((curNode.right, index+1))
            else:
                result.append(word)
                return True
        return False
################################################################

Solution:
[['e', 'e', '.', '.], ['g', 'g', 'g', '.], ['b', '.', '.', '.], ['c', 'c', 'c', '.']]

