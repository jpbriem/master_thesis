Input token: 504
Output token: 495
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', 'f', 'a', 'h], ['.', '.', 'd', 'f', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', 'i', 'd', '.', '.', 'h], ['.', 'i', '.', '.', '.', '.], ['.', '.', '.', '.', 'a', 'h']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'h], ['.', 'i', 'd', 'f', 'a', 'h], ['.', 'i', 'd', 'f', 'a', 'h']]

Example_2:
input: [['.', 'c', 'a', 'd], ['.', '.', 'a', '.], ['.', '.', 'a', '.], ['.', '.', '.', '.']]
output: [['.', '.', '.', '.], ['.', '.', 'a', '.], ['.', '.', 'a', '.], ['.', 'c', 'a', 'd']]

Example_3:
input: [['g', 'a', '.', '.], ['.', 'a', '.', 'e], ['g', 'a', '.', '.], ['g', '.', '.', 'e']]
output: [['.', '.', '.', '.], ['g', 'a', '.', '.], ['g', 'a', '.', 'e], ['g', 'a', '.', 'e']]

Test case:
input: [['h', '.', 'c', '.', '.', 'd], ['h', 'g', '.', '.', '.', 'd], ['h', 'g', 'c', '.', '.', 'd], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'e', 'f', '.']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.', '.], ['h', 'g', '.', '.', '.', 'd], ['h', 'g', 'c', '.', '.', 'd], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'e', 'f', '.']]
"""
from typing import List, Tuple

class Solution:
    def rotate(self, matrix: List[List[str]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        
        Time complexity: O(n^2) where n is the number of rows/columns in the matrix.
        Space complexity: O(1).
        """
        # Rotate 90 degrees clockwise.
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == ".": continue
                
                temp = matrix[i][j]
                matrix[i][j] = "."
            
                k = len(matrix)-1 - i
                l = len(matrix[0])-1 - j
                while (k >= 0 or l >= 0):
                    if k < 0 or l < 0: break
                    
                    if matrix[k][l]!= ".":
                        matrix[i][j] = matrix[k][l]
                        matrix[k][l] = "."
                        break
                    
                    k -= 1
                    l -= 1
                
                if matrix[i][j] == ".":
                    raise Exception("Invalid input.")
        
        # Reverse each row from left to right.
        for i in range(len(matrix)):
            matrix[i].reverse()
        
        # Reverse each column from top to bottom.
        for i in range(len(matrix[0])):
            for j in range(len(matrix))[::-1]:
                matrix[j][i] = matrix[j][i][::-1]

################################################################

Solution:
[['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['h', '.', '.', '.', '.', 'd], ['h', 'g', 'c', '.', '.', 'd], ['h', 'g', 'c', 'e', 'f', 'd']]

