Input token: 586
Output token: 617
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'a', '.', '.', 'a], ['.', '.', 'f', '.', '.', '.], ['.', 'd', '.', 'd', 'd', '.], ['.', 'g', '.', '.', 'g', 'g], ['.', 'e', '.', '.', 'e', '.], ['.', '.', '.', 'i', 'i', 'i']]
output: [['a', 'a', '.', '.', '.', '.], ['f', '.', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['e', 'e', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['e', '.', '.', '.', 'e', 'e], ['f', '.', 'f', '.', 'f', '.], ['.', '.', 'g', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['e', 'e', 'e', '.', '.', '.], ['f', 'f', 'f', '.', '.', '.], ['g', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', 'f', '.', '.', 'f], ['i', '.', '.', '.', '.], ['e', 'e', '.', '.', 'e], ['g', '.', 'g', '.', 'g], ['d', '.', 'd', '.', 'd']]
output: [['f', 'f', '.', '.', '.], ['i', '.', '.', '.', '.], ['e', 'e', 'e', '.', '.], ['g', 'g', 'g', '.', '.], ['d', 'd', 'd', '.', '.']]

Test case:
input: [['.', '.', 'i', 'i], ['h', '.', 'h', 'h], ['a', 'a', '.', 'a], ['g', '.', 'g', '.']]
################################################################

LLM answer:

output: [['i', 'i', '.', '.], ['h', 'h', 'h', '.], ['a', 'a', 'a', '.], ['g', 'g', '.', '.']]
"""
from typing import List, Optional

class Solution:
    def islandPerimeter(self, grid: List[List[str]]) -> int:
        """
        1 <= grid.length = grid[0].length <= 50
        0 <= grid[i][j].length <= 4
        grid[i][j] is one of {'.', 'a' - 'z'}
        """
        if not grid or not grid[0]: return 0
        m, n = len(grid), len(grid[0])
        directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]
        ans = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '.': continue
                visited = set()
                queue = [[i, j]]
                while queue:
                    x, y = queue.pop(0)
                    if (x, y) in visited: continue
                    visited.add((x, y))
                    for dx, dy in directions:
                        newX, newY = x + dx, y + dy
                        if 0 <= newX < m and 0 <= newY < n \
                           and grid[newX][newY]!= '.':
                            queue.append([newX, newY])
                ans += 4 * len(visited)
        return ans

# test function
def main():
    solution = Solution()
    assert solution.islandPerimeter([["."], ["b"], ["c"]]) == 8
    assert solution.islandPerimeter([["a", "a", ".", ".", "a"], [".", ".", "f", ".", "."], [".", "d", ".", "d", "d"], [".", "g", ".", ".", "g", "g"], [".", "e", ".", ".", "e", "."], [".", ".", ".", "i", "i", "i"]]) == 6
    assert solution.islandPerimeter([["."], ["f", "f", "f"], [".", ".", "."], ["e", ".", "e"], ["g", ".", "g", ".", "g"], [".", ".", "d", ".", "d"]]) == 9
    print("Passed all tests")

if __name__ == "__main__":
    main()
################################################################

Solution:
[['i', 'i', '.', '.], ['h', 'h', 'h', '.], ['a', 'a', 'a', '.], ['g', 'g', '.', '.']]

