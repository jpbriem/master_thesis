Input token: 586
Output token: 314
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'a', '.', '.', 'a], ['.', '.', 'f', '.', '.', '.], ['.', 'd', '.', 'd', 'd', '.], ['.', 'g', '.', '.', 'g', 'g], ['.', 'e', '.', '.', 'e', '.], ['.', '.', '.', 'i', 'i', 'i']]
output: [['a', 'a', '.', '.', '.', '.], ['f', '.', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['e', 'e', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['e', '.', '.', '.', 'e', 'e], ['f', '.', 'f', '.', 'f', '.], ['.', '.', 'g', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['e', 'e', 'e', '.', '.', '.], ['f', 'f', 'f', '.', '.', '.], ['g', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', 'f', '.', '.', 'f], ['i', '.', '.', '.', '.], ['e', 'e', '.', '.', 'e], ['g', '.', 'g', '.', 'g], ['d', '.', 'd', '.', 'd']]
output: [['f', 'f', '.', '.', '.], ['i', '.', '.', '.', '.], ['e', 'e', 'e', '.', '.], ['g', 'g', 'g', '.', '.], ['d', 'd', 'd', '.', '.']]

Test case:
input: [['.', '.', 'i', 'i], ['h', '.', 'h', 'h], ['a', 'a', '.', 'a], ['g', '.', 'g', '.']]
################################################################

LLM answer:

output: [['i', 'i', '.', '.', '.], ['h', 'h', '.', '.', '.], ['a', 'a', 'a', '.', '.], ['g', 'g', 'g', '.', '.]]
"""
from typing import List, Tuple
import collections


def get_input(lines):
    return lines[0][:-1].split('.')


def get_output(lines):
    return lines[-1][:-1].split('.')


def transform(inputs: List[Tuple[List[str],...]], outputs: List[Tuple[List[str],...]]) -> None:
    for i in range(len(inputs)):
        inputs = list(map(lambda x: x[:-1], inputs))
        outputs = list(map(lambda x: x[:-1], outputs))
        if len(inputs)!= len(outputs):
            raise ValueError("Input and output length mismatch")
        for j in range(len(inputs)):
            if not (set(get_input(inputs)[j]) == set(get_output(outputs)[j])) or
                   set(get_input(inputs)[j]).intersection(set(get_output(outputs)[j]))).issubset():
                raise ValueError("Input and output do not match")

################################################################

Solution:
[['i', 'i', '.', '.], ['h', 'h', 'h', '.], ['a', 'a', 'a', '.], ['g', 'g', '.', '.']]

