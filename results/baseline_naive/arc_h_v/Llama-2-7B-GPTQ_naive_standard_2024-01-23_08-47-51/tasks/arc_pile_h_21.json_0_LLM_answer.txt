Input token: 590
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['f', '.', 'f', '.', '.], ['.', 'e', '.', 'e', 'e], ['.', '.', '.', 'g', '.], ['.', 'i', '.', '.', '.], ['d', '.', '.', 'd', 'd']]
output: [['f', 'f', '.', '.', '.], ['e', 'e', 'e', '.', '.], ['g', '.', '.', '.', '.], ['i', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.']]

Example_2:
input: [['.', 'c', 'c', '.', 'c', '.], ['.', 'h', '.', 'h', '.', 'h], ['.', '.', '.', 'a', '.', '.], ['.', 'g', '.', '.', 'g', 'g], ['e', '.', '.', '.', '.', '.], ['i', '.', 'i', 'i', '.', '.']]
output: [['c', 'c', 'c', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['a', '.', '.', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.']]

Example_3:
input: [['.', 'b', 'b', '.', '.], ['.', 'g', '.', '.', 'g], ['.', 'd', 'd', '.', 'd], ['.', '.', '.', '.', '.], ['.', '.', '.', 'a', 'a']]
output: [['b', 'b', '.', '.', '.], ['g', 'g', '.', '.', '.], ['d', 'd', 'd', '.', '.], ['.', '.', '.', '.', '.], ['a', 'a', '.', '.', '.']]

Test case:
input: [['.', '.', '.', '.', '.', 'c], ['.', '.', '.', '.', '.', 'h], ['.', '.', 'e', '.', 'e', 'e], ['.', '.', 'i', 'i', '.', 'i], ['.', 'b', '.', '.', 'b', 'b], ['.', 'g', '.', 'g', '.', 'g']]
################################################################

LLM answer:

output: [['c', 'c', 'c', 'c', 'c'], ['h', 'h', 'h', 'h', 'h'], ['e', 'e', 'e', 'e', 'e'], ['i', 'i', 'i', 'i', 'i'], ['b', 'b', 'b', 'b', 'b'], ['g', 'g', 'g', 'g', 'g']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "ae":
        return current_state[:-1], -1
    else:
        return current_state + "e", -1


class StateMachine:
    def __init__(self):
        self._states = [""] * 5
        self._indexes = defaultdict(int)
        for i in range(len(self._states)):
            self._indexes[self._states[i]] += 1

    @property
    def states(self) -> List[Tuple[str, int]]:
        return list(self._indexes.keys())

    def add_transition(self, transition: Tuple[str, int]) -> None:
        self._states[transition[1]] = transition[0]

    def remove_transition(self, transition: Tuple[str, int]) -> None:
        self._states[transition[1]] = ""

    def is_valid(self, state: str) -> bool:
        return state in self.states

    def run(self, input: List[str]) -> List[str]:
        current_state = ""
        indexes = []
        for char in input:
            if not char or char == ".":
                continue
            if char == " ":
                continue
            if char == "(":
                current_state = self._states[current_state][0]
                indexes.append(-1)
                continue
            if char == ")":
                current_state = self._states[current_state][1]
                indexes.pop()
                continue
            if char == "+":
                current_state = self._states[current_state][0]
                indexes.insert(0, -1)
                continue
            if char == "-":
                current_state = self._states[current_state][1]
                indexes.remove(0)
                continue
            if char == "*":
                current_state = self._states[current_state][0]
                indexes.append(-1)
                continue
            if char == "/":
                current_state = self._states[current_state][1]
                indexes.pop()
                continue
            if char == "^":
                current_state = self._states[current_state][0]
                indexes.insert(0, -1)
                continue
            if char == "&":
                current_state = self._states[current_state][1]
                indexes.remove(0)
                continue
            if char == "%":
                current_state = self._states[current_state][0]
                indexes.append(-1)
                continue
            if char == "!":
                current_state = self._states[current_state][1]
                indexes.pop()
                continue
            if char == "#":
                current_state = self._states[current_state][0]
                indexes.insert(0, -1)
                continue
            if char == "@":
                current_state = self._states[current_state][1]
                indexes.pop()
                continue
            if char == "$":
                current_state = self._states[current_state][0]
                indexes.append(-1)
                continue
            if char == "<":
                current_state = self._states[current_state][0]
                indexes.insert(0, -1)
                continue
            if char == ">":
                current_state = self._states[current_state][1]
                indexes.pop()
                continue
            if char == "[":
                current_state = self._states[current_state][0]
                indexes.insert(0, -1
################################################################

Solution:
[['c', '.', '.', '.', '.', '.], ['h', '.', '.', '.', '.', '.], ['e', 'e', 'e', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.], ['b', 'b', 'b', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.']]

