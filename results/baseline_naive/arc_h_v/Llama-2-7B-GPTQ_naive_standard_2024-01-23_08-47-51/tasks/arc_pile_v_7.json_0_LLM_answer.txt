Input token: 599
Output token: 1026
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', '.', '.', 'g', '.', 'i], ['.', '.', 'd', 'g', 'e', 'i], ['.', '.', 'd', '.', '.', 'i], ['a', 'f', '.', '.', '.', '.], ['.', '.', 'd', 'g', 'e', '.], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', 'd', 'g', '.', 'i], ['a', '.', 'd', 'g', 'e', 'i], ['a', 'f', 'd', 'g', 'e', 'i']]

Example_2:
input: [['.', '.', '.', 'e', '.', '.], ['.', '.', '.', 'e', 'f', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'f', 'g], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'e', 'f', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'e', 'f', '.], ['.', '.', '.', 'e', 'f', '.], ['.', '.', '.', 'e', 'f', 'g']]

Example_3:
input: [['f', '.', 'e', 'g', 'd], ['.', '.', '.', '.', '.], ['.', '.', '.', 'g', 'd], ['f', '.', 'e', '.', '.], ['.', 'i', 'e', 'g', 'd']]
output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', 'e', 'g', 'd], ['f', '.', 'e', 'g', 'd], ['f', 'i', 'e', 'g', 'd']]

Test case:
input: [['i', 'h', 'a', '.], ['i', 'h', '.', 'g], ['.', '.', 'a', '.], ['.', 'h', 'a', 'g']]
################################################################

LLM answer:

output: [['i', 'h', 'a', 'g'], ['i', 'h', '.', 'g'], ['.', '.', 'a', 'g'], ['.', 'h', 'a', 'g']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state: str) -> Tuple[str, int]:
    """Return next state and index of current state."""
    if len(current_state) == 0:
        return "", -1
    elif current_state[-1] in "ae":
        return current_state[:-1], -1
    else:
        return current_state + ".", -1


class StateMachine:
    def __init__(self):
        self._states = []
        self._transitions = {}
        self._starting_state = None
        self._current_state = ""
        self._index = 0

    @property
    def states(self) -> List[Tuple[int, str]]:
        return list(self._transitions.keys())

    @property
    def starting_state(self) -> Optional[Tuple[int, str]]:
        return self._starting_state

    @starting_state.setter
    def starting_state(self, value: Optional[Tuple[int, str]]) -> None:
        self._starting_state = value

    @property
    def current_state(self) -> Optional[Tuple[int, str]]:
        return self._current_state

    @current_state.setter
    def current_state(self, value: Optional[Tuple[int, str]]) -> None:
        self._current_state = value

    def add_transition(self, from_state: int, to_state: int, action: str) -> None:
        self._transitions[(from_state, to_state)] = (action, 0)

    def set_starting_state(self, state: Tuple[int, str]) -> None:
        self._starting_state = state

    def set_current_state(self, state: Tuple[int, str]) -> None:
        self._current_state = state

    def run(self, input: List[str]) -> None:
        for i in range(len(input)):
            current_state, index = get_next(self._current_state)
            self._current_state = current_state
            self._index += 1
            if not self._is_valid():
                break

    def _is_valid(self) -> bool:
        return True

    def is_finished(self) -> bool:
        return False

    def is_accepted(self) -> bool:
        return False

    def is_rejected(self) -> bool:
        return False

    def is_stuck(self) -> bool:
        return False

    def is_stopped(self) -> bool:
        return False

    def is_halted(self) -> bool:
        return False

    def is_running(self) -> bool:
        return False

    def is_paused(self) -> bool:
        return False

    def is_deadlocked(self) -> bool:
        return False

    def is_blocked(self) -> bool:
        return False

    def is_waiting(self) -> bool:
        return False

    def is_ready(self) -> bool:
        return False

    def is_busy(self) -> bool:
        return False

    def is_idle(self) -> bool:
        return False

    def is_suspended(self) -> bool:
        return False

    def is_resumed(self) -> bool:
        return False

    def is_terminated(self) -> bool:
        return False

    def is_cancelled(self) -> bool:
        return False

    def is_timedout(self) -> bool:
        return False

    def is_interrupted(self) -> bool:
        return False

    def is_completed(self) -> bool:
        return False

    def is_failed(self) -> bool
################################################################

Solution:
[['.', '.', '.', '.], ['.', 'h', 'a', '.], ['i', 'h', 'a', 'g], ['i', 'h', 'a', 'g']]

