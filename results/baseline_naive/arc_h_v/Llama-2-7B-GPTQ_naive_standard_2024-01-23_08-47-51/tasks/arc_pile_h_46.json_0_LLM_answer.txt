Input token: 544
Output token: 480
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.], ['h', '.', '.', '.', '.], ['.', '.', 'd', 'd', '.], ['.', 'b', 'b', '.', 'b], ['g', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.], ['h', '.', '.', '.', '.], ['d', 'd', '.', '.', '.], ['b', 'b', 'b', '.', '.], ['g', '.', '.', '.', '.']]

Example_2:
input: [['g', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', 'e', '.', '.', '.], ['.', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.']]
output: [['g', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['e', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.']]

Example_3:
input: [['.', 'c', '.', '.', 'c', 'c], ['h', '.', '.', 'h', '.', '.], ['.', 'g', 'g', '.', '.', 'g], ['.', 'e', '.', '.', '.', '.], ['.', 'i', '.', '.', 'i', 'i], ['.', '.', '.', '.', '.', '.']]
output: [['c', 'c', 'c', '.', '.', '.], ['h', 'h', '.', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['i', 'i', 'i', '.', '.', '.], ['.', '.', '.', '.', '.', '.']]

Test case:
input: [['h', '.', '.', '.', '.], ['.', 'g', '.', 'g', '.], ['.', '.', '.', '.', 'i], ['.', 'a', '.', 'a', '.], ['e', 'e', '.', '.', 'e']]
################################################################

LLM answer:

output: [['h', '.', '.', '.', '.], ['.', 'g', '.', 'g', '.], ['.', '.', '.', '.', 'i'], ['.', 'a', '.', 'a', '.], ['e', 'e', '.', '.', 'e']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state):
    """Returns next state given current state."""
    if len(current_state) == 0:
        return "."
    elif current_state[0][0] == ".":
        return "." + get_next(current_state[1])
    else:
        return "." + get_next([current_state[0]])


class StateMachine:
    def __init__(self, initial_state=None):
        self._initial = initial_state or [""]
        self._states = {}
        for i in range(len(self._initial)):
            self._states[(self._initial[i],)] = []

    def add_transition(self, from_, to, symbol="."):
        """Add transition between states."""
        self._states[to].append((from_,))

    def run(self, input_str=""):
        """Runs the machine on a string of characters."""
        current_state = self._initial[:]
        while True:
            new_state = get_next(current_state)
            if new_state not in self._states:
                break
            current_state = self._states[new_state]

        return current_state


if __name__ == "__main__":
    sm = StateMachine()
    sm.add_transition(".", "h", ".")
    sm.add_transition(".", "g", ".")
    sm.add_transition(".", "e", ".")
    sm.add_transition(".", "i", ".")
    sm.run(sys.stdin.readline().strip())
################################################################

Solution:
[['h', '.', '.', '.', '.], ['g', 'g', '.', '.', '.], ['i', '.', '.', '.', '.], ['a', 'a', '.', '.', '.], ['e', 'e', 'e', '.', '.']]

