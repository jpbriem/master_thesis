Input token: 582
Output token: 772
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', 'g', 'b', '.', '.], ['.', '.', '.', 'b', 'f', 'a], ['i', 'h', '.', '.', '.', 'a], ['i', 'h', '.', '.', 'f', '.], ['.', '.', '.', 'b', '.', '.], ['i', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', '.', '.', 'b', '.', '.], ['i', 'h', '.', 'b', 'f', 'a], ['i', 'h', 'g', 'b', 'f', 'a']]

Example_2:
input: [['.', '.', 'a', '.', '.], ['.', '.', 'a', '.', '.], ['.', '.', '.', 'd', '.], ['h', '.', '.', 'd', '.], ['.', '.', '.', 'd', '.']]
output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', '.', 'd', '.], ['.', '.', 'a', 'd', '.], ['h', '.', 'a', 'd', '.']]

Example_3:
input: [['.', '.', 'e', '.', '.], ['.', '.', '.', '.', 'a], ['.', '.', 'e', '.', 'a], ['.', '.', 'e', '.', '.], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', 'e', '.', '.], ['.', '.', 'e', '.', 'a], ['.', '.', 'e', '.', 'a']]

Test case:
input: [['.', '.', 'd', '.', '.', '.], ['c', '.', '.', '.', '.', '.], ['.', 'i', '.', 'e', '.', 'h], ['c', 'i', '.', '.', 'g', '.], ['.', '.', 'd', 'e', 'g', 'h], ['c', '.', 'd', '.', 'g', 'h']]
################################################################

LLM answer:

output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', 'i', '.', 'e', '.', 'h'], ['.', 'i', '.', 'e', '.', 'h'], ['.', 'i', '.', 'e', '.', 'h'], ['.', 'i', '.', 'e', '.', 'h']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state):
    """Returns next state given current state."""
    if len(current_state) == 0:
        return "."
    elif len(current_state) > 4:
        return ".".join([str(x) for x in current_state])
    else:
        return "." + str(current_state[0])


class StateMachine():
    def __init__(self, initial_state=None):
        self._initial = initial_state or [""]
        self._states = {}
        self._transitions = []

    @property
    def states(self):
        return list(self._states.keys())

    def add_transition(self, source, target, action="", is_final=False):
        """Add transition from `source` to `target`.

        Args:
            source (str): Source state name.
            target (str): Target state name.
            action (str): Action string.
            is_final (bool): Whether this transition is final.
        """
        if not isinstance(action, str):
            raise TypeError("Action must be a string.")
        if not is_final:
            self._transitions.append((source, target, action))
        else:
            self._transitions += [(source, target, action)]

    def run(self, input_string=""):
        """Run the machine on an input string."""
        current_state = self._initial
        while True:
            if input_string!= "":
                current_state = self.__step(current_state, input_string)
            else:
                break
        return current_state

    def __step(self, current_state, input_char):
        """Step through the machine with one character at a time."""
        new_state = None
        for trans in self._transitions:
            if trans[0] == current_state:
                new_state = trans[1]
                break
        if new_state is None:
            # No match found
            return current_state
        if new_state in self._states:
            # Transition exists
            return self._states[new_state][0].join(self._states[new_state][1])
        else:
            # New state added
            self._add_state(new_state)
            return new_state

    def _add_state(self, new_state):
        """Add new state to the machine."""
        self._states[new_state] = [deque(), [], []]
        self._transitions += [(new_state, "", "") for i in range(len(self))]

    def __getitem__(self, index):
        """Get item by index."""
        return self._initial

################################################################

Solution:
[['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['c', '.', 'd', '.', 'g', 'h], ['c', 'i', 'd', 'e', 'g', 'h], ['c', 'i', 'd', 'e', 'g', 'h']]

