Input token: 464
Output token: 736
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['e', 'e', 'e', '.], ['.', '.', '.', '.], ['d', 'd', '.', 'd], ['.', 'b', 'b', 'b']]
output: [['e', 'e', 'e', '.], ['.', '.', '.', '.], ['d', 'd', 'd', '.], ['b', 'b', 'b', '.']]

Example_2:
input: [['c', '.', '.', '.', '.], ['.', '.', '.', 'b', 'b], ['.', '.', '.', '.', '.], ['.', 'd', 'd', '.', '.], ['a', '.', '.', '.', 'a']]
output: [['c', '.', '.', '.', '.], ['b', 'b', '.', '.', '.], ['.', '.', '.', '.', '.], ['d', 'd', '.', '.', '.], ['a', 'a', '.', '.', '.']]

Example_3:
input: [['.', 'i', '.', '.', 'i], ['.', 'e', 'e', 'e', '.], ['d', '.', 'd', '.', 'd], ['.', 'c', '.', '.', 'c], ['.', '.', '.', '.', '.']]
output: [['i', 'i', '.', '.', '.], ['e', 'e', 'e', '.', '.], ['d', 'd', 'd', '.', '.], ['c', 'c', '.', '.', '.], ['.', '.', '.', '.', '.']]

Test case:
input: [['.', '.', 'h', '.', '.], ['g', '.', 'g', 'g', '.], ['b', '.', '.', '.', '.], ['.', 'e', '.', '.', '.], ['.', '.', 'i', 'i', '.']]
################################################################

LLM answer:

output: [['.', '.', 'h', '.', '.], ['g', '.', 'g', 'g', '.], ['b', '.', '.', '.', '.], ['.', 'e', '.', '.', '.], ['i', 'i', '.', '.', '.']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state):
    """Returns next state given current state."""
    if len(current_state) == 0:
        return "."
    elif len(current_state) > 4:
        return ".".join([str(char) for char in current_state])
    else:
        return "." + str(current_state[0])


class StateMachine():
    def __init__(self, initial_state=None):
        self._initial = initial_state or [""]
        self._states = {}
        self._transitions = []

    @property
    def states(self):
        return list(self._states.keys())

    def add_transition(self, from_, to, action):
        self._transitions.append((from_, to, action))

    def set_initial(self, initial_state):
        self._initial = initial_state

    def set_starting_state(self, starting_state):
        self._initial = starting_state

    def start(self, state):
        self._initial = state

    def run(self, input_string):
        current_state = self._initial
        while True:
            if not current_state:
                break
            new_state = get_next(current_state)
            if new_state in self._states:
                current_state = self._states[new_state]
            else:
                raise ValueError("Invalid transition")

    def is_valid(self, input_string):
        current_state = self._initial
        while True:
            if not current_state:
                break
            new_state = get_next(current_state)
            if new_state in self._states:
                current_state = self._states[new_state]
            else:
                return False

    def parse(self, input_string):
        current_state = self._initial
        while True:
            if not current_state:
                break
            new_state = get_next(current_state)
            if new_state in self._states:
                current_state = self._states[new_state]
            else:
                raise ValueError("Invalid transition")

    def __repr__(self):
        return f'{self.__class__.__name__}(initial={self._initial})'


if __name__ == "__main__":
    sm = StateMachine()
    sm.add_transition('A', 'B', 'a')
    sm.add_transition('C', 'D', 'c')
    sm.add_transition('E', 'F', 'e')
    sm.set_initial(['A'])
    sm.run('ACDE')

################################################################

Solution:
[['h', '.', '.', '.', '.], ['g', 'g', 'g', '.', '.], ['b', '.', '.', '.', '.], ['e', '.', '.', '.', '.], ['i', 'i', '.', '.', '.']]

