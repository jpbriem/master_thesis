Input token: 571
Output token: 536
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', 'a', '.', '.], ['.', '.', 'c', '.', 'c', '.], ['h', '.', '.', '.', '.', '.], ['.', 'g', '.', '.', '.', '.], ['.', '.', '.', '.', '.', 'e], ['.', 'b', 'b', 'b', '.', '.']]
output: [['a', '.', '.', '.', '.', '.], ['c', 'c', '.', '.', '.', '.], ['h', '.', '.', '.', '.', '.], ['g', '.', '.', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['b', 'b', 'b', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', '.', '.', '.], ['.', 'b', 'b', '.', '.', '.], ['.', 'g', 'g', 'g', '.', '.], ['.', '.', 'd', '.', 'd', 'd], ['.', '.', '.', 'e', '.', 'e], ['.', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['b', 'b', '.', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['d', 'd', 'd', '.', '.', '.], ['e', 'e', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.], ['d', 'd', '.', 'd', '.], ['.', '.', 'b', '.', '.], ['.', '.', '.', '.', 'i], ['.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.], ['d', 'd', 'd', '.', '.], ['b', '.', '.', '.', '.], ['i', '.', '.', '.', '.], ['.', '.', '.', '.', '.']]

Test case:
input: [['a', '.', 'a', '.], ['.', '.', 'i', 'i], ['.', '.', '.', 'c], ['.', '.', '.', 'g']]
################################################################

LLM answer:

output: [['a', '.', 'a', '.'], ['.', '.', 'i', 'i'], ['.', '.', '.', 'c'], ['.', '.', '.', 'g']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current_state):
    """Returns next state given current state."""
    if len(current_state) == 0:
        return "."
    elif current_state[0][0]!= ".":
        return "." + get_next(current_state[1:])
    else:
        return ""


class StateMachine:
    def __init__(self, initial_state=None):
        self._initial = initial_state or [""]
        self._states = {}
        for i in range(len(self._initial)):
            self._states[(self._initial[i],)] = (i,)

    def add_transition(self, from_, to, symbol="."):
        """Add transition between states."""
        if not isinstance(to, tuple):
            to = (to,)
        self._states[tuple(from_)].append((symbol,))
        self._states[tuple(to)].insert(0, (symbol,))

    def run(self, input_str=""):
        """Run state machine on string of characters."""
        current_state = self._initial
        while True:
            new_state = None
            for s, t in self._states.items():
                if s == current_state:
                    continue
                if any([char in s for char in input_str]):
                    break
            if new_state is None:
                raise ValueError("No valid transitions")
            current_state = new_state
            yield current_state

    def __iter__(self):
        return iter(self.run(input_str()))


if __name__ == "__main__":
    sm = StateMachine()
    sm.add_transition(".", "a")
    sm.add_transition(".", "i")
    sm.add_transition(".", "c")
    sm.add_transition(".", "g")
    print(*sm, sep="\n")
################################################################

Solution:
[['a', 'a', '.', '.], ['i', 'i', '.', '.], ['c', '.', '.', '.], ['g', '.', '.', '.']]

