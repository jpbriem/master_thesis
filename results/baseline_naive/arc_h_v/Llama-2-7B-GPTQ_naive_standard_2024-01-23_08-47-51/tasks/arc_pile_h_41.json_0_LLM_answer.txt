Input token: 518
Output token: 554
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['.', '.', 'b', 'b', '.], ['g', '.', 'g', '.', '.], ['.', '.', '.', 'i', '.']]
output: [['.', '.', '.', '.', '.], ['.', '.', '.', '.', '.], ['b', 'b', '.', '.', '.], ['g', 'g', '.', '.', '.], ['i', '.', '.', '.', '.']]

Example_2:
input: [['.', '.', '.', 'g', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'e', '.', '.], ['.', 'h', 'h', 'h', '.', '.']]
output: [['g', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['e', '.', '.', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', 'g', '.], ['.', 'a', '.', 'a', 'a], ['.', '.', '.', '.', 'i], ['e', '.', 'e', 'e', '.], ['.', '.', '.', '.', '.']]
output: [['g', '.', '.', '.', '.], ['a', 'a', 'a', '.', '.], ['i', '.', '.', '.', '.], ['e', 'e', 'e', '.', '.], ['.', '.', '.', '.', '.']]

Test case:
input: [['g', 'g', '.', 'g], ['.', '.', 'f', 'f], ['c', '.', 'c', 'c], ['.', 'b', '.', '.']]
################################################################

LLM answer:

output: [['g', 'g', '.', 'g'], ['.', '.', 'f', 'f'], ['c', 'c', 'c', 'c'], ['.', 'b', 'b', 'b']]
"""

import sys
from collections import deque, defaultdict
from typing import List, Optional, Tuple


def get_next(current):
    if current == "." or current == ".":
        return "."
    elif current in ["g", "g"]:
        return "."
    else:
        return ""


def get_previous(current):
    if current == "." or current == ".":
        return "."
    elif current in ["g", "g"]:
        return "."
    else:
        return ""


def is_valid(current, nexts) -> bool:
    """Check whether a string of characters is valid for the given state."""
    if len(current)!= 0:
        return False
    if not any([char in nexts for char in current]):
        return True
    return False


class Solution:
    def findTheLongestValidPath(self, grid: List[List[str]]) -> int:
        # Time complexity O(n^2), Space complexity O(n).
        n = len(grid)
        m = len(grid[0])
        dp = [[False for _ in range(m)] for _ in range(n)]
        for i in range(len(dp)):
            for j in range(len(dp[i])):
                if dp[i][j]:
                    continue
                if (not grid[i][j]).startswith("."):
                    break
                if grid[i][j].endswith(".") and grid[i + 1][j - 1].startswith("."):
                    dp[i][j] = True
        res = 0
        for i in range(len(dp)):
            for j in range(len(dp[i])):
                if dp[i][j]:
                    res += 1
        return res


if __name__ == "__main__":
    s = Solution()
    grid = [["g","g"],["g","g"],["g","g"],["g","g"]]
    print(s.findTheLongestValidPath(grid))
################################################################

Solution:
[['g', 'g', 'g', '.], ['f', 'f', '.', '.], ['c', 'c', 'c', '.], ['b', '.', '.', '.']]

