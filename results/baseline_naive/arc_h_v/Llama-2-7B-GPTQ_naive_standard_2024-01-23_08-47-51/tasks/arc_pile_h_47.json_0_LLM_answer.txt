Input token: 620
Output token: 190
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['d', '.', '.', '.', '.', '.], ['g', '.', '.', 'g', 'g', '.], ['.', '.', '.', '.', '.', '.], ['c', 'c', 'c', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['.', 'e', 'e', '.', '.', 'e']]
output: [['d', '.', '.', '.', '.', '.], ['g', 'g', 'g', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['c', 'c', 'c', '.', '.', '.], ['h', 'h', 'h', '.', '.', '.], ['e', 'e', 'e', '.', '.', '.']]

Example_2:
input: [['.', 'i', '.', '.', '.', 'i], ['.', 'h', '.', '.', '.', 'h], ['.', 'b', '.', '.', '.', 'b], ['.', 'c', '.', 'c', 'c', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', 'g', 'g', '.']]
output: [['i', 'i', '.', '.', '.', '.], ['h', 'h', '.', '.', '.', '.], ['b', 'b', '.', '.', '.', '.], ['c', 'c', 'c', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['g', 'g', '.', '.', '.', '.']]

Example_3:
input: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', '.', '.', 'i', '.', '.], ['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', 'd', '.], ['g', '.', '.', '.', '.', '.']]
output: [['.', '.', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['i', 'i', '.', '.', '.', '.], ['.', '.', '.', '.', '.', '.], ['d', '.', '.', '.', '.', '.], ['g', '.', '.', '.', '.', '.']]

Test case:
input: [['h', '.', '.', '.], ['.', 'a', 'a', '.], ['e', 'e', 'e', '.], ['i', '.', '.', '.']]
################################################################

LLM answer:

output: [['h', '.', '.', '.], ['.', 'a', 'a', '.], ['e', 'e', 'e', '.], ['i', '.', '.', '.'], ['o', '.', '.', '.']]
"""

import sys
from collections import deque, namedtuple

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        
        if not isinstance(s, list) or len(s) == 0: return []
        
        words = deque([])
        for word in s:
            if word!= " ":
                words.appendleft(word)
                
        return ["".join(w) for w in reversed(words)]
################################################################

Solution:
[['h', '.', '.', '.], ['a', 'a', '.', '.], ['e', 'e', 'e', '.], ['i', '.', '.', '.']]

