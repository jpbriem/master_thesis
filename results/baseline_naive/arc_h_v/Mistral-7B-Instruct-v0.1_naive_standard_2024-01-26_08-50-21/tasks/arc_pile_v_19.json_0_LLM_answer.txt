Input token: 451
Output token: 316
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 1, 0, 0], [0, 1, 2, 0], [0, 0, 0, 0], [0, 1, 0, 0]]
output: [[0, 0, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 2, 0]]

Example_2:
input: [[1, 0, 0, 0], [1, 0, 2, 5], [1, 0, 0, 5], [0, 0, 0, 0]]
output: [[0, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 5], [1, 0, 2, 5]]

Example_3:
input: [[8, 0, 0, 0, 0], [0, 0, 0, 9, 0], [0, 0, 0, 0, 4], [0, 0, 0, 9, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 9, 0], [8, 0, 0, 9, 4]]

Test case:
input: [[0, 3, 0, 6], [0, 3, 0, 0], [5, 3, 0, 0], [0, 0, 7, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0], [0, 0, 0, 0], [5, 3, 0, 0], [0, 0, 7, 0]]

Explanation:
For each element in the input array, we need to check if it is equal to 3. If it is, we replace it with 0. Otherwise, we leave it as is. Then we return the transformed array.

Constraints:
n <= 10^5
m <= n
0 <= nums[i][j] <= 10^9

class Solution {
public:
    vector<vector<int>> transform(vector<vector<int>>& nums) {
        int n = nums.size();
        int m = nums[0].size();
        vector<vector<int>> res(n, vector<int>(m));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (nums[i][j] == 3) {
                    res[i][j] = 0;
                } else {
                    res[i][j] = nums[i][j];
                }
            }
        }
        return res;
    }
};
################################################################

Solution:
[[0, 0, 0, 0], [0, 3, 0, 0], [0, 3, 0, 0], [5, 3, 7, 6]]

