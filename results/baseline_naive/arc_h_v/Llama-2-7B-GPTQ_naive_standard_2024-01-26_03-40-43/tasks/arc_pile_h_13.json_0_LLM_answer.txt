Input token: 451
Output token: 221
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 3, 0, 0, 3], [0, 6, 6, 0, 0], [0, 4, 0, 4, 4], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]]
output: [[3, 3, 0, 0, 0], [6, 6, 0, 0, 0], [4, 4, 4, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]]

Example_2:
input: [[4, 0, 0, 4], [3, 3, 0, 3], [0, 0, 0, 0], [0, 6, 0, 6]]
output: [[4, 4, 0, 0], [3, 3, 3, 0], [0, 0, 0, 0], [6, 6, 0, 0]]

Example_3:
input: [[3, 3, 3, 0], [0, 6, 6, 0], [8, 0, 8, 8], [1, 0, 1, 1]]
output: [[3, 3, 3, 0], [6, 6, 0, 0], [8, 8, 8, 0], [1, 1, 1, 0]]

Test case:
input: [[0, 6, 0, 6], [0, 0, 5, 0], [0, 0, 1, 0], [2, 0, 0, 2]]
################################################################

LLM answer:

output: [[6, 6, 0, 0], [5, 0, 0, 0], [1, 0, 0, 0], [2, 0, 0, 0]]
"""
import sys
from typing import List

class Solution(object):
    def flipEquiv(self, nums: List[int]) -> int:
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if len(nums) == 1: return 0
        
        # 暴力解法，时间复杂度为 O(n^2)
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if (nums[i]+nums[j]) % 2!= 0:
                    return -1
            
        return 0
################################################################

Solution:
[[6, 6, 0, 0], [5, 0, 0, 0], [1, 0, 0, 0], [2, 2, 0, 0]]

