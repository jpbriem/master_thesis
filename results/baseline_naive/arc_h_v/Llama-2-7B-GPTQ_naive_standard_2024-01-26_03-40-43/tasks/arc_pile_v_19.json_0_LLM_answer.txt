Input token: 451
Output token: 245
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [[0, 1, 0, 0], [0, 1, 2, 0], [0, 0, 0, 0], [0, 1, 0, 0]]
output: [[0, 0, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 2, 0]]

Example_2:
input: [[1, 0, 0, 0], [1, 0, 2, 5], [1, 0, 0, 5], [0, 0, 0, 0]]
output: [[0, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 5], [1, 0, 2, 5]]

Example_3:
input: [[8, 0, 0, 0, 0], [0, 0, 0, 9, 0], [0, 0, 0, 0, 4], [0, 0, 0, 9, 0], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 9, 0], [8, 0, 0, 9, 4]]

Test case:
input: [[0, 3, 0, 6], [0, 3, 0, 0], [5, 3, 0, 0], [0, 0, 7, 0]]
################################################################

LLM answer:

output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
"""
import sys
from typing import List

class Solution(object):
    def findKthLargest(self, nums: List[int], k: int) -> int:
        if len(nums) < k+1 or not isinstance(k, int): return -1
        
        # sort by ascending order
        nums = sorted(nums)
        i = j = 0
        while i <= j:
            if i >= j: break
            
            if nums[i] > nums[j]:
                temp = nums[i]
                nums[i] = nums[j]
                nums[j] = temp
                
                i += 1
                j -= 1
            else:
                i += 1
    
        return nums[-k]
################################################################

Solution:
[[0, 0, 0, 0], [0, 3, 0, 0], [0, 3, 0, 0], [5, 3, 7, 6]]

