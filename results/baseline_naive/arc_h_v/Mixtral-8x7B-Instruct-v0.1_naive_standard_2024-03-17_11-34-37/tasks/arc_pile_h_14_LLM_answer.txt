
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[5, 5, 5, 0], [0, 0, 0, 0], [4, 4, 0, 4], [0, 2, 2, 2]]
output: [[5, 5, 5, 0], [0, 0, 0, 0], [4, 4, 4, 0], [2, 2, 2, 0]]

Example_2:
input: [[3, 0, 0, 0, 0], [0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 4, 4, 0, 0], [1, 0, 0, 0, 1]]
output: [[3, 0, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [4, 4, 0, 0, 0], [1, 1, 0, 0, 0]]

Example_3:
input: [[0, 9, 0, 0, 9], [0, 5, 5, 5, 0], [4, 0, 4, 0, 4], [0, 3, 0, 0, 3], [0, 0, 0, 0, 0]]
output: [[9, 9, 0, 0, 0], [5, 5, 5, 0, 0], [4, 4, 4, 0, 0], [3, 3, 0, 0, 0], [0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 8, 0, 0], [7, 0, 7, 7, 0], [2, 0, 0, 0, 0], [0, 5, 0, 0, 0], [0, 0, 9, 9, 0]]

###########################################################
Sample Outputs:
output: [[0, 0, 8, 0, 0], [7, 7, 7, 7, 0], [2, 2, 2, 0, 0], [5, 5, 0, 0, 0], [9, 9, 0, 0, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int nRows, int nCols) {
    for (int i = 0; i < nRows; ++i) {
        bool isZeroRow = true;
        for (int j = 0; j < nCols; ++j) {
            if (arr[i][j]!= 0) {
                isZeroRow = false;
                break;
            }
        }
        if (!isZeroRow) continue;
        for (int k = 0; k < nCols; ++k) {
            arr[i][k] = arr[nRows - 1][k];
        }
    }
}

void merge(int** arr, int nRows, int nCols) {
    for (int col = 0; col < nCols; ++col) {
        for (int row = 0; row < nRows - 1; ++row) {
            if (arr[row][col] == 0 && arr[row + 1][col]!= 0) {
                swap(arr[row][col], arr[row + 1][col]);
            }
        }
    }
}

void printArr(int** arr, int nRows, int nCols) {
    cout << "[";
    for (int i = 0; i < nRows; ++i) {
        cout << "[";
        for (int j = 0; j < nCols; ++j) {
            cout << arr[i][j];
            if (j < nCols - 1) cout << ", ";
        }
        cout << "]";
        if (i < nRows - 1) cout << ",";
    }
    cout << "]\n";
}

void zeroMatrix(int** arr, int nRows, int nCols) {
    // Fill the last row with values from bottom-most non-zero row.
    fill(arr, nRows, nCols);

    // Merge rows to get zeros at top of matrix.
    merge(arr, nRows, nCols);
}

int main() {
    int testCase[][5] = {{0, 0, 8, 0, 0}, {7, 0, 7, 7, 0}, {2, 0, 0, 0, 0}, {0, 5, 0, 0, 0}, {0, 0, 9, 9, 0}};
    int **arr = new int*[5];
    for (int i = 0; i < 5; ++i) {
        arr[i] = new int[5];
        for (int j = 0; j < 5; ++j) {
            arr[i][j] = testCase[i][j];
        }
    }
    zeroMatrix(arr, 5, 5);
    printArr(arr, 5, 5);
    return 0;
}


###########################################################
Result:
solution: [[8, 0, 0, 0, 0], [7, 7, 7, 0, 0], [2, 0, 0, 0, 0], [5, 0, 0, 0, 0], [9, 9, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.033816425120772944

cat_success_cnt: 0

cat_success_rate: 0.0

