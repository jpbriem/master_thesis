
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 6, 0], [0, 9, 0, 0, 0, 9], [0, 3, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0]]
output: [[8, 8, 8, 0, 0, 0], [6, 0, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0], [3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0], [0, 0, 0, 0], [5, 0, 0, 0], [6, 6, 0, 6]]
output: [[0, 0, 0, 0], [0, 0, 0, 0], [5, 0, 0, 0], [6, 6, 6, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 3], [0, 0, 8, 8, 0, 8], [0, 0, 0, 9, 0, 9], [0, 7, 0, 7, 0, 0], [4, 0, 4, 4, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0], [9, 9, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0]]

Test case:
input: [[2, 0, 0, 2, 2], [4, 0, 0, 0, 0], [1, 0, 0, 1, 1], [9, 0, 9, 9, 0], [5, 0, 5, 0, 0]]

###########################################################
Sample Outputs:
output: [[2, 0, 0, 2, 2], [4, 0, 0, 0, 0], [1, 0, 0, 1, 1], [9, 0, 9, 9, 0], [5, 0, 5, 0, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int nRows, int nCols) {
    for (int i = 0; i < nRows; ++i) {
        bool isFilled = false;
        for (int j = 0; j < nCols; ++j) {
            if (!isFilled && arr[i][j] == 0) {
                continue;
            } else {
                arr[i][j] =!isFilled? arr[i][j] : min(arr[i][j], arr[i - 1][j]);
                isFilled = true;
            }
        }
    }
}

void printArr(int** arr, int nRows, int nCols) {
    cout << "Result:" << endl;
    for (int i = 0; i < nRows; ++i) {
        for (int j = 0; j < nCols; ++j) {
            cout << arr[i][j] <<'';
        }
        cout << endl;
    }
}

int main() {
    // input
    int rows = 6;
    int cols = 6;
    int** arr = new int* [rows];
    for (int i = 0; i < rows; ++i) {
        arr[i] = new int[cols];
        for (int j = 0; j < cols; ++j) {
            cin >> arr[i][j];
        }
    }

    // process & output
    fill(arr, rows, cols);
    printArr(arr, rows, cols);

    return 0;
}


###########################################################
Result:
solution: [[2, 2, 2, 0, 0], [4, 0, 0, 0, 0], [1, 1, 1, 0, 0], [9, 9, 9, 0, 0], [5, 5, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03431372549019608

cat_success_cnt: 0

cat_success_rate: 0.0

