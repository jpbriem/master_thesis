
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 2, 0, 8, 0], [0, 0, 0, 8, 0], [0, 2, 0, 0, 0], [0, 0, 4, 8, 0], [0, 2, 4, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 2, 0, 8, 0], [0, 2, 4, 8, 0], [0, 2, 4, 8, 0]]

Example_2:
input: [[0, 3, 0, 1], [0, 0, 0, 0], [0, 3, 0, 1], [7, 0, 0, 1]]
output: [[0, 0, 0, 0], [0, 0, 0, 1], [0, 3, 0, 1], [7, 3, 0, 1]]

Example_3:
input: [[0, 0, 8, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 4, 8, 0, 1], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 8, 0, 1], [0, 4, 8, 0, 1]]

Test case:
input: [[3, 9, 5, 0], [3, 0, 5, 2], [3, 0, 0, 2], [0, 9, 5, 2]]

###########################################################
Sample Outputs:
output: [[3, 9, 5, 2], [3, 9, 5, 2], [3, 9, 5, 2], [3, 9, 5, 2]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (!arr[i][j]) {
				arr[i][j] = -1;
			}
		}
	}
}

void print(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}

bool check(int** arr, int x, int y, int val, int n) {
	// check row and column
	for (int i = 0; i < n; ++i) {
		if ((arr[x][i] == val && i!= y) || (arr[i][y] == val && i!= x)) {
			return false;
		}
	}

	// check sub-grid
	int sx = x / 3 * 3;
	int sy = y / 3 * 3;
	for (int i = sx; i < sx + 3; ++i) {
		for (int j = sy; j < sy + 3; ++j) {
			if (arr[i][j] == val &&!(i == x && j == y)) {
				return false;
			}
		}
	}

	return true;
}

bool solveSudoku(int** arr, int n) {
	fill(arr, n);

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (arr[i][j] == 0) {
				for (int k = 1; k <= n; ++k) {
					if (check(arr, i, j, k, n)) {
						arr[i][j] = k;
						if (solveSudoku(arr, n)) {
							return true;
						} else {
							arr[i][j] = 0;
						}
					}
				}
				return false;
			}
		}
	}

	return true;
}

int main() {
	int t; cin >> t;
	while (t--) {
		int n; cin >> n;
		int** arr = new int* [n];
		for (int i = 0; i < n; ++i) {
			arr[i] = new int[n];
			for (int j = 0; j < n; ++j) {
				cin >> arr[i][j];
			}
		}

		if (solveSudoku(arr, n)) {
			print(arr, n);
		} else {
			cout << "No solution" << endl;
		}
	}

	return 0;
}


###########################################################
Result:
solution: [[0, 0, 0, 0], [3, 0, 5, 2], [3, 9, 5, 2], [3, 9, 5, 2]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0299625468164794

cat_success_cnt: 0

cat_success_rate: 0.0

