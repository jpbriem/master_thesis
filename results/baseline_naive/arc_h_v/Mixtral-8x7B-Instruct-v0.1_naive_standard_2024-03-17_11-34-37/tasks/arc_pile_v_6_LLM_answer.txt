
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 0], [0, 0, 0, 7], [6, 0, 8, 0], [0, 0, 0, 7]]
output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 7], [6, 0, 8, 7]]

Example_2:
input: [[0, 0, 0, 0, 4], [0, 8, 9, 0, 4], [0, 8, 9, 0, 0], [0, 8, 0, 0, 4], [0, 0, 0, 6, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 8, 0, 0, 4], [0, 8, 9, 0, 4], [0, 8, 9, 6, 4]]

Example_3:
input: [[0, 0, 6, 0], [4, 0, 0, 5], [4, 0, 6, 5], [0, 0, 6, 0]]
output: [[0, 0, 0, 0], [0, 0, 6, 0], [4, 0, 6, 5], [4, 0, 6, 5]]

Test case:
input: [[4, 0, 7, 9, 0], [4, 0, 0, 0, 8], [4, 6, 7, 0, 0], [0, 0, 0, 9, 8], [0, 0, 0, 9, 0]]

###########################################################
Sample Outputs:
output: [[4, 0, 0, 0, 0], [4, 0, 0, 0, 0], [4, 6, 0, 0, 0], [0, 0, 0, 9, 0], [0, 0, 0, 9, 8]]
*/

#include <iostream>
using namespace std;

void moveZeroesToEnd(int arr[][4]) {
    int row = 4, col = 4;
    for (int i = 0; i < row; ++i) {
        if (arr[i][col - 1] == 0) {
            bool flag = false;
            for (int j = 0; j < col; ++j) {
                if (arr[i][j]!= 0) {
                    swap(arr[i][j], arr[i][col - 1]);
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                for (int k = 0; k < row; ++k) {
                    if (arr[k][col - 1]!= 0) {
                        swap(arr[i][col - 1], arr[k][col - 1]);
                        break;
                    }
                }
            }
        }
    }
}

int main() {
    int inputArr[][4] = {{0, 0, 0, 0}, {0, 0, 0, 7}, {6, 0, 8, 0}, {0, 0, 0, 7}};
    moveZeroesToEnd(inputArr);
    cout << "Output array is : \n";
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            cout << inputArr[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}


###########################################################
Result:
solution: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [4, 0, 0, 9, 0], [4, 0, 7, 9, 8], [4, 6, 7, 9, 8]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.026936026936026935

cat_success_cnt: 0

cat_success_rate: 0.0

