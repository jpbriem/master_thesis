{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[0, 4, 0, 0, 4, 4], [0, 0, 0, 1, 0, 0], [0, 0, 0, 5, 5, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 6, 6]]\noutput: [[4, 4, 4, 0, 0, 0], [1, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0]]\n\nExample_2:\ninput: [[0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 3], [0, 0, 6, 6, 0, 6], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 4, 0], [0, 0, 0, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0]]\n\nExample_3:\ninput: [[9, 0, 0, 0, 0], [0, 0, 0, 6, 0], [0, 4, 4, 4, 0], [0, 0, 0, 0, 0], [0, 8, 0, 0, 8]]\noutput: [[9, 0, 0, 0, 0], [6, 0, 0, 0, 0], [4, 4, 4, 0, 0], [0, 0, 0, 0, 0], [8, 8, 0, 0, 0]]\n\nTest case:\ninput: [[4, 0, 0, 0, 0], [9, 0, 9, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 5, 0], [0, 6, 6, 0, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[4, 0, 0, 0, 0], [9, 0, 9, 0, 0], [1, 0, 0, 0, 0], [5, 0, 0, 0, 0], [6, 6, 6, 0, 0]]\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid fill(int** arr, int nRows, int nCols) {\n    for (int i = 0; i < nRows; ++i) {\n        bool isZeroRow = true;\n        for (int j = 0; j < nCols; ++j) {\n            if (arr[i][j]!= 0) {\n                isZeroRow = false;\n                break;\n            }\n        }\n        if (!isZeroRow) continue;\n        for (int k = 0; k < nCols; ++k) {\n            if (arr[nRows - 1][k] == 0) {\n                swap(arr[i][k], arr[nRows - 1][k]);\n                break;\n            }\n        }\n    }\n}\n\nvoid zeroesToEnd(int** arr, int nRows, int nCols) {\n    fill(arr, nRows, nCols);\n    for (int i = 0; i < nRows; ++i) {\n        for (int j = 0; j < nCols; ++j) {\n            if (arr[i][j] == 0) {\n                for (int k = j + 1; k < nCols; ++k) {\n                    if (arr[i][k]!= 0) {\n                        swap(arr[i][j], arr[i][k]);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n\nvoid printArr(int** arr, int nRows, int nCols) {\n    cout << \"Result:\" << endl;\n    for (int i = 0; i < nRows; ++i) {\n        for (int j = 0; j < nCols; ++j) {\n            cout << arr[i][j] <<'';\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    // input\n    int nRows = 6;\n    int nCols = 6;\n    int** arr = new int* [nRows];\n    for (int i = 0; i < nRows; ++i) {\n        arr[i] = new int[nCols];\n        for (int j = 0; j < nCols; ++j) {\n            cin >> arr[i][j];\n        }\n    }\n\n    // process\n    zeroesToEnd(arr, nRows, nCols);\n\n    // output\n    printArr(arr, nRows, nCols);\n\n    return 0;\n}"
        }
    ],
    "idx": 240,
    "task": "arc_pile_h_45",
    "category": "pile_h",
    "ys": [
        "arc_pile_h_45.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[4, 0, 0, 0, 0], [9, 9, 0, 0, 0], [1, 0, 0, 0, 0], [5, 0, 0, 0, 0], [6, 6, 0, 0, 0]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.03319502074688797,
        "cat_success_cnt": 1,
        "cat_success_rate": 0.024390243902439025
    },
    "usage_so_far": {
        "completion_tokens": 457118,
        "prompt_tokens": 508415,
        "cost": null
    }
}