
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 1, 0, 0, 0], [0, 0, 6, 0, 0], [0, 0, 0, 0, 3], [0, 0, 0, 0, 0], [2, 2, 0, 0, 0]]
output: [[1, 0, 0, 0, 0], [6, 0, 0, 0, 0], [3, 0, 0, 0, 0], [0, 0, 0, 0, 0], [2, 2, 0, 0, 0]]

Example_2:
input: [[2, 0, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
output: [[2, 2, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [5, 0, 0, 0, 5], [6, 0, 0, 0, 0], [0, 0, 0, 9, 0], [3, 0, 0, 0, 3]]
output: [[0, 0, 0, 0, 0], [5, 5, 0, 0, 0], [6, 0, 0, 0, 0], [9, 0, 0, 0, 0], [3, 3, 0, 0, 0]]

Test case:
input: [[8, 0, 8, 0, 8], [0, 2, 0, 2, 0], [0, 0, 7, 7, 0], [0, 0, 0, 0, 1], [0, 0, 9, 0, 0]]

###########################################################
Sample Outputs:
output: [[8, 8, 8, 0, 0], [0, 2, 2, 2, 0], [0, 0, 7, 7, 0], [0, 0, 0, 0, 1], [0, 0, 9, 0, 0]]
*/

#include <iostream>
using namespace std;

void moveZeroesToEnd(int arr[][5], int row) {
    for (int i = 0; i < row; ++i) {
        if (arr[i][0] == 0 && arr[i][4]!= 0) {
            swap(arr[i], arr[row - 1]);
            --row;
            i--;
        } else if (arr[i][0] == 0 && arr[i][4] == 0) {
            for (int j = 0; j < 4; ++j) {
                if (arr[i + 1][j]!= 0) {
                    swap(arr[i], arr[i + 1]);
                    break;
                }
            }
        }
    }
}

int main() {
    int testCase = 1;
    while (testCase--) {
        int arr[5][5];
        cout << "Enter the elements of matrix : ";
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                cin >> arr[i][j];
            }
        }
        moveZeroesToEnd(arr, 5);
        cout << "\nOutput Matrix is : \n";
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    }
    return 0;
}


###########################################################
Result:
solution: [[8, 8, 8, 0, 0], [2, 2, 0, 0, 0], [7, 7, 0, 0, 0], [1, 0, 0, 0, 0], [9, 0, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03125

cat_success_cnt: 0

cat_success_rate: 0.0

