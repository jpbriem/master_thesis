{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 5, 2, 0], [0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 7]]\noutput: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 2, 0], [0, 1, 0, 5, 2, 7]]\n\nExample_2:\ninput: [[0, 0, 3, 0], [0, 2, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]]\noutput: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0]]\n\nExample_3:\ninput: [[0, 0, 0, 5], [3, 0, 0, 5], [0, 0, 0, 0], [3, 0, 0, 5]]\noutput: [[0, 0, 0, 0], [0, 0, 0, 5], [3, 0, 0, 5], [3, 0, 0, 5]]\n\nTest case:\ninput: [[0, 0, 0, 7, 0], [9, 1, 5, 0, 0], [9, 1, 0, 7, 4], [0, 1, 5, 0, 0], [9, 0, 0, 7, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[0, 0, 0, 0, 0], [9, 1, 5, 0, 0], [9, 1, 0, 7, 4], [0, 1, 5, 0, 0], [0, 0, 0, 0, 0]]\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid moveZeroes(vector<vector<int>>& grid) {\n    int m = grid.size(), n = grid[0].size();\n    for (int i = 0; i < m; ++i) {\n        bool hasNonZero = false;\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j]!= 0) {\n                swap(grid[i][j], grid[i][hasNonZero]);\n                hasNonZero++;\n            }\n        }\n    }\n}\n\nint main() {\n    vector<vector<int>> input = {{0, 0, 0, 7, 0}, {9, 1, 5, 0, 0}, {9, 1, 0, 7, 4}, {0, 1, 5, 0, 0}, {9, 0, 0, 7, 0}};\n    moveZeroes(input);\n    cout << \"Output:\" << endl;\n    for (auto &row : input) {\n        for (auto &num : row) {\n            cout << num <<'';\n        }\n        cout << endl;\n    }\n    return 0;\n}"
        }
    ],
    "idx": 289,
    "task": "arc_pile_v_44",
    "category": "pile_v",
    "ys": [
        "arc_pile_v_44.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [9, 1, 0, 7, 0], [9, 1, 5, 7, 0], [9, 1, 5, 7, 4]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.027586206896551724,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 514365,
        "prompt_tokens": 536833,
        "cost": null
    }
}