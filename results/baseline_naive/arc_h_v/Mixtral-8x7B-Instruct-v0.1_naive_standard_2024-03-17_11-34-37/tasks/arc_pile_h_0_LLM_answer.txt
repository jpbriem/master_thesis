
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 5], [0, 2, 2, 2], [0, 3, 0, 0], [9, 0, 9, 9]]
output: [[5, 0, 0, 0], [2, 2, 2, 0], [3, 0, 0, 0], [9, 9, 9, 0]]

Example_2:
input: [[3, 3, 0, 3], [0, 5, 5, 0], [1, 1, 0, 0], [0, 2, 2, 2]]
output: [[3, 3, 3, 0], [5, 5, 0, 0], [1, 1, 0, 0], [2, 2, 2, 0]]

Example_3:
input: [[0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 8], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0], [0, 0, 0, 0, 1, 0]]
output: [[5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]

Test case:
input: [[6, 0, 0, 0], [0, 0, 3, 3], [8, 8, 8, 0], [0, 2, 2, 2]]

###########################################################
Sample Outputs:
output: [[6, 0, 0, 0], [0, 3, 3, 0], [8, 8, 8, 0], [0, 2, 2, 0]]
*/

#include <iostream>
using namespace std;

void printArray(int arr[][4]) {
    for (int i = 0; i < 4; ++i) {
        cout << "[";
        for (int j = 0; j < 4; ++j) {
            if (j!= 0) cout << ", ";
            cout << arr[i][j];
        }
        cout << "]" << endl;
    }
}

// Time complexity: O(n^2), Space complexity: O(1)
void fillZeroToLeft(int arr[][4]) {
    int rowCount = 0;
    // Count the number of rows that have non-zero elements.
    for (int i = 0; i < 4; ++i) {
        bool hasNonZeroElement = false;
        for (int j = 0; j < 4; ++j) {
            if (arr[i][j] > 0) {
                hasNonZeroElement = true;
                break;
            }
        }
        if (hasNonZeroElement) ++rowCount;
    }

    // Fill zero to left in each row.
    for (int i = 0; i < 4 - rowCount; ++i) {
        for (int j = 0; j < 4; ++j) {
            arr[i][j] = 0;
        }
    }
}

// Time complexity: O(n^2), Space complexity: O(1)
void fillZeroToTop(int arr[][4]) {
    int colCount = 0;
    // Count the number of columns that have non-zero elements.
    for (int j = 0; j < 4; ++j) {
        bool hasNonZeroElement = false;
        for (int i = 0; i < 4; ++i) {
            if (arr[i][j] > 0) {
                hasNonZeroElement = true;
                break;
            }
        }
        if (hasNonZeroElement) ++colCount;
    }

    // Fill zero to top in each column.
    for (int j = 0; j < 4 - colCount; ++j) {
        for (int i = 0; i < 4; ++i) {
            arr[i][j] = 0;
        }
    }
}

// Time complexity: O(n^2), Space complexity: O(1)
void moveNonZeroElementsToRightBottom(int arr[][4]) {
    // Move non-zero elements to right bottom.
    for (int i = 0; i < 4; ++i) {
        for (int j = 3; j >= 0; --j) {
            if (arr[i][j] == 0 && j!= 3) continue;
            for (int k = 3; k > j; --k) {
                swap(arr[i][k], arr[i][k - 1]);
            }
            break;
        }
    }

    // Merge same numbers.
    for (int i = 0; i < 4; ++i) {
        for (int j = 3; j > 0; --j) {
            if (arr[i][j] == arr[i][j - 1]) {
                arr[i][j] *= 2;
                arr[i][j - 1] = 0;
            }
        }
    }
}

// Time complexity: O(n^2), Space complexity: O(1)
void solution(int arr[][4]) {
    fillZeroToLeft(arr);
    fillZeroToTop(arr);
    moveNonZeroElementsToRightBottom(arr);
}

int main() {
    int testCase[][4] = {{0, 0, 0, 5}, {0, 2, 2, 2}, {0, 3, 0, 0}, {9, 0, 9, 9}};
    printArray(testCase);
    cout << "After moving zeros and merging:" << endl;
    solution(testCase);
    printArray(testCase);

    return 0;
}


###########################################################
Result:
solution: [[6, 0, 0, 0], [3, 3, 0, 0], [8, 8, 8, 0], [2, 2, 2, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03482587064676617

cat_success_cnt: 0

cat_success_rate: 0.0

