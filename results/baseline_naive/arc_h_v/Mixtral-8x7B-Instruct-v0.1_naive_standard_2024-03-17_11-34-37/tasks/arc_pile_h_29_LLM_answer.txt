
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0], [5, 0, 0, 0, 5, 5], [0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]
output: [[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0], [5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0], [5, 0, 0, 5, 0, 0], [9, 0, 0, 0, 9, 0], [0, 8, 8, 8, 0, 0], [0, 7, 0, 0, 0, 7], [0, 4, 0, 4, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0], [9, 9, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0], [7, 7, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0], [9, 9, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 5, 0, 5], [0, 0, 2, 2, 2], [0, 7, 7, 0, 0], [0, 3, 3, 0, 0], [4, 0, 0, 0, 4]]

###########################################################
Sample Outputs:
output: [[0, 0, 5, 0, 5], [0, 0, 2, 2, 2], [0, 7, 7, 0, 0], [0, 3, 3, 0, 0], [4, 0, 0, 0, 4]]
*/

#include <iostream>
using namespace std;

void printArray(int arr[][6]) {
    for (int i = 0; i < 6; ++i) {
        cout << "[";
        for (int j = 0; j < 6; ++j) {
            if (j!= 0) cout << ", ";
            cout << arr[i][j];
        }
        cout << "]" << endl;
    }
}

void mergeBlocks(int arr[][6], int startRow, int endRow, int col) {
    // Merge blocks in the same column from startRow to endRow.
    int blockVal = arr[startRow][col];
    for (int row = startRow + 1; row <= endRow; ++row) {
        if (arr[row][col] == blockVal) continue;
        else break;
        arr[row][col] = blockVal;
    }
}

void solve(int arr[][6]) {
    bool hasChanged = false;
    for (int col = 0; col < 6; ++col) {
        // Find the first non-zero element and its row index.
        int zeroCount = 0;
        for (int row = 0; row < 6; ++row) {
            if (arr[row][col] == 0) {
                ++zeroCount;
                continue;
            }
            if (zeroCount > 0) {
                --zeroCount;
                swap(arr[row - zeroCount][col], arr[row][col]);
            }
            break;
        }
        // If there is no non-zero elements, skip this column.
        if (zeroCount == 6) continue;

        // Check whether all elements are equal or not.
        int val = arr[0][col];
        for (int row = 1; row < 6; ++row) {
            if (arr[row][col]!= val) {
                hasChanged = true;
                break;
            }
        }
        // If they are equal, then we don't need to do anything.
        if (!hasChanged) continue;

        // Merge blocks in the same column.
        int startRow = 0, endRow = 0;
        while (endRow < 6 && arr[endRow][col] == val) ++endRow;
        --endRow;
        while (startRow < endRow && arr[startRow][col] == val) ++startRow;
        mergeBlocks(arr, startRow, endRow, col);
    }
}

int main() {
    int inputArr[][6] = {{0, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 0}, {0, 6, 6, 6, 0, 0}, {5, 0, 0, 0, 5, 5}, {0, 0, 0, 0, 0, 0}, {3, 0, 0, 0, 0, 0}};
    printArray(inputArr);
    solve(inputArr);
    cout << "\nAfter solving:" << endl;
    printArray(inputArr);

    return 0;
}


###########################################################
Result:
solution: [[5, 5, 0, 0, 0], [2, 2, 2, 0, 0], [7, 7, 0, 0, 0], [3, 3, 0, 0, 0], [4, 4, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03139013452914798

cat_success_cnt: 0

cat_success_rate: 0.0

