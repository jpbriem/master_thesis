
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[7, 0, 0, 7], [0, 0, 0, 0], [0, 0, 0, 0], [0, 9, 9, 9]]
output: [[7, 7, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [9, 9, 9, 0]]

Example_2:
input: [[0, 5, 5, 5, 0], [2, 0, 0, 2, 2], [0, 0, 0, 0, 6], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
output: [[5, 5, 5, 0, 0], [2, 2, 2, 0, 0], [6, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

Example_3:
input: [[9, 9, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [7, 0, 7, 7]]
output: [[9, 9, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [7, 7, 7, 0]]

Test case:
input: [[0, 1, 0, 0], [0, 0, 0, 9], [0, 0, 7, 7], [0, 0, 6, 0]]

###########################################################
Sample Outputs:
output: [[0, 1, 0, 0], [0, 9, 7, 0], [0, 0, 7, 0], [0, 0, 6, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (arr[i][j] == -1 && i!= 0 && arr[i-1][j]!= -1) {
				arr[i][j] = arr[i-1][j];
			}
		}
	}
}

void printArr(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}

void solve(int** arr, int n) {
	// top row
	for (int j = 0; j < n; ++j) {
		if (arr[0][j] > 0) {
			arr[0][j]--;
		} else if (arr[0][j] == 0) {
			arr[0][j] = -1;
		}
	}

	fill(arr, n);

	// bottom row
	for (int j = 0; j < n; ++j) {
		if (arr[n-1][j] > 0) {
			arr[n-1][j]--;
		} else if (arr[n-1][j] == 0) {
			arr[n-1][j] = -1;
		}
	}

	fill(arr, n);

	// left column
	for (int i = 0; i < n; ++i) {
		if (arr[i][0] > 0) {
			arr[i][0]--;
		} else if (arr[i][0] == 0) {
			arr[i][0] = -1;
		}
	}

	fill(arr, n);

	// right column
	for (int i = 0; i < n; ++i) {
		if (arr[i][n-1] > 0) {
			arr[i][n-1]--;
		} else if (arr[i][n-1] == 0) {
			arr[i][n-1] = -1;
		}
	}

	fill(arr, n);
}

int main() {
	int t; cin >> t;
	while (t--) {
		int n; cin >> n;
		int** arr = new int*[n];
		for (int i = 0; i < n; ++i) {
			arr[i] = new int[n];
			for (int j = 0; j < n; ++j) {
				cin >> arr[i][j];
			}
		}

		solve(arr, n);
		printArr(arr, n);
	}

	return 0;
}


###########################################################
Result:
solution: [[1, 0, 0, 0], [9, 0, 0, 0], [7, 7, 0, 0], [6, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.0326530612244898

cat_success_cnt: 1

cat_success_rate: 0.022222222222222223

