
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 6, 0, 0], [0, 0, 0, 0], [0, 8, 0, 0], [7, 0, 7, 0]]
output: [[6, 0, 0, 0], [0, 0, 0, 0], [8, 0, 0, 0], [7, 7, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0], [0, 8, 8, 8, 0], [0, 0, 9, 9, 0], [6, 0, 0, 0, 0], [0, 4, 0, 4, 4]]
output: [[0, 0, 0, 0, 0], [8, 8, 8, 0, 0], [9, 9, 0, 0, 0], [6, 0, 0, 0, 0], [4, 4, 4, 0, 0]]

Example_3:
input: [[0, 4, 4, 0], [0, 0, 0, 0], [6, 6, 0, 6], [0, 5, 5, 0]]
output: [[4, 4, 0, 0], [0, 0, 0, 0], [6, 6, 6, 0], [5, 5, 0, 0]]

Test case:
input: [[0, 0, 4, 4, 4], [0, 0, 6, 0, 0], [0, 0, 7, 0, 7], [9, 9, 0, 0, 9], [0, 8, 0, 8, 0]]

###########################################################
Sample Outputs:
output: [[0, 0, 4, 4, 4], [0, 0, 6, 0, 0], [0, 0, 7, 0, 7], [9, 9, 9, 0, 9], [8, 8, 8, 8, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (arr[i][j] == 0 && i!= 0 && j!= 0 && arr[i - 1][j]!= 0 && arr[i][j - 1]!= 0) {
				arr[i][j] = min(min(arr[i - 1][j], arr[i][j - 1]), arr[i - 1][j - 1]);
			}
		}
	}
}

void printArr(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}

int main() {
	int n;
	cin >> n;
	int** arr = new int* [n];
	for (int i = 0; i < n; ++i) {
		arr[i] = new int[n];
		for (int j = 0; j < n; ++j) {
			cin >> arr[i][j];
		}
	}
	fill(arr, n);
	printArr(arr, n);
	return 0;
}


###########################################################
Result:
solution: [[4, 4, 4, 0, 0], [6, 0, 0, 0, 0], [7, 7, 0, 0, 0], [9, 9, 9, 0, 0], [8, 8, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.032388663967611336

cat_success_cnt: 1

cat_success_rate: 0.02127659574468085

