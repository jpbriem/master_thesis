{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\nExample_2:\ninput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 2, 0, 0, 0, 0, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 1], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0], [2, 1, 1, 1, 1, 0, 0, 0, 0, 0], [2, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0]]\n\nExample_3:\ninput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 1, 1, 1, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\nTest case:\ninput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 1, 1, 1, 1, 1, 1, 0, 0, 0], [2, 2, 2, 2, 2, 1, 1, 0, 0, 0], [2, 2, 2, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0]]\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid floodFill(int** arr, int n, int m, int i, int j) {\n    if (arr[i][j] == 0 || arr[i][j] == -1) return;\n\n    // base condition\n    if (i == 0 && j == 0) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i + 1, j);\n        floodFill(arr, n, m, i, j + 1);\n    } else if (i == 0 && j!= 0 && j!= m - 1) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i, j + 1);\n        floodFill(arr, n, m, i + 1, j);\n        floodFill(arr, n, m, i + 1, j - 1);\n    } else if (i == 0 && j == m - 1) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i + 1, j);\n        floodFill(arr, n, m, i + 1, j - 1);\n    } else if (i!= 0 && i!= n - 1 && j == 0) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i + 1, j);\n        floodFill(arr, n, m, i - 1, j);\n        floodFill(arr, n, m, i, j + 1);\n    } else if (i!= 0 && i!= n - 1 && j == m - 1) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i + 1, j);\n        floodFill(arr, n, m, i - 1, j);\n        floodFill(arr, n, m, i, j - 1);\n    } else if (i == n - 1 && j == 0) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i - 1, j);\n        floodFill(arr, n, m, i, j + 1);\n    } else if (i == n - 1 && j!= 0 && j!= m - 1) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i - 1, j);\n        floodFill(arr, n, m, i, j + 1);\n        floodFill(arr, n, m, i - 1, j - 1);\n    } else if (i == n - 1 && j == m - 1) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i - 1, j);\n        floodFill(arr, n, m, i - 1, j - 1);\n    } else if (i!= 0 && i!= n - 1 && j!= 0 && j!= m - 1) {\n        arr[i][j] = -1;\n        cout << \"1 \";\n        floodFill(arr, n, m, i + 1, j);\n        floodFill(arr, n, m, i - 1, j);\n        floodFill(arr, n, m, i, j + 1);\n        floodFill(arr, n, m, i, j - 1);\n    }\n}\n\nint main() {\n    int t; cin >> t; while (t--) {\n        int n, m; cin >> n >> m;\n        int** arr = new int* [n]; for (int i = 0; i < n; i++) arr[i] = new int[m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                cin >> arr[i][j];\n            }\n        }\n\n        floodFill(arr, n, m, 0, 0);\n        cout << endl;\n    }\n    return 0;\n}"
        }
    ],
    "idx": 100,
    "task": "arc_3906de3d_h_0",
    "category": "move_h",
    "ys": [
        "arc_3906de3d_h_0.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 1, 0, 0, 0], [2, 1, 1, 1, 1, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 1, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.06930693069306931,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 241266,
        "prompt_tokens": 272266,
        "cost": null
    }
}