
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 8, 0, 0], [0, 4, 4, 4, 0, 0], [0, 0, 0, 1, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 7, 0, 0, 7, 0]]
output: [[8, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0], [1, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0], [9, 9, 9, 0], [0, 0, 0, 0], [4, 4, 0, 4]]
output: [[0, 0, 0, 0], [9, 9, 9, 0], [0, 0, 0, 0], [4, 4, 4, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [0, 6, 0, 0, 6], [8, 0, 8, 8, 0], [0, 7, 0, 0, 7], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [6, 6, 0, 0, 0], [8, 8, 8, 0, 0], [7, 7, 0, 0, 0], [0, 0, 0, 0, 0]]

Test case:
input: [[0, 7, 0, 0, 7, 7], [0, 3, 0, 3, 3, 0], [0, 2, 2, 0, 0, 2], [0, 0, 0, 9, 9, 0], [0, 0, 0, 8, 0, 0], [4, 0, 0, 4, 0, 0]]

###########################################################
Sample Outputs:
output: [[7, 7, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0], [9, 9, 9, 0, 0, 0], [8, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int n, int m) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (arr[i][j] == 0) {
				arr[i][j] = -1;
			}
		}
	}
}

void floodFill(int** arr, int n, int m, int x, int y) {
	if (x < 0 || x >= n || y < 0 || y >= m || arr[x][y]!= 0) return;

	arr[x][y] = -1;
	floodFill(arr, n, m, x + 1, y);
	floodFill(arr, n, m, x - 1, y);
	floodFill(arr, n, m, x, y + 1);
	floodFill(arr, n, m, x, y - 1);
}

void printArr(int** arr, int n, int m) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}

void solve(int** arr, int n, int m) {
	fill(arr, n, m);

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (arr[i][j] == 0 && arr[i][j - 1] == -1) {
				floodFill(arr, n, m, i, j);
			}
		}
	}

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (arr[i][j] == -1) {
				arr[i][j] = 0;
			}
		}
	}
}

int main() {
	int t; cin >> t;
	while (t--) {
		int n, m; cin >> n >> m;
		int** arr = new int* [n];
		for (int i = 0; i < n; ++i) {
			arr[i] = new int[m];
			for (int j = 0; j < m; ++j) {
				cin >> arr[i][j];
			}
		}

		solve(arr, n, m);
		printArr(arr, n, m);
	}

	return 0;
}


###########################################################
Result:
solution: [[7, 7, 7, 0, 0, 0], [3, 3, 3, 0, 0, 0], [2, 2, 2, 0, 0, 0], [9, 9, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.034482758620689655

cat_success_cnt: 0

cat_success_rate: 0.0

