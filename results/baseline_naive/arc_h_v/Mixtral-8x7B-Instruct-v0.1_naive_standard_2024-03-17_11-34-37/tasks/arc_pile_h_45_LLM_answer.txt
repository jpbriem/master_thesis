
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 4, 0, 0, 4, 4], [0, 0, 0, 1, 0, 0], [0, 0, 0, 5, 5, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 6, 6]]
output: [[4, 4, 4, 0, 0, 0], [1, 0, 0, 0, 0, 0], [5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 3], [0, 0, 6, 6, 0, 6], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 4, 0], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0]]

Example_3:
input: [[9, 0, 0, 0, 0], [0, 0, 0, 6, 0], [0, 4, 4, 4, 0], [0, 0, 0, 0, 0], [0, 8, 0, 0, 8]]
output: [[9, 0, 0, 0, 0], [6, 0, 0, 0, 0], [4, 4, 4, 0, 0], [0, 0, 0, 0, 0], [8, 8, 0, 0, 0]]

Test case:
input: [[4, 0, 0, 0, 0], [9, 0, 9, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 5, 0], [0, 6, 6, 0, 0]]

###########################################################
Sample Outputs:
output: [[4, 0, 0, 0, 0], [9, 0, 9, 0, 0], [1, 0, 0, 0, 0], [5, 0, 0, 0, 0], [6, 6, 6, 0, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int nRows, int nCols) {
    for (int i = 0; i < nRows; ++i) {
        bool isZeroRow = true;
        for (int j = 0; j < nCols; ++j) {
            if (arr[i][j]!= 0) {
                isZeroRow = false;
                break;
            }
        }
        if (!isZeroRow) continue;
        for (int k = 0; k < nCols; ++k) {
            if (arr[nRows - 1][k] == 0) {
                swap(arr[i][k], arr[nRows - 1][k]);
                break;
            }
        }
    }
}

void zeroesToEnd(int** arr, int nRows, int nCols) {
    fill(arr, nRows, nCols);
    for (int i = 0; i < nRows; ++i) {
        for (int j = 0; j < nCols; ++j) {
            if (arr[i][j] == 0) {
                for (int k = j + 1; k < nCols; ++k) {
                    if (arr[i][k]!= 0) {
                        swap(arr[i][j], arr[i][k]);
                        break;
                    }
                }
            }
        }
    }
}

void printArr(int** arr, int nRows, int nCols) {
    cout << "Result:" << endl;
    for (int i = 0; i < nRows; ++i) {
        for (int j = 0; j < nCols; ++j) {
            cout << arr[i][j] <<'';
        }
        cout << endl;
    }
}

int main() {
    // input
    int nRows = 6;
    int nCols = 6;
    int** arr = new int* [nRows];
    for (int i = 0; i < nRows; ++i) {
        arr[i] = new int[nCols];
        for (int j = 0; j < nCols; ++j) {
            cin >> arr[i][j];
        }
    }

    // process
    zeroesToEnd(arr, nRows, nCols);

    // output
    printArr(arr, nRows, nCols);

    return 0;
}


###########################################################
Result:
solution: [[4, 0, 0, 0, 0], [9, 9, 0, 0, 0], [1, 0, 0, 0, 0], [5, 0, 0, 0, 0], [6, 6, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03319502074688797

cat_success_cnt: 1

cat_success_rate: 0.024390243902439025

