
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[5, 2, 0, 9], [0, 2, 0, 9], [0, 2, 3, 0], [0, 0, 0, 9]]
output: [[0, 0, 0, 0], [0, 2, 0, 9], [0, 2, 0, 9], [5, 2, 3, 9]]

Example_2:
input: [[3, 0, 0, 2], [0, 5, 0, 2], [3, 5, 1, 2], [3, 0, 1, 0]]
output: [[0, 0, 0, 0], [3, 0, 0, 2], [3, 5, 1, 2], [3, 5, 1, 2]]

Example_3:
input: [[5, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0], [5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [5, 0, 8, 0, 4, 0], [5, 0, 8, 0, 4, 1]]

Test case:
input: [[0, 3, 0, 2], [0, 3, 8, 2], [0, 0, 8, 2], [6, 0, 8, 0]]

###########################################################
Sample Outputs:
output: [[0, 0, 0, 0], [0, 3, 0, 2], [0, 3, 8, 2], [6, 0, 8, 0]]
*/

#include <iostream>
using namespace std;

void moveZeroesToEnd(int arr[][4], int n) {
    for (int i = 0; i < n; ++i) {
        bool flag = false;
        for (int j = 0; j < n; ++j) {
            if (arr[i][j]!= 0 &&!flag) {
                swap(arr[i][j], arr[i][0]);
                flag = true;
            } else if (arr[i][j] == 0 && flag) {
                swap(arr[i][j], arr[i][n - 1]);
            }
        }
    }
}

int main() {
    int testCases;
    cin >> testCases;
    while (testCases--) {
        int n;
        cin >> n;
        int arr[4][4];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> arr[i][j];
            }
        }
        moveZeroesToEnd(arr, n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    }
    return 0;
}


###########################################################
Result:
solution: [[0, 0, 0, 0], [0, 0, 8, 2], [0, 3, 8, 2], [6, 3, 8, 2]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03187250996015936

cat_success_cnt: 0

cat_success_rate: 0.0

