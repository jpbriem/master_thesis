
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Example_2:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 0, 0, 0, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 2, 0, 0, 0, 0, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 1], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0], [2, 1, 1, 1, 1, 0, 0, 0, 0, 0], [2, 1, 1, 1, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 1, 1, 1, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 1, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 0, 0, 0, 0, 0, 1, 1, 1, 1], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 1, 1, 1], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0]]

###########################################################
Sample Outputs:
output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 1, 1, 1, 1, 1, 1, 0, 0, 0], [2, 2, 2, 2, 2, 1, 1, 0, 0, 0], [2, 2, 2, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0]]
*/

#include <iostream>
using namespace std;

void floodFill(int** arr, int n, int m, int i, int j) {
    if (arr[i][j] == 0 || arr[i][j] == -1) return;

    // base condition
    if (i == 0 && j == 0) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i + 1, j);
        floodFill(arr, n, m, i, j + 1);
    } else if (i == 0 && j!= 0 && j!= m - 1) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i, j + 1);
        floodFill(arr, n, m, i + 1, j);
        floodFill(arr, n, m, i + 1, j - 1);
    } else if (i == 0 && j == m - 1) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i + 1, j);
        floodFill(arr, n, m, i + 1, j - 1);
    } else if (i!= 0 && i!= n - 1 && j == 0) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i + 1, j);
        floodFill(arr, n, m, i - 1, j);
        floodFill(arr, n, m, i, j + 1);
    } else if (i!= 0 && i!= n - 1 && j == m - 1) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i + 1, j);
        floodFill(arr, n, m, i - 1, j);
        floodFill(arr, n, m, i, j - 1);
    } else if (i == n - 1 && j == 0) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i - 1, j);
        floodFill(arr, n, m, i, j + 1);
    } else if (i == n - 1 && j!= 0 && j!= m - 1) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i - 1, j);
        floodFill(arr, n, m, i, j + 1);
        floodFill(arr, n, m, i - 1, j - 1);
    } else if (i == n - 1 && j == m - 1) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i - 1, j);
        floodFill(arr, n, m, i - 1, j - 1);
    } else if (i!= 0 && i!= n - 1 && j!= 0 && j!= m - 1) {
        arr[i][j] = -1;
        cout << "1 ";
        floodFill(arr, n, m, i + 1, j);
        floodFill(arr, n, m, i - 1, j);
        floodFill(arr, n, m, i, j + 1);
        floodFill(arr, n, m, i, j - 1);
    }
}

int main() {
    int t; cin >> t; while (t--) {
        int n, m; cin >> n >> m;
        int** arr = new int* [n]; for (int i = 0; i < n; i++) arr[i] = new int[m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> arr[i][j];
            }
        }

        floodFill(arr, n, m, 0, 0);
        cout << endl;
    }
    return 0;
}


###########################################################
Result:
solution: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 1, 0, 0, 0], [2, 1, 1, 1, 1, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 1, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 0, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.06930693069306931

cat_success_cnt: 0

cat_success_rate: 0.0

