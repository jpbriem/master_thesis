
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 3, 0, 3, 3], [0, 0, 0, 0, 0], [0, 0, 0, 4, 4], [6, 0, 0, 0, 0], [0, 2, 0, 2, 0]]
output: [[3, 3, 3, 0, 0], [0, 0, 0, 0, 0], [4, 4, 0, 0, 0], [6, 0, 0, 0, 0], [2, 2, 0, 0, 0]]

Example_2:
input: [[0, 1, 1, 1], [9, 0, 0, 9], [0, 4, 0, 0], [0, 2, 0, 0]]
output: [[1, 1, 1, 0], [9, 9, 0, 0], [4, 0, 0, 0], [2, 0, 0, 0]]

Example_3:
input: [[3, 0, 3, 3], [6, 6, 0, 0], [8, 8, 0, 8], [0, 0, 4, 0]]
output: [[3, 3, 3, 0], [6, 6, 0, 0], [8, 8, 8, 0], [4, 0, 0, 0]]

Test case:
input: [[0, 0, 0, 7, 7], [0, 0, 9, 0, 9], [0, 1, 0, 0, 0], [0, 5, 5, 0, 0], [0, 0, 8, 0, 8]]

###########################################################
Sample Outputs:
output: [[0, 0, 0, 7, 7], [0, 0, 9, 0, 9], [1, 5, 5, 0, 0], [5, 5, 8, 0, 0], [8, 0, 0, 0, 0]]
*/

#include <iostream>
using namespace std;

void printArray(int arr[][5]) {
    for (int i = 0; i < 5; ++i) {
        cout << "[";
        for (int j = 0; j < 5; ++j) {
            if (j!= 0) cout << ", ";
            cout << arr[i][j];
        }
        cout << "]" << endl;
    }
}

void moveZeroToEnd(int arr[][5]) {
    int rowLen = 5;
    int colLen = 5;
    // iterate through each element in the array
    for (int i = 0; i < rowLen; ++i) {
        for (int j = 0; j < colLen; ++j) {
            // check if current element is zero and there are non-zero elements after it
            if (arr[i][j] == 0 && hasNonZeroAfter(arr, i, j)) {
                swapWithNextNonZero(arr, i, j);
            }
        }
    }
}

bool hasNonZeroAfter(int arr[][5], int row, int col) {
    int rowLen = 5;
    int colLen = 5;
    // iterate through all columns to right of current column
    for (int c = col + 1; c < colLen; ++c) {
        // if any non-zero found return true
        if (arr[row][c]!= 0) return true;
    }
    // no non-zero found so return false
    return false;
}

void swapWithNextNonZero(int arr[][5], int row, int col) {
    int rowLen = 5;
    int colLen = 5;
    // find next non-zero element
    while (++col < colLen && arr[row][col] == 0);
    // swap with current element
    swap(arr[row][--col], arr[row][col]);
}

int main() {
    int testCase1[][5] = {{0, 3, 0, 3, 3}, {0, 0, 0, 0, 0}, {0, 0, 0, 4, 4}, {6, 0, 0, 0, 0}, {0, 2, 0, 2, 0}};
    int testCase2[][5] = {{0, 1, 1, 1}, {9, 0, 0, 9}, {0, 4, 0, 0}, {0, 2, 0, 0}};
    int testCase3[][5] = {{3, 0, 3, 3}, {6, 6, 0, 0}, {8, 8, 0, 8}, {0, 0, 4, 0}};
    int testCase4[][5] = {{0, 0, 0, 7, 7}, {0, 0, 9, 0, 9}, {0, 1, 0, 0, 0}, {0, 5, 5, 0, 0}, {0, 0, 8, 0, 8}};

    cout << "Test Case 1:" << endl;
    printArray(testCase1);
    moveZeroToEnd(testCase1);
    cout << "Result:" << endl;
    printArray(testCase1);

    cout << "\nTest Case 2:" << endl;
    printArray(testCase2);
    moveZeroToEnd(testCase2);
    cout << "Result:" << endl;
    printArray(testCase2);

    cout << "\nTest Case 3:" << endl;
    printArray(testCase3);
    moveZeroToEnd(testCase3);
    cout << "Result:" << endl;
    printArray(testCase3);

    cout << "\nTest Case 4:" << endl;
    printArray(testCase4);
    moveZeroToEnd(testCase4);
    cout << "Result:" << endl;
    printArray(testCase4);

    return 0;
}


###########################################################
Result:
solution: [[7, 7, 0, 0, 0], [9, 9, 0, 0, 0], [1, 0, 0, 0, 0], [5, 5, 0, 0, 0], [8, 8, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03278688524590164

cat_success_cnt: 1

cat_success_rate: 0.022727272727272728

