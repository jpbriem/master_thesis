
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[1, 0, 0, 7, 0, 9], [0, 0, 4, 7, 5, 9], [0, 0, 4, 0, 0, 9], [1, 6, 0, 0, 0, 0], [0, 0, 4, 7, 5, 0], [0, 0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 4, 7, 0, 9], [1, 0, 4, 7, 5, 9], [1, 6, 4, 7, 5, 9]]

Example_2:
input: [[0, 0, 0, 5, 0, 0], [0, 0, 0, 5, 6, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 7], [0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 6, 0]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 6, 0], [0, 0, 0, 5, 6, 0], [0, 0, 0, 5, 6, 7]]

Example_3:
input: [[6, 0, 5, 7, 4], [0, 0, 0, 0, 0], [0, 0, 0, 7, 4], [6, 0, 5, 0, 0], [0, 9, 5, 7, 4]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 7, 4], [6, 0, 5, 7, 4], [6, 9, 5, 7, 4]]

Test case:
input: [[9, 8, 1, 0], [9, 8, 0, 7], [0, 0, 1, 0], [0, 8, 1, 7]]

###########################################################
Sample Outputs:
output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 8, 1, 7]]
*/

#include <iostream>
using namespace std;

void printArray(int arr[][6]) {
    for (int i = 0; i < 6; ++i) {
        cout << "[";
        for (int j = 0; j < 6; ++j) {
            if (j!= 0) cout << ", ";
            cout << arr[i][j];
        }
        cout << "]" << endl;
    }
}

void fillZeroToLeft(int arr[][6], int row, int col) {
    while (col >= 0 && arr[row][col] == 0) --col;
    for (int c = 0; c <= col; ++c) arr[row][c] = 0;
}

void moveRowUp(int arr[][6], int rowFrom, int rowTo) {
    for (int c = 0; c < 6; ++c) arr[rowTo][c] = arr[rowFrom][c];
}

bool isAllZeroBelow(int arr[][6], int row) {
    for (int r = row + 1; r < 6; ++r) {
        for (int c = 0; c < 6; ++c) {
            if (arr[r][c]!= 0) return false;
        }
    }
    return true;
}

void removeZeros(int arr[][6]) {
    bool hasChanged;
    do {
        hasChanged = false;
        // Fill zero to left.
        for (int r = 0; r < 6; ++r) {
            fillZeroToLeft(arr, r, 5);
            if (isAllZeroBelow(arr, r)) {
                moveRowUp(arr, r, r - 1);
                hasChanged = true;
            }
        }
    } while (hasChanged);
}

int main() {
    int testCase[][6] = {{1, 0, 0, 7, 0, 9}, {0, 0, 4, 7, 5, 9}, {0, 0, 4, 0, 0, 9}, {1, 6, 0, 0, 0, 0}, {0, 0, 4, 7, 5, 0}, {0, 0, 0, 0, 0, 0}};
    printArray(testCase);
    removeZeros(testCase);
    printArray(testCase);

    cout << endl;

    int testCase2[][6] = {{0, 0, 0, 5, 0, 0}, {0, 0, 0, 5, 6, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 6, 7}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 5, 6, 0}};
    printArray(testCase2);
    removeZeros(testCase2);
    printArray(testCase2);

    cout << endl;

    int testCase3[][6] = {{6, 0, 5, 7, 4}, {0, 0, 0, 0, 0}, {0, 0, 0, 7, 4}, {6, 0, 5, 0, 0}, {0, 9, 5, 7, 4}};
    printArray(testCase3);
    removeZeros(testCase3);
    printArray(testCase3);

    cout << endl;

    int testCase4[][6] = {{9, 8, 1, 0}, {9, 8, 0, 7}, {0, 0, 1, 0}, {0, 8, 1, 7}};
    printArray(testCase4);
    removeZeros(testCase4);
    printArray(testCase4);

    return 0;
}


###########################################################
Result:
solution: [[0, 0, 0, 0], [0, 8, 1, 0], [9, 8, 1, 7], [9, 8, 1, 7]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.026845637583892617

cat_success_cnt: 0

cat_success_rate: 0.0

