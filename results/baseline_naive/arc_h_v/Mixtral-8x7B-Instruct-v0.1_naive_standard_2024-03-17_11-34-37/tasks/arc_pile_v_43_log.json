{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[0, 0, 0, 0], [0, 3, 2, 1], [0, 3, 0, 1], [8, 3, 0, 0]]\noutput: [[0, 0, 0, 0], [0, 3, 0, 0], [0, 3, 0, 1], [8, 3, 2, 1]]\n\nExample_2:\ninput: [[0, 7, 0, 0], [0, 7, 0, 0], [0, 0, 0, 0], [2, 7, 0, 0]]\noutput: [[0, 0, 0, 0], [0, 7, 0, 0], [0, 7, 0, 0], [2, 7, 0, 0]]\n\nExample_3:\ninput: [[4, 0, 0, 0], [4, 0, 5, 0], [4, 0, 5, 0], [0, 1, 0, 0]]\noutput: [[0, 0, 0, 0], [4, 0, 0, 0], [4, 0, 5, 0], [4, 1, 5, 0]]\n\nTest case:\ninput: [[0, 6, 0, 0], [0, 6, 5, 0], [0, 6, 0, 3], [9, 0, 0, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[0, 0, 0, 0], [0, 6, 0, 0], [0, 6, 0, 3], [9, 6, 5, 0]]\n*/\n\npublic class Solution {\n    public int[][] MoveZeroes(int[][] grid) {\n        if (grid == null || grid.Length == 0) return new int[0][];\n\n        var row = grid.Length;\n        var col = grid[0].Length;\n\n        for (var i = 0; i < row; ++i) {\n            for (var j = 0; j < col - 1; ++j) {\n                if (grid[i][j]!= 0 && grid[i][j + 1] == 0) {\n                    Swap(ref grid[i][j], ref grid[i][j + 1]);\n                }\n            }\n        }\n\n        return grid;\n    }\n\n    private void Swap<T>(ref T a, ref T b) {\n        var temp = a;\n        a = b;\n        b = temp;\n    }\n}"
        }
    ],
    "idx": 288,
    "task": "arc_pile_v_43",
    "category": "pile_v",
    "ys": [
        "arc_pile_v_43.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[0, 0, 0, 0], [0, 6, 0, 0], [0, 6, 0, 0], [9, 6, 5, 3]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.02768166089965398,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 513981,
        "prompt_tokens": 536306,
        "cost": null
    }
}