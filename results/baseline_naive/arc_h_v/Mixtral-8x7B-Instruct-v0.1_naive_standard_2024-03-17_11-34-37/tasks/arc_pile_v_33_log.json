{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[0, 0, 5, 0, 0, 0], [0, 0, 0, 1, 0, 0], [6, 0, 5, 0, 0, 3], [0, 2, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3]]\noutput: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 5, 1, 0, 3], [6, 2, 5, 1, 0, 3]]\n\nExample_2:\ninput: [[0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 0, 9], [0, 0, 2, 0, 0, 9], [3, 0, 2, 7, 0, 0], [3, 0, 2, 0, 0, 0], [3, 5, 0, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [3, 0, 2, 0, 0, 9], [3, 0, 2, 0, 0, 9], [3, 5, 2, 7, 0, 9]]\n\nExample_3:\ninput: [[0, 0, 0, 0], [0, 0, 0, 9], [0, 0, 0, 9], [0, 0, 0, 0]]\noutput: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 9], [0, 0, 0, 9]]\n\nTest case:\ninput: [[3, 0, 5, 8], [0, 6, 5, 8], [3, 6, 0, 8], [0, 6, 0, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[3, 0, 5, 8], [0, 6, 5, 8], [3, 6, 0, 8], [0, 0, 0, 0]]\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid moveZeroesToEnd(int arr[][6]) {\n    int row = 4, col = 5;\n    for (int i = 0; i <= row; ++i) {\n        for (int j = 0; j < col; ++j) {\n            if (arr[i][j] == 0 && i!= row) {\n                swap(arr[i][j], arr[row][j]);\n                --row;\n            }\n        }\n    }\n}\n\nint main() {\n    int testCase[][6] = {{0, 0, 5, 0, 0, 0}, {0, 0, 0, 1, 0, 0}, {6, 0, 5, 0, 0, 3}, {0, 2, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 3}};\n    moveZeroesToEnd(testCase);\n    cout << \"After moving zeroes to end:\" << endl;\n    for (int i = 0; i < 6; ++i) {\n        for (int j = 0; j < 6; ++j) {\n            cout << testCase[i][j] <<'';\n        }\n        cout << '\\n';\n    }\n    return 0;\n}"
        }
    ],
    "idx": 277,
    "task": "arc_pile_v_33",
    "category": "pile_v",
    "ys": [
        "arc_pile_v_33.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[0, 0, 0, 0], [0, 6, 0, 8], [3, 6, 5, 8], [3, 6, 5, 8]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.02877697841726619,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 494459,
        "prompt_tokens": 529612,
        "cost": null
    }
}