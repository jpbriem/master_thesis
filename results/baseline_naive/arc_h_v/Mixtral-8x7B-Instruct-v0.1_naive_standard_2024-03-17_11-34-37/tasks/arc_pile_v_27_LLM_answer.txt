
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[4, 0, 2, 0, 0], [0, 0, 0, 0, 0], [0, 1, 2, 0, 0], [0, 0, 0, 0, 7], [0, 0, 0, 6, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [4, 1, 2, 6, 7]]

Example_2:
input: [[0, 0, 0, 0, 4], [5, 0, 0, 2, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 4], [5, 0, 0, 2, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 4], [5, 0, 0, 2, 4], [5, 0, 0, 2, 4]]

Example_3:
input: [[2, 9, 6, 0, 0, 0], [0, 0, 6, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 9, 6, 0, 0, 0], [2, 0, 0, 0, 0, 4], [0, 9, 0, 0, 3, 4]]
output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 9, 6, 0, 0, 0], [2, 9, 6, 0, 3, 4], [2, 9, 6, 0, 3, 4]]

Test case:
input: [[3, 0, 0, 0, 9], [3, 0, 4, 0, 9], [3, 0, 0, 2, 9], [0, 0, 0, 2, 0], [0, 5, 0, 0, 0]]

###########################################################
Sample Outputs:
output: [[0, 0, 0, 0, 9], [0, 0, 4, 0, 9], [0, 0, 0, 2, 9], [3, 0, 0, 2, 0], [3, 5, 0, 0, 0]]
*/

#include <iostream>
using namespace std;

void moveZeroesToEnd(int arr[][5], int row, int col) {
    for (int i = 0; i < row; ++i) {
        bool flag = false;
        for (int j = 0; j < col - 1; ++j) {
            if (arr[i][j] == 0 && arr[i][j + 1]!= 0) {
                swap(arr[i][j], arr[i][j + 1]);
                flag = true;
            }
        }
        if (!flag) break;
    }
}

int main() {
    int inputArr[][5] = {{4, 0, 2, 0, 0}, {0, 0, 0, 0, 0}, {0, 1, 2, 0, 0}, {0, 0, 0, 0, 7}, {0, 0, 0, 6, 0}};
    cout << "Input array is : \n";
    printArray(inputArr, 5);
    moveZeroesToEnd(inputArr, 5, 5);
    cout << "\nOutput array after moving zeroes to end of each row is :\n";
    printArray(inputArr, 5);
    return 0;
}


###########################################################
Result:
solution: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [3, 0, 0, 0, 9], [3, 0, 0, 2, 9], [3, 5, 4, 2, 9]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.02952029520295203

cat_success_cnt: 0

cat_success_rate: 0.0

