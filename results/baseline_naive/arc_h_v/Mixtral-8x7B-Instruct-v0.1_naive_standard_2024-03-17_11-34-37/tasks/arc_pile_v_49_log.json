{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[7, 0, 0, 9], [0, 0, 0, 9], [0, 0, 0, 9], [7, 0, 0, 0]]\noutput: [[0, 0, 0, 0], [0, 0, 0, 9], [7, 0, 0, 9], [7, 0, 0, 9]]\n\nExample_2:\ninput: [[0, 2, 6, 0, 0], [5, 2, 0, 0, 0], [5, 0, 0, 0, 0], [5, 0, 0, 0, 0], [0, 2, 0, 0, 0]]\noutput: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [5, 2, 0, 0, 0], [5, 2, 0, 0, 0], [5, 2, 6, 0, 0]]\n\nExample_3:\ninput: [[0, 0, 0, 7], [0, 0, 0, 7], [9, 0, 0, 0], [9, 0, 0, 7]]\noutput: [[0, 0, 0, 0], [0, 0, 0, 7], [9, 0, 0, 7], [9, 0, 0, 7]]\n\nTest case:\ninput: [[0, 9, 7, 0], [0, 0, 7, 6], [1, 0, 0, 0], [0, 0, 0, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[0, 9, 7, 0], [0, 0, 7, 6], [1, 0, 0, 0], [0, 0, 0, 0]]\n*/\n\npublic class Solution {\n    public int[][] Fill(int[][] matrix) {\n        if (matrix == null || matrix.Length == 0 || matrix[0].Length == 0) return new int[0][];\n\n        for (int i = 0; i < matrix.Length; ++i) {\n            bool hasZeroInRow = false;\n            for (int j = 0; j < matrix[0].Length; ++j) {\n                if (matrix[i][j] == 0) {\n                    hasZeroInRow = true;\n                    continue;\n                }\n                if (hasZeroInRow) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n\n        for (int j = 0; j < matrix[0].Length; ++j) {\n            bool hasZeroInCol = false;\n            for (int i = 0; i < matrix.Length; ++i) {\n                if (matrix[i][j] == 0) {\n                    hasZeroInCol = true;\n                    continue;\n                }\n                if (hasZeroInCol) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n\n        return matrix;\n    }\n}"
        }
    ],
    "idx": 294,
    "task": "arc_pile_v_49",
    "category": "pile_v",
    "ys": [
        "arc_pile_v_49.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 7, 0], [1, 9, 7, 6]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.02711864406779661,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 516270,
        "prompt_tokens": 539804,
        "cost": null
    }
}