
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 0, 0], [8, 0, 0, 0, 0], [0, 0, 4, 4, 0], [0, 2, 2, 0, 2], [7, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [8, 0, 0, 0, 0], [4, 4, 0, 0, 0], [2, 2, 2, 0, 0], [7, 0, 0, 0, 0]]

Example_2:
input: [[7, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 5, 0, 0, 0], [0, 0, 0, 0, 0], [4, 4, 4, 0, 0]]
output: [[7, 0, 0, 0, 0], [0, 0, 0, 0, 0], [5, 0, 0, 0, 0], [0, 0, 0, 0, 0], [4, 4, 4, 0, 0]]

Example_3:
input: [[0, 3, 0, 0, 3, 3], [8, 0, 0, 8, 0, 0], [0, 7, 7, 0, 0, 7], [0, 5, 0, 0, 0, 0], [0, 9, 0, 0, 9, 9], [0, 0, 0, 0, 0, 0]]
output: [[3, 3, 3, 0, 0, 0], [8, 8, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0], [5, 0, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0]]

Test case:
input: [[8, 0, 0, 0, 0], [0, 7, 0, 7, 0], [0, 0, 0, 0, 9], [0, 1, 0, 1, 0], [5, 5, 0, 0, 5]]

###########################################################
Sample Outputs:
output: [[8, 0, 0, 0, 0], [7, 7, 0, 0, 0], [0, 0, 0, 0, 9], [1, 1, 0, 0, 0], [5, 5, 5, 0, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (arr[i][j] == 0) {
				arr[i][j] = -1;
			}
		}
	}
}

bool check(int** arr, int x, int y, int num, int n) {
	// check row and column
	for (int i = 0; i < n; ++i) {
		if ((arr[x][i] == num && i!= y) || (arr[i][y] == num && i!= x)) {
			return false;
		}
	}

	// check square
	int startX = x / 3 * 3;
	int startY = y / 3 * 3;
	for (int i = startX; i < startX + 3; ++i) {
		for (int j = startY; j < startY + 3; ++j) {
			if (arr[i][j] == num &&!(i == x && j == y)) {
				return false;
			}
		}
	}

	return true;
}

bool dfs(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (arr[i][j] == 0) {
				for (int k = 1; k <= n; ++k) {
					if (check(arr, i, j, k, n)) {
						arr[i][j] = k;
						if (dfs(arr, n)) return true;
						arr[i][j] = 0; // backtracking
					}
				}
				return false;
			}
		}
	}

	return true;
}

void printArr(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}

int main() {
	int n;
	cin >> n;

	int** arr = new int* [n];
	for (int i = 0; i < n; ++i) {
		arr[i] = new int[n];
		for (int j = 0; j < n; ++j) {
			cin >> arr[i][j];
		}
	}

	fill(arr, n);
	dfs(arr, n);
	printArr(arr, n);

	return 0;
}


###########################################################
Result:
solution: [[8, 0, 0, 0, 0], [7, 7, 0, 0, 0], [9, 0, 0, 0, 0], [1, 1, 0, 0, 0], [5, 5, 5, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03305785123966942

cat_success_cnt: 1

cat_success_rate: 0.023809523809523808

