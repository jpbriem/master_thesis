
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[2, 2, 0, 2, 0, 0], [0, 0, 6, 0, 6, 0], [7, 0, 0, 0, 0, 0], [0, 9, 0, 0, 9, 9], [0, 3, 3, 0, 0, 0], [4, 0, 0, 0, 0, 4]]
output: [[2, 2, 2, 0, 0, 0], [6, 6, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0], [9, 9, 9, 0, 0, 0], [3, 3, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0]]

Example_2:
input: [[5, 5, 0, 0, 5, 0], [0, 0, 0, 8, 0, 0], [0, 0, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4]]
output: [[5, 5, 5, 0, 0, 0], [8, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0]]

Example_3:
input: [[0, 0, 9, 0], [6, 6, 6, 0], [5, 0, 5, 5], [7, 7, 7, 0]]
output: [[9, 0, 0, 0], [6, 6, 6, 0], [5, 5, 5, 0], [7, 7, 7, 0]]

Test case:
input: [[0, 0, 0, 0, 8], [0, 0, 0, 7, 7], [0, 0, 0, 5, 0], [9, 9, 0, 0, 9], [0, 0, 0, 3, 0]]

###########################################################
Sample Outputs:
output: [[0, 0, 0, 0, 8], [0, 0, 0, 7, 7], [0, 0, 0, 5, 0], [9, 9, 0, 0, 9], [0, 0, 0, 3, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int nRows, int nCols) {
    for (int i = 0; i < nRows; ++i) {
        bool isFilled = false;
        for (int j = 0; j < nCols; ++j) {
            if (!isFilled && arr[i][j]!= 0) {
                cout << arr[i][j];
                isFilled = true;
            } else if (isFilled && arr[i][j] == 0) {
                cout << "0";
            } else if (arr[i][j]!= 0) {
                cout << endl;
                cout << arr[i][j];
                isFilled = true;
            }
        }
        if (!isFilled) {
            cout << "0" << endl;
        }
    }
}

void zeroMatrix(int** matrix, int rows, int cols) {
    // first row and column check
    bool hasZeroInFirstRow = false;
    bool hasZeroInFirstColumn = false;
    for (int i = 0; i < cols; ++i) {
        if (matrix[0][i] == 0) {
            hasZeroInFirstRow = true;
            break;
        }
    }
    for (int i = 0; i < rows; ++i) {
        if (matrix[i][0] == 0) {
            hasZeroInFirstColumn = true;
            break;
        }
    }

    // other rows and columns check
    for (int i = 1; i < rows; ++i) {
        for (int j = 1; j < cols; ++j) {
            if (matrix[i][j] == 0) {
                matrix[i][0] = 0;
                matrix[0][j] = 0;
            }
        }
    }

    // set zeros in the first row
    for (int i = 0; i < cols; ++i) {
        if (matrix[0][i] == 0) {
            for (int j = 0; j < rows; ++j) {
                matrix[j][i] = 0;
            }
        }
    }

    // set zeros in the first column
    for (int i = 0; i < rows; ++i) {
        if (matrix[i][0] == 0) {
            for (int j = 0; j < cols; ++j) {
                matrix[i][j] = 0;
            }
        }
    }

    // print result
    if (hasZeroInFirstRow || hasZeroInFirstColumn) {
        fill(matrix, rows, cols);
    } else {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << matrix[i][j] <<'';
            }
            cout << '\n';
        }
    }
}

int main() {
    int rows, cols;
    cin >> rows >> cols;
    int **matrix = new int*[rows];
    for (int i = 0; i < rows; ++i) {
        matrix[i] = new int[cols];
        for (int j = 0; j < cols; ++j) {
            cin >> matrix[i][j];
        }
    }
    zeroMatrix(matrix, rows, cols);
    return 0;
}


###########################################################
Result:
solution: [[8, 0, 0, 0, 0], [7, 7, 0, 0, 0], [5, 0, 0, 0, 0], [9, 9, 9, 0, 0], [3, 0, 0, 0, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.034334763948497854

cat_success_cnt: 1

cat_success_rate: 0.030303030303030304

