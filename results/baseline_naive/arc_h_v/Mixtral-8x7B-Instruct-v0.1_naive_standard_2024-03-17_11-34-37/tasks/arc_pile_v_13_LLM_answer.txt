
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[3, 0, 4, 0, 0], [0, 0, 4, 0, 0], [0, 6, 0, 0, 0], [3, 6, 4, 0, 1], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 4, 0, 0], [3, 6, 4, 0, 0], [3, 6, 4, 0, 1]]

Example_2:
input: [[4, 3, 0, 6], [0, 0, 0, 0], [0, 3, 0, 6], [4, 3, 0, 0]]
output: [[0, 0, 0, 0], [0, 3, 0, 0], [4, 3, 0, 6], [4, 3, 0, 6]]

Example_3:
input: [[0, 0, 8, 1], [3, 6, 8, 1], [3, 6, 0, 0], [3, 0, 8, 1]]
output: [[0, 0, 0, 0], [3, 0, 8, 1], [3, 6, 8, 1], [3, 6, 8, 1]]

Test case:
input: [[6, 0, 0, 2], [0, 5, 1, 0], [6, 0, 0, 0], [0, 0, 0, 2]]

###########################################################
Sample Outputs:
output: [[6, 0, 0, 2], [0, 0, 0, 0], [6, 0, 0, 0], [0, 0, 0, 2]]
*/

public class Solution {
    public int[][] MoveZeroes(int[][] grid) {
        if (grid == null || grid.Length == 0) return new int[0][];

        var row = grid.Length;
        var col = grid[0].Length;

        for (var i = 0; i < row; ++i) {
            for (var j = 0; j < col - 1; ++j) {
                if (grid[i][j]!= 0 && grid[i][j + 1] == 0) {
                    Swap(ref grid[i][j], ref grid[i][j + 1]);
                }
            }
        }

        return grid;
    }

    private void Swap<T>(ref T a, ref T b) {
        var temp = a;
        a = b;
        b = temp;
    }
}


###########################################################
Result:
solution: [[0, 0, 0, 0], [0, 0, 0, 0], [6, 0, 0, 2], [6, 5, 1, 2]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03125

cat_success_cnt: 0

cat_success_rate: 0.0

