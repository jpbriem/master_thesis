{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[5, 5, 5, 0], [0, 0, 0, 0], [4, 4, 0, 4], [0, 2, 2, 2]]\noutput: [[5, 5, 5, 0], [0, 0, 0, 0], [4, 4, 4, 0], [2, 2, 2, 0]]\n\nExample_2:\ninput: [[3, 0, 0, 0, 0], [0, 0, 0, 2, 2], [0, 0, 0, 0, 0], [0, 4, 4, 0, 0], [1, 0, 0, 0, 1]]\noutput: [[3, 0, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [4, 4, 0, 0, 0], [1, 1, 0, 0, 0]]\n\nExample_3:\ninput: [[0, 9, 0, 0, 9], [0, 5, 5, 5, 0], [4, 0, 4, 0, 4], [0, 3, 0, 0, 3], [0, 0, 0, 0, 0]]\noutput: [[9, 9, 0, 0, 0], [5, 5, 5, 0, 0], [4, 4, 4, 0, 0], [3, 3, 0, 0, 0], [0, 0, 0, 0, 0]]\n\nTest case:\ninput: [[0, 0, 8, 0, 0], [7, 0, 7, 7, 0], [2, 0, 0, 0, 0], [0, 5, 0, 0, 0], [0, 0, 9, 9, 0]]\n\n###########################################################\nSample Outputs:\noutput: [[0, 0, 8, 0, 0], [7, 7, 7, 7, 0], [2, 2, 2, 0, 0], [5, 5, 0, 0, 0], [9, 9, 0, 0, 0]]\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid fill(int** arr, int nRows, int nCols) {\n    for (int i = 0; i < nRows; ++i) {\n        bool isZeroRow = true;\n        for (int j = 0; j < nCols; ++j) {\n            if (arr[i][j]!= 0) {\n                isZeroRow = false;\n                break;\n            }\n        }\n        if (!isZeroRow) continue;\n        for (int k = 0; k < nCols; ++k) {\n            arr[i][k] = arr[nRows - 1][k];\n        }\n    }\n}\n\nvoid merge(int** arr, int nRows, int nCols) {\n    for (int col = 0; col < nCols; ++col) {\n        for (int row = 0; row < nRows - 1; ++row) {\n            if (arr[row][col] == 0 && arr[row + 1][col]!= 0) {\n                swap(arr[row][col], arr[row + 1][col]);\n            }\n        }\n    }\n}\n\nvoid printArr(int** arr, int nRows, int nCols) {\n    cout << \"[\";\n    for (int i = 0; i < nRows; ++i) {\n        cout << \"[\";\n        for (int j = 0; j < nCols; ++j) {\n            cout << arr[i][j];\n            if (j < nCols - 1) cout << \", \";\n        }\n        cout << \"]\";\n        if (i < nRows - 1) cout << \",\";\n    }\n    cout << \"]\\n\";\n}\n\nvoid zeroMatrix(int** arr, int nRows, int nCols) {\n    // Fill the last row with values from bottom-most non-zero row.\n    fill(arr, nRows, nCols);\n\n    // Merge rows to get zeros at top of matrix.\n    merge(arr, nRows, nCols);\n}\n\nint main() {\n    int testCase[][5] = {{0, 0, 8, 0, 0}, {7, 0, 7, 7, 0}, {2, 0, 0, 0, 0}, {0, 5, 0, 0, 0}, {0, 0, 9, 9, 0}};\n    int **arr = new int*[5];\n    for (int i = 0; i < 5; ++i) {\n        arr[i] = new int[5];\n        for (int j = 0; j < 5; ++j) {\n            arr[i][j] = testCase[i][j];\n        }\n    }\n    zeroMatrix(arr, 5, 5);\n    printArr(arr, 5, 5);\n    return 0;\n}"
        }
    ],
    "idx": 206,
    "task": "arc_pile_h_14",
    "category": "pile_h",
    "ys": [
        "arc_pile_h_14.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[8, 0, 0, 0, 0], [7, 7, 7, 0, 0], [2, 0, 0, 0, 0], [5, 0, 0, 0, 0], [9, 9, 0, 0, 0]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.033816425120772944,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 434650,
        "prompt_tokens": 488460,
        "cost": null
    }
}