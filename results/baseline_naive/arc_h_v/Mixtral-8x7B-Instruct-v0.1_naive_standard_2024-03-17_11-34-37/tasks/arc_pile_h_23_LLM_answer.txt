
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
Example_1:
input: [[0, 0, 0, 0, 0], [2, 0, 2, 0, 2], [4, 4, 0, 0, 0], [0, 8, 0, 8, 8], [0, 0, 0, 0, 0]]
output: [[0, 0, 0, 0, 0], [2, 2, 2, 0, 0], [4, 4, 0, 0, 0], [8, 8, 8, 0, 0], [0, 0, 0, 0, 0]]

Example_2:
input: [[7, 0, 0, 0], [0, 3, 0, 3], [0, 0, 0, 0], [1, 1, 0, 1]]
output: [[7, 0, 0, 0], [3, 3, 0, 0], [0, 0, 0, 0], [1, 1, 1, 0]]

Example_3:
input: [[0, 0, 0, 0, 0], [0, 4, 0, 0, 0], [0, 8, 0, 0, 8], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0]]
output: [[0, 0, 0, 0, 0], [4, 0, 0, 0, 0], [8, 8, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0]]

Test case:
input: [[0, 3, 3, 3], [9, 0, 0, 9], [5, 0, 5, 5], [2, 2, 2, 0]]

###########################################################
Sample Outputs:
output: [[3, 3, 3, 0], [9, 0, 0, 0], [5, 5, 5, 0], [2, 2, 2, 0]]
*/

#include <iostream>
using namespace std;

void fill(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (arr[i][j]!= 0 && arr[i][j - 1] == 0) {
				arr[i][j - 1] = arr[i][j];
			}
		}
	}
}

void print(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}

void zero(int** arr, int n) {
	for (int i = 0; i < n; ++i) {
		for (int j = n - 1; j >= 0; --j) {
			if (arr[i][j] == 0) {
				for (int k = j; k < n; ++k) {
					arr[i][k] = 0;
				}
			}
		}
	}
}

void solution(int** arr, int n) {
	fill(arr, n);
	zero(arr, n);
}

int main() {
	int n;
	cin >> n;
	int** arr = new int* [n];
	for (int i = 0; i < n; ++i) {
		arr[i] = new int[n];
		for (int j = 0; j < n; ++j) {
			cin >> arr[i][j];
		}
	}
	solution(arr, n);
	print(arr, n);
	return 0;
}


###########################################################
Result:
solution: [[3, 3, 3, 0], [9, 9, 0, 0], [5, 5, 5, 0], [2, 2, 2, 0]]


success: 0

too_long_prompt: False

tries: 1

success_rate: 0.03225806451612903

cat_success_cnt: 0

cat_success_rate: 0.0

