{
    "steps": [
        {
            "prompt_log": "Sample Prompt:\nExample_1:\ninput: [[0, 0, 0, 5], [0, 2, 2, 2], [0, 3, 0, 0], [9, 0, 9, 9]]\noutput: [[5, 0, 0, 0], [2, 2, 2, 0], [3, 0, 0, 0], [9, 9, 9, 0]]\n\nExample_2:\ninput: [[3, 3, 0, 3], [0, 5, 5, 0], [1, 1, 0, 0], [0, 2, 2, 2]]\noutput: [[3, 3, 3, 0], [5, 5, 0, 0], [1, 1, 0, 0], [2, 2, 2, 0]]\n\nExample_3:\ninput: [[0, 0, 5, 0, 0, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 8], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0], [0, 0, 0, 0, 1, 0]]\noutput: [[5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]\n\nTest case:\ninput: [[6, 0, 0, 0], [0, 0, 3, 3], [8, 8, 8, 0], [0, 2, 2, 2]]\n\n###########################################################\nSample Outputs:\noutput: [[6, 0, 0, 0], [0, 3, 3, 0], [8, 8, 8, 0], [0, 2, 2, 0]]\n*/\n\n#include <iostream>\nusing namespace std;\n\nvoid printArray(int arr[][4]) {\n    for (int i = 0; i < 4; ++i) {\n        cout << \"[\";\n        for (int j = 0; j < 4; ++j) {\n            if (j!= 0) cout << \", \";\n            cout << arr[i][j];\n        }\n        cout << \"]\" << endl;\n    }\n}\n\n// Time complexity: O(n^2), Space complexity: O(1)\nvoid fillZeroToLeft(int arr[][4]) {\n    int rowCount = 0;\n    // Count the number of rows that have non-zero elements.\n    for (int i = 0; i < 4; ++i) {\n        bool hasNonZeroElement = false;\n        for (int j = 0; j < 4; ++j) {\n            if (arr[i][j] > 0) {\n                hasNonZeroElement = true;\n                break;\n            }\n        }\n        if (hasNonZeroElement) ++rowCount;\n    }\n\n    // Fill zero to left in each row.\n    for (int i = 0; i < 4 - rowCount; ++i) {\n        for (int j = 0; j < 4; ++j) {\n            arr[i][j] = 0;\n        }\n    }\n}\n\n// Time complexity: O(n^2), Space complexity: O(1)\nvoid fillZeroToTop(int arr[][4]) {\n    int colCount = 0;\n    // Count the number of columns that have non-zero elements.\n    for (int j = 0; j < 4; ++j) {\n        bool hasNonZeroElement = false;\n        for (int i = 0; i < 4; ++i) {\n            if (arr[i][j] > 0) {\n                hasNonZeroElement = true;\n                break;\n            }\n        }\n        if (hasNonZeroElement) ++colCount;\n    }\n\n    // Fill zero to top in each column.\n    for (int j = 0; j < 4 - colCount; ++j) {\n        for (int i = 0; i < 4; ++i) {\n            arr[i][j] = 0;\n        }\n    }\n}\n\n// Time complexity: O(n^2), Space complexity: O(1)\nvoid moveNonZeroElementsToRightBottom(int arr[][4]) {\n    // Move non-zero elements to right bottom.\n    for (int i = 0; i < 4; ++i) {\n        for (int j = 3; j >= 0; --j) {\n            if (arr[i][j] == 0 && j!= 3) continue;\n            for (int k = 3; k > j; --k) {\n                swap(arr[i][k], arr[i][k - 1]);\n            }\n            break;\n        }\n    }\n\n    // Merge same numbers.\n    for (int i = 0; i < 4; ++i) {\n        for (int j = 3; j > 0; --j) {\n            if (arr[i][j] == arr[i][j - 1]) {\n                arr[i][j] *= 2;\n                arr[i][j - 1] = 0;\n            }\n        }\n    }\n}\n\n// Time complexity: O(n^2), Space complexity: O(1)\nvoid solution(int arr[][4]) {\n    fillZeroToLeft(arr);\n    fillZeroToTop(arr);\n    moveNonZeroElementsToRightBottom(arr);\n}\n\nint main() {\n    int testCase[][4] = {{0, 0, 0, 5}, {0, 2, 2, 2}, {0, 3, 0, 0}, {9, 0, 9, 9}};\n    printArray(testCase);\n    cout << \"After moving zeros and merging:\" << endl;\n    solution(testCase);\n    printArray(testCase);\n\n    return 0;\n}"
        }
    ],
    "idx": 200,
    "task": "arc_pile_h_0",
    "category": "pile_h",
    "ys": [
        "arc_pile_h_0.json-Node_1(Level: 1, Phase: abstraction, Thought: , Value: 0, Parent_ID: 0, Spread: False, Children_ID: [], is_root: False, is_leaf: True)"
    ],
    "result": {
        "solution": "[[6, 0, 0, 0], [3, 3, 0, 0], [8, 8, 8, 0], [2, 2, 2, 0]]\n",
        "success": 0,
        "too_long_prompt": false,
        "tries": 1,
        "success_rate": 0.03482587064676617,
        "cat_success_cnt": 0,
        "cat_success_rate": 0.0
    },
    "usage_so_far": {
        "completion_tokens": 430561,
        "prompt_tokens": 485022,
        "cost": null
    }
}