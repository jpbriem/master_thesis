Input token: 411
Output token: 364
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['a', 'a', 'a', 'a], ['a', 'd', 'c', 'b], ['a', 'd', 'a', 'b], ['i', 'd', 'a', 'a']]
output: [['a', 'a', 'a', 'a], ['a', 'd', 'a', 'a], ['a', 'd', 'a', 'b], ['i', 'd', 'c', 'b']]

Example_2:
input: [['a', 'h', 'a', 'a], ['a', 'h', 'a', 'a], ['a', 'a', 'a', 'a], ['c', 'h', 'a', 'a']]
output: [['a', 'a', 'a', 'a], ['a', 'h', 'a', 'a], ['a', 'h', 'a', 'a], ['c', 'h', 'a', 'a']]

Example_3:
input: [['e', 'a', 'a', 'a], ['e', 'a', 'f', 'a], ['e', 'a', 'f', 'a], ['a', 'b', 'a', 'a']]
output: [['a', 'a', 'a', 'a], ['e', 'a', 'a', 'a], ['e', 'a', 'f', 'a], ['e', 'b', 'f', 'a']]

Test case:
input: [['a', 'g', 'a', 'a], ['a', 'g', 'f', 'a], ['a', 'g', 'a', 'd], ['j', 'a', 'a', 'a']]
################################################################

LLM answer:

output: [['a', 'a', 'a', 'a], ['a', 'g', 'a', 'a], ['a', 'g', 'a', 'd], ['j', 'a', 'a', 'a']]
*/
public class Solution {
    public List<List<String>> removeInvalidParentheses(String s) {
        if (s == null || s.length() < 2) return new ArrayList<>();
        Set<String> set = new HashSet();
        dfs(set, "", s);
        return new ArrayList<>(set);
    }

    private void dfs(Set<String> set, String cur, String s) {
        if (cur.length() >= s.length()) {
            if (!isValid(cur)) return;
            set.add(cur);
            return;
        }
        for (int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            if (c!= '(' && c!= ')') continue;
            dfs(set, cur + c, s.substring(0, i) + s.substring(i+1));
        }
    }

    private boolean isValid(String str) {
        int left = 0, right = 0;
        for (char c : str.toCharArray()) {
            if (c == '(') ++left;
            else if (c == ')') ++right;
            if (left < right) return false;
        }
        return left == right;
    }
}
################################################################

Solution:
[['a', 'a', 'a', 'a], ['a', 'g', 'a', 'a], ['a', 'g', 'a', 'a], ['j', 'g', 'f', 'd']]

