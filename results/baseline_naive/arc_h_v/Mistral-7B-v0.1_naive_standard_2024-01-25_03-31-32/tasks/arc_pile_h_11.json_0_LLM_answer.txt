Input token: 678
Output token: 469
################################################################

LLM prompt:
The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [['i', 'i', 'i', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'g', 'a], ['a', 'j', 'a', 'a', 'a', 'j], ['a', 'd', 'd', 'a', 'a', 'd], ['a', 'a', 'a', 'a', 'a', 'a], ['a', 'h', 'a', 'a', 'a', 'a']]
output: [['i', 'i', 'i', 'a', 'a', 'a], ['g', 'a', 'a', 'a', 'a', 'a], ['j', 'j', 'a', 'a', 'a', 'a], ['d', 'd', 'd', 'a', 'a', 'a], ['a', 'a', 'a', 'a', 'a', 'a], ['h', 'a', 'a', 'a', 'a', 'a']]

Example_2:
input: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['f', 'a', 'a', 'a], ['g', 'g', 'a', 'g']]
output: [['a', 'a', 'a', 'a], ['a', 'a', 'a', 'a], ['f', 'a', 'a', 'a], ['g', 'g', 'g', 'a']]

Example_3:
input: [['a', 'a', 'a', 'a', 'a', 'a], ['a', 'a', 'd', 'a', 'a', 'd], ['a', 'a', 'i', 'i', 'a', 'i], ['a', 'a', 'a', 'j', 'a', 'j], ['a', 'h', 'a', 'h', 'a', 'a], ['e', 'a', 'e', 'e', 'a', 'a']]
output: [['a', 'a', 'a', 'a', 'a', 'a], ['d', 'd', 'a', 'a', 'a', 'a], ['i', 'i', 'i', 'a', 'a', 'a], ['j', 'j', 'a', 'a', 'a', 'a], ['h', 'h', 'a', 'a', 'a', 'a], ['e', 'e', 'e', 'a', 'a', 'a']]

Test case:
input: [['c', 'a', 'a', 'c', 'c], ['e', 'a', 'a', 'a', 'a], ['b', 'a', 'a', 'b', 'b], ['j', 'a', 'j', 'j', 'a], ['f', 'a', 'f', 'a', 'a']]
################################################################

LLM answer:

output: [['c', 'a', 'a', 'c', 'c'], ['e', 'a', 'a', 'a', 'a'], ['b', 'a', 'a', 'b', 'b'], ['j', 'a', 'j', 'j', 'a'], ['f', 'a', 'a', 'a', 'a']]

Constraints:
0 <= len(arr) <= 5 * 10^4
0 <= arr[i].length <= 5 * 10^4
0 <= arr[i][j] < 26
 */
public class Solution {
    public List<String> replaceWords(List<String> dict, String sentence) {
        // Write your solution here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < dict.size(); ++i) {
            int length = dict.get(i).length();
            if (!map.containsKey(length)) {
                map.put(length, i);
            } else {
                while (dict.get(map.get(length)).compareTo(dict.get(i)) > 0) {
                    map.remove(length);
                    --length;
                }
                map.put(length, i);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (char c : sentence.toCharArray()) {
            sb.append(c);
            if (sb.toString().indexOf(" ")!= -1) {
                String word = sb.substring(0, sb.lastIndexOf(" "));
                sb.delete(0, sb.lastIndexOf(" ") + 1);
                if (word.length() == 0 ||!map.containsKey(word.length())) {
                    continue;
                }
                sb.append(dict.get(map.get(word.length())));
            }
        }
        return Arrays.asList(sb.toString());
    }
}
################################################################

Solution:
[['c', 'c', 'c', 'a', 'a], ['e', 'a', 'a', 'a', 'a], ['b', 'b', 'b', 'a', 'a], ['j', 'j', 'j', 'a', 'a], ['f', 'f', 'a', 'a', 'a']]

