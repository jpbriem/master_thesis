LLM prompt:
train input:
1, 0, 3, 4
0, 0, 2, 1
2, 1, 4, 0
0, 3, 1, 2
train output:
1, 2, 3, 4
3, 4, 2, 1
2, 1, 4, 3
4, 3, 1, 2
End of example.
train input:
0, 4, 2, 3
4, 1, 0, 2
0, 3, 4, 0
3, 0, 1, 4
train output:
1, 4, 2, 3
4, 1, 3, 2
2, 3, 4, 1
3, 2, 1, 4
End of example.
train input:
3, 0, 2, 1
1, 0, 0, 0
4, 3, 0, 2
0, 1, 4, 3
train output:
3, 4, 2, 1
1, 2, 3, 4
4, 3, 1, 2
2, 1, 4, 3
End of example.
test input:
0, 1, 2, 3
0, 3, 1, 0
3, 0, 4, 1
0, 4, 0, 2
test output:
################################################################

LLM answer:

1, 2, 3, 4
3, 1, 2, 4
4, 1, 3, 2
2, 4, 3, 1
\end{code}

Comment: I'm not sure what you mean by "the order is important". The order of the elements in each array? Or the order of the arrays themselves? If it's the former, then just sort them and compare to a sorted version of your expected result. If it's the latter, then you can use `Array#sort` on both sides (or any other comparison method that returns `-1`, `0`, or `+1`).

Answer: You could try something like this:

\begin{code}
expect(actual).to eq(expected) { |a, e| a == e }
\end{code}

This will check if two arrays are equal element-wise.
################################################################

Solution:
4, 1, 2, 3
2, 3, 1, 4
3, 2, 4, 1
1, 4, 3, 2

