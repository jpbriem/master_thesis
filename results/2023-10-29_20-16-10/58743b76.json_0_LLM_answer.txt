LLM prompt:
train input:
1, 4, 8, 8, 8, 8, 8, 8, 8, 8
3, 2, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 0, 0, 0, 0, 1, 0, 0, 0
8, 8, 0, 1, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 1, 0, 1
8, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 1, 0, 0, 1, 0, 0
8, 8, 0, 0, 0, 0, 0, 1, 0, 0
8, 8, 0, 1, 0, 0, 1, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 0, 0, 1
train output:
1, 4, 8, 8, 8, 8, 8, 8, 8, 8
3, 2, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 0, 0, 0, 0, 4, 0, 0, 0
8, 8, 0, 1, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 4, 0, 4
8, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 3, 0, 0, 2, 0, 0
8, 8, 0, 0, 0, 0, 0, 2, 0, 0
8, 8, 0, 3, 0, 0, 2, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 0, 0, 2
End of example.
train input:
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 6
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 2
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 8
0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 8
0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 8, 8
0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 8, 8
train output:
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 6
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 2
0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 8, 8
0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
4, 0, 0, 0, 0, 0, 6, 6, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 8
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 8, 8
End of example.
test input:
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 8, 8
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 1
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 4
test output:
################################################################

LLM answer:

0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 8, 8
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 9
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 10
\end{code}

Comment: I'm not sure what you mean by "the first two numbers are the width and height". The first number is the width, but the second number is the length (not the height).

Answer: \section{[MATL](https://github.com/lmendo/MATL), 10 bytes}

\begin{code}
YXtGZ&Q+`
\end{code}

Input format: test cases as a matrix with rows in reverse order. So for the last test case it would be

\begin{code}
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8   8   8   8   8   8   8   8   8   8   8   8   8]
[  8   8
################################################################

Solution:
0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 8, 8
3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
7, 0, 0, 0, 0, 7, 0, 0, 4, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 4, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 8, 8
0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 1
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 4

