Input token: 2279
Output token: 1026
################################################################

LLM prompt:
train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 0, 1, 0, 0, 3, 3, 3], [2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 0, 0, 1, 0, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 1, 1, 1, 0, 3, 0, 3], [2, 2, 2, 0, 0, 0, 0, 0, 3, 0, 3], [0, 2, 0, 0, 1, 1, 1, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 1, 0, 1, 0, 0, 3, 0], [0, 0, 0, 0, 1, 0, 1, 0, 3, 3, 3], [2, 2, 2, 0, 1, 1, 1, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[2, 0, 2, 0, 0, 1, 0, 0, 3, 3, 3], [2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0], [2, 2, 2, 0, 0, 1, 0, 0, 3, 3, 3]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 3, 0, 0, 0, 1, 1, 1], [0, 2, 0, 0, 3, 3, 3, 0, 0, 1, 0], [2, 0, 2, 0, 0, 0, 3, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 3, 3, 3, 0, 1, 0, 1], [2, 2, 2, 0, 0, 3, 0, 0, 0, 1, 0], [0, 0, 2, 0, 0, 3, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[2, 2, 2, 0, 3, 0, 3, 0, 1, 0, 0], [0, 2, 0, 0, 0, 3, 0, 0, 1, 1, 1], [0, 2, 0, 0, 3, 0, 3, 0, 0, 0, 1]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 3, 0, 0, 0, 1, 0, 0, 0, 5, 0, 5], [0, 0, 2, 0, 3, 0, 0, 0, 0, 1, 1, 0, 5, 0, 5], [0, 0, 2, 0, 3, 3, 3, 0, 1, 0, 0, 0, 5, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 1, 0, 5, 5, 5], [2, 0, 0, 0, 0, 3, 3, 0, 1, 0, 1, 0, 0, 0, 5], [2, 2, 2, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 5]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 3, 0, 3, 0, 1, 0, 1, 0, 0, 5, 0], [2, 2, 2, 0, 0, 3, 0, 0, 1, 1, 1, 0, 5, 5, 5], [0, 0, 2, 0, 3, 0, 3, 0, 0, 1, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 3, 0, 3, 0, 0, 1, 0, 0, 5, 0, 0], [0, 2, 0, 0, 3, 3, 3, 0, 1, 1, 1, 0, 5, 5, 5], [2, 0, 2, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[2, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 5, 0, 5], [2, 2, 2, 0, 3, 3, 3, 0, 1, 1, 1, 0, 0, 5, 0], [0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 5, 0, 5]]

test input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 3, 3, 0, 0, 1, 0, 1, 0, 0, 5, 0], [0, 2, 0, 0, 0, 0, 3, 0, 1, 0, 1, 0, 5, 5, 5], [2, 2, 2, 0, 3, 3, 0, 0, 1, 0, 1, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 3, 0, 3, 0, 0, 1, 0, 0, 5, 5, 0], [0, 0, 2, 0, 3, 0, 3, 0, 1, 1, 1, 0, 0, 5, 0], [2, 2, 0, 0, 3, 0, 3, 0, 0, 1, 0, 0, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

test output:
[[2, 0, 2, 0, 0, 3, 0, 0, 1, 0, 0, 0, 5, 0, 5], [2, 2, 2, 0, 3, 3, 3, 0, 1, 1, 1, 0, 0, 5, 0], [0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 5, 0, 5]]
```

## Answer (4)

# Python 3.8 (pre-release), ~~79~~ 69 bytes

```
lambda x:[sum(map(int,x))for i in range(len(x))if sum(i)>0]
```

Try it online!

Comment: `sum(map(int,x))` can be shortened to just `sum(x)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ḷ€ƇS⁵ịṪẎ
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€ƇS⁵ịṪẎ - Link: list of lists
Ḷ€       - length of each
  Ƈ      - filter keep those where:
    S     - sum
     ⁵    - five
       Ṫ - tail; drop the first element from the filtered list
        Ẏ - flatten
```

## Answer (3)

# Haskell, 51 bytes

```
f=filter((>0).sum)(zipWith(\a b->[a])<$>replicate 5<*>b)
```

Try it online!

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input and returns an array of arrays as output.

```
a=>a.filter(v=>v.reduce((c,e)=>(c+=e)?c:0)>0)
```

Try it online!

--------------------

# JavaScript (ES6), 53 bytes

Expects an array of strings as input and returns an array of strings as output.

```
a=>a.map(v=>v.split('').join(''))
```

Try it online!

Comment: You could save one byte by using `.reduce()` instead of `.forEach()`, but that would make your code less readable.

Comment: @Neil Yes, you are right. But I prefer readability over saving some bytes.

## Answer (3)

# R, 51 bytes

```
function(m)m[apply(m,1,sum)>0]
```

Try it online!

## Answer (3)

# C++ (gcc), 69 bytes

```
[](auto&a){return{for(auto&r:a)if(r>0)r};}
```

Try it online!

## Answer (3)

# Charcoal, 10 bytes

```
ＦθＩΣι≔⊖κ⟦…⟧
```

Try it online! Link is to verbose version of code. Explanation:

```
 θ                 Input array
Ｆ                Map over elements
   ι              Current element
    Σ             Sum
         ≔        Store
          ⊖       Decremented value
           κ      Current index
            ⟦...⟧  Empty string
```

## Answer (3)

# Retina 0.8.2, 24 bytes

```
+`\d+
$*
^.*¶
$*
```

Try it online! Takes input as a single line with newlines between rows. Outputs on separate lines. Explanation: The first stage converts all digits to stars. The second
################################################################

Solution:
[[2, 0, 2, 0, 0, 3, 0, 0, 1, 1, 0, 0, 5, 5, 0], [2, 0, 2, 0, 3, 3, 3, 0, 0, 1, 0, 0, 0, 0, 5], [2, 0, 2, 0, 0, 3, 0, 0, 1, 1, 1, 0, 5, 5, 0]]

