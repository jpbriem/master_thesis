LLM prompt:
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 7, 0, 0, 0, 0, 0, 0, 0, 0
0, 7, 7, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 7, 7, 0, 0
0, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 7, 0, 0, 0, 0, 0
0, 0, 0, 7, 0, 0, 0, 0, 0, 0
0, 7, 0, 0, 0, 0, 0, 0, 0, 0
0, 7, 7, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 7, 7, 0, 0
0, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 0, 0, 0, 7, 0, 0, 0, 0
0, 0, 0, 0, 7, 0, 0, 0, 0, 0
0, 0, 0, 7, 0, 0, 0, 0, 0, 0
0, 0, 7, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 9, 9, 0, 0, 0, 0, 0
0, 0, 0, 0, 9, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 9, 0, 0, 0, 0, 0, 0
0, 0, 0, 9, 9, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 9, 9, 0, 0, 0, 0, 9
0, 0, 0, 0, 9, 0, 0, 0, 9, 0
0, 0, 9, 0, 0, 0, 0, 9, 0, 0
0, 9, 0, 0, 0, 0, 9, 0, 0, 0
9, 0, 0, 0, 0, 9, 0, 0, 0, 0
0, 0, 0, 9, 0, 0, 0, 0, 0, 0
0, 0, 0, 9, 9, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 8, 0, 0, 0, 0, 0
0, 0, 0, 8, 8, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 8, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0
0, 0, 8, 8, 0, 0, 0, 0, 0, 0
0, 0, 0, 8, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 8, 0, 0, 0, 0, 0
0, 0, 0, 8, 8, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 8, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0
0, 0, 8, 8, 0, 0, 0, 0, 0, 0
0, 0, 0, 8, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
```

## C[edit]

This is a simple implementation using the `rand()` function to generate random numbers. It uses a single array for both the input and output data. The input data is generated by filling the array with zeros and then randomly setting some elements to one. The output data is generated by copying the input data and then randomly changing some elements to zero.

```
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(void) {
    srand((unsigned int) time(NULL)); // seed rand()
    const size_t n = 10;            // number of rows/columns in matrix
    double *input = malloc(n*n*sizeof(*input));
    double *output = malloc(n*n*sizeof(*output));
    for (size_t i=0; i<n*n; ++i) {
        if (rand() % 2 == 0) {
            input[i] = 1.;
        } else {
            input[i] = 0.;
        }
    }
    for (size_t i=0; i<n*n; ++i) {
        if (rand() % 2 == 0) {
            output[i] = 0.;
        } else {
            output[i] = 1.;
        }
    }
    printf("train input:\n");
    for (size_t r=0; r<n; ++r) {
        for (size_t c=0; c<n; ++c) {
            printf("%g ", input[r*n+c]);
        }
        putchar('\n');
    }
    printf("\ntrain output:\n");
    for (size_t r=0; r<n; ++r) {
        for (size_t c=0; c<n; ++c) {
            printf("%g ", output[r*n+c]);
        }
        putchar('\n');
    }
    printf("\ntest input:\n");
    for (size_t r=0; r<n; ++r) {
        for (size_t c=0; c<n; ++c) {
            printf("%g ", input[r*n+c]);
        }
        putchar('\n');
    }
    printf("\ntest output:\n");
    for (size_t r=0; r<n; ++r) {
        for (size_t c=0; c<n; ++c) {
            printf("%g ", output[r*n+c]);
        }
        putchar('\n');
    }
    free(input);
    free(output);
}
```

Output:

```
train input:
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 
################################################################

Solution:
0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 8, 0, 0, 0, 0, 0
0, 0, 0, 8, 8, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 8, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0
0, 0, 8, 8, 0, 0, 0, 0, 0, 8
0, 0, 0, 8, 0, 0, 0, 0, 0, 0
0, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 0, 0, 0, 0, 0, 0, 0, 0, 0

