LLM prompt:
train input:
1, 0, 0, 0, 0, 0, 0, 0, 0, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
1, 0, 1, 0, 1, 2, 0, 2, 0, 2
0, 0, 1, 0, 1, 2, 0, 2, 0, 0
1, 1, 1, 0, 1, 2, 0, 2, 2, 2
0, 0, 0, 0, 1, 2, 0, 0, 0, 0
1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3
8, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0
0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3
8, 8, 8, 0, 0, 3, 0, 3, 0, 0, 0, 0
0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3
8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3
8, 8, 8, 8, 8, 0, 8, 0, 0, 0, 0, 0
0, 0, 0, 0, 8, 0, 8, 0, 0, 3, 3, 3
8, 8, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0
0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 3
8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0
End of example.
train input:
2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2
0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2
2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2
0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2
2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2
0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4
4, 4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 0, 4
0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4
4, 4, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4
0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4
4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4
End of example.
train input:
1, 0, 0, 0, 0, 0, 2
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
8, 0, 0, 0, 0, 0, 0
train output:
1, 0, 1, 0, 2, 0, 2
0, 0, 1, 0, 2, 0, 0
1, 1, 1, 0, 2, 2, 2
0, 0, 0, 0, 0, 0, 0
8, 8, 8, 0, 0, 2, 2
0, 0, 8, 0, 8, 0, 0
8, 0, 8, 0, 8, 0, 0
End of example.
test input:
4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
test output:
################################################################

LLM answer:

4, 0, 4, 0, 4, 0, 4
0, 0, 4, 0, 4, 0, 0
4, 4, 4, 0, 4, 4, 4
0, 0, 0, 0, 0, 0, 0
8, 8, 8, 0, 0, 4, 4
0, 0, 8, 0, 8, 0, 0
8, 0, 8, 0, 8, 0, 0
End of test.
```

## Answer (5)

# Python 3, ~~67~~ 66 bytes

```
lambda x:[sum(x[:i+1])for i in range(len(x))]
```

Try it online!

Comment: [66](https://tio.run/##K6gsycjPM/r/PzEwMTEyNDAwMDAwMAA "Python 3 – Try It Online")

Comment: @JonathanAllan Thanks for the tip :)

## Answer (4)

# Jelly, 9 bytes

```
Ḷ€ƲµṖċ⁾1
```

Try it online!

### How it works

```
Ḷ€ƲµṖċ⁾1 - Main link. Takes a list on the left and yields a list on the right
Ḷ             - Lengths of each prefix
 €            -  For each:
  Ʋ           -  Yield the current value as a monadic chain
    µ         -  Start a new chain
     Ṗ        -    Pop off the last element
      ċ⁾1     -    Count occurrences of 1
```

## Answer (4)

# JavaScript (ES6), 43 bytes

```
a=>a.map((_,i)=>(g=v=>v?++g(v-1):0)(a.slice(0,i).reduce((c,e)=>c+=e)))
```

Try it online!

## Answer (3)

# Haskell, 44 bytes

```
f l=[sum$take i<$>l|i<-[0..length l]]
```

Try it online!

## Answer (3)

# C (gcc), 100 bytes

```
f(int*p){int*q;return p&&(q=calloc(sizeof(*p)*(p[0]+1),1));for(;*p;p++)q[*p]=1;q;}
```

Try it online!

Returns an array with `n+1` elements, where `n` is the length of the input array. The first `n` elements are the sums of the prefixes, while the last one is the total sum.

## Answer (3)

# R, 44 bytes

```
function(x)scan(textConnection(paste(x,"",rep(" ",x))))
```

Try it online!

This uses the fact that `scan()` can read from a text connection to get the desired result.

## Answer (3)

# Perl 5, 36 + 1 (-p flag) = 37 bytes

```
$_=join" ",@F;say map{$_=~/\d+/g}split//,$_;
```

Try it online!

## Answer (3)

# Pyth, 10 bytes

```
smQ_TGhQ_
```

Test suite

## Explanation

```
smQ_TGhQ_
smQ_TGhQ_  Full program. Q is implicitly imported.
          Implicit: Q = eval(input())
mQ_TGhQ_  Map over Q:
 s         Sum
  _TGhQ_   Prefix sums of Q
```

## Answer (3)

# MATL, 10 bytes

```
YX&'1'Z%Y\t
```

Try it at MATL Online!

### Explanation

``
################################################################

Solution:
4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0
0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0
4, 4, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 1, 1
0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0
4, 4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 0, 0, 1, 1, 1, 1
0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0
4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 1, 1, 1, 1, 1, 1
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1
0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
8, 8, 8, 8, 8, 0, 8, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1
0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0
8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1
0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0
8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1

