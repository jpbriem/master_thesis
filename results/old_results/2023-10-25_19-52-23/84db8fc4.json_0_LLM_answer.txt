LLM prompt:
train input:
3, 1, 0, 3, 3, 3, 3, 3, 0, 3
1, 0, 0, 3, 3, 0, 1, 3, 1, 1
0, 1, 1, 1, 0, 3, 0, 0, 0, 3
0, 1, 3, 3, 0, 3, 1, 3, 0, 0
1, 3, 1, 1, 0, 1, 3, 0, 0, 0
0, 1, 1, 3, 0, 0, 3, 1, 1, 3
3, 0, 1, 0, 0, 0, 0, 0, 3, 0
0, 0, 0, 3, 3, 1, 0, 0, 1, 3
3, 3, 1, 0, 0, 1, 1, 0, 0, 1
0, 1, 3, 0, 1, 1, 1, 1, 1, 3
train output:
3, 1, 2, 3, 3, 3, 3, 3, 2, 3
1, 2, 2, 3, 3, 5, 1, 3, 1, 1
2, 1, 1, 1, 5, 3, 2, 2, 2, 3
2, 1, 3, 3, 5, 3, 1, 3, 2, 2
1, 3, 1, 1, 5, 1, 3, 2, 2, 2
2, 1, 1, 3, 5, 5, 3, 1, 1, 3
3, 2, 1, 5, 5, 5, 5, 5, 3, 2
2, 2, 2, 3, 3, 1, 5, 5, 1, 3
3, 3, 1, 2, 2, 1, 1, 5, 5, 1
2, 1, 3, 2, 1, 1, 1, 1, 1, 3
End of example.
train input:
0, 3, 3, 0, 3, 1, 0, 1, 1, 3
1, 3, 0, 0, 1, 1, 3, 1, 0, 0
1, 0, 1, 0, 0, 1, 3, 0, 3, 3
0, 0, 3, 3, 1, 3, 3, 3, 0, 1
0, 0, 3, 3, 0, 0, 0, 0, 3, 1
3, 3, 0, 0, 3, 0, 0, 0, 3, 0
0, 0, 3, 3, 3, 0, 3, 0, 3, 3
3, 1, 1, 1, 3, 0, 1, 1, 1, 3
0, 0, 1, 3, 1, 0, 0, 3, 3, 3
0, 3, 3, 0, 3, 3, 1, 3, 1, 1
train output:
2, 3, 3, 2, 3, 1, 2, 1, 1, 3
1, 3, 2, 2, 1, 1, 3, 1, 2, 2
1, 2, 1, 2, 2, 1, 3, 5, 3, 3
2, 2, 3, 3, 1, 3, 3, 3, 5, 1
2, 2, 3, 3, 5, 5, 5, 5, 3, 1
3, 3, 5, 5, 3, 5, 5, 5, 3, 2
2, 2, 3, 3, 3, 5, 3, 5, 3, 3
3, 1, 1, 1, 3, 5, 1, 1, 1, 3
2, 2, 1, 3, 1, 5, 5, 3, 3, 3
2, 3, 3, 2, 3, 3, 1, 3, 1, 1
End of example.
train input:
0, 3, 0, 3, 0, 0, 1, 3, 3, 1
0, 1, 1, 1, 1, 3, 0, 0, 1, 1
0, 3, 1, 0, 1, 0, 3, 0, 3, 0
3, 3, 3, 0, 0, 3, 3, 3, 0, 0
1, 1, 3, 1, 3, 0, 0, 0, 1, 0
1, 0, 1, 0, 3, 0, 3, 3, 0, 3
0, 0, 0, 0, 1, 1, 3, 0, 1, 0
3, 0, 1, 3, 3, 1, 0, 3, 0, 0
1, 1, 0, 0, 1, 3, 3, 1, 1, 3
0, 0, 1, 1, 0, 1, 0, 0, 0, 0
train output:
2, 3, 2, 3, 2, 2, 1, 3, 3, 1
2, 1, 1, 1, 1, 3, 5, 5, 1, 1
2, 3, 1, 5, 1, 5, 3, 5, 3, 2
3, 3, 3, 5, 5, 3, 3, 3, 2, 2
1, 1, 3, 1, 3, 5, 5, 5, 1, 2
1, 2, 1, 2, 3, 5, 3, 3, 5, 3
2, 2, 2, 2, 1, 1, 3, 5, 1, 2
3, 2, 1, 3, 3, 1, 5, 3, 2, 2
1, 1, 5, 5, 1, 3, 3, 1, 1, 3
2, 2, 1, 1, 2, 1, 2, 2, 2, 2
End of example.
train input:
0, 0, 0, 0, 0, 0, 3, 1, 1, 3
0, 0, 3, 1, 0, 1, 1, 0, 0, 3
0, 1, 0, 0, 1, 3, 3, 1, 3, 1
0, 1, 3, 0, 0, 0, 0, 0, 1, 0
0, 1, 3, 1, 0, 1, 0, 3, 0, 1
1, 0, 0, 3, 1, 3, 1, 0, 1, 0
1, 0, 0, 3, 0, 1, 0, 3, 0, 0
0, 1, 0, 1, 1, 0, 3, 1, 0, 3
0, 3, 1, 1, 3, 0, 0, 3, 1, 0
1, 1, 3, 3, 0, 0, 1, 3, 0, 3
train output:
2, 2, 2, 2, 2, 2, 3, 1, 1, 3
2, 2, 3, 1, 2, 1, 1, 5, 5, 3
2, 1, 5, 5, 1, 3, 3, 1, 3, 1
2, 1, 3, 5, 5, 5, 5, 5, 1, 2
2, 1, 3, 1, 5, 1, 5, 3, 5, 1
1, 5, 5, 3, 1, 3, 1, 5, 1, 2
1, 5, 5, 3, 5, 1, 5, 3, 2, 2
2, 1, 5, 1, 1, 2, 3, 1, 2, 3
2, 3, 1, 1, 3, 2, 2, 3, 1, 2
1, 1, 3, 3, 2, 2, 1, 3, 2, 3
End of example.
test input:
1, 0, 0, 1, 0, 1, 1, 1, 1, 3
0, 0, 0, 3, 0, 3, 0, 1, 0, 0
0, 1, 0, 3, 3, 0, 1, 3, 3, 3
3, 1, 3, 1, 1, 0, 3, 3, 0, 1
1, 1, 3, 0, 1, 3, 0, 1, 1, 0
0, 3, 0, 1, 3, 0, 1, 1, 0, 3
1, 1, 3, 0, 0, 3, 0, 3, 3, 3
3, 1, 1, 1, 1, 3, 1, 0, 3, 1
3, 0, 0, 0, 3, 3, 1, 0, 1, 1
1, 0, 3, 1, 1, 0, 0, 0, 1, 0
test output:
################################################################

LLM answer:

2, 1, 2, 3, 2, 3, 3, 3, 3, 3
1, 2, 2, 3, 2, 5, 1, 3, 1, 1
2, 1, 1, 1, 5, 3, 2, 2, 2, 3
2, 1, 3, 3, 5, 3, 1, 3, 2, 2
1, 3, 1, 1, 5, 1, 3, 2, 2, 2
1, 1, 1, 3, 5, 5, 3, 1, 1, 3
3, 2, 1, 5, 5, 5, 5, 5, 3, 2
2, 2, 2, 3, 3, 1, 5, 5, 1, 3
3, 3, 1, 2, 2, 1, 1, 5, 5, 1
2, 1, 3, 2, 1, 1, 1, 1, 1, 3
```

## Answer (4)

# Python 3, ~~67~~ 66 bytes

-1 byte thanks to @ovs

```
lambda x:[sum(map(int,x))%3for i in range(len(x))]
```

Try it online!

Comment: `map(int,x)` can be shortened to just `x`.

Comment: @ovs Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 8 bytes

```
Ḷ€Ʋµ⁵S$
```

A monadic Link accepting a list of lists of digits which yields a list of integers.

**Try it online!** Or see the test-suite.

### How?

```
Ḷ€Ʋµ⁵S$ - Main link: list of lists of digits, L
  Ʋ     - over each list:
  €     -   last two links as a dyad f(a,b):
   ⁵    -     modulo 3
      $ - after the last link:
Ḷ       -   length
```

## Answer (3)

# JavaScript (ES6), 59 bytes

Expects an array of arrays of digits. Returns an array of numbers.

```
f=
a=>a.map((_,i)=>(g=v=>v+a[i].reduceRight((r,c)=>r+(c*Math.pow(3,--g)),0))(a.length))
```

Try it online!

--------------------

# JavaScript (ES6), 61 bytes

Expects an array of strings. Returns an array of numbers.

```
f=
a=>a.map((_,i)=>(g=v=>v+a[i].split('').reverse().reduce((r,c)=>r+(c*Math.pow(3,--g)),0))(a.length))
```

Try it online!

## Answer (3)

# Haskell, 64 bytes

```
import Data.List
f l=[sum[read[last c:init c]|c<-l]!!mod n 3|n<-[0..]]
```

Try it online!

## Answer (3)

# CJam, 14 bytes

```
q~{_3%}%{@}%
```

Try it online!

Explanation:

```
q~           e# Read and evaluate the input.
 {          }% E# For each element...
   _         e#   Get its length.
    3%       e#   Modulo 3.
        %    e#   Push the result onto the stack.
            @ e#   Pop the current element from the stack.
               e# Implicitly print the resulting array.
```

## Answer (3)

# Ruby, 49 bytes

```
->a{a.map{|e|e.size%
################################################################

Solution:
1, 2, 2, 1, 2, 1, 1, 1, 1, 3
2, 2, 2, 3, 2, 3, 5, 1, 2, 2
2, 1, 2, 3, 3, 5, 1, 3, 3, 3
3, 1, 3, 1, 1, 5, 3, 3, 5, 1
1, 1, 3, 5, 1, 3, 5, 1, 1, 2
2, 3, 5, 1, 3, 5, 1, 1, 5, 3
1, 1, 3, 5, 5, 3, 5, 3, 3, 3
3, 1, 1, 1, 1, 3, 1, 2, 3, 1
3, 2, 2, 2, 3, 3, 1, 2, 1, 1
1, 2, 3, 1, 1, 2, 2, 2, 1, 2

