LLM prompt:
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0
0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0
0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 4, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0
0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0
0, 4, 4, 4, 4, 4, 0, 0, 0, 3, 4, 0, 0
0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 4, 1, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 2, 0
0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0
0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0
0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 4, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 3, 3, 4, 3, 0, 0, 0, 2, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 4, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 3, 3, 4, 3, 0, 0, 0, 2, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 3, 3, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0
0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0
0, 1, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0
0, 1, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0
0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0
0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 4, 4, 4, 1, 0, 0, 0, 0, 0, 0
0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0
0, 0, 4, 0, 4, 3, 0, 0, 0, 0, 4, 0, 4, 0, 0
0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 4, 4, 2, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 4, 4, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0
0, 4, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0
0, 2, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0
0, 0, 4, 0, 4, 3, 0, 0, 0, 0, 4, 0, 4, 0, 0
0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 4, 4, 2, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 4, 4, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0
0, 4, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0
0, 2, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of test.
```

## Answer (5)

# Python 3, ~~67~~ 66 bytes

```
lambda x:[sum(map(int,i))for i in zip(*x)]
```

Try it online!

Comment: [66](https -1 for `zip`)

Comment: @JonathanAllan Thanks :)

## Answer (4)

# Jelly, 8 bytes

```
Ḷ€ƇṚ⁾S$
```

A monadic Link accepting a list of lists which yields a list of integers.

**Try it online!** Or see the test-suite.

### How?

```
Ḷ€ƇṚ⁾S$ - Main link: list of lists of digits
Ḷ        -    split each into chunks of length 2
 €        map over each chunk:
  Ƈ       keep those that...
    ⁾S$ ...satisfy the following predicate:
      $   last two links as a dyadic chain:
     S    sum
      Ṛ   reverse
```

## Answer (4)

# JavaScript (ES6), 49 bytes

Expects an array of arrays of numbers. Returns an array of numbers.

```
a=>a.map((_,i)=>(b=a[i])&&b.reduceRight((c,d)=>c+d,0))
```

Try it online!

### Commented

```
a =>                 // a[] = input array of arrays of numbers
a.map(              // for each row r[] of a[]:
  (_i,               //   _i is
################################################################

Solution:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0
0, 0, 4, 0, 4, 3, 0, 0, 0, 0, 4, 0, 4, 3, 0
0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 4, 4, 2, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0
1, 4, 4, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0
3, 4, 0, 4, 0, 0, 0, 3, 4, 0, 4, 0, 0, 0, 0
0, 2, 4, 4, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0
0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

