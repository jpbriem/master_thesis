LLM prompt:
train input:
1, 4, 8, 8, 8, 8, 8, 8, 8, 8
3, 2, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 0, 0, 0, 0, 1, 0, 0, 0
8, 8, 0, 1, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 1, 0, 1
8, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 1, 0, 0, 1, 0, 0
8, 8, 0, 0, 0, 0, 0, 1, 0, 0
8, 8, 0, 1, 0, 0, 1, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 0, 0, 1
train output:
1, 4, 8, 8, 8, 8, 8, 8, 8, 8
3, 2, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 0, 0, 0, 0, 4, 0, 0, 0
8, 8, 0, 1, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 4, 0, 4
8, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 0, 0, 3, 0, 0, 2, 0, 0
8, 8, 0, 0, 0, 0, 0, 2, 0, 0
8, 8, 0, 3, 0, 0, 2, 0, 0, 0
8, 8, 0, 0, 0, 0, 0, 0, 0, 2
End of example.
train input:
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 6
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 2
0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 8
0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 8
0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 8, 8
0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 8, 8
train output:
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 6
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 2
0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 8, 8
0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
4, 0, 0, 0, 0, 0, 6, 6, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 8, 8
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 8, 8
End of example.
test input:
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 8, 8
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 1
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 4
test output:
################################################################

LLM answer:

0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 8, 8
1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 8
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 1
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 4
End of example.
```

## Answer (5)

# Python 3, ~~90~~ 89 bytes

```
lambda x:[sum(map(int,i))for i in zip(*x)]
```

Try it online!

Comment: [89 bytes](https://tio.run/##K6gsycjPM/r/PzEwMTEyNDAwMDAwMAA)

Comment: @JonathanAllan Thanks for the tip :)

## Answer (4)

# Jelly, 10 bytes

```
Ḷ€ƊS⁵ịṪẎ
```

Try it online!

### How it works

```
Ḷ€ƊS⁵ịṪẎ  Main link. Argument: A (list of lists)

Ḷ          Yield a list containing all possible indices into A.
 €         For each index I:
   Ɗ       Map over the rows of A:
   S      Sum
    ⁵      To base 5
       Ṫ  Take the last element of this list
       Ẏ  And yield its transpose
```

## Answer (4)

# JavaScript (ES6), 51 bytes

Expects an array of arrays as input and returns an array of integers.

```
a=>a.map((_,i)=>(b=a[i].reduce((c,e)=>c+e,0)),b)
```

Try it online!

--------------------

# JavaScript (ES6), 53 bytes

Expects an array of strings as input and returns an array of integers.

```
a=>a.map((_,i)=>(b=a[i].split('').reduce((c,e)=>c+parseInt(e),0)),b)
```

Try
################################################################

Solution:
0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 8, 8
3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 8
0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
7, 0, 0, 0, 0, 7, 0, 0, 4, 0, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 4, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 8, 8
0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 1
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 4

