LLM prompt:
train input:
4, 4, 8
6, 4, 3
6, 3, 0
train output:
4, 4, 4
4, 4, 4
4, 4, 4
End of example.
train input:
6, 8, 9
1, 8, 1
9, 4, 9
train output:
9, 9, 9
9, 9, 9
9, 9, 9
End of example.
train input:
4, 6, 9
6, 4, 1
8, 8, 6
train output:
6, 6, 6
6, 6, 6
6, 6, 6
End of example.
test input:
8, 8, 6
4, 6, 9
8, 3, 0
test output:
################################################################

LLM answer:

6, 6, 6
6, 6, 6
6, 6, 6
End of example.
```

## Answer (2)

# Python 3, ~~75~~ 74 bytes

-1 byte thanks to @ovs

```
lambda a,b,c:[max(a,b,c),min(a,b,c)]*3
```

Try it online!

Comment: `lambda a,b,c:[max(a,b,c),min(a,b,c)]*3` saves one byte.

Comment: @ovs Thanks for the tip :)

## Answer (2)

# Jelly, 10 bytes

```
Ḷ⁼€;ṚẎỤƊ
```

A monadic Link accepting a list of three integers which yields a list of three lists of integers.

**Try it online!** Or see the test suite.

### How?

```
Ḷ⁼€;ṚẎỤƊ - Link: list of three integers, A = [a, b, c]
Ḷ        - length                    e.g. [3, 3, 3]
   €     - for each in the chain:   e.g. [[3], [3], [3]]
  ⁼      - equal?                   e.g. [[True, True, True]]
      Ṛ   - reverse                  e.g. [[False, False, False]]
        Ẏ - flatten                  e.g. [False, False, False]
         Ɗ - main link:               e.g. [False, False, False]
        Ụ  - untruthify               e.g. [True, True, True]
```

## Answer (2)

# JavaScript (ES6), 49 bytes

```
f=(a,b,c)=>([...Array(3)].map(_=>Math.max(a,b,c)),[...Array(3)].map(_=>Math.min(a,b,c)))
```

## Answer (2)

# CJam, 12 bytes

```
{_3\mM}%3$*
```

Try it online!

## Explanation

```
{            }%  For each line in STDIN:
 _           m  Get the maximum value
   3\        M  Get the minimum value
      $      * Duplicate and repeat 3 times
```

## Answer (2)

# Haskell, 36 bytes

```
f x=zipWith max x++zipWith min x
```

Try it online!

## Answer (2)

# Pyth, 10 bytes

```
hQ+Z3Q3Q
```

Test Suite

## Answer (2)

# Ruby, 31 bytes

```
->x{[[*x].max(3),[*x].min(3)*3]}
```

Try it online!

## Answer (2)

# R, 39 bytes

```
function(x)(t(x)[,1]+t(x)[,2])*3
```

Try it online!

## Answer (2)

# Perl 5, 31 + 1 (-p flag) = 32 bytes

```
say map{$_=$_[0]>=$_[1]>=$_[2]?$_[0]:($_[1]>$_[2]?$_[1]:$_[2])}@F
```

Try it online!

## Answer (2)

# Java 8, ~~100~~ 99 bytes

```
int[][]f(int[]a){return new int[][]{new int[]{Math.max(a[0],Math.max(a[1],a[2]))},new int[]{Math.min(a[0],Math.min(a[1],a[2]))}};}
```

Try it here.

**Explanation:**

```
int[][]f(int[]a){              // Method with integer array as parameter and integer matrix as return-type

################################################################

Solution:
8, 8, 8
8, 8, 8
8, 8, 8

