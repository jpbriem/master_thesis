LLM prompt:
train input:
0, 0, 5, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 5, 0, 0, 0, 0, 5, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 5
0, 0, 0, 0, 0, 5, 0, 0, 0, 0
5, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 5
8, 8, 8, 8, 8, 8, 8, 8, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 5, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 5, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 5, 0, 0, 0
5, 0, 0, 0, 0, 0, 0, 5, 0, 0
0, 5, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
5, 5, 5, 0, 0, 5, 5, 0, 0, 5
8, 8, 8, 8, 8, 8, 8, 8, 8, 8
5, 5, 5, 5, 0, 0, 5, 5, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1
1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 0, 0, 0
0, 0, 1, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0
train output:
0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 1, 8, 1, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 2, 0, 0, 2, 0, 0, 0, 0
2, 0, 0, 0, 2, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
2, 0, 0, 0, 0, 0, 0, 0, 0, 2
0, 0, 2, 0, 0, 0, 0, 0, 0, 0
2, 0, 0, 0, 2, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 8, 0, 0, 8, 8, 8, 8, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 2
2, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 2, 0, 2, 0
0, 0, 0, 2, 0, 0, 0, 0, 0, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
2, 0, 2, 0, 0, 2, 0, 0, 0, 0
8, 8, 8, 0, 0, 8, 8, 8, 8, 0
2, 0, 0, 0, 0, 0, 2, 0, 2, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 3, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3
3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 3, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 3, 0, 0, 0, 0, 3
test output:
################################################################

LLM answer:

0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 3, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3
3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 3, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 3, 0, 0, 0, 0, 3
End of test.
```

## Answer (4)

# Python 3, ~~67~~ 66 bytes

```
lambda x:[sum(map(int,i))for i in zip(*x)]
```

Try it online!

Comment: [66](https https://tio.run/##K6gsycjPM/r/PzEwMTEyNDAwMDAwMAA=)

Comment: @JonathanAllan Thanks for the tip! I've been using `zip()` wrong all this time...

## Answer (3)

# Jelly, 9 bytes

```
Ḷ€ƇṪ⁵ịẋỤ
```

Try it online!

### How it works

```
Ḷ€ƇṪ⁵ịẋỤ - Main link. Takes a list on the left and yields a list on the right
Ḷ          - Transpose the argument
 €         -  For each row:
  Ƈ        -  Keep only those rows that satisfy the following condition:
   Ṫ       -  Take the last element of the row
    ⁵      -  Is equal to 1?
     ị     -  Index into the transposed matrix at that position
      ẋ     -  Repeat that many times
       Ụ    Convert from base 2 to decimal
```

## Answer (3)

# JavaScript (ES6), 53 bytes

Expects an array of arrays as input. Returns an array of integers.

```
a=>a.map((_,i)=>(b=[],a.forEach(_=>b+=+_&1<<i),b))
```

Try it online!

## Answer (3)

# C++, 100 bytes

```
[](auto&a){for(int i=0;i<a.size();i++)for(int j=0;j<a[0].size();j++){if(a[i][j]==1)a[i]+=1<<j;}return a;}
```

Try it online!

## Answer (3)

# Haskell, 54 bytes

```
f l=(map sum$transpose$filter(\x->last x==1)$l)
```

Try it online!

## Answer (3)

# R, ~~54~~ 5
################################################################

Solution:
0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 3, 8, 3, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0

