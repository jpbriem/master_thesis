Input token: 1986
Output token: 1026
################################################################

LLM prompt:
train input:
[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
train output:
[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 8, 0, 0, 0, 0, 0, 0, 0, 8, 1]]

train input:
[[0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7]]
train output:
[[0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 7], [7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 7, 3, 7, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 3, 0, 0, 0, 0, 7, 0, 0, 0, 7]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0]]
train output:
[[2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1]]

test input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

test output:
[[6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6], [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3.8 (pre-release), ~~95~~ 94 bytes

```
lambda x:[sum(map(int,x))for i in range(len(x))if sum(i)>0]
```

Try it online!

Comment: You can save a byte by using `range(len(x))`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 11 bytes

```
Ḷ€Ɗ⁼ịṪẎỤḢ
```

A monadic Link accepting a list of lists and yielding a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€Ɗ⁼ịṪẎỤḢ - Link: list of lists
Ḷ€         - length of each row                    [1,1,1,1,1,1,1,1,1,1,1]
  Ɗ        - last two links as a dyadic chain     [1,1,1,1,1,1,1,1,1,1,1]
   ⁼       - equals?                              [[True, True, True, True, True, True, True, True, True, True, True],...]
     Ṫ     - tail                                  [[False, False, False, False, False, False, False, False, False, False, False],...]
      Ẏ    - flatten                               [False, False, False, False, False, False, False, False, False, False, False,...]
       Ụ   - unary negate                          [True, True, True, True, True, True, True, True, True, True, True,...]
        Ḣ  - head                                  [True]
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays. Returns an array of booleans.

```
a=>a.some((r,y)=>(r=r.filter(_=>_)).length&&r.every((_,x)=>r[x]))
```

Try it online!

### Commented

```
a =>                 // given an array of arrays:
a.some(             // check if any subarray satisfies:
  (r, y) = >        //   r is the current subarray;
  (r = r.filter(_ => _)) //   remove all zeroes from r;
  && r.every((_, x) => r[x]) //   every element of r is equal to its index
)
```

## Answer (3)

# Haskell, ~~67~~ 66 bytes

```
f l=[n|n<-l,all(\c->c==n)l]
```

Try it online!

Thanks to Laikoni for saving one byte.

Comment: Welcome to Code Golf! Nice first post :)

Comment: You can save a byte with `n<-l` instead of `n<-zipWith(==)l l`.

Comment: @Laikoni thanks, that was a silly mistake on my part.

## Answer (3)

# R, ~~67~~ 66 bytes

```
function(m){any
################################################################

Solution:
[[6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 7], [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 6], [6, 0, 0, 0, 6, 0, 7, 0, 0, 0, 6], [0, 7, 0, 7, 0, 0, 0, 0, 0, 6, 7], [6, 0, 0, 6, 0, 0, 7, 0, 0, 0, 0]]

