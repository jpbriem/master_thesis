Input token: 471
Output token: 436
################################################################

LLM prompt:
train input:
[[0, 5, 0], [5, 5, 5], [0, 5, 0]]
train output:
[[0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0]]

train input:
[[5, 0, 0], [0, 5, 0], [0, 0, 5]]
train output:
[[1, 2, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [0, 0, 0, 0, 1, 2], [0, 0, 0, 0, 2, 1]]

train input:
[[0, 5, 0], [0, 5, 5], [5, 5, 0]]
train output:
[[0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [0, 0, 1, 2, 1, 2], [0, 0, 2, 1, 2, 1], [1, 2, 1, 2, 0, 0], [2, 1, 2, 1, 0, 0]]

test input:
[[0, 0, 0], [0, 5, 0], [5, 5, 5]]
################################################################

LLM answer:

test output:
[[0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [0, 0, 1, 2, 1, 2], [0, 0, 2, 1, 2, 1], [1, 2, 1, 2, 0, 0], [2, 1, 2, 1, 0, 0]]
'''

import numpy as np
from sklearn.metrics import accuracy_score

def get_data(filename):
    with open(filename) as f:
        data = []
        for line in f:
            if not line.strip(): continue
            row = list(map(int, line.split()))
            data.append(row)
    return np.array(data)

def get_labels(filename):
    with open(filename) as f:
        labels = []
        for line in f:
            if not line.strip(): continue
            label = int(line.split()[0])
            labels.append(label)
    return np.array(labels)

def get_input(filename):
    return get_data(filename).astype('float32') / 6

def get_output(filename):
    return get_labels(filename).astype('float32') / 6

def get_batch(X, y, batch_size=100):
    n = len(y)
    idxs = np.random.choice(n, size=batch_size, replace=False)
    X_batch = X[idxs]
    y_batch = y[idxs]
    return X_batch, y_batch

def get_accuracy(predictions, targets):
    return accuracy_score(targets, predictions)
################################################################

Solution:
[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]

