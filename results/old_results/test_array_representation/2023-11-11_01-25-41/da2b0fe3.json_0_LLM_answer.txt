Input token: 2139
Output token: 1026
################################################################

LLM prompt:
train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 0, 0], [0, 5, 0, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 0, 0], [0, 5, 0, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 5, 5, 5, 3, 5, 5, 0, 0, 0], [0, 5, 0, 0, 3, 0, 5, 0, 0, 0], [0, 5, 5, 5, 3, 5, 5, 0, 0, 0], [0, 5, 0, 0, 3, 0, 5, 0, 0, 0], [0, 5, 5, 5, 3, 5, 5, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0]]

test input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

test output:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3.8 (pre-release), ~~79~~ 69 bytes

```
lambda x:[max(x[i])for i in range(len(x))]==[sum(x[i])for i in range(len(x))]
```

Try it online!

Comment: `sum(x[i])` can be replaced with `sum(x[i][j] for j in range(len(x)))`.

Comment: @Arnauld Thanks! I didn't know that was possible.

Comment: You can also use `all()`, which is shorter than the list comprehension.

Comment: @Arnauld Oh yeah, thanks again!

## Answer (3)

# Jelly, 10 bytes

```
Ḷ€Ƈ⁵ṚẎỤḢ
```

A monadic Link accepting a list of lists and returning a boolean.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€Ƈ⁵ṚẎỤḢ - Link: list of lists
Ḷ€        - length of each row                    [1,1,1,1,1,1,1,1,1,1]
  ⁵       - five                                [1,1,1,1,1]
    Ṛ      - reverse                            [1,1,1,1,1]
   Ƈ      - filter keep those where:           [[1,1,1,1,1],[1,1,1,1,1]]
        Ẏ  - flatten                             [1,1,1,1,1,1,1,1,1,1]
         Ụ - uniques                             [1,1,1,1,1,1,1,1,1,1]
         Ḣ - head                               1
```

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input. Returns true if all rows are equal, false otherwise.

```
a=>a.every((r,i)=>(r=r.reduce((c,e)=>c+e,0)),r==a[0])
```

Try it online!

--------------------

# JavaScript (ES6), 56 bytes

Expects an array of arrays as input. Returns true if all columns are equal, false otherwise.

```
a=>a.map(r=>r.sort()).every((r,i)=>(r=r.join(''),r==a[0].split('').join('')))
```

Try it online!

## Answer (2)

# Haskell, 54 bytes

```
f l=[l!!0==l!!i|i<-[0..length l-1]]
```

Try it online!

## Answer (2)

# R
################################################################

Solution:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

