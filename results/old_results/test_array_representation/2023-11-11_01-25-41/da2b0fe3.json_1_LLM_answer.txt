Input token: 2139
Output token: 1026
################################################################

LLM prompt:
train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

train input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 0, 0], [0, 5, 0, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 0, 0], [0, 5, 0, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 5, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
train output:
[[0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 5, 5, 5, 3, 5, 5, 0, 0, 0], [0, 5, 0, 0, 3, 0, 5, 0, 0, 0], [0, 5, 5, 5, 3, 5, 5, 0, 0, 0], [0, 5, 0, 0, 3, 0, 5, 0, 0, 0], [0, 5, 5, 5, 3, 5, 5, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0]]

test input:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 6, 6, 0, 6, 6, 0, 0, 0], [0, 0, 6, 6, 0, 6, 6, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

test output:
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 6, 6, 0, 6, 6, 0, 0, 0], [0, 0, 6, 6, 0, 6, 6, 0, 0, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
```

## Answer (4)

# Python 3.8 (pre-release), ~~79~~ 78 bytes

```
lambda x:[sum(map(int,x))for i in range(len(x))if sum(i)>0]
```

Try it online!

Comment: `range(len(x))` can be shortened to just `range(10)`.

Comment: @JonathanAllan Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 10 bytes

```
Ḷ€ƇṪ⁵ịẋS
```

A monadic Link accepting a list of lists which yields a list of lists.

**Try it online!** Or see the test suite.

### How?

```
Ḷ€ƇṪ⁵ịẋS - Main link: list of lists L
Ḷ€      - length of each row -> [10,10,10,10,10,10,10,10,10,10]
  Ƈ     - keep those where:
   Ṫ    -   tail                         -> [[0,0,0,0,0,0,0,0,0,0],...]
    ⁵   -   five times:
      ị -   index into L at that position -> [[0,0,0,0,0,0,0,0,0,0],...]
       ẋ -   repeat that many times     -> [[0,0,0,0,0,0,0,0,0,0],...]
          S - sums -> [[0,0,0,0,0,0,0,0,0,0],...]
```

## Answer (3)

# Haskell, 54 bytes

```
f=filter((>0).sum)[0..9]>>=(\n->replicate n 0)
```

Try it online!

## Answer (3)

# R, ~~54~~ 53 bytes

```
function(m)apply(m,1,function(x)x[x>0])
```

Try it online!

Thanks to Giuseppe for saving one byte.

Comment: You can save a byte by using `x[x>0]` instead of `x*x>0`.

Comment: @Giuseppe thanks, I didn't know about this trick.

## Answer (3)

# JavaScript (ES6), 54 bytes

Expects an array of arrays as input and returns an array of arrays as output.

```
a=>a.map(_=>_.filter(e=>e))
```

Try it online!

--------------------

# JavaScript (ES6), 53 bytes

Expects an array of arrays as input and returns an array of arrays as output.

```
a=>a.map(_=>_.filter(e
################################################################

Solution:
[[0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 6, 3, 6, 0, 0, 0, 0], [0, 0, 6, 6, 3, 6, 6, 0, 0, 0], [0, 0, 6, 6, 3, 6, 6, 0, 0, 0], [0, 0, 0, 6, 3, 6, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0]]

