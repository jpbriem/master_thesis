Input token: 3588
Output token: 1027
################################################################

LLM prompt:
train input:
[[1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]]
train output:
[[1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 8, 8, 8, 1, 1, 8, 1, 1, 0], [1, 1, 8, 8, 1, 1, 8, 1, 1, 8, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 8, 8, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 1, 1]]

train input:
[[1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1]]
train output:
[[1, 1, 1, 8, 8, 1, 1, 1, 8, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 8, 8, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 8, 8, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 8, 1, 1, 1], [1, 8, 8, 1, 1, 1, 0, 1, 1, 8, 8, 1, 1], [1, 8, 8, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 8, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [8, 8, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 8, 1], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 8, 8, 1]]

train input:
[[1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1]]
train output:
[[1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 8, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 1, 1], [8, 1, 8, 8, 8, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 0, 1, 8], [0, 1, 1, 1, 1, 1, 1, 8, 8, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 8, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 8, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1]]

test input:
[[1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1]]
################################################################

LLM answer:

test output:
[[1, 1, 1, 8, 8, 1, 1, 1, 8, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 8, 8, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 8, 8, 1, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 8, 1, 1, 1], [1, 8, 8, 1, 1, 1, 0, 1, 1, 8, 8, 1, 1], [1, 8, 8, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 8, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [8, 8, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 8, 1], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 8, 8, 1]]
```

## Answer (2)

# Python 3.6, 45 bytes

```
lambda x:[sum(x[i])for i in range(len(x))]
```

Try it online!

Comment: I think you can save a byte by using `range(len(x))`.

Comment: @JonathanAllan Thanks for the suggestion!

## Answer (2)

# Jelly, ~~7~~ 6 bytes

```
Ḷ⁼ƇṪ€S
```

A monadic Link accepting a list of lists which yields a list of integers.

**Try it online!** or see the test-suite.

### How?

```
Ḷ⁼ƇṪ€S - Main link: list of lists L
Ḷ       - length of each row
  Ƈ     - keep those that:
 ⁼      -   are equal to...
   Ṫ€   -   the last element of each column
      S - sum
```

--------------------

## Answer (2)

# Haskell, 49 bytes

```
f l=[sum[l!!j|j<-[0..length l-1],l!!j==maximum l]|_<-l]
```

Try it online!

## Answer (2)

# JavaScript (ES6), 44 bytes

Expects an array of arrays as input and returns an array of numbers.

```
a=>a.map((r,y)=>(g=v=>v&&g(r.filter(_=>r[_]=v)))(!~r.findIndex(e=>e!=r[0]))+r.reduce((c,e)=>c+=e,0))
```

Try it online!

### Commented

```
a =>                        // a[] = input array of arrays
a.map((r, y) =>             // for each row r[] at position y:
  (g = v =>                //   g is a recursive function taking:
    v &&                   //     if v is truthy:
   
################################################################

Solution:
[[1, 1, 1, 8, 8, 1, 1, 1, 1, 1, 8, 8, 1], [0, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 8, 8], [1, 1, 8, 8, 8, 1, 1, 0, 1, 1, 0, 1, 8], [0, 1, 1, 8, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 8, 1, 0, 1, 1, 8, 1, 1, 1, 0, 1, 8], [1, 8, 8, 1, 0, 1, 8, 1, 1, 1, 1, 1, 8], [1, 8, 1, 0, 1, 1, 1, 1, 8, 8, 8, 1, 8], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 8, 1, 8], [1, 0, 1, 8, 8, 1, 1, 1, 1, 8, 8, 1, 1], [0, 1, 1, 8, 1, 1, 1, 1, 0, 1, 8, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 8, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1]]

