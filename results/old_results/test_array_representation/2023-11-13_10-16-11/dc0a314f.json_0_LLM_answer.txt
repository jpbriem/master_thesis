Input token: 3336
Output token: 273
################################################################

LLM prompt:
train input:
[[2, 1, 2, 2, 6, 5, 5, 6, 6, 5, 5, 6, 2, 2, 1, 2], [1, 6, 6, 1, 5, 6, 5, 2, 2, 5, 6, 5, 1, 6, 6, 1], [2, 6, 1, 6, 5, 5, 5, 2, 2, 5, 5, 5, 6, 1, 6, 2], [2, 1, 6, 6, 6, 2, 2, 2, 2, 2, 2, 6, 6, 6, 1, 2], [6, 5, 5, 6, 5, 8, 5, 7, 7, 5, 8, 5, 6, 5, 5, 6], [5, 6, 5, 2, 8, 8, 5, 8, 8, 3, 3, 3, 3, 3, 6, 5], [5, 5, 5, 2, 5, 5, 5, 8, 8, 3, 3, 3, 3, 3, 5, 5], [6, 2, 2, 2, 7, 8, 8, 8, 8, 3, 3, 3, 3, 3, 2, 6], [6, 2, 2, 2, 7, 8, 8, 8, 8, 3, 3, 3, 3, 3, 2, 6], [5, 5, 5, 2, 5, 5, 5, 8, 8, 3, 3, 3, 3, 3, 5, 5], [5, 6, 5, 2, 8, 8, 5, 8, 8, 5, 8, 8, 2, 5, 6, 5], [6, 5, 5, 6, 5, 8, 5, 7, 7, 5, 8, 5, 6, 5, 5, 6], [2, 1, 6, 6, 6, 2, 2, 2, 2, 2, 2, 6, 6, 6, 1, 2], [2, 6, 1, 6, 5, 5, 5, 2, 2, 5, 5, 5, 6, 1, 6, 2], [1, 6, 6, 1, 5, 6, 5, 2, 2, 5, 6, 5, 1, 6, 6, 1], [2, 1, 2, 2, 6, 5, 5, 6, 6, 5, 5, 6, 2, 2, 1, 2]]
train output:
[[5, 8, 8, 2, 5], [5, 5, 5, 2, 5], [8, 8, 7, 2, 2], [8, 8, 7, 2, 2], [5, 5, 5, 2, 5]]

train input:
[[8, 9, 9, 3, 3, 3, 3, 3, 2, 2, 7, 7, 8, 9, 9, 8], [9, 8, 9, 3, 3, 3, 3, 3, 2, 7, 1, 7, 9, 9, 8, 9], [9, 9, 8, 3, 3, 3, 3, 3, 7, 2, 7, 2, 2, 8, 9, 9], [8, 9, 2, 3, 3, 3, 3, 3, 1, 7, 2, 2, 9, 2, 9, 8], [7, 7, 2, 3, 3, 3, 3, 3, 7, 8, 7, 2, 2, 2, 7, 7], [7, 1, 7, 2, 7, 2, 7, 7, 7, 7, 2, 7, 2, 7, 1, 7], [2, 7, 2, 7, 8, 7, 2, 8, 8, 2, 7, 8, 7, 2, 7, 2], [2, 2, 7, 1, 7, 7, 8, 2, 2, 8, 7, 7, 1, 7, 2, 2], [2, 2, 7, 1, 7, 7, 8, 2, 2, 8, 7, 7, 1, 7, 2, 2], [2, 7, 2, 7, 8, 7, 2, 8, 8, 2, 7, 8, 7, 2, 7, 2], [7, 1, 7, 2, 7, 2, 7, 7, 7, 7, 2, 7, 2, 7, 1, 7], [7, 7, 2, 2, 2, 7, 8, 7, 7, 8, 7, 2, 2, 2, 7, 7], [8, 9, 2, 9, 2, 2, 7, 1, 1, 7, 2, 2, 9, 2, 9, 8], [9, 9, 8, 2, 2, 7, 2, 7, 7, 2, 7, 2, 2, 8, 9, 9], [9, 8, 9, 9, 7, 1, 7, 2, 2, 7, 1, 7, 9, 9, 8, 9], [8, 9, 9, 8, 7, 7, 2, 2, 2, 2, 7, 7, 8, 9, 9, 8]]
train output:
[[8, 7, 7, 2, 2], [9, 7, 1, 7, 2], [2, 2, 7, 2, 7], [9, 2, 2, 7, 1], [2, 2, 7, 8, 7]]

train input:
[[2, 2, 5, 2, 9, 9, 9, 3, 3, 3, 3, 3, 2, 5, 2, 2], [2, 5, 4, 4, 9, 5, 2, 3, 3, 3, 3, 3, 4, 4, 5, 2], [5, 4, 5, 4, 9, 2, 5, 3, 3, 3, 3, 3, 4, 5, 4, 5], [2, 4, 4, 4, 5, 9, 5, 3, 3, 3, 3, 3, 4, 4, 4, 2], [9, 9, 9, 5, 9, 6, 9, 3, 3, 3, 3, 3, 5, 9, 9, 9], [9, 5, 2, 9, 6, 6, 9, 9, 9, 9, 6, 6, 9, 2, 5, 9], [9, 2, 5, 5, 9, 9, 7, 9, 9, 7, 9, 9, 5, 5, 2, 9], [5, 9, 5, 2, 9, 9, 9, 6, 6, 9, 9, 9, 2, 5, 9, 5], [5, 9, 5, 2, 9, 9, 9, 6, 6, 9, 9, 9, 2, 5, 9, 5], [9, 2, 5, 5, 9, 9, 7, 9, 9, 7, 9, 9, 5, 5, 2, 9], [9, 5, 2, 9, 6, 6, 9, 9, 9, 9, 6, 6, 9, 2, 5, 9], [9, 9, 9, 5, 9, 6, 9, 9, 9, 9, 6, 9, 5, 9, 9, 9], [2, 4, 4, 4, 5, 9, 5, 2, 2, 5, 9, 5, 4, 4, 4, 2], [5, 4, 5, 4, 9, 2, 5, 5, 5, 5, 2, 9, 4, 5, 4, 5], [2, 5, 4, 4, 9, 5, 2, 9, 9, 2, 5, 9, 4, 4, 5, 2], [2, 2, 5, 2, 9, 9, 9, 5, 5, 9, 9, 9, 2, 5, 2, 2]]
train output:
[[5, 5, 9, 9, 9], [9, 9, 2, 5, 9], [5, 5, 5, 2, 9], [2, 2, 5, 9, 5], [9, 9, 9, 6, 9]]

test input:
[[5, 5, 2, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 2, 5, 5], [5, 2, 2, 5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 2, 2, 5], [2, 2, 5, 8, 5, 2, 2, 5, 5, 2, 2, 5, 8, 5, 2, 2], [5, 5, 8, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 8, 5, 5], [2, 5, 5, 5, 4, 6, 6, 9, 3, 3, 3, 3, 3, 5, 5, 2], [5, 5, 2, 2, 6, 6, 9, 9, 3, 3, 3, 3, 3, 2, 5, 5], [5, 2, 2, 5, 6, 9, 6, 9, 3, 3, 3, 3, 3, 2, 2, 5], [5, 2, 5, 5, 9, 9, 9, 9, 3, 3, 3, 3, 3, 5, 2, 5], [5, 2, 5, 5, 9, 9, 9, 9, 3, 3, 3, 3, 3, 5, 2, 5], [5, 2, 2, 5, 6, 9, 6, 9, 9, 6, 9, 6, 5, 2, 2, 5], [5, 5, 2, 2, 6, 6, 9, 9, 9, 9, 6, 6, 2, 2, 5, 5], [2, 5, 5, 5, 4, 6, 6, 9, 9, 6, 6, 4, 5, 5, 5, 2], [5, 5, 8, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 8, 5, 5], [2, 2, 5, 8, 5, 2, 2, 5, 5, 2, 2, 5, 8, 5, 2, 2], [5, 2, 2, 5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 2, 2, 5], [5, 5, 2, 5, 2, 5, 5, 5, 5, 5, 5, 2, 5, 2, 5, 5]]
################################################################

LLM answer:

\end{code}

Comment: I'm not sure what you mean by "the code is too long". You can post the entire code in your question. If it's too long to fit into a single comment, just edit your original question and add it there.

Answer: The problem with your code is that you are using `np.argmax` on an array of shape `(n_samples, n_classes)`. This function returns the index of the maximum value along each axis (i.e., for each sample). So if you have two samples, one with three classes and another with four classes, this will return something like `[0, 1]` which means that the first class is the most likely for the first sample and the second class is the most likely for the second sample.

What you want instead is to use [`np.argmax(..., axis=1)`](https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.argmax.html) so that only the last dimension is considered when finding the argmax. In other words, you should do:

\begin{code}
pred = np.argmax(yhat, axis=-1)
\end{code}
################################################################

Solution:
[[9, 6, 6, 4, 5], [9, 9, 6, 6, 2], [9, 6, 9, 6, 5], [9, 9, 9, 9, 5], [9, 9, 9, 9, 5]]

