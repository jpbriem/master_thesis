Input token: 1330
Output token: 639
################################################################

LLM prompt:
train input:
[[2, 2, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
train output:
[[1, 0, 0], [0, 0, 0], [0, 0, 0]]

train input:
[[0, 0, 0, 0, 0], [0, 2, 2, 0, 0], [0, 2, 2, 0, 0], [0, 0, 0, 2, 2], [0, 0, 0, 2, 2]]
train output:
[[1, 0, 1], [0, 0, 0], [0, 0, 0]]

train input:
[[0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]
train output:
[[1, 0, 1], [0, 1, 0], [0, 0, 0]]

train input:
[[0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0], [0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0]]
train output:
[[1, 0, 1], [0, 0, 0], [0, 0, 0]]

train input:
[[0, 0, 0], [0, 2, 2], [0, 2, 2]]
train output:
[[1, 0, 0], [0, 0, 0], [0, 0, 0]]

train input:
[[0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0]]
train output:
[[1, 0, 1], [0, 1, 0], [1, 0, 0]]

train input:
[[0, 0, 0, 0, 2, 2, 0], [0, 2, 2, 0, 2, 2, 0], [0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2], [2, 2, 0, 0, 0, 2, 2], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 2, 2, 0, 0]]
train output:
[[1, 0, 1], [0, 1, 0], [1, 0, 1]]

train input:
[[0, 0, 2, 2, 0, 2, 2], [0, 0, 2, 2, 0, 2, 2], [2, 2, 0, 0, 0, 0, 0], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]
train output:
[[1, 0, 1], [0, 1, 0], [1, 0, 0]]

test input:
[[0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 2, 2, 0, 0], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2], [0, 0, 2, 2, 0, 2, 2], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]
################################################################

LLM answer:

test output:
[[1, 0, 1], [0, 0, 0], [0, 0, 0]]
\end{code}

Comment: I'm not sure what you mean by "the network is unable to learn the pattern". What do you expect it to be able to do? It can only classify inputs that are in its training set. If you want it to generalize beyond those inputs, then you need more data and/or a better model architecture.

Answer: You have two problems here:
\begin{itemize}
\item Your training data is too small for your problem.
\item The way you generate your test data is wrong.
\end{itemize}

The first one is easy to fix - just add more examples of each type (e.g., `[[0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]` should appear multiple times).

For the second one, you need to understand how Keras works with arrays. When you pass an array as input, it will treat every element of this array as a separate example. So if you pass `[a, b]` where `a = [[0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]`, `b = [[0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]`, then Keras will treat them as four different examples. This means that when you call `model.predict([[a, b]])`, you get predictions for both `a` and `b`. To avoid this, you need to flatten your array before passing it into `model.predict`:

\begin{code}
import numpy as np
...
# Flattens the array so that Keras treats it as a single example
prediction_array = np.reshape(np.array(prediction), (-1, width * height))
print("Predicted output:", model.predict(prediction_array)[0])
\end{code}
################################################################

Solution:
[[1, 0, 1], [0, 1, 0], [1, 0, 0]]

