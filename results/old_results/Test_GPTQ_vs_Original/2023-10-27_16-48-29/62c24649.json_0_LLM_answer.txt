LLM prompt:
train input:
3, 3, 3
0, 2, 2
1, 1, 0
train output:
3, 3, 3, 3, 3, 3
0, 2, 2, 2, 2, 0
1, 1, 0, 0, 1, 1
1, 1, 0, 0, 1, 1
0, 2, 2, 2, 2, 0
3, 3, 3, 3, 3, 3
End of example.
train input:
3, 3, 1
1, 3, 0
0, 2, 2
train output:
3, 3, 1, 1, 3, 3
1, 3, 0, 0, 3, 1
0, 2, 2, 2, 2, 0
0, 2, 2, 2, 2, 0
1, 3, 0, 0, 3, 1
3, 3, 1, 1, 3, 3
End of example.
train input:
2, 1, 0
0, 2, 3
0, 3, 0
train output:
2, 1, 0, 0, 1, 2
0, 2, 3, 3, 2, 0
0, 3, 0, 0, 3, 0
0, 3, 0, 0, 3, 0
0, 2, 3, 3, 2, 0
2, 1, 0, 0, 1, 2
End of example.
test input:
1, 1, 0
0, 3, 2
3, 3, 0
test output:
################################################################

LLM answer:

1, 1, 0, 0, 1, 1
0, 3, 2, 2, 3, 0
3, 3, 0, 0, 3, 3
3, 3, 0, 0, 3, 3
0, 3, 2, 2, 3, 0
1, 1, 0, 0, 1, 1
End of example.
```

## Answer (4)

# Python 3, ~~56~~ 55 bytes

-1 byte thanks to @xnor

```
lambda x,y,z:[*map(max,(x+y,x+z,y+z))]
```

Try it online!

Comment: `map(max,...)` is shorter than `sorted(...)[::-1]`.

Comment: @xnor Thanks for the tip! I've updated my answer accordingly.

## Answer (3)

# Jelly, 7 bytes

```
ṪƊŒb⁺Ḣ
```

Try it online!

### How?

```
ṪƊŒb⁺Ḣ - Main link. Takes a list of lists on the left and returns a list of lists on the right.
Ṫ      - Last two links as a monad; yield the last element of each.
  ⁺    - Addition chain:
    ⁺   -   Addition: sums the first two arguments.
      Ḣ - Head; yields the first element of the resulting list.
        - Implicit print.
```

## Answer (3)

# Haskell, 39 bytes

```
f x=zipWith max$zipWith(\a b->a+b)$zipWith(\c d->c+d)x
```

Try it online!

## Answer (3)

# JavaScript (ES6), 80 bytes

```
a=>a.map((_,i)=>(a[i]+a[(i+1)%a.length],a[(i+2)%a.length]))
```

Try it online!

### How?

```
a =>                          // a = [a[0],..., a[n]]
  a.map((_, i) =>             // map over indices from 0 to n
    (                         // return tuple of values at index i + 1 and i + 2
      a[i] + a[(i + 1) % a.length],
      a[(i + 2) % a.length]
    )
  )
```

## Answer (2)

# R, 49 bytes

```
\(x)t(apply(matrix(x,c(2,3)),1,sum))
```

Try it online!

## Answer (2)

# CJam, 12 bytes

```
{_,_+}%{_,_+}%
```

Try it online!

## Explanation

```
{_,_+}%{_,_+}%
{            }%  main loop
 _           %  push the current array
 ,_         %  take its second element
   +         %  add the third element
              e.g. [1,2,3] -> [3]
                this is pushed onto the stack
 {_,_+}%     \  inner loop
  _          \  push the current array
  ,_        \  take its second element
    +        \  add the third element
              e.g. [1,2,3] -> [3]
                this is pushed onto the stack
```

## Answer (2)

# Perl 6, 32 bytes

```
{@^a.comb(2).map:{$_[0]+$_[1]}…@^a.comb(3)}
```

Try it online!

## Answer (2)

# Ruby, 42 bytes

```
->a{(a<<a.shift)+a.last}
```

Try it online!

## Answer (2)

# Retina, 30 bytes

```
m`(.)(.)
$1+
################################################################

Solution:
1, 1, 0, 0, 1, 1
0, 3, 2, 2, 3, 0
3, 3, 0, 0, 3, 3
3, 3, 0, 0, 3, 3
0, 3, 2, 2, 3, 0
1, 1, 0, 0, 1, 1

