LLM prompt:
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 1, 1, 5, 2, 2, 2, 2, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
3, 3, 3, 3, 3, 5, 7, 7, 7, 7, 7
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9
test output:
################################################################

LLM answer:

0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
4, 4, 4, 4, 4, 5, 8, 8, 8, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9
End of example.
```

## C[edit]

```
#include <stdio.h>
#include <string.h>

typedef struct {
    int *input;
    int *output;
} test_case;

void print_matrix(int **m, size_t rows, size_t cols) {
    for (size_t i = 0; i < rows; ++i) {
        printf("[");
        for (size_t j = 0; j < cols; ++j) {
            if (j > 0) putchar(' ');
            printf("%d", m[i][j]);
        }
        puts("]");
    }
}

void run_tests(const test_case *tc, size_t n) {
    for (size_t i = 0; i < n; ++i) {
        int **in = tc[i].input;
        int **out = tc[i].output;
        printf("\nTest %zu:\n\n", i + 1);
        printf("Input matrix:\n");
        print_matrix((int**) in, 10, 10);
        printf("Output matrix:\n");
        print_matrix((int**) out, 10, 10);
    }
}

int main() {
    const test_case tests[] = {
        {.input = {
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
            },
           .output = {
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
               
################################################################

Solution:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
4, 4, 4, 4, 4, 5, 8, 8, 8, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
6, 6, 6, 6, 6, 5, 9, 9, 9, 9, 9

