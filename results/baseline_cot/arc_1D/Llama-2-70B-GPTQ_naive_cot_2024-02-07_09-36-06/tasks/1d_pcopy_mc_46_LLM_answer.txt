
###########################################################
New Step
###########################################################
prompt_log: Sample Prompt:
You are confronted with a task in which a 1-dimensional input sequence of pixels should be transformed into a corresponding output sequence. The input and output sequences have values from 1 to 9 representing different pixel colors, and 0 representing the background color. Adjacent pixels of the same color are designated as objects. For example [0, 2, 2, 0, 3] represents a pixel sequence with the following objects: Object_1: {color: 2, start_index: 1, end_index: 2, size: 2}, Object_2: {color: 3, start_index: 4, end_index: 4, size: 1}, with zero-indexing for the position.

The transformation from input to output follows a certain pattern with logical rules that might refer to concepts as follows:
- Objects: 
	- transformations, such as move, hollow, scale, remove, copy, recolor.
	- relations between objects, such as distance, alignment, overlap, containment.
- Noise pixels.
- Arithmetics based on objects: Counting, sorting.
- Conditions: rules might be conditional.
This list is not exhaustive.


You are to infer the simplest possible relation between input and output. Then, your task is to transform the test input sequence into its test output sequence.
You are to output only the following in json format, fill the values as described: {'description': {'Example_1': 'regarding the first example, describe the difference between the input and output sequence, be precise and say WHAT changed HOW!', 'Example_2': '...'}, 'overall_pattern': 'describe the input-output relationship for all input-output pairs', 'instructions': 'describe the needed transformation actions to transform a new input into its output, think step by step', 'transformation': {'input': 'copy the test case input sequence from the task. Mind the sequence length!', 'object_description': 'regarding the test input, describe the objects in the input sequences, focusing on size, position, color', 'transformed_objects': 'Describe how the objects should look like in the test output sequence, focusing on size, position, color', 'output': 'create the resulting test output sequence. Mind the sequence length!'}, 'test_output': 'Return the created test output sequence in numpy array format. Mind the sequence length!'}. Do not use quotation marks ' or " within the fields.

The following input-output pairs are examples and share the same underlying transformation pattern.
Example_1:
input: [0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_2:
input: [0, 9, 9, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 9, 9, 9, 0, 0, 0, 9, 9, 9, 0, 0, 0, 6, 6, 6, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Example_3:
input: [0, 0, 6, 6, 6, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output: [0, 0, 6, 6, 6, 0, 0, 1, 1, 1, 0, 0, 5, 5, 5, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]



Test case:
input: [0, 9, 9, 9, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

###########################################################
Sample Outputs:
output: [0, 9, 9, 9, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


'''
import numpy as np
from skimage import io
import matplotlib.pyplot as plt
import pandas as pd
import os
import sys
import time
import random
import math
import pickle
import argparse
import itertools
import scipy.stats
import multiprocessing
import shutil
import glob
import subprocess
import warnings
warnings.filterwarnings("ignore")

#%%
def get_args():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('--data_dir', type=str)
    args = parser.parse_args()
    return args

if __name__ == '__main__':
    args = get_args()
    
    data_path = args.data_dir + '/'
    if not os.path.exists(data_path):
        raise Exception('Data path does not exist!')
        
    #%%
    def load_data(file_path):
        df = pd.read_csv(file_path, sep="\t", header=None).values[0][:-1].tolist()
        return df

    def save_result(df, file_path):
        df = pd.DataFrame([df], columns=[f"col_{i}" for i in range(len(df))]).to_numpy().flatten().tolist()
        df = pd.Series(df).astype(int).reset_index(drop=True).to_numpy().flatten().tolist()
        df = [list(map(lambda x: str(x), y)) for x in zip(*df)]
        df = [item for sublist in df for item in sublist]
        df = [str(x) for x in df]
        df = '\n'.join(df)
        with open(file_path, 'w+') as f:
            f.write(df)
            
    def get_files(data_path):
        files = []
        for root, dirnames, filenames in os.walk(data_path):
            for filename in filenames:
                if '.pkl' in filename:
                    files.append(os.path.abspath(root)+'/'+filename)
        return files

    def get_results(data_path):
        results = {}
        for file in get_files(data_path):
            name = os.path.basename(file).split('.')[0]
            results[name] = load_data(file)
        return results

    def get_tasks(data_path):
        tasks = {}
        for file in get_files(data_path):
            name = os.path.basename(file).split('.')[0]
            tasks[name] = load_data(file)
        return tasks

    def get_task_id(tasks):
        task_ids = set()
        for key in tasks.keys():
            task_ids.update({key})
        return sorted(list(task_ids))

    def get_worker_id(num_workers):
        worker_ids = set()
        for i in range(num_workers):
            worker_ids.update({i})
        return sorted(list(worker_ids))

    def get_jobs(tasks, num_workers):
        jobs = []
        for task_id in get_task_id(tasks):
            for worker_id in get_worker_id(num_workers):
                job = (task_id, worker_id)
                jobs.append(job)
        return jobs

    def run_experiment(data_path, num_workers):
        tasks = get_tasks(data_path)
        results = get_results(data_path)
        jobs = get_jobs(tasks, num_workers)
        pool = multiprocessing.Pool(num_workers)
        res = pool.starmap(run_one_job, jobs)
        print(res)
        for result in res:
            save_result(result['result'], data_path+'/result/{}_result.txt'.format(result['task']))

    def run_one_job(job):
        task_id, worker_id = job
        task = tasks[task_id]
        result = run_model(task, worker_id)
        return {
            'task': task_id,
           'result': result
        }

    def run_model(task, worker_id):
        model_path = './models/'
        if not os.path.isdir(model_path):
            os.makedirs(model_path)
        model_path += '{}_{}'.format(worker_id, time.time())
        if not os.path.isdir(model_path):
            os.makedirs(model_path)
        model_path += '/'
        if not os.path.isdir(model_path):
            os.makedirs(model_path)
        model_path +='model.h5'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'weights.h5'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path +='metrics.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'losses.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'accuracy.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'val_accuracies.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'val_losses.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_epoch.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_metric.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_params.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_score.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_score.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_metric.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_params.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_score.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_metric.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_params.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_score.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_metric.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path += 'best_validation_params.pickle'
        if os.path.isfile(model_path):
            os.remove(model_path)
        model_path


###########################################################
Result:
solution: [0, 9, 9, 9, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


success: 0

tries: 1

success_rate: 0.13005780346820808

cat_success_cnt: 3

cat_success_rate: 0.07142857142857142

