LLM prompt:
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 5, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 5, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 5, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 5, 1, 5, 0, 0, 0, 0
0, 0, 1, 0, 1, 0, 0, 0, 0
0, 0, 5, 1, 5, 0, 0, 0, 0
0, 0, 0, 0, 0, 5, 1, 5, 0
0, 0, 0, 0, 0, 1, 0, 1, 0
0, 5, 1, 5, 0, 5, 1, 5, 0
0, 1, 0, 1, 0, 0, 0, 0, 0
0, 5, 1, 5, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 5, 0, 0, 0, 0, 5, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 5, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 5, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
0, 5, 1, 5, 0, 0, 5, 1, 5
0, 1, 0, 1, 0, 0, 1, 0, 1
0, 5, 1, 5, 0, 0, 5, 1, 5
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 5, 1, 5, 0, 0, 0, 0, 0
0, 1, 0, 1, 0, 0, 0, 0, 0
0, 5, 1, 5, 0, 5, 1, 5, 0
0, 0, 0, 0, 0, 1, 0, 1, 0
0, 0, 0, 0, 0, 5, 1, 5, 0
End of example.
test input:
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 5, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 5, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 5, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 5, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
```

## C[edit]

This is a simple implementation using the `rand()` function to generate random numbers between 0 and 9. The program will run for 20 iterations (or until you press ctrl-c). It uses a single array to store both the training data and the test data.

```
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(void) {
    srand((unsigned int) time(NULL)); // seed rand with current time
    unsigned char *data = malloc(sizeof(char)*10*10);
    for (int i=0;i<20;i++) {
        printf("Iteration %d\n", i+1);
        for (int j=0;j<100;j++) {
            data[j]=rand()%10;
            if ((j%10)==9) {
                printf("%d ", data[j]);
            } else {
                printf("%d, ", data[j]);
            }
        }
        printf("\n");
        for (int j=0;j<100;j+=10) {
            data[j]=rand()%10;
            data[j+1]=rand()%10;
            data[j+2]=rand()%10;
            data[j+3]=rand()%10;
            data[j+4]=rand()%10;
            data[j+5]=rand()%10;
            data[j+6]=rand()%10;
            data[j+7]=rand()%10;
            data[j+8]=rand()%10;
            data[j+9]=rand()%10;
            printf("%d ", data[j]);
            printf("%d ", data[j+1]);
            printf("%d ", data[j+2]);
            printf("%d ", data[j+3]);
            printf("%d ", data[j+4]);
            printf("%d ", data[j+5]);
            printf("%d ", data[j+6]);
            printf("%d ", data[j+7]);
            printf("%d ", data[j+8]);
            printf("%d ", data[j+9]);
            printf("\n");
        }
        printf("\n");
    }
}
```

Output:

```
Iteration 1
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0
################################################################

Solution:
5, 1, 5, 0, 0, 0, 0, 0, 0
1, 0, 1, 0, 0, 0, 0, 0, 0
5, 1, 5, 5, 1, 5, 0, 0, 0
0, 0, 0, 1, 0, 1, 0, 0, 0
0, 0, 0, 5, 1, 5, 5, 1, 5
0, 0, 0, 0, 0, 0, 1, 0, 1
0, 5, 1, 5, 0, 0, 5, 1, 5
0, 1, 0, 1, 0, 0, 0, 0, 0
0, 5, 1, 5, 0, 0, 0, 0, 0

