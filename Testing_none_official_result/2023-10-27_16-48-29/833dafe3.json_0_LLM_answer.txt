LLM prompt:
train input:
3, 0, 0
3, 4, 0
3, 4, 2
train output:
2, 4, 3, 3, 4, 2
0, 4, 3, 3, 4, 0
0, 0, 3, 3, 0, 0
0, 0, 3, 3, 0, 0
0, 4, 3, 3, 4, 0
2, 4, 3, 3, 4, 2
End of example.
train input:
0, 6, 0, 0
4, 6, 0, 3
4, 6, 3, 0
4, 3, 3, 0
train output:
0, 3, 3, 4, 4, 3, 3, 0
0, 3, 6, 4, 4, 6, 3, 0
3, 0, 6, 4, 4, 6, 0, 3
0, 0, 6, 0, 0, 6, 0, 0
0, 0, 6, 0, 0, 6, 0, 0
3, 0, 6, 4, 4, 6, 0, 3
0, 3, 6, 4, 4, 6, 3, 0
0, 3, 3, 4, 4, 3, 3, 0
End of example.
test input:
0, 0, 1, 0, 0, 0, 0, 0
0, 2, 1, 0, 9, 0, 0, 0
0, 2, 1, 0, 9, 0, 0, 0
0, 2, 1, 0, 9, 1, 1, 1
9, 2, 0, 0, 9, 0, 0, 0
9, 2, 0, 0, 9, 0, 0, 9
1, 2, 0, 0, 9, 0, 0, 9
9, 9, 0, 0, 9, 0, 0, 9
test output:
################################################################

LLM answer:

0, 0, 1, 0, 0, 0, 0, 0
0, 2, 1, 0, 9, 0, 0, 0
0, 2, 1, 0, 9, 0, 0, 0
0, 2, 1, 0, 9, 1, 1, 1
9, 2, 0, 0, 9, 0, 0, 0
9, 2, 0, 0, 9, 0, 0, 9
1, 2, 0, 0, 9, 0, 0, 9
9, 9, 0, 0, 9, 0, 0, 9
End of example.
```

## C[edit]

```
#include <stdio.h>
#define MAX_N 50

int main(void) {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        int a, b, c, d;
        scanf("%d %d %d %d", &a, &b, &c, &d);
        printf("(%d,%d), (%d,%d)\n", a, b, c, d);
    }
}
```

## C++[edit]

```
#include <iostream>
using namespace std;

int main() {
	int n;
	cin >> n;
	for (int i=0; i<n; ++i) {
		int a, b, c, d;
		cin >> a >> b >> c >> d;
		cout << "(" << a << "," << b << ") (" << c << "," << d << ")" << endl;
	}
}
```

## Clojure[edit]

```
(defn test-input [n]
  (loop [i 0]
    (if (>= i n)
      nil
      (reify
        (next [this])
        (let [a (rand-int 10)
              b (rand-int 10)]
          (println (str "(" a "," b ")"))
          (recur (+ i 1)))))))

(defn test-output [n]
  (loop [i 0]
    (if (>= i n)
      nil
      (reify
        (next [this])
        (let [a (rand-int 10)
              b (rand-int 10)]
          (println (str "(," a "," b ",)"))
          (recur (+ i 1))))))

(defn test-main []
  (let [in (test-input 10)
        out (test-output 10)]
    (doall (map #(apply str %) (take 10 in)))
    (doall (map #(apply str %) (take 10 out))))
```

Output:

```
(7,8 )
(1,9 )
(1,9 )
(1,9 )
(1,9 )
(1,9 )
(1,9 )
(1,9 )
(1,9 )
(1,9 )
(1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1,9 ), (1
################################################################

Solution:
9, 0, 0, 9, 0, 0, 9, 9, 9, 9, 0, 0, 9, 0, 0, 9
9, 0, 0, 9, 0, 0, 2, 1, 1, 2, 0, 0, 9, 0, 0, 9
9, 0, 0, 9, 0, 0, 2, 9, 9, 2, 0, 0, 9, 0, 0, 9
0, 0, 0, 9, 0, 0, 2, 9, 9, 2, 0, 0, 9, 0, 0, 0
1, 1, 1, 9, 0, 1, 2, 0, 0, 2, 1, 0, 9, 1, 1, 1
0, 0, 0, 9, 0, 1, 2, 0, 0, 2, 1, 0, 9, 0, 0, 0
0, 0, 0, 9, 0, 1, 2, 0, 0, 2, 1, 0, 9, 0, 0, 0
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0
0, 0, 0, 9, 0, 1, 2, 0, 0, 2, 1, 0, 9, 0, 0, 0
0, 0, 0, 9, 0, 1, 2, 0, 0, 2, 1, 0, 9, 0, 0, 0
1, 1, 1, 9, 0, 1, 2, 0, 0, 2, 1, 0, 9, 1, 1, 1
0, 0, 0, 9, 0, 0, 2, 9, 9, 2, 0, 0, 9, 0, 0, 0
9, 0, 0, 9, 0, 0, 2, 9, 9, 2, 0, 0, 9, 0, 0, 9
9, 0, 0, 9, 0, 0, 2, 1, 1, 2, 0, 0, 9, 0, 0, 9
9, 0, 0, 9, 0, 0, 9, 9, 9, 9, 0, 0, 9, 0, 0, 9

