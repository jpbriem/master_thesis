LLM prompt:
train input:
0, 3, 0
0, 7, 7
0, 0, 0
train output:
0, 0, 3, 3, 0, 0
0, 0, 3, 3, 0, 0
0, 0, 7, 7, 7, 7
0, 0, 7, 7, 7, 7
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
End of example.
train input:
0, 0, 8, 0
0, 8, 5, 5
0, 0, 0, 5
0, 0, 0, 0
train output:
0, 0, 0, 0, 8, 8, 0, 0
0, 0, 0, 0, 8, 8, 0, 0
0, 0, 8, 8, 5, 5, 5, 5
0, 0, 8, 8, 5, 5, 5, 5
0, 0, 0, 0, 0, 0, 5, 5
0, 0, 0, 0, 0, 0, 5, 5
0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
0, 0, 1, 0, 0
0, 0, 1, 0, 0
0, 6, 6, 6, 0
0, 0, 1, 6, 0
0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

0, 0, 0, 0, 1, 1, 0, 0
0, 0, 0, 0, 1, 1, 0, 0
0, 0, 6, 6, 6, 6, 6, 6
0, 0, 6, 6, 6, 6, 6, 6
0, 0, 1, 6, 1, 1, 1, 1
0, 0, 0, 0, 1, 1, 1, 1
0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0
End of example.
```

## C[edit]

```
#include <stdio.h>
#include <string.h>

typedef struct {
    int *data;
    size_t len;
} array;

void print(array a) {
    for (size_t i = 0; i < a.len; ++i)
        printf("%d ", a.data[i]);
    putchar('\n');
}

int main() {
    array a = {{0}, 0};
    array b = {{0}, 0};
    array c = {{0}, 0};
    array d = {{0}, 0};
    array e = {{0}, 0};
    array f = {{0}, 0};
    array g = {{0}, 0};
    array h = {{0}, 0};
    array i = {{0}, 0};
    array j = {{0}, 0};
    array k = {{0}, 0};
    array l = {{0}, 0};
    array m = {{0}, 0};
    array n = {{0}, 0};
    array o = {{0}, 0};
    array p = {{0}, 0};
    array q = {{0}, 0};
    array r = {{0}, 0};
    array s = {{0}, 0};
    array t = {{0}, 0};
    array u = {{0}, 0};
    array v = {{0}, 0};
    array w = {{0}, 0};
    array x = {{0}, 0};
    array y = {{0}, 0};
    array z = {{0}, 0};

    // Inputs
    a.data = calloc(2, sizeof(*a.data));
    b.data = calloc(4, sizeof(*b.data));
    c.data = calloc(2, sizeof(*c.data));
    d.data = calloc(2, sizeof(*d.data));
    e.data = calloc(2, sizeof(*e.data));
    f.data = calloc(2, sizeof(*f.data));
    g.data = calloc(2, sizeof(*g.data));
    h.data = calloc(2, sizeof(*h.data));
    i.data = calloc(2, sizeof(*i.data));
    j.data = calloc(2, sizeof(*j.data));
    k.data = calloc(2, sizeof(*k.data));
    l.data = calloc(2, sizeof(*l.data));
    m.data = calloc(2, sizeof(*m.data));
    n.data = calloc(2, sizeof(*n.data));
    o.data = calloc(2, sizeof(*o.data));
    p.data = calloc(2, sizeof(*p.data));
    q.data = calloc(2, sizeof(*q.data));
    r.data = calloc(2, sizeof(*r.data));
    s.data = calloc(2, sizeof(*s.data));
    t.data = calloc(2, sizeof(*t.data));
    u.data = calloc(2, sizeof(*u.data));
    v.data = calloc(2, sizeof(*v.data));
    w.data = calloc(2, sizeof(*w.data));
    x.data = calloc(2, sizeof(*x.data));
    y.data = calloc(2, sizeof(*y.data));
    z.data =
################################################################

Solution:
0, 0, 0, 0, 1, 1, 0, 0, 0, 0
0, 0, 0, 0, 1, 1, 0, 0, 0, 0
0, 0, 0, 0, 1, 1, 0, 0, 0, 0
0, 0, 0, 0, 1, 1, 0, 0, 0, 0
0, 0, 6, 6, 6, 6, 6, 6, 0, 0
0, 0, 6, 6, 6, 6, 6, 6, 0, 0
0, 0, 0, 0, 1, 1, 6, 6, 0, 0
0, 0, 0, 0, 1, 1, 6, 6, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0

