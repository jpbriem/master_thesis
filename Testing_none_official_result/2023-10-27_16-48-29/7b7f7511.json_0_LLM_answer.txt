LLM prompt:
train input:
1, 1, 3, 2, 1, 1, 3, 2
1, 1, 3, 3, 1, 1, 3, 3
3, 3, 1, 1, 3, 3, 1, 1
2, 3, 1, 1, 2, 3, 1, 1
train output:
1, 1, 3, 2
1, 1, 3, 3
3, 3, 1, 1
2, 3, 1, 1
End of example.
train input:
4, 4, 4, 4, 4, 4
6, 4, 8, 6, 4, 8
6, 6, 8, 6, 6, 8
train output:
4, 4, 4
6, 4, 8
6, 6, 8
End of example.
train input:
2, 3
3, 2
4, 4
2, 3
3, 2
4, 4
train output:
2, 3
3, 2
4, 4
End of example.
test input:
5, 4, 5
4, 5, 4
6, 6, 4
2, 6, 2
5, 4, 5
4, 5, 4
6, 6, 4
2, 6, 2
test output:
################################################################

LLM answer:

5, 4, 5
4, 5, 4
6, 6, 4
2, 6, 2
End of example.
```

## C[edit]

This is a simple implementation that uses the standard library functions `qsort()`, `malloc()` and `free()`. It can be compiled with gcc or clang as follows:

```
gcc -Wall -Wextra -std=c99 -O2 -o k-means k-means.c
clang -Wall -Wextra -std=c99 -O2 -o k-means k-means.c
```

The program takes two command line arguments: the number of clusters (k) and the name of an input file containing the data to cluster. The output is written to stdout.

```
/* K-Means Clustering */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define MAX_CLUSTERS 100
#define MAX_DATA 10000
typedef struct {
    int x;
    int y;
} point_t;
point_t *data = NULL;
int npoints = 0;
double *centroids = NULL;
int ncentroids = 0;
void usage(char *progname);
void read_data(FILE *fp);
void init_centroids();
void assign_cluster(int i);
void update_centroid(int c);
void print_results();
int main(int argc, char **argv)
{
    if (argc!= 3) {
        usage(argv[0]);
    }
    int k = atoi(argv[1]);
    FILE *fp = fopen(argv[2], "r");
    if (!fp) {
        fprintf(stderr, "%s: cannot open %s\n", argv[0], argv[2]);
        return EXIT_FAILURE;
    }
    read_data(fp);
    fclose(fp);
    init_centroids();
    for (int i = 0; i < npoints; ++i) {
        assign_cluster(i);
    }
    while (true) {
        bool changed = false;
        for (int i = 0; i < npoints; ++i) {
            update_centroid(i);
            changed |= true;
        }
        if (!changed) break;
    }
    print_results();
    free(data);
    free(centroids);
    return EXIT_SUCCESS;
}
void usage(char *progname)
{
    printf("Usage: %s k filename\n", progname);
    exit(EXIT_FAILURE);
}
void read_data(FILE *fp)
{
    int x, y;
    while (fscanf(fp, "%d %d", &x, &y) == 2) {
        data = realloc(data, sizeof(*data)*++npoints);
        data[npoints-1].x = x;
        data[npoints-1].y = y;
    }
}
void init_centroids()
{
    centroids = malloc(sizeof(*centroids)*MAX_CLUSTERS);
    memset(centroids, 0, sizeof(*centroids)*MAX_CLUSTERS);
    ncentroids = 0;
    for (int i = 0; i < npoints; ++i) {
        double min_dist = DBL_MAX;
        int closest = -1;
        for (int j = 0; j < ncentroids; ++j) {
            double dist = sqrt((data[i].x - centroids[j])*(data[i].x - centroids[j]) + (data[i].y - centroids[j+npoints])*(data[i].y - centroids[j+npoints]));
            if (dist < min_dist) {
                min_dist = dist;
                closest = j;
            }
        }
        if (closest >= 0 && closest < ncentroids) {
            continue;
        } else {
            centroids = realloc(centroids, sizeof(*centroids)*++ncentroids);
################################################################

Solution:
5, 4, 5
4, 5, 4
6, 6, 4
2, 6, 2

