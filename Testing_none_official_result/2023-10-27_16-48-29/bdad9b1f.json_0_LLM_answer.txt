LLM prompt:
train input:
0, 0, 0, 0, 8, 0
0, 0, 0, 0, 8, 0
2, 2, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
train output:
0, 0, 0, 0, 8, 0
0, 0, 0, 0, 8, 0
2, 2, 2, 2, 4, 2
0, 0, 0, 0, 8, 0
0, 0, 0, 0, 8, 0
0, 0, 0, 0, 8, 0
End of example.
train input:
0, 8, 0, 0, 0, 0
0, 8, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 2, 2
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
train output:
0, 8, 0, 0, 0, 0
0, 8, 0, 0, 0, 0
0, 8, 0, 0, 0, 0
2, 4, 2, 2, 2, 2
0, 8, 0, 0, 0, 0
0, 8, 0, 0, 0, 0
End of example.
test input:
0, 0, 0, 8, 0, 0
0, 0, 0, 8, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
2, 2, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

0, 0, 0, 8, 0, 0
0, 0, 0, 8, 0, 0
0, 0, 0, 8, 0, 0
2, 2, 2, 2, 2, 2
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
End of example.
```

## C[edit]

```
#include <stdio.h>
#define MAX_SIZE 100

int main(void) {
    int i;
    char *input = malloc(MAX_SIZE);
    char *output = malloc(MAX_SIZE);
    for (i=0; i<MAX_SIZE; ++i) {
        scanf("%d", &input[i]);
    }
    for (i=0; i<MAX_SIZE; ++i) {
        if (input[i] == 0) break;
        printf("%d ", input[i]);
    }
    puts("");
    for (i=0; i<MAX_SIZE; ++i) {
        scanf("%d", &output[i]);
    }
    for (i=0; i<MAX_SIZE; ++i) {
        if (output[i] == 0) break;
        printf("%d ", output[i]);
    }
    puts("");
    return 0;
}
```

## C++[edit]

```
#include <iostream>
using namespace std;

int main()
{
	int a[100], b[100];
	for (int i = 0; i < 100; i++)
	{
		cin >> a[i];
	}
	cout << "Input:\n";
	for (int i = 0; i < 100; i++)
	{
		if (a[i]!= 0) cout << a[i] <<'';
	}
	cout << endl;
	for (int i = 0; i < 100; i++)
	{
		cin >> b[i];
	}
	cout << "Output:\n";
	for (int i = 0; i < 100; i++)
	{
		if (b[i]!= 0) cout << b[i] <<'';
	}
	cout << endl;
	return 0;
}
```

## Clojure[edit]

```
(defn test-case [in out]
  (println "Test case:" in)
  (println "Input:" (map #(when (not %) %) in))
  (println "Output:" (map #(when (not %) %) out)))

(test-case [0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
################################################################

Solution:
0, 0, 0, 8, 0, 0
0, 0, 0, 8, 0, 0
0, 0, 0, 8, 0, 0
0, 0, 0, 8, 0, 0
2, 2, 2, 4, 2, 2
0, 0, 0, 8, 0, 0

