LLM prompt:
train input:
2, 4, 0, 5, 8, 0, 0, 2, 4
4, 4, 0, 8, 8, 0, 0, 2, 4
0, 0, 0, 0, 0, 0, 0, 0, 0
5, 5, 0, 9, 5, 0, 0, 3, 3
9, 9, 0, 9, 5, 0, 0, 2, 2
0, 0, 0, 0, 0, 0, 0, 0, 0
2, 4, 0, 4, 4, 0, 0, 8, 3
2, 4, 0, 2, 2, 0, 0, 8, 3
0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 0, 1, 1, 0, 0, 9, 9
1, 2, 0, 2, 1, 0, 0, 7, 9
train output:
5, 8
5, 8
0, 0
2, 3
2, 3
0, 0
3, 3
8, 8
0, 0
9, 9
9, 7
End of example.
train input:
2, 4, 0, 4, 2, 0, 0, 8, 6
4, 4, 0, 4, 4, 0, 0, 8, 8
0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 0, 2, 1, 0, 0, 5, 5
2, 2, 0, 2, 1, 0, 0, 4, 4
0, 0, 0, 0, 0, 0, 0, 0, 0
3, 7, 0, 8, 3, 0, 0, 3, 3
3, 3, 0, 8, 8, 0, 0, 3, 7
train output:
6, 8
8, 8
0, 0
4, 5
4, 5
0, 0
8, 8
8, 3
End of example.
test input:
1, 1, 0, 1, 1, 0, 0, 4, 4
2, 1, 0, 1, 2, 0, 0, 3, 4
0, 0, 0, 0, 0, 0, 0, 0, 0
2, 2, 0, 5, 2, 0, 0, 3, 3
5, 5, 0, 5, 2, 0, 0, 1, 1
0, 0, 0, 0, 0, 0, 0, 0, 0
6, 6, 0, 6, 8, 0, 0, 7, 7
8, 8, 0, 6, 8, 0, 0, 4, 4
test output:
################################################################

LLM answer:

4, 4
4, 4
0, 0
3, 3
3, 3
0, 0
7, 7
4, 4
End of example.
```

## C[edit]

```
#include <stdio.h>
#include <string.h>

int main(void) {
    int i;
    char *s = "2, 4, 0, 4, 2, 0, 0, 8, 6\n"
             "4, 4, 0, 4, 4, 0, 0, 8, 8\n"
             "0, 0, 0, 0, 0, 0, 0, 0, 0\n"
             "1, 1, 0, 2, 1, 0, 0, 5, 5\n"
             "2, 2, 0, 2, 1, 0, 0, 4, 4\n"
             "0, 0, 0, 0, 0, 0, 0, 0, 0\n"
             "3, 7, 0, 8, 3, 0, 0, 3, 3\n"
             "3, 3, 0, 8, 8, 0, 0, 3, 7\n";
    for (i=0; i<strlen(s); i++) {
        if (s[i] == '\n') {
            printf("%d, %d\n", s[i-1], s[i+1]);
            i++;
        } else {
            printf("0, 0\n");
        }
    }
}
```

Output:

```
6, 8
8, 8
0, 0
4, 5
4, 5
0, 0
8, 8
8, 3
0, 0
7, 7
4, 4
0, 0
```

## C++[edit]

Translation of: Java

```
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        if (nums.size() < 4) return res;
        sort(nums.begin(), nums.end());
        for (int i = 0; i + 3 < nums.size(); ++i) {
            if (i > 0 && nums[i] == nums[i - 1]) continue; // skip duplicates
            for (int j = i + 1; j + 1 < nums.size(); ++j) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; // skip duplicates
                int k = j + 1, l = nums.size() - 1;
                while (k < l) {
                    long long sum = nums[i] + nums[j] + nums[k] + nums[l];
                    if (sum == target) {
                        res.push_back({nums[i], nums[j], nums[k], nums[l]});
                        do {
                            ++k;
                        } while (k < l && nums[k] == nums[k - 1]);
                        do {
                            --l;
                        } while (k < l && nums[l] == nums[l + 1]);
                    } else if (sum < target) {
                        ++k;
                    } else {
                        --l;
                    }
                }
            }
        }
        return res;
    }
};

int main() {
    vector<int> nums{2, 4, 0, 4, 2, 0, 0, 8, 6};
    auto result = Solution().fourSum(nums, 8);
    for (auto& r : result) {
        for (auto n : r) cout << n << ", ";
################################################################

Solution:
4, 4
4, 3
0, 0
1, 3
1, 3
0, 0
7, 4
7, 4

