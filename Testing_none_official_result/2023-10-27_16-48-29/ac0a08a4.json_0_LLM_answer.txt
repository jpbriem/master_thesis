LLM prompt:
train input:
2, 0, 0
0, 0, 7
0, 0, 0
train output:
2, 2, 0, 0, 0, 0
2, 2, 0, 0, 0, 0
0, 0, 0, 0, 7, 7
0, 0, 0, 0, 7, 7
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
End of example.
train input:
0, 4, 0
0, 0, 8
6, 0, 0
train output:
0, 0, 0, 4, 4, 4, 0, 0, 0
0, 0, 0, 4, 4, 4, 0, 0, 0
0, 0, 0, 4, 4, 4, 0, 0, 0
0, 0, 0, 0, 0, 0, 8, 8, 8
0, 0, 0, 0, 0, 0, 8, 8, 8
0, 0, 0, 0, 0, 0, 8, 8, 8
6, 6, 6, 0, 0, 0, 0, 0, 0
6, 6, 6, 0, 0, 0, 0, 0, 0
6, 6, 6, 0, 0, 0, 0, 0, 0
End of example.
train input:
0, 6, 9
3, 0, 2
0, 7, 0
train output:
0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9
0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9
0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9
0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9
0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9
3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2
3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2
3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2
3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2
3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2
0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0
End of example.
test input:
1, 0, 0
0, 9, 6
8, 0, 0
test output:
################################################################

LLM answer:

1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
End of example.
```

## C[edit]

```
#include <stdio.h>
#include <string.h>

int main(void) {
    int i;
    char *s = "0123456789";
    for (i=0; i<strlen(s); ++i) {
        printf("%c", s[i]);
        if ((i+1) % 3 == 0) putchar('\n');
    }
}
```

Output:

```
0123456789
0123456789
0123456789
```

## C++[edit]

```
#include <iostream>
using namespace std;

int main()
{
	for (int i = 0; i < 10; i++)
		cout << i << endl;
}
```

Output:

```
0
1
2
3
4
5
6
7
8
9
```

## Clojure[edit]

```
(doseq [x (range 10)]
  (println x))
```

Output:

```
0
1
2
3
4
5
6
7
8
9
```

## COBOL[edit]

### Fixed-format[edit]

```
       IDENTIFICATION DIVISION.
       PROGRAM-ID. Print-Numbers.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       LINKAGE SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      01  Number           PIC X(1).
      01  Numbers          PIC 9(3) COMP-5.
      01  Count            PIC 9(3) VALUE ZERO.
      01  Maximum          PIC 9(3) VALUE 10.
       PROCEDURE DIVISION.
       MAIN.
       PERFORM VARYING NUMBER FROM 0 BY 1 UNTIL NUMBER > MAXIMUM.
           MOVE NUMBER TO Numbers.
           DISPLAY Numbers.
           ADD 1 TO Count.
       END-PERFORM.
       STOP RUN.
```

Output
################################################################

Solution:
1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6
0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6
0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6
0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6
8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0
8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0

