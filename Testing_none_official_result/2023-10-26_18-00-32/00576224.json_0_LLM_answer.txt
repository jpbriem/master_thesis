LLM prompt:
train input:
8, 6
6, 4
train output:
8, 6, 8, 6, 8, 6
6, 4, 6, 4, 6, 4
6, 8, 6, 8, 6, 8
4, 6, 4, 6, 4, 6
8, 6, 8, 6, 8, 6
6, 4, 6, 4, 6, 4
End of example.
train input:
7, 9
4, 3
train output:
7, 9, 7, 9, 7, 9
4, 3, 4, 3, 4, 3
9, 7, 9, 7, 9, 7
3, 4, 3, 4, 3, 4
7, 9, 7, 9, 7, 9
4, 3, 4, 3, 4, 3
End of example.
test input:
3, 2
7, 8
test output:
################################################################

LLM answer:

3, 2, 3, 2, 3, 2
7, 8, 7, 8, 7, 8
2, 3, 2, 3, 2, 3
8, 7, 8, 7, 8, 7
3, 2, 3, 2, 3, 2
7, 8, 7, 8, 7, 8
End of example.
```

## C[edit]

```
#include <stdio.h>
#define MAX_N 1000
int main(void) {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        int a, b;
        scanf("%d %d", &a, &b);
        printf("train input:\n");
        for (int j = 0; j < a + b; ++j) {
            if (j < a) {
                printf("%d ", a);
            } else {
                printf("%d ", b);
            }
        }
        printf("\ntest input:\n");
        for (int j = 0; j < a + b; ++j) {
            if (j < a) {
                printf("%d ", a);
            } else {
                printf("%d ", b);
            }
        }
        printf("\n");
    }
}
```

## C++[edit]

```
#include <iostream>
using namespace std;

int main()
{
	int n;
	cin >> n;
	for (int i=0; i<n; i++)
	{
		int a, b;
		cin >> a >> b;
		cout << "train input:" << endl;
		for (int j=0; j<=a+b-1; j++)
		{
			if (j<a) cout << a <<'';
			else cout << b <<'';
		}
		cout << endl;
		cout << "test input:" << endl;
		for (int j=0; j<=a+b-1; j++)
		{
			if (j<a) cout << a <<'';
			else cout << b <<'';
		}
		cout << endl;
	}
	return 0;
}
```

## Clojure[edit]

```
(defn test [n]
  (loop [i n
         out []]
    (cond
     (zero? i) out
     :else (recur (dec i) (conj out (str "train input:" (repeat (inc i) " ")))))))

(defn test2 [n]
  (loop [i n
         out []]
    (cond
     (zero? i) out
     :else (recur (dec i) (conj out (str "test input:" (repeat (inc i) " ")))))))

(defn test3 [n]
  (loop [i n
         out []]
    (cond
     (zero? i) out
     :else (recur (dec i) (conj out (str "train input:" (repeat (inc i) " ") "test input:" (repeat (inc i) " "))))) ))

(defn test4 [n]
  (loop [i n
         out []]
    (cond
     (zero? i) out
     :else (recur (dec i) (conj out (str "train input:" (repeat (inc i) " ") "test input:" (repeat (inc i) " ")))))))

(defn test5 [n]
  (loop [i n
         out []]
    (cond
     (zero? i) out
     :else (recur (dec i) (conj out (str "train input:" (repeat (inc i) " ") "test input:" (repeat (inc i) " ")))))))

(defn test6 [n]
  (loop [i n
         out []]
    (cond
     (zero? i) out
     :else (recur (dec i) (conj out (str "train input:"
################################################################

Solution:
3, 2, 3, 2, 3, 2
7, 8, 7, 8, 7, 8
2, 3, 2, 3, 2, 3
8, 7, 8, 7, 8, 7
3, 2, 3, 2, 3, 2
7, 8, 7, 8, 7, 8

