LLM prompt:
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 6, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 7, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
6, 6, 6, 6, 6, 6, 6, 6, 6, 6
6, 0, 0, 0, 0, 0, 0, 0, 0, 6
6, 6, 6, 6, 6, 6, 6, 6, 6, 6
6, 0, 0, 0, 0, 0, 0, 0, 0, 6
6, 0, 0, 0, 0, 0, 0, 0, 0, 6
7, 0, 0, 0, 0, 0, 0, 0, 0, 7
7, 0, 0, 0, 0, 0, 0, 0, 0, 7
7, 7, 7, 7, 7, 7, 7, 7, 7, 7
7, 0, 0, 0, 0, 0, 0, 0, 0, 7
7, 7, 7, 7, 7, 7, 7, 7, 7, 7
End of example.
train input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 1, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 4, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
train output:
1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 0, 0, 0, 0, 0, 0, 0, 0, 1
1, 1, 1, 1, 1, 1, 1, 1, 1, 1
1, 0, 0, 0, 0, 0, 0, 0, 0, 1
1, 0, 0, 0, 0, 0, 0, 0, 0, 1
4, 0, 0, 0, 0, 0, 0, 0, 0, 4
4, 0, 0, 0, 0, 0, 0, 0, 0, 4
4, 4, 4, 4, 4, 4, 4, 4, 4, 4
4, 0, 0, 0, 0, 0, 0, 0, 0, 4
4, 4, 4, 4, 4, 4, 4, 4, 4, 4
End of example.
test input:
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 2, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 8, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
test output:
################################################################

LLM answer:

2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 0, 0, 0, 0, 0, 0, 0, 0, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 0, 0, 0, 0, 0, 0, 0, 0, 2
2, 0, 0, 0, 0, 0, 0, 0, 0, 2
8, 0, 0, 0, 0, 0, 0, 0, 0, 8
8, 0, 0, 0, 0, 0, 0, 0, 0, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 0, 0, 0, 0, 0, 0, 0, 0, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8
End of example.
```

## C[edit]

This is a simple implementation using the `rand()` function to generate random numbers between 0 and 9. The program will run for 5 seconds or until it has generated 10000 examples. It uses a single array to store both the training data and the test data.

```
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int main(void) {
    srand((unsigned int) time(NULL)); // seed rand with current time
    unsigned long i;
    double *data = malloc(sizeof(double)*10000);
    for (i=0; i<10000; ++i) {
        data[i*2]=rand()%10;
        data[(i+1)*2]=rand()%10;
        if ((i % 1000) == 0) printf("."); fflush(stdout);
    }
    free(data);
}
```

Output:

```
...............................
```

## C++[edit]

### Simple[edit]

```
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
using namespace std;

// A class that represents an integer in base-n.
class IntN
{
public:
	IntN();
	IntN(const string& str);
	IntN(long n);
	~IntN();
	bool operator==(const IntN& other) const;
	bool operator!=(const IntN& other) const;
	IntN& operator=(const IntN& other);
	IntN& operator+=(const IntN& other);
	IntN& operator-=(const IntN& other);
	IntN& operator*=(const IntN& other);
	IntN& operator/=(const IntN& other);
	IntN& operator%=(const IntN& other);
	friend ostream& operator<<(ostream& os, const IntN& obj);
private:
	vector<int> digits_;
};

// Constructors.
IntN::IntN() : digits_(1, 0) {}
IntN::IntN(const string& str)
{
	digits_.resize(str.size());
	for (auto i = 0u; i!= str.size(); ++i)
		digits_[i] = str[i] - '0';
}
IntN::IntN(long n)
{
	if (n >= 0)
	{
		while (n > 0)
		{
			digits_.push_back(n % 10);
			n /= 10;
		}
	}
	else
	{
		while (n < 0)
		{
			digits_.push_back(-(n % 10));
			n
################################################################

Solution:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 0, 0, 0, 0, 0, 0, 0, 0, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 0, 0, 0, 0, 0, 0, 0, 0, 2
2, 0, 0, 0, 0, 0, 0, 0, 0, 2
8, 0, 0, 0, 0, 0, 0, 0, 0, 8
8, 0, 0, 0, 0, 0, 0, 0, 0, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8
8, 0, 0, 0, 0, 0, 0, 0, 0, 8
8, 8, 8, 8, 8, 8, 8, 8, 8, 8

