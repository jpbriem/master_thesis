LLM prompt:
train input:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0
2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0
0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0
0, 5, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 0
0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 0, 5, 0
train output:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1
0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
train input:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2
2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 2, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0
5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 5
0, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 0, 5, 5, 5
train output:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2
2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2
1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
End of example.
test input:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0, 2, 2, 2
2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 5, 0
0, 5, 0, 0, 0, 0, 0, 5, 5, 0, 0, 5, 5, 5, 0
0, 5, 5, 5, 0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 0
0, 5, 5, 5, 5, 0, 0, 5, 5, 0, 0, 5, 5, 5, 0
test output:
################################################################

LLM answer:

2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
End of example.
```

## Answer (3)

# C++, ~~498~~ ~~476~~ ~~474~~ 468 bytes

```
#include<iostream>
using namespace std;int main(){char a[10][10],b[10][10];for(int i=0;i<10;i++)for(int j=0;j<10;j++){cin>>a[i][j];if(a[i][j]=='0')b[i][j]=0;}for(int i=0;i<10;i++)for(int j=0;j<10;j++)cout<<a[i][j]<<" ";cout<<endl;for(int i=0;i<10;i++)for(int j=0;j<10;j++)cout<<b[i][j]<<" ";}
```

Comment: You can save some bytes by using `using namespace std;`. Also you don't need to initialize the arrays with zeros.

Comment: @user202729 Thanks! I didn't know that.

Comment: [468](https://tio.run/##K6gsyV9pXzH3PcMxNlJZQgkqLUFGWoRhTmEwOYsxSdIu@vDfBnCeA0rK0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
################################################################

Solution:
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2
2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2
0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1
0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

